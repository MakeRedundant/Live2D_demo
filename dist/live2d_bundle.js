/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/SDKv4/Core/live2dcubismcore.min.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/SDKv4/Core/live2dcubismcore.min.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("/**\n * Live2D Cubism Core\n * (C) 2019 Live2D Inc. All rights reserved.\n *\n * This file is licensed pursuant to the license agreement below.\n * This file corresponds to the \"Redistributable Code\" in the agreement.\n * https://www.live2d.com/eula/live2d-proprietary-software-license-agreement_en.html\n */\nvar Live2DCubismCore;!function(Live2DCubismCore){var _csm=function(){function _csm(){}return _csm.getVersion=function(){return _em.ccall(\"csmGetVersion\",\"number\",[],[])},_csm.getLatestMocVersion=function(){return _em.ccall(\"csmGetLatestMocVersion\",\"number\",[],[])},_csm.getMocVersion=function(moc){return _em.ccall(\"csmGetMocVersion\",\"number\",[\"number\"],[moc])},_csm.getSizeofModel=function(moc){return _em.ccall(\"csmGetSizeofModel\",\"number\",[\"number\"],[moc])},_csm.reviveMocInPlace=function(memory,mocSize){return _em.ccall(\"csmReviveMocInPlace\",\"number\",[\"number\",\"number\"],[memory,mocSize])},_csm.initializeModelInPlace=function(moc,memory,modelSize){return _em.ccall(\"csmInitializeModelInPlace\",\"number\",[\"number\",\"number\",\"number\"],[moc,memory,modelSize])},_csm.getParameterCount=function(model){return _em.ccall(\"csmGetParameterCount\",\"number\",[\"number\"],[model])},_csm.getParameterIds=function(model){return _em.ccall(\"csmGetParameterIds\",\"number\",[\"number\"],[model])},_csm.getParameterMinimumValues=function(model){return _em.ccall(\"csmGetParameterMinimumValues\",\"number\",[\"number\"],[model])},_csm.getParameterMaximumValues=function(model){return _em.ccall(\"csmGetParameterMaximumValues\",\"number\",[\"number\"],[model])},_csm.getParameterDefaultValues=function(model){return _em.ccall(\"csmGetParameterDefaultValues\",\"number\",[\"number\"],[model])},_csm.getParameterValues=function(model){return _em.ccall(\"csmGetParameterValues\",\"number\",[\"number\"],[model])},_csm.getPartCount=function(model){return _em.ccall(\"csmGetPartCount\",\"number\",[\"number\"],[model])},_csm.getPartIds=function(model){return _em.ccall(\"csmGetPartIds\",\"number\",[\"number\"],[model])},_csm.getPartOpacities=function(model){return _em.ccall(\"csmGetPartOpacities\",\"number\",[\"number\"],[model])},_csm.getPartParentPartIndices=function(model){return _em.ccall(\"csmGetPartParentPartIndices\",\"number\",[\"number\"],[model])},_csm.getDrawableCount=function(model){return _em.ccall(\"csmGetDrawableCount\",\"number\",[\"number\"],[model])},_csm.getDrawableIds=function(model){return _em.ccall(\"csmGetDrawableIds\",\"number\",[\"number\"],[model])},_csm.getDrawableConstantFlags=function(model){return _em.ccall(\"csmGetDrawableConstantFlags\",\"number\",[\"number\"],[model])},_csm.getDrawableDynamicFlags=function(model){return _em.ccall(\"csmGetDrawableDynamicFlags\",\"number\",[\"number\"],[model])},_csm.getDrawableTextureIndices=function(model){return _em.ccall(\"csmGetDrawableTextureIndices\",\"number\",[\"number\"],[model])},_csm.getDrawableDrawOrders=function(model){return _em.ccall(\"csmGetDrawableDrawOrders\",\"number\",[\"number\"],[model])},_csm.getDrawableRenderOrders=function(model){return _em.ccall(\"csmGetDrawableRenderOrders\",\"number\",[\"number\"],[model])},_csm.getDrawableOpacities=function(model){return _em.ccall(\"csmGetDrawableOpacities\",\"number\",[\"number\"],[model])},_csm.getDrawableMaskCounts=function(model){return _em.ccall(\"csmGetDrawableMaskCounts\",\"number\",[\"number\"],[model])},_csm.getDrawableMasks=function(model){return _em.ccall(\"csmGetDrawableMasks\",\"number\",[\"number\"],[model])},_csm.getDrawableVertexCounts=function(model){return _em.ccall(\"csmGetDrawableVertexCounts\",\"number\",[\"number\"],[model])},_csm.getDrawableVertexPositions=function(model){return _em.ccall(\"csmGetDrawableVertexPositions\",\"number\",[\"number\"],[model])},_csm.getDrawableVertexUvs=function(model){return _em.ccall(\"csmGetDrawableVertexUvs\",\"number\",[\"number\"],[model])},_csm.getDrawableIndexCounts=function(model){return _em.ccall(\"csmGetDrawableIndexCounts\",\"number\",[\"number\"],[model])},_csm.getDrawableIndices=function(model){return _em.ccall(\"csmGetDrawableIndices\",\"number\",[\"number\"],[model])},_csm.mallocMoc=function(mocSize){return _em.ccall(\"csmMallocMoc\",\"number\",[\"number\"],[mocSize])},_csm.mallocModelAndInitialize=function(moc){return _em.ccall(\"csmMallocModelAndInitialize\",\"number\",[\"number\"],[moc])},_csm.malloc=function(size){return _em.ccall(\"csmMalloc\",\"number\",[\"number\"],[size])},_csm.setLogFunction=function(handler){_em.ccall(\"csmSetLogFunction\",null,[\"number\"],[handler])},_csm.updateModel=function(model){_em.ccall(\"csmUpdateModel\",null,[\"number\"],[model])},_csm.readCanvasInfo=function(model,outSizeInPixels,outOriginInPixels,outPixelsPerUnit){_em.ccall(\"csmReadCanvasInfo\",null,[\"number\",\"number\",\"number\",\"number\"],[model,outSizeInPixels,outOriginInPixels,outPixelsPerUnit])},_csm.resetDrawableDynamicFlags=function(model){_em.ccall(\"csmResetDrawableDynamicFlags\",null,[\"number\"],[model])},_csm.free=function(memory){_em.ccall(\"csmFree\",null,[\"number\"],[memory])},_csm}(),Version=function(){function Version(){}return Version.csmGetVersion=function(){return _csm.getVersion()},Version.csmGetLatestMocVersion=function(){return _csm.getLatestMocVersion()},Version.csmGetMocVersion=function(moc){return _csm.getMocVersion(moc._ptr)},Version}();Live2DCubismCore.Version=Version;var Logging=function(){function Logging(){}return Logging.csmSetLogFunction=function(handler){Logging.logFunction=handler;var pointer=_em.addFunction(Logging.wrapLogFunction,\"vi\");_csm.setLogFunction(pointer)},Logging.csmGetLogFunction=function(){return Logging.logFunction},Logging.wrapLogFunction=function(messagePtr){var messageStr=_em.UTF8ToString(messagePtr);Logging.logFunction(messageStr)},Logging}();Live2DCubismCore.Logging=Logging;var Moc=function(){function Moc(mocBytes){var memory=_csm.mallocMoc(mocBytes.byteLength);memory&&(new Uint8Array(_em.HEAPU8.buffer,memory,mocBytes.byteLength).set(new Uint8Array(mocBytes)),this._ptr=_csm.reviveMocInPlace(memory,mocBytes.byteLength),this._ptr||_csm.free(memory))}return Moc.fromArrayBuffer=function(buffer){if(!buffer)return null;var moc=new Moc(buffer);return moc._ptr?moc:null},Moc.prototype._release=function(){_csm.free(this._ptr),this._ptr=0},Moc}();Live2DCubismCore.Moc=Moc;var Model=function(){function Model(moc){this._ptr=_csm.mallocModelAndInitialize(moc._ptr),this._ptr&&(this.parameters=new Parameters(this._ptr),this.parts=new Parts(this._ptr),this.drawables=new Drawables(this._ptr),this.canvasinfo=new CanvasInfo(this._ptr))}return Model.fromMoc=function(moc){var model=new Model(moc);return model._ptr?model:null},Model.prototype.update=function(){_csm.updateModel(this._ptr)},Model.prototype.release=function(){_csm.free(this._ptr),this._ptr=0},Model}();Live2DCubismCore.Model=Model;var CanvasInfo=function(modelPtr){if(modelPtr){var _canvasSize_data=new Float32Array(2),_canvasSize_nDataBytes=_canvasSize_data.length*_canvasSize_data.BYTES_PER_ELEMENT,_canvasSize_dataPtr=_csm.malloc(_canvasSize_nDataBytes),_canvasSize_dataHeap=new Uint8Array(_em.HEAPU8.buffer,_canvasSize_dataPtr,_canvasSize_nDataBytes);_canvasSize_dataHeap.set(new Uint8Array(_canvasSize_data.buffer));var _canvasOrigin_data=new Float32Array(2),_canvasOrigin_nDataBytes=_canvasOrigin_data.length*_canvasOrigin_data.BYTES_PER_ELEMENT,_canvasOrigin_dataPtr=_csm.malloc(_canvasOrigin_nDataBytes),_canvasOrigin_dataHeap=new Uint8Array(_em.HEAPU8.buffer,_canvasOrigin_dataPtr,_canvasOrigin_nDataBytes);_canvasOrigin_dataHeap.set(new Uint8Array(_canvasOrigin_data.buffer));var _canvasPPU_data=new Float32Array(1),_canvasPPU_nDataBytes=_canvasPPU_data.length*_canvasPPU_data.BYTES_PER_ELEMENT,_canvasPPU_dataPtr=_csm.malloc(_canvasPPU_nDataBytes),_canvasPPU_dataHeap=new Uint8Array(_em.HEAPU8.buffer,_canvasPPU_dataPtr,_canvasPPU_nDataBytes);_canvasPPU_dataHeap.set(new Uint8Array(_canvasPPU_data.buffer)),_csm.readCanvasInfo(modelPtr,_canvasSize_dataHeap.byteOffset,_canvasOrigin_dataHeap.byteOffset,_canvasPPU_dataHeap.byteOffset),_canvasSize_data=new Float32Array(_canvasSize_dataHeap.buffer,_canvasSize_dataHeap.byteOffset,_canvasSize_dataHeap.length),_canvasOrigin_data=new Float32Array(_canvasOrigin_dataHeap.buffer,_canvasOrigin_dataHeap.byteOffset,_canvasOrigin_dataHeap.length),_canvasPPU_data=new Float32Array(_canvasPPU_dataHeap.buffer,_canvasPPU_dataHeap.byteOffset,_canvasPPU_dataHeap.length),this.CanvasWidth=_canvasSize_data[0],this.CanvasHeight=_canvasSize_data[1],this.CanvasOriginX=_canvasOrigin_data[0],this.CanvasOriginY=_canvasOrigin_data[1],this.PixelsPerUnit=_canvasPPU_data[0],_csm.free(_canvasSize_dataHeap.byteOffset),_csm.free(_canvasOrigin_dataHeap.byteOffset),_csm.free(_canvasPPU_dataHeap.byteOffset)}};Live2DCubismCore.CanvasInfo=CanvasInfo;var Parameters=function(modelPtr){var length=0;this.count=_csm.getParameterCount(modelPtr),length=_csm.getParameterCount(modelPtr),this.ids=new Array(length);for(var _ids=new Uint32Array(_em.HEAPU32.buffer,_csm.getParameterIds(modelPtr),length),i=0;i<_ids.length;i++)this.ids[i]=_em.UTF8ToString(_ids[i]);length=_csm.getParameterCount(modelPtr),this.minimumValues=new Float32Array(_em.HEAPF32.buffer,_csm.getParameterMinimumValues(modelPtr),length),length=_csm.getParameterCount(modelPtr),this.maximumValues=new Float32Array(_em.HEAPF32.buffer,_csm.getParameterMaximumValues(modelPtr),length),length=_csm.getParameterCount(modelPtr),this.defaultValues=new Float32Array(_em.HEAPF32.buffer,_csm.getParameterDefaultValues(modelPtr),length),length=_csm.getParameterCount(modelPtr),this.values=new Float32Array(_em.HEAPF32.buffer,_csm.getParameterValues(modelPtr),length)};Live2DCubismCore.Parameters=Parameters;var Parts=function(modelPtr){var length=0;this.count=_csm.getPartCount(modelPtr),length=_csm.getPartCount(modelPtr),this.ids=new Array(length);for(var _ids=new Uint32Array(_em.HEAPU32.buffer,_csm.getPartIds(modelPtr),length),i=0;i<_ids.length;i++)this.ids[i]=_em.UTF8ToString(_ids[i]);length=_csm.getPartCount(modelPtr),this.opacities=new Float32Array(_em.HEAPF32.buffer,_csm.getPartOpacities(modelPtr),length),length=_csm.getPartCount(modelPtr),this.parentIndices=new Int32Array(_em.HEAP32.buffer,_csm.getPartParentPartIndices(modelPtr),length)};Live2DCubismCore.Parts=Parts;var Drawables=function(){function Drawables(modelPtr){this._modelPtr=modelPtr;var length=0,length2=null;this.count=_csm.getDrawableCount(modelPtr),length=_csm.getDrawableCount(modelPtr),this.ids=new Array(length);for(var _ids=new Uint32Array(_em.HEAPU32.buffer,_csm.getDrawableIds(modelPtr),length),i=0;i<_ids.length;i++)this.ids[i]=_em.UTF8ToString(_ids[i]);length=_csm.getDrawableCount(modelPtr),this.constantFlags=new Uint8Array(_em.HEAPU8.buffer,_csm.getDrawableConstantFlags(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.dynamicFlags=new Uint8Array(_em.HEAPU8.buffer,_csm.getDrawableDynamicFlags(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.textureIndices=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableTextureIndices(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.drawOrders=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableDrawOrders(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.renderOrders=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableRenderOrders(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.opacities=new Float32Array(_em.HEAPF32.buffer,_csm.getDrawableOpacities(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.maskCounts=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableMaskCounts(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.vertexCounts=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableVertexCounts(modelPtr),length),length=_csm.getDrawableCount(modelPtr),this.indexCounts=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableIndexCounts(modelPtr),length),length=_csm.getDrawableCount(modelPtr),length2=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableMaskCounts(modelPtr),length),this.masks=new Array(length);var _masks=new Uint32Array(_em.HEAPU32.buffer,_csm.getDrawableMasks(modelPtr),length);for(i=0;i<_masks.length;i++)this.masks[i]=new Int32Array(_em.HEAP32.buffer,_masks[i],length2[i]);length=_csm.getDrawableCount(modelPtr),length2=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableVertexCounts(modelPtr),length),this.vertexPositions=new Array(length);var _vertexPositions=new Uint32Array(_em.HEAPU32.buffer,_csm.getDrawableVertexPositions(modelPtr),length);for(i=0;i<_vertexPositions.length;i++)this.vertexPositions[i]=new Float32Array(_em.HEAPF32.buffer,_vertexPositions[i],2*length2[i]);length=_csm.getDrawableCount(modelPtr),length2=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableVertexCounts(modelPtr),length),this.vertexUvs=new Array(length);var _vertexUvs=new Uint32Array(_em.HEAPU32.buffer,_csm.getDrawableVertexUvs(modelPtr),length);for(i=0;i<_vertexUvs.length;i++)this.vertexUvs[i]=new Float32Array(_em.HEAPF32.buffer,_vertexUvs[i],2*length2[i]);length=_csm.getDrawableCount(modelPtr),length2=new Int32Array(_em.HEAP32.buffer,_csm.getDrawableIndexCounts(modelPtr),length),this.indices=new Array(length);var _indices=new Uint32Array(_em.HEAPU32.buffer,_csm.getDrawableIndices(modelPtr),length);for(i=0;i<_indices.length;i++)this.indices[i]=new Uint16Array(_em.HEAPU16.buffer,_indices[i],length2[i])}return Drawables.prototype.resetDynamicFlags=function(){_csm.resetDrawableDynamicFlags(this._modelPtr)},Drawables}();Live2DCubismCore.Drawables=Drawables;var Utils=function(){function Utils(){}return Utils.hasBlendAdditiveBit=function(bitfield){return 1==(1&bitfield)},Utils.hasBlendMultiplicativeBit=function(bitfield){return 2==(2&bitfield)},Utils.hasIsDoubleSidedBit=function(bitfield){return 4==(4&bitfield)},Utils.hasIsInvertedMaskBit=function(bitfield){return 8==(8&bitfield)},Utils.hasIsVisibleBit=function(bitfield){return 1==(1&bitfield)},Utils.hasVisibilityDidChangeBit=function(bitfield){return 2==(2&bitfield)},Utils.hasOpacityDidChangeBit=function(bitfield){return 4==(4&bitfield)},Utils.hasDrawOrderDidChangeBit=function(bitfield){return 8==(8&bitfield)},Utils.hasRenderOrderDidChangeBit=function(bitfield){return 16==(16&bitfield)},Utils.hasVertexPositionsDidChangeBit=function(bitfield){return 32==(32&bitfield)},Utils}();Live2DCubismCore.Utils=Utils;var _scriptDir,_em_module=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(_em_module){var b;_em_module=_em_module||{},b=b||(void 0!==_em_module?_em_module:{});var n,l={};for(n in b)b.hasOwnProperty(n)&&(l[n]=b[n]);var t,p,q,r=!1;p=\"object\"==typeof window,q=\"function\"==typeof importScripts,r=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node&&!p&&!q,t=!p&&!r&&!q;var v,w,x,y,u=\"\";r?(u=__dirname+\"/\",v=function(a,c){var d=z(a);return d?c?d:d.toString():(x=x||require(\"fs\"),a=(y=y||require(\"path\")).normalize(a),x.readFileSync(a,c?null:\"utf8\"))},w=function(a){return(a=v(a,!0)).buffer||(a=new Uint8Array(a)),assert(a.buffer),a},1<process.argv.length&&process.argv[1].replace(/\\\\/g,\"/\"),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a}),process.on(\"unhandledRejection\",B),b.inspect=function(){return\"[Emscripten Module object]\"}):t?(\"undefined\"!=typeof read&&(v=function(a){var c=z(a);return c?C(c):read(a)}),w=function(a){var c;return(c=z(a))?c:\"function\"==typeof readbuffer?new Uint8Array(readbuffer(a)):(assert(\"object\"==typeof(c=read(a,\"binary\"))),c)},\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||q)&&(q?u=self.location.href:document.currentScript&&(u=document.currentScript.src),_scriptDir&&(u=_scriptDir),u=0!==u.indexOf(\"blob:\")?u.substr(0,u.lastIndexOf(\"/\")+1):\"\",v=function(a){try{var c=new XMLHttpRequest;return c.open(\"GET\",a,!1),c.send(null),c.responseText}catch(d){if(a=z(a))return C(a);throw d}},q&&(w=function(a){try{var c=new XMLHttpRequest;return c.open(\"GET\",a,!1),c.responseType=\"arraybuffer\",c.send(null),new Uint8Array(c.response)}catch(d){if(a=z(a))return a;throw d}}));var F,D=b.print||console.log.bind(console),E=b.printErr||console.warn.bind(console);for(n in l)l.hasOwnProperty(n)&&(b[n]=l[n]);function da(){return{exports:function(asmLibraryArg,wasmMemory,wasmTable){var scratchBuffer=new ArrayBuffer(8),b=new Int32Array(scratchBuffer),c=new Float32Array(scratchBuffer),d=new Float64Array(scratchBuffer);function e(index){return b[index]}function f(index,value){b[index]=value}function g(){return d[0]}function h(value){d[0]=value}function j(value){c[0]=value}function k(){return c[0]}var mem,U,global,env,buffer,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,C,H,I,J,K,L,M,T=(mem=wasmMemory.buffer,U=new Uint8Array(mem),function(offset,s){var V,W;if(\"undefined\"==typeof Buffer)for(V=atob(s),W=0;W<V.length;W++)U[offset+W]=V.charCodeAt(W);else for(V=Buffer.from(s,\"base64\"),W=0;W<V.length;W++)U[offset+W]=V[W]});return T(1024,\"CgBbQ1NNXSBbRV1Jbml0aWFsaXplRGVmb3JtZXJzKCk6IFVua25vd24gRGVmb3JtZXIgVHlwZS4KAE1PQzMAW0NTTV0gW0VdJXM6ICVzCgBbQ1NNXSBbRV1XYXJwRGVmb3JtZXI6OlRyYW5zZm9ybVRhcmdldCgpIGVycm9yLiBbJWRdIHAwMT0oJS40ZiAsICUuNGYpCgAlcwoAICAAW0NTTV0gW0VdY3NtUmV2aXZlTW9jSW5QbGFjZSBpcyBmYWlsZWQuIENvcnJ1cHRlZCAgbW9jMyBmaWxlLgoAImFkZHJlc3MiIGlzIG51bGwuAFtDU01dIFtXXVJvdGF0aW9uRGVmb3JtZXI6IE5vdCBmb3VuZCB0cmFuc2Zvcm1lZCBEaXJlY3Rpb24uCgAlMDJYIABbQ1NNXSBbRV1jc21SZXZpdmVNb2NJblBsYWNlIGlzIGZhaWxlZC4gVGhlIENvcmUgdW5zdXBwb3J0IGxhdGVyIHRoYW4gbW9jMyB2ZXI6WyVkXS4gVGhpcyBtb2MzIHZlciBpcyBbJWRdLgoAImFkZHJlc3MiIGFsaWdubWVudCBpcyBpbnZhbGlkLgBbQ1NNXSBbRV1VcGRhdGVEZWZvcm1lckhpZXJhcmNoeSgpOiBVbmtub3duIERlZm9ybWVyIFR5cGUuCgBbQ1NNXSBbRV1jc21HZXRNb2NWZXJzaW9uIGlzIGZhaWxlZC4gQ29ycnVwdGVkIG1vYzMgZmlsZS4KACJzaXplIiBpcyBpbnZhbGlkLgBMaXZlMkQgQ3ViaXNtIFNESyBDb3JlIFZlcnNpb24gJWQuJWQuJWQAIm1vZGVsIiBpcyBpbnZhbGlkLgBjc21HZXRNb2NWZXJzaW9uAGNzbVJldml2ZU1vY0luUGxhY2UAY3NtUmVhZENhbnZhc0luZm8AIm91dFNpemVJblBpeGVscyIgaXMgbnVsbC4AIm91dE9yaWdpbkluUGl4ZWxzIiBpcyBudWxsLgAib3V0UGl4ZWxzUGVyVW5pdCIgaXMgbnVsbC4AY3NtR2V0U2l6ZW9mTW9kZWwAIm1vYyIgaXMgaW52YWxpZC4AY3NtSW5pdGlhbGl6ZU1vZGVsSW5QbGFjZQAic2l6ZSIgaXMgaW52YWxpZABjc21VcGRhdGVNb2RlbABjc21HZXRQYXJhbWV0ZXJDb3VudABjc21HZXRQYXJhbWV0ZXJJZHMAY3NtR2V0UGFyYW1ldGVyTWluaW11bVZhbHVlcwBjc21HZXRQYXJhbWV0ZXJNYXhpbXVtVmFsdWVzAGNzbUdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMAY3NtR2V0UGFyYW1ldGVyVmFsdWVzAGNzbUdldFBhcnRDb3VudABjc21HZXRQYXJ0SWRzAGNzbUdldFBhcnRPcGFjaXRpZXMAY3NtR2V0UGFydFBhcmVudFBhcnRJbmRpY2VzAGNzbUdldERyYXdhYmxlQ291bnQAY3NtR2V0RHJhd2FibGVJZHMAY3NtR2V0RHJhd2FibGVDb25zdGFudEZsYWdzAGNzbUdldERyYXdhYmxlRHluYW1pY0ZsYWdzAGNzbUdldERyYXdhYmxlVGV4dHVyZUluZGljZXMAY3NtR2V0RHJhd2FibGVEcmF3T3JkZXJzAGNzbUdldERyYXdhYmxlUmVuZGVyT3JkZXJzAGNzbUdldERyYXdhYmxlT3BhY2l0aWVzAGNzbUdldERyYXdhYmxlTWFza0NvdW50cwBjc21HZXREcmF3YWJsZU1hc2tzAGNzbUdldERyYXdhYmxlVmVydGV4Q291bnRzAGNzbUdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zAGNzbUdldERyYXdhYmxlVmVydGV4VXZzAGNzbUdldERyYXdhYmxlSW5kZXhDb3VudHMAY3NtR2V0RHJhd2FibGVJbmRpY2VzAGNzbVJlc2V0RHJhd2FibGVEeW5hbWljRmxhZ3M=\"),T(2572,\"Cw==\"),T(2611,\"//////8=\"),T(2680,\"GBgAAC0rICAgMFgweAAobnVsbCkAAAAAEQAKABEREQAAAAAFAAAAAAAACQAAAAAL\"),T(2736,\"EQAPChEREQMKBwABEwkLCwAACQYLAAALAAYRAAAAERER\"),T(2785,\"Cw==\"),T(2794,\"EQAKChEREQAKAAACAAkLAAAACQALAAAL\"),T(2843,\"DA==\"),T(2855,\"DAAAAAAMAAAAAAkMAAAAAAAMAAAM\"),T(2901,\"Dg==\"),T(2913,\"DQAAAAQNAAAAAAkOAAAAAAAOAAAO\"),T(2959,\"EA==\"),T(2971,\"DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS\"),T(3026,\"EgAAABISEgAAAAAAAAk=\"),T(3075,\"Cw==\"),T(3087,\"CgAAAAAKAAAAAAkLAAAAAAALAAAL\"),T(3133,\"DA==\"),T(3145,\"DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAu\"),T(3232,\"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\"),T(6019,\"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNThj7T7aD0k/Xph7P9oPyT9pN6wxaCEiM7QPFDNoIaIz2w9JP9sPSb/kyxZA5MsWwAAAAAAAAACA2w9JQNsPScAAAIA/AADAPwAAAADcz9E1AAAAAADAFT8=\"),T(6168,\"BQ==\"),T(6180,\"DA==\"),T(6204,\"DQAAAA4AAADIGQAAAAQ=\"),T(6228,\"AQ==\"),T(6243,\"Cv////8=\"),T(6500,\"9B0=\"),global={Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array,NaN:NaN,Infinity:1/0,Math:Math},env=asmLibraryArg,buffer=wasmMemory.buffer,m=env.memory,n=wasmTable,o=new global.Int8Array(buffer),p=new global.Int16Array(buffer),q=new global.Int32Array(buffer),r=new global.Uint8Array(buffer),s=new global.Uint16Array(buffer),t=new global.Uint32Array(buffer),u=new global.Float32Array(buffer),v=new global.Float64Array(buffer),w=global.Math.imul,x=global.Math.fround,y=global.Math.abs,z=global.Math.clz32,A=global.Math.min,global.Math.max,C=global.Math.floor,global.Math.ceil,global.Math.sqrt,env.abort,global.NaN,H=global.Infinity,I=env.emscripten_memcpy_big,J=env.emscripten_resize_heap,K=env.fd_write,L=5251088,M=0,n[1]=function(a,bf,cf,df){a|=0,bf|=0,cf|=0,df|=0;var Gf,ef=0,ff=x(0),gf=x(0),hf=0,jf=x(0),kf=x(0),lf=x(0),mf=0,nf=x(0),of=x(0),pf=x(0),qf=x(0),rf=x(0),sf=x(0),tf=x(0),uf=x(0),vf=x(0),wf=x(0),xf=x(0),yf=x(0),zf=x(0),Af=x(0),Bf=0,Cf=0,Df=x(0),Ef=x(0),Ff=0,Hf=0,If=x(0),Jf=x(0),Kf=0,Lf=0,Mf=0,Nf=0,Of=0,Pf=0,Qf=0,Rf=0,Sf=0,Tf=x(0),Uf=x(0),Vf=x(0),Wf=x(0),Xf=x(0),Yf=x(0),Zf=x(0),_f=0,$f=0;if(L=Gf=L-32|0,1<=(0|df))for(Of=(Bf=q[a+4>>2])+-1|0,Pf=(Hf=q[a>>2])+-1|0,Qf=Lf=(mf=q[a+20>>2])+(Bf<<3)|0,Rf=Mf=((Kf=w(Hf,Cf=Bf+1|0))<<3)+mf|0,Sf=Nf=(Bf+Kf<<3)+mf|0,If=x(0|Hf),Jf=x(0|Bf),_f=q[a+8>>2],a=0;;){lf=u[4+(ef=(Ff=a<<3)+bf|0)>>2],gf=x(lf*If),nf=u[ef>>2],ff=x(nf*Jf),ef=lf>=x(1);a:if(lf<x(0)^1&&!(ef|nf>=x(1)|nf<x(0)))ef=x(y(sf=gf))<x(2147483648)?~~gf:-2147483648,kf=x(sf-x(0|ef)),hf=x(y(gf=ff))<x(2147483648)?~~ff:-2147483648,jf=x(gf-x(0|hf)),ef=hf+w(ef,Cf)|0,gf=_f?(ff=x(x(1)-kf),gf=x(x(1)-jf),hf=(ef<<3)+mf|0,ef=(ef+Cf<<3)+mf|0,u[cf+Ff>>2]=x(x(x(ff*x(gf*u[hf>>2]))+x(ff*x(jf*u[hf+8>>2])))+x(kf*x(gf*u[ef>>2])))+x(kf*x(jf*u[ef+8>>2])),ff=x(x(x(ff*x(gf*u[hf+4>>2]))+x(ff*x(jf*u[hf+12>>2])))+x(kf*x(gf*u[ef+4>>2]))),x(kf*x(jf*u[ef+12>>2]))):x(jf+kf)<=x(1)?(ff=x(x(x(1)-jf)-kf),hf=(ef<<3)+mf|0,ef=(ef+Cf<<3)+mf|0,u[cf+Ff>>2]=x(x(ff*u[hf>>2])+x(jf*u[hf+8>>2]))+x(kf*u[ef>>2]),ff=x(x(ff*u[hf+4>>2])+x(jf*u[hf+12>>2])),x(kf*u[ef+4>>2])):(ff=x(x(jf+x(-1))+kf),hf=(ef+Cf<<3)+mf|0,gf=x(x(1)-jf),lf=x(x(1)-kf),ef=(ef<<3)+mf|0,u[cf+Ff>>2]=x(x(ff*u[hf+8>>2])+x(gf*u[hf>>2]))+x(lf*u[ef+8>>2]),ff=x(x(ff*u[hf+12>>2])+x(gf*u[hf+4>>2])),x(lf*u[ef+12>>2]));else{if($f||(sf=u[Sf+4>>2],Tf=u[mf+4>>2],of=x(sf-Tf),Uf=u[Qf+4>>2],Vf=u[Rf+4>>2],pf=x(Uf-Vf),tf=x(x(of-pf)*x(.5)),Wf=u[Nf>>2],Xf=u[mf>>2],qf=x(Wf-Xf),Yf=u[Lf>>2],Zf=u[Mf>>2],rf=x(Yf-Zf),uf=x(x(qf-rf)*x(.5)),pf=x(x(pf+of)*x(.5)),rf=x(x(rf+qf)*x(.5)),$f=1,of=x(x(x(x(x(Tf+Uf)+Vf)+sf)*x(.25))-x(of*x(.5))),qf=x(x(x(x(x(Xf+Yf)+Zf)+Wf)*x(.25))-x(qf*x(.5)))),!(lf<x(3)^1|nf>x(-2)^1|(nf<x(3)^1|lf>x(-2)^1))){b:if(nf<=x(0)){if(lf<=x(0)){kf=x(x(lf+x(2))*x(.5)),jf=x(x(nf+x(2))*x(.5)),ff=x(tf+tf),Df=x(of-ff),gf=x(uf+uf),Ef=x(qf-gf),zf=x(of-x(pf+pf)),vf=x(zf-ff),Af=x(qf-x(rf+rf)),wf=x(Af-gf),xf=u[mf+4>>2],yf=u[mf>>2];break b}if(ef){ff=x(tf*x(3)),gf=x(of-x(pf+pf)),zf=x(ff+gf),vf=x(uf*x(3)),wf=x(qf-x(rf+rf)),Af=x(vf+wf),kf=x(x(lf+x(-1))*x(.5)),jf=x(x(nf+x(2))*x(.5)),xf=x(ff+of),yf=x(vf+qf),vf=x(tf+gf),wf=x(uf+wf),Df=u[Rf+4>>2],Ef=u[Mf>>2];break b}ff=x(of-x(pf+pf)),ef=Pf,hf=x(y(gf))<x(2147483648)?~~gf:-2147483648,kf=x(0|(ef=(0|hf)==(0|Hf)?ef:hf)),jf=x(kf/If),vf=x(x(jf*tf)+ff),sf=x(jf*uf),jf=x(qf-x(rf+rf)),wf=x(sf+jf),lf=x(x(0|(hf=ef+1|0))/If),zf=x(x(lf*tf)+ff),Af=x(x(lf*uf)+jf),jf=x(x(nf+x(2))*x(.5)),kf=x(gf-kf),ef=(w(ef,Cf)<<3)+mf|0,Df=u[ef+4>>2],Ef=u[ef>>2],ef=(w(hf,Cf)<<3)+mf|0,xf=u[ef+4>>2],yf=u[ef>>2]}else if(nf>=x(1)){if(lf<=x(0)){kf=x(x(lf+x(2))*x(.5)),jf=x(x(nf+x(-1))*x(.5)),ff=x(tf+tf),vf=x(x(pf+of)-ff),gf=x(uf+uf),wf=x(x(rf+qf)-gf),xf=x(x(pf*x(3))+of),Df=x(xf-ff),yf=x(x(rf*x(3))+qf),Ef=x(yf-gf),zf=u[Qf+4>>2],Af=u[Lf>>2];break b}if(ef){ff=x(tf*x(3)),zf=x(ff+x(pf+of)),gf=x(uf*x(3)),Af=x(gf+x(rf+qf)),sf=ff,ff=x(x(pf*x(3))+of),xf=x(sf+ff),sf=gf,gf=x(x(rf*x(3))+qf),yf=x(sf+gf),kf=x(x(lf+x(-1))*x(.5)),jf=x(x(nf+x(-1))*x(.5)),Df=x(tf+ff),Ef=x(uf+gf),vf=u[Sf+4>>2],wf=u[Nf>>2];break b}ff=x(x(pf*x(3))+of),ef=Pf,hf=x(y(gf))<x(2147483648)?~~gf:-2147483648,kf=x(0|(ef=(0|hf)==(0|Hf)?ef:hf)),jf=x(kf/If),Df=x(x(jf*tf)+ff),sf=x(jf*uf),jf=x(x(rf*x(3))+qf),Ef=x(sf+jf),lf=x(x(0|(hf=ef+1|0))/If),xf=x(x(lf*tf)+ff),yf=x(x(lf*uf)+jf),jf=x(x(nf+x(-1))*x(.5)),kf=x(gf-kf),ef=(w(ef,Cf)+Bf<<3)+mf|0,vf=u[ef+4>>2],wf=u[ef>>2],ef=(w(hf,Cf)+Bf<<3)+mf|0,zf=u[ef+4>>2],Af=u[ef>>2]}else lf<=x(0)?(kf=x(x(lf+x(2))*x(.5)),ef=Of,hf=x(y(gf=ff))<x(2147483648)?~~ff:-2147483648,ff=x(0|(ef=(0|hf)==(0|Bf)?ef:hf)),jf=x(gf-ff),ff=x(ff/Jf),gf=x(tf+tf),vf=x(x(x(ff*pf)+of)-gf),sf=x(x(ff*rf)+qf),ff=x(uf+uf),wf=x(sf-ff),lf=x(x(0|(hf=ef+1|0))/Jf),Df=x(x(x(lf*pf)+of)-gf),Ef=x(x(x(lf*rf)+qf)-ff),zf=u[4+(ef=(ef<<3)+mf|0)>>2],Af=u[ef>>2],xf=u[4+(ef=(hf<<3)+mf|0)>>2],yf=u[ef>>2]):ef?(sf=gf=x(tf*x(3)),ef=Of,hf=x(y(ff))<x(2147483648)?~~ff:-2147483648,jf=x(0|(ef=(0|hf)==(0|Bf)?ef:hf)),kf=x(jf/Jf),zf=x(sf+x(x(kf*pf)+of)),nf=x(uf*x(3)),Af=x(nf+x(x(kf*rf)+qf)),sf=gf,gf=x(x(0|(hf=ef+1|0))/Jf),xf=x(sf+x(x(gf*pf)+of)),yf=x(nf+x(x(gf*rf)+qf)),kf=x(x(lf+x(-1))*x(.5)),jf=x(ff-jf),vf=u[4+(ef=(ef+Kf<<3)+mf|0)>>2],wf=u[ef>>2],Df=u[4+(ef=(hf+Kf<<3)+mf|0)>>2],Ef=u[ef>>2]):(v[16+Gf>>3]=lf,q[Gf>>2]=a,v[8+Gf>>3]=nf,Y(4,1104,Gf));if(x(jf+kf)<=x(1)){u[cf+Ff>>2]=x(wf+x(x(Ef-wf)*jf))+x(x(Af-wf)*kf),ff=x(vf+x(x(Df-vf)*jf)),gf=x(x(zf-vf)*kf);break a}ff=x(x(1)-jf),gf=x(x(1)-kf),u[cf+Ff>>2]=x(yf+x(x(Af-yf)*ff))+x(x(Ef-yf)*gf),ff=x(xf+x(x(zf-xf)*ff)),gf=x(x(Df-xf)*gf);break a}u[cf+Ff>>2]=x(lf*uf)+x(x(nf*rf)+qf),ff=x(lf*tf),gf=x(x(nf*pf)+of)}if(u[4+(cf+Ff|0)>>2]=ff+gf,(0|df)==(0|(a=a+1|0)))break}L=32+Gf|0},n[2]=function(a,qe,re){a|=0,qe|=0;var Ge,He,Ie,Fe=0;if(He=q[140+(re|=0)>>2],Ie=q[re+136>>2],Ge=q[a+24>>2],-1==(0|(Fe=q[a+4>>2])))return q[(a=qe<<2)+Ie>>2]=q[Ge+16>>2],void(q[a+He>>2]=1065353216);re=q[re+4>>2]+(Fe<<5)|0,Fe=q[Ge+20>>2],n[q[re+20>>2]](q[re+24>>2],Fe,Fe,q[Ge+12>>2]),qe<<=2,a=q[a+4>>2]<<2,u[qe+Ie>>2]=u[Ge+16>>2]*u[a+Ie>>2],q[qe+He>>2]=q[a+He>>2]},n[3]=function(a,qe,re,Je){a|=0,qe|=0,re|=0,Je|=0;var Se,Ke=x(0),Le=x(0),Me=x(0),Ne=x(0),Oe=0,Pe=x(0),Qe=0,Re=x(0),Te=x(0),Ue=x(0);if(Oe=q[a+28>>2],Le=function(a){var Rb,Pb=x(0),Qb=0,Sb=0,Tb=0;L=Rb=L-16|0,j(a);a:if((Qb=2147483647&(Sb=e(0)))>>>0<=1061752794){if(Pb=x(1),Qb>>>0<964689920)break a;Pb=aa(+a)}else if(Qb>>>0<=1081824209){if(Tb=+a,1075235812<=Qb>>>0){Pb=x(-aa(((0|Sb)<0?3.141592653589793:-3.141592653589793)+Tb));break a}if((0|Sb)<=-1){Pb=$(Tb+1.5707963267948966);break a}Pb=$(1.5707963267948966-Tb)}else if(Qb>>>0<=1088565717){if(1085271520<=Qb>>>0){Pb=aa(+a+((0|Sb)<0?6.283185307179586:-6.283185307179586));break a}if((0|Sb)<=-1){Pb=$(-4.71238898038469-a);break a}Pb=$(a-4.71238898038469)}else if(Pb=x(a-a),!(2139095040<=Qb>>>0))if((Qb=3&la(a,8+Rb|0))>>>0<=2){switch(Qb-1|0){default:Pb=aa(v[8+Rb>>3]);break a;case 0:Pb=$(-v[8+Rb>>3]);break a;case 1:}Pb=x(-aa(v[8+Rb>>3]))}else Pb=$(v[8+Rb>>3]);return L=16+Rb|0,Pb}(Ke=x(x(x(u[a>>2]+u[a+20>>2])*x(3.1415927410125732))/x(180))),Me=u[a+8>>2],Se=q[a+24>>2],Ke=function(a){var Mb,Fb=0,Nb=0,Ob=0;L=Mb=L-16|0,j(a);a:if((Fb=2147483647&(Ob=e(0)))>>>0<=1061752794){if(Fb>>>0<964689920)break a;a=$(+a)}else if(Fb>>>0<=1081824209){if(Nb=+a,Fb>>>0<=1075235811){if((0|Ob)<=-1){a=x(-aa(Nb+1.5707963267948966));break a}a=aa(Nb+-1.5707963267948966);break a}a=$(-(((0|Ob)<0?3.141592653589793:-3.141592653589793)+Nb))}else if(Fb>>>0<=1088565717){if(Nb=+a,Fb>>>0<=1085271519){if((0|Ob)<=-1){a=aa(Nb+4.71238898038469);break a}a=x(-aa(Nb+-4.71238898038469));break a}a=$(((0|Ob)<0?6.283185307179586:-6.283185307179586)+Nb)}else if(2139095040<=Fb>>>0)a=x(a-a);else if((Fb=3&la(a,8+Mb|0))>>>0<=2){switch(Fb-1|0){default:a=$(v[8+Mb>>3]);break a;case 0:a=aa(v[8+Mb>>3]);break a;case 1:}a=$(-v[8+Mb>>3])}else a=x(-aa(v[8+Mb>>3]));return L=16+Mb|0,a}(Ke),0<(0|Je))for(Le=x(Me*Le),Pe=x(Oe?-1:1),Te=x(Le*Pe),Ne=x(Se?-1:1),Ue=x(Ne*x(Me*Ke)),Le=x(Ne*Le),Me=x(x(Me*x(-Ke))*Pe),Ke=u[a+16>>2],Pe=u[a+12>>2];Oe=(a=Qe<<3)+re|0,Ne=u[(a=a+qe|0)>>2],Re=u[a+4>>2],u[Oe+4>>2]=Ke+x(x(Ue*Ne)+x(Te*Re)),u[Oe>>2]=Pe+x(x(Le*Ne)+x(Me*Re)),(0|(Qe=Qe+1|0))!=(0|Je););},n[4]=function(a,qe,re){a|=0,qe|=0,re|=0;var se,te,ze,Ae,Be,ue=0,ve=x(0),we=x(0),xe=0,ye=x(0),Ce=x(0),De=x(0),Ee=x(0);if(L=se=L+-64|0,ze=q[re+140>>2],Ae=q[re+136>>2],te=q[a+24>>2],-1!=(0|(Be=q[a+4>>2]))){ue=q[re+4>>2],xe=q[te+12>>2],q[24+se>>2]=xe,re=q[te+16>>2],q[28+se>>2]=re,q[16+se>>2]=0,Ce=1==q[8+(ue=ue+(Be<<5)|0)>>2]?x(-10):x(-.10000000149011612),u[20+se>>2]=Ce,q[60+se>>2]=re,q[56+se>>2]=xe,n[q[ue+20>>2]](q[ue+24>>2],56+se|0,48+se|0,1),ye=x(1),xe=9;b:{for(;;){if(re=xe,De=x(ye*x(0)),u[32+se>>2]=De+u[56+se>>2],Ee=x(Ce*ye),u[36+se>>2]=Ee+u[60+se>>2],n[q[ue+20>>2]](q[ue+24>>2],32+se|0,40+se|0,1),we=x(u[44+se>>2]-u[52+se>>2]),u[44+se>>2]=we,ve=x(u[40+se>>2]-u[48+se>>2]),u[40+se>>2]=ve,we!=x(0)||ve!=x(0)){re=q[44+se>>2],q[8+se>>2]=q[40+se>>2],q[12+se>>2]=re;break b}if(u[32+se>>2]=u[56+se>>2]-De,u[36+se>>2]=u[60+se>>2]-Ee,n[q[ue+20>>2]](q[ue+24>>2],32+se|0,40+se|0,1),we=x(u[40+se>>2]-u[48+se>>2]),u[40+se>>2]=we,ve=x(u[44+se>>2]-u[52+se>>2]),(u[44+se>>2]=ve)!=x(0)||we!=x(0)){u[12+se>>2]=-ve,u[8+se>>2]=-we;break b}if(xe=re+-1|0,ye=x(ye*x(.10000000149011612)),!re)break}Y(3,1265,0)}ve=function(a,dh){var eh=x(0);if((eh=x(Aa(u[4+a>>2],u[a>>2])-Aa(u[4+dh>>2],u[dh>>2])))<x(-3.1415927410125732))for(;(eh=x(eh+x(6.2831854820251465)))<x(-3.1415927410125732););if(eh>x(3.1415927410125732))for(;(eh=x(eh+x(-6.2831854820251465)))>x(3.1415927410125732););return eh}(16+se|0,8+se|0),n[q[ue+20>>2]](q[ue+24>>2],24+se|0,24+se|0,1),q[te+12>>2]=q[24+se>>2],q[te+16>>2]=q[28+se>>2],u[te+20>>2]=u[te+20>>2]+x(x(ve*x(-180))/x(3.1415927410125732)),qe<<=2,a=q[a+4>>2]<<2,u[qe+Ae>>2]=u[te+4>>2]*u[a+Ae>>2],ve=x(u[te+8>>2]*u[a+ze>>2]),u[qe+ze>>2]=ve,u[te+8>>2]=ve}else q[(a=qe<<2)+Ae>>2]=q[te+4>>2],q[a+ze>>2]=q[te+8>>2];L=64+se|0},n[5]=function(a){a|=0;var hg,lg,bf=0,cf=0,df=0,ag=0,bg=0,cg=x(0),dg=0,eg=0,fg=0,gg=0,ig=0,jg=0,kg=0,mg=0,ng=0,og=0,pg=0;if(fg=q[a+248>>2],lg=q[a+204>>2],hg=q[a+200>>2],!((0|(bg=q[a+220>>2]))<1)){for(dg=q[a+236>>2],ag=q[a+216>>2],df=q[a+224>>2];u[(cf=bf<<2)+dg>>2]=u[cf+df>>2]*u[cf+ag>>2],(0|bg)!=(0|(bf=bf+1|0)););if(!((0|bg)<1))for(dg=q[a+240>>2],ag=q[a+216>>2],df=q[a+228>>2],bf=0;u[(cf=bf<<2)+dg>>2]=u[cf+df>>2]*u[cf+ag>>2],(0|bg)!=(0|(bf=bf+1|0)););}if(1<=(0|hg))for(mg=q[a+208>>2],bg=dg=0;;){if(q[fg>>2]){gg=(df=q[(cf=dg<<2)+q[a+212>>2]>>2])+bg|0;c:{if((0|df)<=0)q[cf+q[a+276>>2]>>2]=0;else{for(ag=q[a+236>>2],cg=x(0),bf=bg;cg=x(cg+u[ag+(bf<<2)>>2]),(0|(bf=bf+1|0))<(0|gg););if(u[cf+q[a+276>>2]>>2]=cg,!((0|df)<1)){for(ag=q[a+240>>2],cg=x(0),bf=bg;cg=x(cg+u[ag+(bf<<2)>>2]),(0|(bf=bf+1|0))<(0|gg););break c}}cg=x(0)}if(bf=cf+q[a+268>>2]|0,cg=x(cg+x(.0010000000474974513)),ag=x(y(cg))<x(2147483648)?~~cg:-2147483648,q[bf>>2]=ag,ag=(bf=q[12+((dg<<4)+lg|0)>>2])<<1,ig=q[cf+q[a+272>>2]>>2],(bf=(0|bf)<1)||ba(ig,0,(1<(0|ag)?ag:1)<<2),!(bf|(0|df)<1))for(jg=q[a+244>>2],ng=q[a+216>>2],og=q[a+232>>2],cf=bg;;){for(eg=(bf=cf<<2)+ng|0,pg=q[bf+og>>2],df=bf=0;u[jg+(kg=df<<2)>>2]=u[pg+kg>>2]*u[eg>>2],(0|(df=df+1|0))<(0|ag););for(;u[(eg=(df=bf<<2)+ig|0)>>2]=u[df+jg>>2]+u[eg>>2],(0|(bf=bf+1|0))<(0|ag););if(!((0|(cf=cf+1|0))<(0|gg)))break}}if(fg=fg+4|0,bg=q[(dg<<2)+mg>>2]+bg|0,(0|hg)==(0|(dg=dg+1|0)))break}},n[6]=function(a){a|=0;var Lg,Pg,Cg=0,Dg=0,Eg=0,Fg=0,Gg=0,Hg=0,Ig=x(0),Jg=0,Kg=0,Mg=0,Ng=0,Og=0,Qg=0,Rg=0,Sg=0,Tg=0,Ug=0;if(Kg=q[a+172>>2],Lg=q[a- -64>>2],Pg=q[a+68>>2],1<=(0|(Eg=q[a+92>>2])))for(Gg=q[a+104>>2],Hg=q[a+88>>2],Dg=q[a+96>>2];u[(Fg=Cg<<2)+Gg>>2]=u[Dg+Fg>>2]*u[Hg+Fg>>2],(0|Eg)!=(0|(Cg=Cg+1|0)););if(1<=(0|Lg))for(Qg=q[a+80>>2],Fg=Gg=0;;){if(q[Kg>>2]){if(Mg=(Cg=q[q[a+84>>2]+(Gg<<2)>>2])+Fg|0,Eg=(0|Cg)<1)Ig=x(0);else for(Hg=q[a+104>>2],Ig=x(0),Cg=Fg;Ig=x(Ig+u[Hg+(Cg<<2)>>2]),(0|(Cg=Cg+1|0))<(0|Mg););if(Cg=w(Gg,24)+Pg|0,u[Cg+16>>2]=Ig,Hg=(Dg=q[Cg+12>>2])<<1,(Dg=(0|Dg)<1)||ba(q[Cg+20>>2],0,(1<(0|Hg)?Hg:1)<<2),!(Dg|Eg))for(Rg=q[Cg+20>>2],Ng=q[a+108>>2],Sg=q[a+88>>2],Tg=q[a+100>>2],Eg=Fg;;){for(Jg=(Cg=Eg<<2)+Sg|0,Ug=q[Cg+Tg>>2],Dg=Cg=0;u[(Og=Dg<<2)+Ng>>2]=u[Ug+Og>>2]*u[Jg>>2],(0|(Dg=Dg+1|0))<(0|Hg););for(;u[(Jg=(Dg=Cg<<2)+Rg|0)>>2]=u[Dg+Ng>>2]+u[Jg>>2],(0|(Cg=Cg+1|0))<(0|Hg););if(!((0|(Eg=Eg+1|0))<(0|Mg)))break}}if(Kg=Kg+4|0,Fg=q[(Gg<<2)+Qg>>2]+Fg|0,(0|Lg)==(0|(Gg=Gg+1|0)))break}},n[7]=function(a){a|=0;var ch,Vg=0,Wg=x(0),Xg=0,Yg=0,Zg=0,_g=0,$g=0,ah=0,bh=0;if($g=q[a+36>>2],ch=q[a+4>>2],1<=(0|(Yg=q[a+24>>2])))for(ah=q[a+32>>2],bh=q[a+20>>2],Xg=q[a+28>>2];u[(Zg=Vg<<2)+ah>>2]=u[Xg+Zg>>2]*u[Zg+bh>>2],(0|Yg)!=(0|(Vg=Vg+1|0)););if(1<=(0|ch))for(Zg=q[a+12>>2],Xg=0;;){if(q[$g>>2]){if((0|(Vg=q[(Yg=_g<<2)+q[a+16>>2]>>2]))<1)Wg=x(0);else for(ah=Vg+Xg|0,bh=q[a+32>>2],Wg=x(0),Vg=Xg;Wg=x(Wg+u[bh+(Vg<<2)>>2]),(0|(Vg=Vg+1|0))<(0|ah););Vg=Yg+q[a+44>>2]|0,Wg=x(Wg+x(.0010000000474974513)),x(y(Wg))<x(2147483648)?q[Vg>>2]=~~Wg:q[Vg>>2]=-2147483648}if($g=$g+4|0,Xg=q[Zg+(_g<<2)>>2]+Xg|0,(0|ch)==(0|(_g=_g+1|0)))break}},n[8]=function(a){a|=0;var yg,Bg,qg=0,rg=0,sg=x(0),tg=0,ug=0,vg=0,wg=0,xg=0,zg=0,Ag=0;if(Ag=q[a+176>>2],Bg=q[a+72>>2],yg=q[a+76>>2],!((0|(vg=q[a+124>>2]))<1)){for(wg=q[a+148>>2],tg=q[a+120>>2],ug=q[a+128>>2];u[(rg=qg<<2)+wg>>2]=u[rg+ug>>2]*u[rg+tg>>2],(0|vg)!=(0|(qg=qg+1|0)););if(!((0|vg)<1)){for(wg=q[a+152>>2],tg=q[a+120>>2],ug=q[a+132>>2],qg=0;u[(rg=qg<<2)+wg>>2]=u[rg+ug>>2]*u[rg+tg>>2],(0|vg)!=(0|(qg=qg+1|0)););if(!((0|vg)<1)){for(wg=q[a+156>>2],tg=q[a+120>>2],ug=q[a+136>>2],qg=0;u[(rg=qg<<2)+wg>>2]=u[rg+ug>>2]*u[rg+tg>>2],(0|vg)!=(0|(qg=qg+1|0)););if(!((0|vg)<1)){for(wg=q[a+160>>2],tg=q[a+120>>2],ug=q[a+140>>2],qg=0;u[(rg=qg<<2)+wg>>2]=u[rg+ug>>2]*u[rg+tg>>2],(0|vg)!=(0|(qg=qg+1|0)););if(!((0|vg)<1))for(wg=q[a+164>>2],tg=q[a+120>>2],ug=q[a+144>>2],qg=0;u[(rg=qg<<2)+wg>>2]=u[rg+ug>>2]*u[rg+tg>>2],(0|vg)!=(0|(qg=qg+1|0)););}}}}if(1<=(0|Bg))for(wg=q[a+112>>2],ug=0;;){if(q[Ag>>2]){b:{c:{d:{e:{if((0|(rg=q[q[a+116>>2]+(xg<<2)>>2]))<=0)q[4+((xg<<5)+yg|0)>>2]=0;else{for(zg=rg+ug|0,tg=q[a+148>>2],sg=x(0),qg=ug;sg=x(sg+u[tg+(qg<<2)>>2]),(0|(qg=qg+1|0))<(0|zg););if(u[4+(vg=(xg<<5)+yg|0)>>2]=sg,!(rg=(0|rg)<1)){for(tg=q[a+152>>2],sg=x(0),qg=ug;sg=x(sg+u[tg+(qg<<2)>>2]),(0|(qg=qg+1|0))<(0|zg););if(u[vg+20>>2]=sg,rg)break e;for(tg=q[a+156>>2],sg=x(0),qg=ug;sg=x(sg+u[tg+(qg<<2)>>2]),(0|(qg=qg+1|0))<(0|zg););if(u[vg+12>>2]=sg,rg)break d;for(tg=q[a+160>>2],sg=x(0),qg=ug;sg=x(sg+u[tg+(qg<<2)>>2]),(0|(qg=qg+1|0))<(0|zg););if(u[vg+16>>2]=sg,rg)break c;for(tg=q[a+164>>2],sg=x(0),qg=ug;sg=x(sg+u[tg+(qg<<2)>>2]),(0|(qg=qg+1|0))<(0|zg););break b}}q[20+((xg<<5)+yg|0)>>2]=0}q[12+((xg<<5)+yg|0)>>2]=0}q[16+((xg<<5)+yg|0)>>2]=0}sg=x(0)}u[8+((xg<<5)+yg|0)>>2]=sg}if(Ag=Ag+4|0,ug=q[wg+(xg<<2)>>2]+ug|0,(0|Bg)==(0|(xg=xg+1|0)))break}},n[9]=function(a){a|=0;var ae,Ud=0,Vd=0,Wd=0,Xd=0,Yd=0,Zd=x(0),_d=0,$d=0,be=0,ce=0;if(ae=q[a+340>>2],1<=(0|(Wd=q[a+360>>2])))for(_d=q[a+368>>2],$d=q[a+356>>2],Vd=q[a+364>>2];u[(Xd=Ud<<2)+_d>>2]=u[Vd+Xd>>2]*u[Xd+$d>>2],(0|Wd)!=(0|(Ud=Ud+1|0)););if(1<=(0|ae))for(be=q[a+348>>2],ce=q[a+344>>2],Xd=q[a+352>>2],Vd=0;;){if((0|(Ud=q[(Wd=Yd<<2)+Xd>>2]))<1)Zd=x(0);else for(_d=Ud+Vd|0,$d=q[a+368>>2],Zd=x(0),Ud=Vd;Zd=x(Zd+u[$d+(Ud<<2)>>2]),(0|(Ud=Ud+1|0))<(0|_d););if(u[20+(w(Yd,24)+ce|0)>>2]=Zd,Vd=q[Wd+be>>2]+Vd|0,(0|ae)==(0|(Yd=Yd+1|0)))break}},n[10]=function(a){var ud=0,vd=0,wd=0,xd=0,yd=0,zd=0,Ad=0;if(!(q[380+(a|=0)>>2]||(0|(ud=q[a+200>>2]))<1))for(zd=(vd=q[a+204>>2])+(ud<<4)|0,ud=q[a+248>>2],xd=q[a+272>>2];;){if(q[ud>>2]&&(a=1,!((0|(wd=q[vd+12>>2]))<1)))for(wd<<=1,Ad=q[xd>>2];u[(yd=(a<<2)+Ad|0)>>2]=-u[yd>>2],(0|(a=a+2|0))<(0|wd););if(xd=xd+4|0,ud=ud+4|0,!((vd=vd+16|0)>>>0<zd>>>0))break}},n[11]=function(a,Fc,nd){Fc|=0,nd|=0;var pd,od=0;return fa(pd=q[20+(a|=0)>>2],Fc,od=nd>>>0<(od=q[a+16>>2]-pd|0)>>>0?nd:od),q[a+20>>2]=od+q[a+20>>2],0|nd},n[12]=function(a){return 0},n[13]=function(a,Fc,gd){Fc|=0,gd|=0;var id,hd=0,jd=0,kd=0,ld=0,md=0;for(L=id=L-32|0,hd=q[28+(a|=0)>>2],q[16+id>>2]=hd,kd=q[a+20>>2],q[28+id>>2]=gd,q[24+id>>2]=Fc,Fc=kd-hd|0,kd=(q[20+id>>2]=Fc)+gd|0,ld=2,Fc=16+id|0;;){a:{if((jd=(hd=0)|K(q[a+60>>2],0|Fc,0|ld,12+id|0))&&(q[1906]=jd,hd=-1),(0|(hd=hd?q[12+id>>2]=-1:q[12+id>>2]))!=(0|kd)){if(-1<(0|hd))break a;q[a+28>>2]=0,q[a+16>>2]=0,q[a+20>>2]=0,q[a>>2]=32|q[a>>2],2!=((a=0)|ld)&&(a=gd-q[Fc+4>>2]|0)}else Fc=q[a+44>>2],q[a+28>>2]=Fc,q[a+20>>2]=Fc,q[a+16>>2]=Fc+q[a+48>>2],a=gd;return L=32+id|0,0|a}jd=hd-((md=(jd=q[Fc+4>>2])>>>0<hd>>>0)?jd:0)|0,q[(Fc=md?Fc+8|0:Fc)>>2]=jd+q[Fc>>2],q[Fc+4>>2]=q[Fc+4>>2]-jd,kd=kd-hd|0,ld=ld-md|0}},n[14]=function(a,Fc,gd,hd){return M=0},n[15]=function(a,Ub,Fc,Gc,Hc,Ic){a|=0,Ub=+Ub,Fc|=0,Gc|=0,Hc|=0,Ic|=0;var Nc,Zc,dd,Jc=0,Kc=0,Lc=0,Mc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0,_c=0,$c=0;if(q[44+(L=Nc=L-560|0)>>2]=0,h(+Ub),Jc=0|e(1),dd=4294967295<e(0)>>>0?0:1,Zc=(0|Jc)<-1||(0|Jc)<=-1&&dd?(h(+(Ub=-Ub)),Jc=0|e(1),e(0),Yc=1,3184):2048&Hc?(Yc=1,3187):(Yc=1&Hc)?3190:3185,2146435072!=(2146435072&Jc))if(Ub=function na(a,oa){var qa,ra,pa=0;if(h(+a),pa=0|e(1),qa=0|e(0),2047!=(0|(pa=(ra=pa)>>>20&2047))){if(!pa)return pa=oa,oa=0==a?0:(a=na(0x10000000000000000*a,oa),q[oa>>2]+-64|0),q[pa>>2]=oa,a;q[oa>>2]=pa+-1022,f(0,0|qa),f(1,-2146435073&ra|1071644672),a=+g()}return a}(Ub,44+Nc|0),0!=(Ub+=Ub)&&(q[44+Nc>>2]=q[44+Nc>>2]+-1),Vc=16+Nc|0,97!=(0|(_c=32|Ic))){for(Jc=(0|Gc)<0,0!=Ub?(Mc=q[44+Nc>>2]+-28|0,q[44+Nc>>2]=Mc,Ub*=268435456):Mc=q[44+Nc>>2],Pc=Jc?6:Gc,Lc=Tc=(0|Mc)<0?48+Nc|0:336+Nc|0;Jc=Ub<4294967296&0<=Ub?~~Ub>>>0:0,Lc=(Gc=Lc)+4|0,0!=(Ub=1e9*(Ub-((q[Gc>>2]=Jc)>>>0))););if((0|Mc)<1)Jc=Lc,Kc=Tc;else for(Kc=Tc;;){if(Uc=(0|Mc)<29?Mc:29,!((Jc=Lc+-4|0)>>>0<Kc>>>0)){for(Gc=Uc,Rc=0;Qc=0,$c=Rc,Rc=q[(Sc=Jc)>>2],Oc=31&Gc,Oc=32<=(63&Gc)>>>0?(Mc=Rc<<Oc,0):(Mc=(1<<Oc)-1&Rc>>>32-Oc,Rc<<Oc),Qc=Mc+Qc|0,Qc=(Rc=$c+Oc|0)>>>0<Oc>>>0?Qc+1|0:Qc,$c=Sc,Sc=gc(Rc=hc(Oc=Rc,Qc,1e9),M,1e9),q[$c>>2]=Oc-Sc,Kc>>>0<=(Jc=Jc+-4|0)>>>0;);(Gc=Rc)&&(q[(Kc=Kc+-4|0)>>2]=Gc)}for(;Kc>>>0<(Jc=Lc)>>>0&&!q[(Lc=Jc+-4|0)>>2];);if(Mc=q[44+Nc>>2]-Uc|0,Lc=Jc,!(0<(0|(q[44+Nc>>2]=Mc))))break}if((0|Mc)<=-1)for(Xc=1+((Pc+25|0)/9|0)|0,Uc=102==(0|_c);;){if(Rc=(0|Mc)<-9?9:0-Mc|0,Jc>>>0<=Kc>>>0)Kc=q[Kc>>2]?Kc:Kc+4|0;else{for(Sc=1e9>>>Rc,Oc=-1<<Rc^-1,Mc=0,Lc=Kc;Gc=q[Lc>>2],q[Lc>>2]=(Gc>>>Rc)+Mc,Mc=w(Sc,Gc&Oc),(Lc=Lc+4|0)>>>0<Jc>>>0;);Kc=q[Kc>>2]?Kc:Kc+4|0,Mc&&(q[Jc>>2]=Mc,Jc=Jc+4|0)}if(Mc=Rc+q[44+Nc>>2]|0,Jc=(0|Xc)<Jc-(Gc=Uc?Tc:Kc)>>2?Gc+(Xc<<2)|0:Jc,!((0|(q[44+Nc>>2]=Mc))<0))break}if(!(Jc>>>(Lc=0)<=Kc>>>0||(Lc=w(Tc-Kc>>2,9),Mc=10,(Gc=q[Kc>>2])>>>0<10)))for(;Lc=Lc+1|0,(Mc=w(Mc,10))>>>0<=Gc>>>0;);if((0|(Gc=(Pc-(102==(0|_c)?0:Lc)|0)-(103==(0|_c)&0!=(0|Pc))|0))<(w(Jc-Tc>>2,9)+-9|0)){if(Qc=(Tc+((Oc=(0|(Sc=Gc+9216|0))/9|0)<<2)|0)-4092|0,Gc=10,(0|(Mc=Sc-w(Oc,9)|0))<=7)for(;Gc=w(Gc,10),Oc=(0|Mc)<7,Mc=Mc+1|0,Oc;);if(Xc=Qc+4|0,((Rc=(Uc=q[Qc>>2])-w(Gc,Sc=(Uc>>>0)/(Gc>>>0)|0)|0)||(0|Xc)!=(0|Jc))&&(Wc=Rc>>>0<(Oc=Gc>>>1)>>>0?.5:(0|Jc)==(0|Xc)&&(0|Oc)==(0|Rc)?1:1.5,Ub=1&Sc?9007199254740994:9007199254740992,!Yc|45!=r[0|Zc]||(Wc=-Wc,Ub=-Ub),Oc=Uc-Rc|0,q[Qc>>2]=Oc,Ub+Wc!=Ub)){if(Gc=Gc+Oc|0,1e9<=(q[Qc>>2]=Gc)>>>0)for(;(Qc=Qc+-4|(q[Qc>>2]=0))>>>0<Kc>>>0&&(q[(Kc=Kc+-4|0)>>2]=0),Gc=q[Qc>>2]+1|0,999999999<(q[Qc>>2]=Gc)>>>0;);if(Lc=w(Tc-Kc>>2,9),Mc=10,!((Gc=q[Kc>>2])>>>0<10))for(;Lc=Lc+1|0,(Mc=w(Mc,10))>>>0<=Gc>>>0;);}Jc=(Gc=Qc+4|0)>>>0<Jc>>>0?Gc:Jc}j:{for(;;){if((Uc=Jc)>>>(Sc=0)<=Kc>>>0)break j;if(q[(Jc=Uc+-4|0)>>2])break}Sc=1}if(103==(0|_c)){if(Pc=((Gc=(0|Lc)<(0|(Jc=Pc||1))&-5<(0|Lc))?-1^Lc:-1)+Jc|0,Ic=(Gc?-1:-2)+Ic|0,!(Oc=8&Hc)){if(Jc=9,Sc&&(Oc=q[Uc+-4>>2])&&!((Oc>>>(Jc=0))%(Gc=10)))for(;Jc=Jc+1|0,!((Oc>>>0)%((Gc=w(Gc,10))>>>0)););Gc=w(Uc-Tc>>2,9)+-9|0,Pc=102!=(32|Ic)?((Oc=0)|Pc)<(0|(Gc=0<(0|(Gc=(Gc+Lc|0)-Jc|0))?Gc:0))?Pc:Gc:((Oc=0)|Pc)<(0|(Gc=0<(0|(Gc=Gc-Jc|0))?Gc:0))?Pc:Gc}}else Oc=8&Hc;if(Qc=0!=(0|(Mc=Pc|Oc)),Gc=a,$c=Fc,Jc=0<(0|Lc)?Lc:0,102!=(0|(Rc=32|Ic))){if((Vc-(Jc=ea((Jc=Lc>>31)+Lc^Jc,0,Vc))|0)<=1)for(;o[0|(Jc=Jc+-1|0)]=48,(Vc-Jc|0)<2;);o[0|(Xc=Jc+-2|0)]=Ic,o[Jc+-1|0]=(0|Lc)<0?45:43,Jc=Vc-Xc|0}_(Gc,32,$c,Qc=1+(Jc+(Qc+(Pc+Yc|0)|0)|0)|0,Hc),Z(a,Zc,Yc),_(a,48,Fc,Qc,65536^Hc);n:{o:{p:{if(102==(0|Rc)){for(Gc=16+Nc|8,Lc=16+Nc|9,Kc=Ic=Tc>>>0<Kc>>>0?Tc:Kc;;){Jc=ea(q[Kc>>2],0,Lc);q:if((0|Ic)==(0|Kc))(0|Jc)==(0|Lc)&&(o[24+Nc|0]=48,Jc=Gc);else{if(Jc>>>0<=16+Nc>>>0)break q;for(;o[0|(Jc=Jc+-1|0)]=48,16+Nc>>>0<Jc>>>0;);}if(Z(a,Jc,Lc-Jc|0),!((Kc=Kc+4|0)>>>0<=Tc>>>0))break}if(Mc&&Z(a,3219,1),(0|Pc)<1|Uc>>>0<=Kc>>>0)break p;for(;;){if(16+Nc>>>0<(Jc=ea(q[Kc>>2],0,Lc))>>>0)for(;o[0|(Jc=Jc+-1|0)]=48,16+Nc>>>0<Jc>>>0;);if(Z(a,Jc,(0|Pc)<9?Pc:9),Jc=Pc+-9|0,Uc>>>0<=(Kc=Kc+4|0)>>>0)break o;if(Gc=9<(0|Pc),Pc=Jc,!Gc)break}break o}r:if(!((0|Pc)<0))for(Ic=Sc?Uc:Kc+4|0,Gc=16+Nc|8,Tc=16+Nc|9,Lc=Kc;;){(0|Tc)==(0|(Jc=ea(q[Lc>>2],0,Tc)))&&(o[24+Nc|0]=48,Jc=Gc);s:if((0|Kc)==(0|Lc))Z(a,Jc,1),Jc=Jc+1|0,(0|Pc)<1&&!Oc||Z(a,3219,1);else{if(Jc>>>0<=16+Nc>>>0)break s;for(;o[0|(Jc=Jc+-1|0)]=48,16+Nc>>>0<Jc>>>0;);}if(Z(a,Rc=Jc,(0|(Jc=Tc-Jc|0))<(0|Pc)?Jc:Pc),Pc=Pc-Jc|0,Ic>>>0<=(Lc=Lc+4|0)>>>0)break r;if(!(-1<(0|Pc)))break}_(a,48,Pc+18|0,18,0),Z(a,Xc,Vc-Xc|0);break n}Jc=Pc}_(a,48,Jc+9|0,9,0)}}else{if(Oc=(Tc=32&Ic)?9+Zc|0:Zc,!(11<Gc>>>0)&&(Jc=12-Gc|0)){for(Wc=8;Wc*=16,Jc=Jc+-1|0;);Ub=45!=r[0|Oc]?Ub+Wc-Wc:-(Wc+(-Ub-Wc))}for((0|Vc)==(0|(Jc=ea((Lc=(Jc=q[44+Nc>>2])>>31)^Jc+Lc,0,Vc)))&&(o[15+Nc|0]=48,Jc=15+Nc|0),Pc=2|Yc,Lc=q[44+Nc>>2],o[0|(Sc=Jc+-2|0)]=Ic+15,o[Jc+-1|0]=(0|Lc)<0?45:43,Jc=8&Hc,Kc=16+Nc|0;Ic=Kc,Rc=Tc,Lc=y(Ub)<2147483648?~~Ub:-2147483648,o[0|Kc]=Rc|r[Lc+3168|0],1!=((Kc=Ic+1|0)-(16+Nc|0)|0)|(0==(Ub=16*(Ub-(0|Lc)))?!(Jc|0<(0|Gc)):0)||(o[Ic+1|0]=46,Kc=Ic+2|0),0!=Ub;);_(a,32,Fc,Qc=(Ic=!Gc|(0|Gc)<=((Kc-Nc|0)-18|0)?((Vc-(16+Nc|0)|0)-Sc|0)+Kc|0:2+((Gc+Vc|0)-Sc|0)|0)+Pc|0,Hc),Z(a,Oc,Pc),_(a,48,Fc,Qc,65536^Hc),Z(a,16+Nc|0,Gc=Kc-(16+Nc|0)|0),_(a,48,Ic-((Jc=Gc)+(Gc=Vc-Sc|0)|0)|0,0,0),Z(a,Sc,Gc)}else _(a,32,Fc,Qc=Yc+3|0,-65537&Hc),Z(a,Zc,Yc),Gc=Ic>>>5&1,Z(a,Ub!=Ub?Gc?3211:3215:Gc?3203:3207,3);return _(a,32,Fc,Qc,8192^Hc),L=560+Nc|0,0|((0|Qc)<(0|Fc)?Fc:Qc)},n[16]=function(a,Ub){var uc,Dc,Ec;a|=0,Ub=q[(uc=Ub|=0)>>2]+15&-16,q[uc>>2]=Ub+16,Dc=a,Ec=function(a,Ub,Vb,lc){var oc,qc,rc,mc=0,nc=0,pc=0;L=oc=L-32|0,mc=(qc=mc=2147483647&lc)-1006698496|0,(nc=pc=Vb)>>>0<0&&(mc=mc+1|0),rc=nc,nc=mc,mc=qc-1140785152|0,pc>>>0<0&&(mc=mc+1|0);a:if((0|mc)==(0|nc)&rc>>>0<pc>>>0|nc>>>0<mc>>>0){if(mc=lc<<4|Vb>>>28,Vb=Vb<<4|Ub>>>28,134217728==(0|(pc=Ub&=268435455))&1<=a>>>0|134217728<Ub>>>0){mc=mc+1073741824|0,(a=Vb+1|0)>>>0<1&&(mc=mc+1|0),nc=a;break a}if(mc=mc-(((nc=Vb)>>>0<0)+-1073741824|0)|0,a|134217728^pc)break a;(a=nc+(1&nc)|0)>>>0<nc>>>0&&(mc=mc+1|0),nc=a}else(!pc&2147418112==(0|qc)?!(a|Ub):2147418112==(0|qc)&pc>>>0<0|qc>>>0<2147418112)?(mc=2146435072,1140785151==((nc=0)|qc)&4294967295<pc>>>0|1140785151<qc>>>0||(pc=qc>>>16)>>>(mc=0)<15249||(function(a,Ub,Vb,lc,tc,uc){var zc=0,Ac=0,Bc=0,Cc=0;a:if(64&uc)Ub=31&(Vb=uc-64|0),Ub=32<=(63&Vb)>>>0?(Vb=0,tc>>>Ub):(Vb=tc>>>Ub,((1<<Ub)-1&tc)<<32-Ub|lc>>>Ub),tc=lc=0;else{if(!uc)break a;Ac=tc,Bc=lc,zc=31&(Cc=64-uc|0),Cc=32<=(63&Cc)>>>0?(Ac=Bc<<zc,0):(Ac=(1<<zc)-1&Bc>>>32-zc|Ac<<zc,Bc<<zc),Bc=Ub,Ub=31&(zc=uc),Ub=32<=(63&zc)>>>0?(zc=0,Vb>>>Ub):(zc=Vb>>>Ub,((1<<Ub)-1&Vb)<<32-Ub|Bc>>>Ub),Ub|=Cc,Vb=zc|Ac,zc=lc,lc=31&uc,lc=32<=(63&uc)>>>0?(Ac=0,tc>>>lc):(Ac=tc>>>lc,((1<<lc)-1&tc)<<32-lc|zc>>>lc),tc=Ac}q[a>>2]=Ub,q[4+a>>2]=Vb,q[8+a>>2]=lc,q[12+a>>2]=tc}(oc,a,Ub,Vb,mc=65535&lc|65536,15361-pc|0),function(a,Ub,Vb,lc,tc,uc){var vc=0,wc=0,xc=0,yc=0;64&uc?(lc=Ub,Ub=31&(tc=uc+-64|0),32<=(63&tc)>>>0?(tc=lc<<Ub,lc=0):(tc=(1<<Ub)-1&lc>>>32-Ub|Vb<<Ub,lc<<=Ub),Vb=Ub=0):uc&&(vc=lc,lc=31&(xc=uc),yc=32<=(63&uc)>>>0?(wc=vc<<lc,0):(wc=(1<<lc)-1&vc>>>32-lc|tc<<lc,vc<<lc),lc=Vb,vc=Ub,tc=31&(uc=64-uc|0),32<=(63&uc)>>>0?(uc=0,lc>>>=tc):(uc=lc>>>tc,lc=((1<<tc)-1&lc)<<32-tc|vc>>>tc),lc|=yc,tc=uc|wc,uc=Ub,Ub=31&xc,Ub=32<=(63&xc)>>>0?(wc=uc<<Ub,0):(wc=(1<<Ub)-1&uc>>>32-Ub|Vb<<Ub,uc<<Ub),Vb=wc),q[a>>2]=Ub,q[4+a>>2]=Vb,q[8+a>>2]=lc,q[12+a>>2]=tc}(16+oc|0,a,Ub,Vb,mc,pc+-15233|0),Vb=q[4+oc>>2],a=q[8+oc>>2],mc=q[12+oc>>2]<<4|a>>>28,nc=a<<4|Vb>>>28,134217728==(0|(Vb=a=268435455&Vb))&1<=(Ub=q[oc>>2]|(0!=(q[16+oc>>2]|q[24+oc>>2])|0!=(q[20+oc>>2]|q[28+oc>>2])))>>>0|134217728<a>>>0?((a=nc+1|0)>>>0<1&&(mc=mc+1|0),nc=a):Ub|134217728^Vb||((a=nc+(1&nc)|0)>>>0<nc>>>0&&(mc=mc+1|0),nc=a))):(nc=Vb<<4|Ub>>>28,mc=524287&(mc=lc<<4|Vb>>>28)|2146959360);return L=32+oc|0,f(0,0|nc),f(1,-2147483648&lc|mc),+g()}(q[Ub>>2],q[Ub+4>>2],q[Ub+8>>2],q[Ub+12>>2]),v[Dc>>3]=Ec},{__wasm_call_ctors:function(){},csmGetVersion:function(){return 67108864},csmGetLatestMocVersion:function(){return 3},csmGetMocVersion:function(a,Ub){return Ub|=0,L=Ub=L-16|0,a=(a|=0)?ma(a)?(Y(4,1533,0),0):r[a+4|0]:(q[Ub+4>>2]=1246,q[Ub>>2]=1671,Y(4,1087,Ub),0),L=Ub+16|0,0|a},csmSetLogFunction:function(a){a|=0,q[1641]=a},csmReviveMocInPlace:function(a,qi){var ri;return qi|=0,L=ri=L-48|0,a=(a|=0)?(a+63&-64)==(0|a)?(qi+63&-64)==(0|qi)&&qi?function(a){var Ve,qe=0,re=0,Je=0,We=0,Xe=0,Ye=0,Ze=0,_e=0,$e=0,af=0;if(q[24+(L=Ve=L-32|0)>>2]=0,q[16+Ve>>2]=4,function(a){var td;sa(16+(L=td=L-272|0)|0,1611,q[12+td>>2]=a),function(a){var sd;q[(L=sd=L-16|0)>>2]=a,function(a,Fc){var gd;ra(a,1176,q[12+(L=gd=L-16|0)>>2]=Fc,0,0),L=16+gd|0}(q[670],sd),L=16+sd|0}(16+td|0),L=272+td|0}(16+Ve|(q[20+Ve>>2]=0)),ma(a))Y(4,1183,0),a=0;else if(4<=(re=r[a+4|0])>>>0)q[4+Ve>>2]=re,q[Ve>>2]=3,Y(4,1332,Ve),a=0;else{for(1!=(0|(We=!r[a+5|0]))&&(ca(a+4|0,1),X(a- -64|0,4,160),o[a+5|0]=0),qe=a- -64|0,Je=102,re=a+704|0;q[re>>2]=q[qe>>2]+a,re=re+4|0,qe=qe+4|0,Je=Je+-1|0;);if(1!=(0|We)&&(re=r[a+4|0],X(q[a+704>>2],4,32),ca(q[a+708>>2],4),ca(q[a+708>>2]+4|0,4),ca(q[a+708>>2]+8|0,4),ca(q[a+708>>2]+12|0,4),ca(q[a+708>>2]+16|0,4),ca(q[a+708>>2]+20|0,1),X(q[a+720>>2],4,q[q[a+704>>2]>>2]),X(q[a+724>>2],4,q[q[a+704>>2]>>2]),X(q[a+728>>2],4,q[q[a+704>>2]>>2]),X(q[a+732>>2],4,q[q[a+704>>2]>>2]),X(q[a+736>>2],4,q[q[a+704>>2]>>2]),X(q[a+740>>2],4,q[q[a+704>>2]>>2]),X(q[a+752>>2],4,q[q[a+704>>2]+4>>2]),X(q[a+756>>2],4,q[q[a+704>>2]+4>>2]),X(q[a+760>>2],4,q[q[a+704>>2]+4>>2]),X(q[a+764>>2],4,q[q[a+704>>2]+4>>2]),X(q[a+768>>2],4,q[q[a+704>>2]+4>>2]),X(q[a+772>>2],4,q[q[a+704>>2]+4>>2]),X(q[a+776>>2],4,q[q[a+704>>2]+4>>2]),X(q[a+780>>2],4,q[q[a+704>>2]+8>>2]),X(q[a+784>>2],4,q[q[a+704>>2]+8>>2]),X(q[a+788>>2],4,q[q[a+704>>2]+8>>2]),X(q[a+792>>2],4,q[q[a+704>>2]+8>>2]),X(q[a+796>>2],4,q[q[a+704>>2]+8>>2]),X(q[a+800>>2],4,q[q[a+704>>2]+8>>2]),X(q[a+804>>2],4,q[q[a+704>>2]+12>>2]),X(q[a+808>>2],4,q[q[a+704>>2]+12>>2]),X(q[a+812>>2],4,q[q[a+704>>2]+12>>2]),X(q[a+816>>2],4,q[q[a+704>>2]+12>>2]),X(q[a+840>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+844>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+848>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+852>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+856>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+860>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+864>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+868>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+872>>2],1,q[q[a+704>>2]+16>>2]),X(q[a+876>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+880>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+884>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+888>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+892>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+896>>2],4,q[q[a+704>>2]+16>>2]),X(q[a+908>>2],4,q[q[a+704>>2]+20>>2]),X(q[a+912>>2],4,q[q[a+704>>2]+20>>2]),X(q[a+916>>2],4,q[q[a+704>>2]+20>>2]),X(q[a+920>>2],4,q[q[a+704>>2]+20>>2]),X(q[a+924>>2],4,q[q[a+704>>2]+20>>2]),X(q[a+928>>2],4,q[q[a+704>>2]+20>>2]),X(q[a+932>>2],4,q[q[a+704>>2]+20>>2]),X(q[a+936>>2],4,q[q[a+704>>2]+24>>2]),X(q[a+940>>2],4,q[q[a+704>>2]+28>>2]),X(q[a+944>>2],4,q[q[a+704>>2]+28>>2]),X(q[a+948>>2],4,q[q[a+704>>2]+32>>2]),X(q[a+952>>2],4,q[q[a+704>>2]+32>>2]),X(q[a+956>>2],4,q[q[a+704>>2]+32>>2]),X(q[a+960>>2],4,q[q[a+704>>2]+32>>2]),X(q[a+964>>2],4,q[q[a+704>>2]+32>>2]),X(q[a+968>>2],4,q[q[a+704>>2]+32>>2]),X(q[a+972>>2],4,q[q[a+704>>2]+32>>2]),X(q[a+976>>2],4,q[q[a+704>>2]+36>>2]),X(q[a+980>>2],4,q[q[a+704>>2]+36>>2]),X(q[a+984>>2],4,q[q[a+704>>2]+36>>2]),X(q[a+988>>2],4,q[q[a+704>>2]+40>>2]),X(q[a+992>>2],4,q[q[a+704>>2]+44>>2]),X(q[a+996>>2],4,q[q[a+704>>2]+48>>2]),X(q[a+1e3>>2],4,q[q[a+704>>2]+48>>2]),X(q[a+1004>>2],4,q[q[a+704>>2]+52>>2]),X(q[a+1008>>2],4,q[q[a+704>>2]+52>>2]),X(q[a+1012>>2],4,q[q[a+704>>2]+56>>2]),X(q[a+1016>>2],4,q[q[a+704>>2]+60>>2]),X(q[a+1020>>2],2,q[q[a+704>>2]+64>>2]),X(q[a+1024>>2],4,q[q[a+704>>2]+68>>2]),X(q[a+1028>>2],4,q[q[a+704>>2]+72>>2]),X(q[a+1032>>2],4,q[q[a+704>>2]+72>>2]),X(q[a+1036>>2],4,q[q[a+704>>2]+72>>2]),X(q[a+1040>>2],4,q[q[a+704>>2]+72>>2]),X(q[a+1044>>2],4,q[q[a+704>>2]+72>>2]),X(q[a+1048>>2],4,q[q[a+704>>2]+76>>2]),X(q[a+1052>>2],4,q[q[a+704>>2]+76>>2]),X(q[a+1056>>2],4,q[q[a+704>>2]+76>>2]),X(q[a+1068>>2],4,q[q[a+704>>2]+80>>2]),X(q[a+1072>>2],4,q[q[a+704>>2]+80>>2]),X(q[a+1076>>2],4,q[q[a+704>>2]+80>>2]),X(q[a+1080>>2],4,q[q[a+704>>2]+80>>2]),X(q[a+1084>>2],4,q[q[a+704>>2]+80>>2]),X(q[a+1088>>2],4,q[q[a+704>>2]+80>>2]),X(q[a+1092>>2],4,q[q[a+704>>2]+80>>2]),X(q[a+1096>>2],4,q[q[a+704>>2]+84>>2]),X(q[a+1100>>2],2,q[q[a+704>>2]+84>>2]),X(q[a+1104>>2],4,q[q[a+704>>2]+88>>2]),re>>>0<2||X(q[a+1108>>2],4,q[q[a+704>>2]+8>>2])),q[1643]=5,q[1642]=6,q[1644]=7,q[1645]=8,q[1646]=9,q[1647]=10,qe=q[a+704>>2],1<=q[qe>>2])for(re=0;q[q[a+712>>2]+(re<<2)>>2]=q[a+716>>2]+(re<<6),re=re+1|0,qe=q[a+704>>2],(0|re)<q[qe>>2];);if(1<=q[qe+4>>2])for(re=0;q[q[a+744>>2]+(re<<2)>>2]=q[a+748>>2]+(re<<6),re=re+1|0,qe=q[a+704>>2],(0|re)<q[qe+4>>2];);if(1<=q[qe+16>>2])for(re=0;q[(qe=re<<2)+q[a+820>>2]>>2]=q[a+836>>2]+(re<<6),q[qe+q[a+824>>2]>>2]=q[a+1016>>2]+(q[qe+q[a+880>>2]>>2]<<2),q[qe+q[a+828>>2]>>2]=q[a+1020>>2]+(q[qe+q[a+884>>2]>>2]<<1),q[qe+q[a+832>>2]>>2]=q[a+1024>>2]+(q[qe+q[a+892>>2]>>2]<<2),re=re+1|0,qe=q[a+704>>2],(0|re)<q[qe+16>>2];);if(1<=q[qe+20>>2])for(re=0;q[q[a+900>>2]+(re<<2)>>2]=q[a+904>>2]+(re<<6),re=re+1|0,qe=q[a+704>>2],(0|re)<q[qe+20>>2];);if(1<=q[qe+80>>2])for(re=0;q[q[a+1060>>2]+(re<<2)>>2]=q[a+1064>>2]+(re<<6),re=re+1|0,qe=q[a+704>>2],(0|re)<q[qe+80>>2];);if(!(1&o[q[a+708>>2]+20|0]||(0|(We=q[qe+16>>2]))<1)){for(Ye=q[a+888>>2],Ze=q[a+884>>2],Xe=q[a+1020>>2],re=0;;){if(1<(0|(Je=q[(qe=re<<2)+Ye>>2])))for(_e=Je+-1|0,$e=Xe+(q[qe+Ze>>2]<<1)|0,qe=0;af=s[(Je=(qe<<1)+$e|0)>>1],p[Je>>1]=s[Je+4>>1],p[Je+4>>1]=af,(0|(qe=qe+3|0))<(0|_e););if((0|We)==(0|(re=re+1|0)))break}for(re=q[a+876>>2],Ye=q[a+880>>2],Ze=q[a+1016>>2],Je=0;;){if(1<=(0|(Xe=q[(qe=Je<<2)+re>>2])))for(Xe=(qe=Ze+(q[qe+Ye>>2]<<2)|0)+(Xe<<3)|0,qe=qe+4|0;u[qe>>2]=x(1)-u[qe>>2],(qe=qe+8|0)>>>0<Xe>>>0;);if((0|We)==(0|(Je=Je+1|0)))break}}}return L=32+Ve|0,a}(a):(q[20+ri>>2]=1592,q[16+ri>>2]=1688,Y(4,1087,16+ri|0),0):(q[36+ri>>2]=1441,q[32+ri>>2]=1688,Y(4,1087,32+ri|0),0):(q[4+ri>>2]=1246,q[ri>>2]=1688,Y(4,1087,ri),0),L=48+ri|0,0|a},csmReadCanvasInfo:function(a,_h,$h,ai){var bi;_h|=0,$h|=0,ai|=0,L=bi=L+-64|0,(a|=0)?_h?$h?ai?(a=q[q[a>>2]+708>>2],q[_h>>2]=q[a+12>>2],q[_h+4>>2]=q[a+16>>2],q[$h>>2]=q[a+4>>2],q[$h+4>>2]=q[a+8>>2],q[ai>>2]=q[a>>2]):(q[52+bi>>2]=1782,q[48+bi>>2]=1708,Y(4,1087,48+bi|0)):(q[36+bi>>2]=1753,q[32+bi>>2]=1708,Y(4,1087,32+bi|0)):(q[20+bi>>2]=1726,q[16+bi>>2]=1708,Y(4,1087,16+bi|0)):(q[4+bi>>2]=1651,q[bi>>2]=1708,Y(4,1087,bi)),L=64+bi|0},csmGetSizeofModel:wa,csmInitializeModelInPlace:va,csmUpdateModel:function(a){var Zh;L=Zh=L-16|0,(a|=0)?ta(a):(q[4+Zh>>2]=1651,q[Zh>>2]=1890,Y(4,1087,Zh)),L=16+Zh|0},csmGetParameterCount:function(a){var Yh;return L=Yh=L-16|0,a=(a|=0)?q[a+292>>2]:(q[4+Yh>>2]=1651,q[Yh>>2]=1905,Y(4,1087,Yh),-1),L=16+Yh|0,0|a},csmGetParameterIds:function(a){var Xh;return L=Xh=L-16|0,a=(a|=0)?q[q[a>>2]+900>>2]:(q[4+Xh>>2]=1651,q[Xh>>2]=1926,Y(4,1087,Xh),0),L=16+Xh|0,0|a},csmGetParameterMinimumValues:function(a){var Wh;return L=Wh=L-16|0,a=(a|=0)?q[q[a>>2]+912>>2]:(q[4+Wh>>2]=1651,q[Wh>>2]=1945,Y(4,1087,Wh),0),L=16+Wh|0,0|a},csmGetParameterMaximumValues:function(a){var Vh;return L=Vh=L-16|0,a=(a|=0)?q[q[a>>2]+908>>2]:(q[4+Vh>>2]=1651,q[Vh>>2]=1974,Y(4,1087,Vh),0),L=16+Vh|0,0|a},csmGetParameterDefaultValues:function(a){var Uh;return L=Uh=L-16|0,a=(a|=0)?q[q[a>>2]+916>>2]:(q[4+Uh>>2]=1651,q[Uh>>2]=2003,Y(4,1087,Uh),0),L=16+Uh|0,0|a},csmGetParameterValues:function(a){var Sh;return L=Sh=L-16|0,a=(a|=0)?q[a+300>>2]:(q[4+Sh>>2]=1651,q[Sh>>2]=2032,Y(4,1087,Sh),0),L=16+Sh|0,0|a},csmGetPartCount:function(a){var Rh;return L=Rh=L-16|0,a=(a|=0)?q[a+4>>2]:(q[4+Rh>>2]=1651,q[Rh>>2]=2054,Y(4,1087,Rh),-1),L=16+Rh|0,0|a},csmGetPartIds:function(a){var Qh;return L=Qh=L-16|0,a=(a|=0)?q[q[a>>2]+712>>2]:(q[4+Qh>>2]=1651,q[Qh>>2]=2070,Y(4,1087,Qh),0),L=16+Qh|0,0|a},csmGetPartOpacities:function(a){var Ph;return L=Ph=L-16|0,a=(a|=0)?q[a+52>>2]:(q[4+Ph>>2]=1651,q[Ph>>2]=2084,Y(4,1087,Ph),0),L=16+Ph|0,0|a},csmGetPartParentPartIndices:function(a){var Oh;return L=Oh=L-16|0,a=(a|=0)?q[q[a>>2]+740>>2]:(q[4+Oh>>2]=1651,q[Oh>>2]=2104,Y(4,1087,Oh),0),L=16+Oh|0,0|a},csmGetDrawableCount:function(a){var Nh;return L=Nh=L-16|0,a=(a|=0)?q[a+200>>2]:(q[4+Nh>>2]=1651,q[Nh>>2]=2132,Y(4,1087,Nh),-1),L=16+Nh|0,0|a},csmGetDrawableIds:function(a){var Mh;return L=Mh=L-16|0,a=(a|=0)?q[q[a>>2]+820>>2]:(q[4+Mh>>2]=1651,q[Mh>>2]=2152,Y(4,1087,Mh),0),L=16+Mh|0,0|a},csmGetDrawableConstantFlags:function(a){var Lh;return L=Lh=L-16|0,a=(a|=0)?q[q[a>>2]+872>>2]:(q[4+Lh>>2]=1651,q[Lh>>2]=2170,Y(4,1087,Lh),0),L=16+Lh|0,0|a},csmGetDrawableDynamicFlags:function(a){var Kh;return L=Kh=L-16|0,a=(a|=0)?q[a+260>>2]:(q[4+Kh>>2]=1651,q[Kh>>2]=2198,Y(4,1087,Kh),0),L=16+Kh|0,0|a},csmGetDrawableTextureIndices:function(a){var Jh;return L=Jh=L-16|0,a=(a|=0)?q[q[a>>2]+868>>2]:(q[4+Jh>>2]=1651,q[Jh>>2]=2225,Y(4,1087,Jh),0),L=16+Jh|0,0|a},csmGetDrawableDrawOrders:function(a){var Ih;return L=Ih=L-16|0,a=(a|=0)?q[a+268>>2]:(q[4+Ih>>2]=1651,q[Ih>>2]=2254,Y(4,1087,Ih),0),L=16+Ih|0,0|a},csmGetDrawableRenderOrders:function(a){var Hh;return L=Hh=L-16|0,a=(a|=0)?q[a+264>>2]:(q[4+Hh>>2]=1651,q[Hh>>2]=2279,Y(4,1087,Hh),0),L=16+Hh|0,0|a},csmGetDrawableOpacities:function(a){var Gh;return L=Gh=L-16|0,a=(a|=0)?q[a+276>>2]:(q[4+Gh>>2]=1651,q[Gh>>2]=2306,Y(4,1087,Gh),0),L=16+Gh|0,0|a},csmGetDrawableMaskCounts:function(a){var Fh;return L=Fh=L-16|0,a=(a|=0)?q[q[a>>2]+896>>2]:(q[4+Fh>>2]=1651,q[Fh>>2]=2330,Y(4,1087,Fh),0),L=16+Fh|0,0|a},csmGetDrawableMasks:function(a){var Eh;return L=Eh=L-16|0,a=(a|=0)?q[q[a>>2]+832>>2]:(q[4+Eh>>2]=1651,q[Eh>>2]=2355,Y(4,1087,Eh),0),L=16+Eh|0,0|a},csmGetDrawableVertexCounts:function(a){var Dh;return L=Dh=L-16|0,a=(a|=0)?q[q[a>>2]+876>>2]:(q[4+Dh>>2]=1651,q[Dh>>2]=2375,Y(4,1087,Dh),0),L=16+Dh|0,0|a},csmGetDrawableVertexPositions:function(a){var Ch;return L=Ch=L-16|0,a=(a|=0)?q[a+272>>2]:(q[4+Ch>>2]=1651,q[Ch>>2]=2402,Y(4,1087,Ch),0),L=16+Ch|0,0|a},csmGetDrawableVertexUvs:function(a){var Bh;return L=Bh=L-16|0,a=(a|=0)?q[q[a>>2]+824>>2]:(q[4+Bh>>2]=1651,q[Bh>>2]=2432,Y(4,1087,Bh),0),L=16+Bh|0,0|a},csmGetDrawableIndexCounts:function(a){var gh;return L=gh=L-16|0,a=(a|=0)?q[q[a>>2]+888>>2]:(q[4+gh>>2]=1651,q[gh>>2]=2456,Y(4,1087,gh),0),L=16+gh|0,0|a},csmGetDrawableIndices:function(a){var fh;return L=fh=L-16|0,a=(a|=0)?q[q[a>>2]+828>>2]:(q[4+fh>>2]=1651,q[fh>>2]=2482,Y(4,1087,fh),0),L=16+fh|0,0|a},csmResetDrawableDynamicFlags:function(a){var dh;L=dh=L-16|0,(a|=0)?q[a+256>>2]=1:(q[4+dh>>2]=1651,q[dh>>2]=2504,Y(4,1087,dh)),L=16+dh|0},csmMallocMoc:function(a){var rd;return ya(12+(L=rd=L-16|0)|0,64,a|=0),L=16+rd|0,q[12+rd>>2]},csmMallocModelAndInitialize:function(a){var Fc,nd=0,qd=0;return L=Fc=L-16|0,(a|=0)&&(ya(12+Fc|0,16,qd=wa(a))||(nd=va(a,q[12+Fc>>2],qd))||(za(q[12+Fc>>2]),nd=0)),L=16+Fc|0,0|nd},csmMalloc:function(a){return 0|ja(a|=0)},csmFree:function(a){za(a|=0)},stackSave:function(){return 0|L},stackAlloc:function(a){return 0|(L=L-(a|=0)&-16)},stackRestore:function(a){L=a|=0},__growWasmMemory:function(a){return 0|function(pagesToAdd){pagesToAdd|=0;var P=0|N(),Q=P+pagesToAdd|0;if(P<Q&&Q<65536){var R=new ArrayBuffer(w(Q,65536)),S=new global.Int8Array(R);S.set(o),o=S,o=new global.Int8Array(R),p=new global.Int16Array(R),q=new global.Int32Array(R),r=new global.Uint8Array(R),s=new global.Uint16Array(R),t=new global.Uint32Array(R),u=new global.Float32Array(R),v=new global.Float64Array(R),buffer=R,m.buffer=R}return P}(0|(a|=0))},dynCall_vi:function(a,_h){_h|=0,n[a|=0](_h)}};function X(a,b,c){var d=0,e=0,f=0;if(c)for(;;){if(c=c+-1|0,a>>>0<(d=(e=a+b|0)-1|0)>>>0)for(;f=r[0|a],o[0|a]=r[0|d],o[0|d]=f,(a=a+1|0)>>>0<(d=d+-1|0)>>>0;);if(a=e,!c)break}}function Y(a,b,c){var g;L=g=L-272|0,t[1640]>a>>>0||(a=q[1641])&&(sa(16+g|0,b,q[12+g>>2]=c),n[a](16+g|0)),L=272+g|0}function Z(a,b,c){32&r[0|a]||function(a,Ub,Fc){var Gc=0,Hc=0,Ic=0;a:{if(!(Gc=q[Fc+16>>2])){if(function(a){var Ub=0;return Ub=r[a+74|0],o[a+74|0]=Ub+-1|Ub,8&(Ub=q[a>>2])?(q[a>>2]=32|Ub,1):(q[a+4>>2]=0,q[a+8>>2]=0,Ub=q[a+44>>2],q[a+28>>2]=Ub,q[a+20>>2]=Ub,q[a+16>>2]=Ub+q[a+48>>2],0)}(Fc))break a;Gc=q[Fc+16>>2]}if(Gc-(Ic=q[Fc+20>>2])>>>0<Ub>>>0)return n[q[Fc+36>>2]](Fc,a,Ub);b:if(!(o[Fc+75|0]<0)){for(Gc=Ub;;){if(!(Hc=Gc))break b;if(10==r[(Gc=Hc+-1|0)+a|0])break}if(n[q[Fc+36>>2]](Fc,a,Hc)>>>0<Hc>>>0)break a;Ub=Ub-Hc|0,a=a+Hc|0,Ic=q[Fc+20>>2]}fa(Ic,a,Ub),q[Fc+20>>2]=q[Fc+20>>2]+Ub}}(b,c,a)}function _(a,b,c,h,i){var j,k=0,l=0;if(L=j=L-256|0,!(73728&i|(0|c)<=(0|h))){if(ba(j,b,(k=(i=c-h|0)>>>0<256)?i:256),b=a,l=j,!k){for(c=c-h|0;Z(a,j,256),255<(i=i+-256|0)>>>0;);i=255&c}Z(b,l,i)}L=256+j|0}function $(a){var b,c;return x((b=a*a)*b*(c=b*a)*(2718311493989822e-21*b-.00019839334836096632)+(c*(.008333329385889463*b-.16666666641626524)+a))}function aa(a){var h;return x(-.499999997251031*(a*=a)+1+.04166662332373906*(h=a*a)+a*h*(2439044879627741e-20*a-.001388676377460993))}function ba(a,i,m){var n=0,p=0,r=0,s=0;if(m&&(o[(n=a+m|0)-1|0]=i,o[0|a]=i,!(m>>>0<3||(o[n+-2|0]=i,o[a+1|0]=i,o[n+-3|0]=i,o[a+2|0]=i,m>>>0<7||(o[n+-4|0]=i,o[a+3|0]=i,m>>>0<9||(p=(n=0-a&3)+a|0,i=w(255&i,16843009),q[p>>2]=i,q[(n=(m=m-n&-4)+p|0)-4>>2]=i,m>>>0<9||(q[p+8>>2]=i,q[p+4>>2]=i,q[n+-8>>2]=i,q[n+-12>>2]=i,m>>>0<25||(q[p+24>>2]=i,q[p+20>>2]=i,q[p+16>>2]=i,q[p+12>>2]=i,q[n+-16>>2]=i,q[n+-20>>2]=i,q[n+-24>>2]=i,q[n+-28>>2]=i,(m=m-(s=4&p|24)|0)>>>0<32))))))))for(r=n=i,i=p+s|0;q[i+24>>2]=r,q[i+28>>2]=n,q[i+16>>2]=r,q[i+20>>2]=n,q[i+8>>2]=r,q[i+12>>2]=n,q[i>>2]=r,q[i+4>>2]=n,i=i+32|0,31<(m=m+-32|0)>>>0;);return a}function ca(a,i){var m=0;if(a>>>0<(i=(a+i|0)-1|0)>>>0)for(;m=r[0|a],o[0|a]=r[0|i],o[0|i]=m,(a=a+1|0)>>>0<(i=i+-1|0)>>>0;);}function da(a){var i;return(0|(a=(i=q[2052])+a|0))<=-1?(q[1906]=48,-1):a>>>0<=N()<<16>>>0||J(0|a)?(q[2052]=a,i):(q[1906]=48,-1)}function ea(a,q,t){var u=0,v=0,x=0;if(1==(0|q)&a>>>0<0|q>>>0<1)u=a;else for(;v=gc(u=hc(a,q,10),x=v=M,10),o[0|(t=t+-1|0)]=a-v|48,v=9==(0|q)&4294967295<a>>>0|9<q>>>0,a=u,q=x,v;);if(u)for(;a=(u>>>0)/10|0,o[0|(t=t+-1|0)]=u-w(a,10)|48,q=9<u>>>0,u=a,q;);return t}function fa(a,t,w){var y,z=0;if(8192<=w>>>0)I(0|a,0|t,0|w);else{y=a+w|0;a:if(3&(a^t))if(y>>>0<4)w=a;else if((z=y-4|0)>>>0<a>>>0)w=a;else for(w=a;o[0|w]=r[0|t],o[w+1|0]=r[t+1|0],o[w+2|0]=r[t+2|0],o[w+3|0]=r[t+3|0],t=t+4|0,(w=w+4|0)>>>0<=z>>>0;);else{b:if((0|w)<1)w=a;else if(3&a)for(w=a;;){if(o[0|w]=r[0|t],t=t+1|0,y>>>0<=(w=w+1|0)>>>0)break b;if(!(3&w))break}else w=a;if(!((a=-4&y)>>>0<64||(z=a+-64|0)>>>0<w>>>0))for(;q[w>>2]=q[t>>2],q[w+4>>2]=q[t+4>>2],q[w+8>>2]=q[t+8>>2],q[w+12>>2]=q[t+12>>2],q[w+16>>2]=q[t+16>>2],q[w+20>>2]=q[t+20>>2],q[w+24>>2]=q[t+24>>2],q[w+28>>2]=q[t+28>>2],q[w+32>>2]=q[t+32>>2],q[w+36>>2]=q[t+36>>2],q[w+40>>2]=q[t+40>>2],q[w+44>>2]=q[t+44>>2],q[w+48>>2]=q[t+48>>2],q[w+52>>2]=q[t+52>>2],q[w+56>>2]=q[t+56>>2],q[w+60>>2]=q[t+60>>2],t=t- -64|0,(w=w- -64|0)>>>0<=z>>>0;);if(a>>>0<=w>>>0)break a;for(;q[w>>2]=q[t>>2],t=t+4|0,(w=w+4|0)>>>0<a>>>0;);}if(w>>>0<y>>>0)for(;o[0|w]=r[0|t],t=t+1|0,(0|y)!=(0|(w=w+1|0)););}}function ga(a){return a+-48>>>0<10}function ha(a,o){a:if(1024<=(0|o)){if(a*=898846567431158e293,(0|o)<2047){o=o+-1023|0;break a}a*=898846567431158e293,o=((0|o)<3069?o:3069)+-2046|0}else-1023<(0|o)||(a*=22250738585072014e-324,o=-2045<(0|o)?o+1022|0:(a*=22250738585072014e-324,(-3066<(0|o)?o:-3066)+2044|0));return f(0,0),f(1,o+1023<<20),a*g()}function ia(a,t,A,B,C,D,E){var F,R,U,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,S=0,T=0;q[76+(L=F=L-80|0)>>2]=t,U=55+F|0,R=56+F|0,t=0;a:{b:for(;;){(0|P)<0||(P=(2147483647-P|0)<(0|t)?(q[1906]=61,-1):t+P|0);d:{e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{q:{if(J=q[76+F>>2],I=r[0|(t=J)]){for(;;){r:{s:{t:if(G=255&I){if(37!=(0|G))break s;for(I=t;;){if(37!=r[t+1|0])break t;if(G=t+2|0,q[76+F>>2]=G,I=I+1|0,H=r[t+2|0],t=G,37!=(0|H))break}}else I=t;if(t=I-J|0,a&&Z(a,J,t),t)continue b;Q=-1,I=1,K=!ga(o[q[76+(G=F)>>2]+1|0]),t=q[76+F>>2],K|36!=r[t+2|0]||(Q=o[t+1|0]+-48|0,S=1,I=3),t=I+t|0,q[G+76>>2]=t;u:if(31<(H=(M=o[(I=0)|t])+-32|0)>>>0)G=t;else if(G=t,75913&(H=1<<H))for(;;){if(G=t+1|0,q[76+F>>2]=G,I|=H,31<(H=(M=o[t+1|0])+-32|0)>>>0)break u;if(t=G,!(75913&(H=1<<H)))break}v:if(42!=(0|M)){if((0|(N=qa(76+F|0)))<0)break q;t=q[76+F>>2]}else{if(K=F,ga(o[G+1|0])&&(t=q[76+F>>2],36==r[t+2|0]))q[((o[t+1|0]<<2)+C|0)-192>>2]=10,N=q[((o[t+1|0]<<3)+B|0)-384>>2],S=1,t=t+3|0;else{if(S)break q;N=S=0,a&&(t=q[A>>2],q[A>>2]=t+4,N=q[t>>2]),t=q[76+F>>2]+1|0}if(q[K+76>>2]=t,-1<(0|N))break v;N=0-N|0,I|=8192}H=-1;y:if(46==r[0|t])if(42!=r[t+1|0])q[76+F>>2]=t+1,H=qa(76+F|0),t=q[76+F>>2];else{if(ga(o[t+2|0])&&(t=q[76+F>>2],36==r[t+3|0])){q[((o[t+2|0]<<2)+C|0)-192>>2]=10,H=q[((o[t+2|0]<<3)+B|0)-384>>2],t=t+4|0,q[76+F>>2]=t;break y}if(S)break q;H=a?(t=q[A>>2],q[A>>2]=t+4,q[t>>2]):0,t=q[76+F>>2]+2|0,q[76+F>>2]=t}for(G=0;;){if(T=G,O=-1,57<o[0|t]+-65>>>0)break a;if(M=t+1|0,q[76+F>>2]=M,G=o[0|t],t=M,!((G=r[2639+(G+w(T,58)|0)|0])+-1>>>0<8))break}if(!G)break a;A:{B:{C:{if(19==(0|G)){if((0|Q)<=-1)break C;break a}if((0|Q)<0)break B;q[(Q<<2)+C>>2]=G,G=q[4+(t=(Q<<3)+B|0)>>2],q[64+F>>2]=q[t>>2],q[68+F>>2]=G}if(t=0,!a)continue b;break A}if(!a)break d;pa(64+F|0,G,A,E),M=q[76+F>>2]}if(K=-65537&I,I=8192&I?K:I,Q=2684,G=R,t=o[M+-1|(O=0)],(M=(t=T&&3==(15&t)?-33&t:t)+-88|0)>>>0<=32)break r;D:{E:{F:{G:{if(6<(K=t+-65|0)>>>0){if(83!=(0|t))break e;if(!H)break G;G=q[64+F>>2];break E}switch(K-1|0){case 1:break F;case 0:case 2:break e;default:break p}}_(a,32,N,t=0,I);break D}q[12+F>>2]=0,q[8+F>>2]=q[64+F>>2],q[64+F>>2]=8+F,H=-1,G=8+F|0}t=0;H:{for(;;){if(!(J=q[G>>2]))break H;if((K=(0|(J=oa(4+F|0,J)))<0)|H-t>>>0<J>>>0)break;if(G=G+4|0,!((t=t+J|0)>>>0<H>>>0))break H}if(O=-1,K)break a}if(_(a,32,N,t,I),t)for(H=0,G=q[64+F>>2];;){if(!(J=q[G>>2]))break D;if((0|t)<(0|(H=(J=oa(4+F|0,J))+H|0)))break D;if(Z(a,4+F|0,J),G=G+4|0,!(H>>>0<t>>>0))break}else t=0}_(a,32,N,t,8192^I),t=(0|t)<(0|N)?N:t;continue b}G=t+1|0,q[76+F>>2]=G,I=r[t+1|0],t=G;continue}break}switch(M-1|0){case 21:break i;case 23:break k;case 22:break l;case 11:case 16:break m;case 10:break n;case 26:break o;case 8:case 12:case 13:case 14:break p;case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 9:case 15:case 17:case 18:case 19:case 20:case 24:case 25:case 27:case 29:case 30:break e;case 28:break h;default:break j}}if(O=P,a)break a;if(!S)break d;for(t=1;;){if(a=q[(t<<2)+C>>2]){if(pa((t<<3)+B|0,a,A,E),10!=(0|(t=t+(O=1)|0)))continue;break a}break}if(O=1,10<=t>>>0)break a;for(;;){if(q[(t<<2)+C>>2])break q;if(a=8<t>>>0,t=t+1|0,a)break}break a}O=-1;break a}t=0|n[D](a,v[64+F>>3],N,H,I,t);continue}G=(t=Ia(J=(t=q[64+F>>2])||2694,H))||H+J|0,I=K,H=t?t-J|0:H;break e}o[55+F|0]=q[64+F>>2],H=1,J=U,I=K;break e}if(t=K=q[68+F>>2],J=q[64+F>>2],(0|t)<-1||(0|t)<=-1&&!(4294967295<J>>>0)){t=0-(t+(0<J>>>0)|0)|0,J=0-J|0,q[64+F>>2]=J,q[68+F>>2]=t,O=1,Q=2684;break g}if(2048&I){O=1,Q=2685;break g}Q=(O=1&I)?2686:2684;break g}if(J=Oa(q[64+F>>2],q[68+F>>2],R),!(8&I))break f;H=(0|(t=R-J|0))<(0|H)?H:t+1|0;break f}H=8<H>>>0?H:8,I|=8,t=120}if(J=Na(q[64+F>>2],q[68+F>>2],R,32&t),!(8&I)|!(q[64+F>>2]|q[68+F>>2]))break f;Q=2684+(t>>>4)|0,O=2;break f}if(7<(G=255&T)>>>(t=0))continue;switch(G-1|0){default:case 0:q[q[64+F>>2]>>2]=P;continue;case 1:G=q[64+F>>2],q[G>>2]=P,q[G+4>>2]=P>>31;continue;case 2:p[q[64+F>>2]>>1]=P;continue;case 3:o[q[64+F>>2]]=P;continue;case 5:q[q[64+F>>2]>>2]=P;continue;case 4:continue;case 6:}G=q[64+F>>2],q[G>>2]=P,q[G+4>>2]=P>>31;continue}J=q[64+F>>2],t=q[68+F>>2],Q=2684}J=ea(J,t,R)}I=-1<(0|H)?-65537&I:I,H=!!((K=t=q[68+F>>2])|(M=q[64+F>>2]))|H?(0|(t=!(K|M)+(R-J|0)|0))<(0|H)?H:t:(J=R,0)}_(a,32,t=(0|N)<(0|(G=(H=(0|H)<(0|(K=G-J|0))?K:H)+O|0))?G:N,G,I),Z(a,Q,O),_(a,48,t,G,65536^I),_(a,48,H,K,0),Z(a,J,K),_(a,32,t,G,8192^I);continue}break}O=0}return L=80+F|0,O}function ja(a){var Y,o=0,w=0,A=0,B=0,C=0,D=0,E=0,V=0,W=0,X=0,Z=0,_=0;L=Y=L-16|0;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{if(a>>>0<=244){if(3&(o=(C=q[1923])>>>(a=(D=a>>>0<11?16:a+11&-8)>>>3))){a=(o=q[7740+(B=(w=a+(1&(-1^o))|0)<<3)>>2])+8|0,(0|(A=q[o+8>>2]))!=(0|(B=B+7732|0))?(q[A+12>>2]=B,q[B+8>>2]=A):(Z=7692,_=jc(w)&C,q[Z>>2]=_),w<<=3,q[o+4>>2]=3|w,q[4+(o=o+w|0)>>2]=1|q[o+4>>2];break a}if(D>>>0<=(V=q[1925])>>>0)break k;if(o){w=o=(a=(0-(a=(0-(w=2<<a)|w)&o<<a)&a)-1|0)>>>12&16,w|=o=(a>>>=o)>>>5&8,w|=o=(a>>>=o)>>>2&4,o=q[7740+(A=(w=((w|=o=(a>>>=o)>>>1&2)|(o=(a>>>=o)>>>1&1))+(a>>>o)|0)<<3)>>2],(0|(a=q[o+8>>2]))!=(0|(A=A+7732|0))?(q[a+12>>2]=A,q[A+8>>2]=a):(C=jc(w)&C,q[1923]=C),a=o+8|0,q[o+4>>2]=3|D,B=(w<<=3)-D|0,q[4+(E=o+D|0)>>2]=1|B,q[o+w>>2]=B,V&&(o=7732+((w=V>>>3)<<3)|0,A=q[1928],w=(w=1<<w)&C?q[o+8>>2]:(q[1923]=w|C,o),q[o+8>>2]=A,q[w+12>>2]=A,q[A+12>>2]=o,q[A+8>>2]=w),q[1928]=E,q[1925]=B;break a}if(!(X=q[1924]))break k;for(w=o=(a=(X&0-X)-1|0)>>>12&16,w|=o=(a>>>=o)>>>5&8,w|=o=(a>>>=o)>>>2&4,o=q[7996+(((w|=o=(a>>>=o)>>>1&2)|(o=(a>>>=o)>>>1&1))+(a>>>o)<<2)>>2],A=(-8&q[o+4>>2])-D|0,w=o;a=(a=q[w+16>>2])||q[w+20>>2];)A=(w=(B=(-8&q[a+4>>2])-D|0)>>>0<A>>>0)?B:A,o=w?a:o,w=a;if(W=q[o+24>>2],(0|(B=q[o+12>>2]))!=(0|o)){a=q[o+8>>2],q[a+12>>2]=B,q[B+8>>2]=a;break b}if(!(a=q[(w=o+20|0)>>2])){if(!(a=q[o+16>>2]))break j;w=o+16|0}for(;E=w,(a=q[(w=(B=a)+20|0)>>2])||(w=B+16|0,a=q[B+16>>2]););q[E>>2]=0;break b}if(D=-1,!(4294967231<a>>>0)&&(D=-8&(o=a+11|0),V=q[1924])){w=0-D|0,C=0,(o>>>=8)&&(C=31,16777215<D>>>0||(C=28+((a=((C=(o<<=A=o+1048320>>>16&8)<<(a=o+520192>>>16&4))<<(o=C+245760>>>16&2)>>>15)-(o|a|A)|0)<<1|D>>>a+21&1)|0));q:{r:{if(A=q[7996+(C<<2)>>2])for(o=D<<(31==(0|C)?0:25-(C>>>1)|0),a=0;;){if(!(w>>>0<=(E=(-8&q[A+4>>2])-D|0)>>>0||(B=A,w=E))){w=0,a=A;break r}if(E=q[A+20>>2],A=q[16+((o>>>29&4)+A|0)>>2],a=E?(0|E)==(0|A)?a:E:a,o<<=0!=(0|A),!A)break}else a=0;if(!(a|B)){if(!(a=(0-(a=2<<C)|a)&V))break k;A=o=(a=(a&0-a)-1|0)>>>12&16,A|=o=(a>>>=o)>>>5&8,A|=o=(a>>>=o)>>>2&4,a=q[7996+(((A|=o=(a>>>=o)>>>1&2)|(o=(a>>>=o)>>>1&1))+(a>>>o)<<2)>>2]}if(!a)break q}for(;w=(o=(A=(-8&q[a+4>>2])-D|0)>>>0<w>>>0)?A:w,B=o?a:B,a=(o=q[a+16>>2])||q[a+20>>2];);}if(!(!B|w>>>0>=q[1925]-D>>>0)){if(E=q[B+24>>2],(0|B)!=(0|(o=q[B+12>>2]))){a=q[B+8>>2],q[a+12>>2]=o,q[o+8>>2]=a;break c}if(!(a=q[(A=B+20|0)>>2])){if(!(a=q[B+16>>2]))break i;A=B+16|0}for(;C=A,(a=q[(A=(o=a)+20|0)>>2])||(A=o+16|0,a=q[o+16>>2]););q[C>>2]=0;break c}}}if(D>>>0<=(o=q[1925])>>>0){a=q[1928],16<=(w=o-D|0)>>>0?(q[1925]=w,A=a+D|0,q[1928]=A,q[A+4>>2]=1|w,q[a+o>>2]=w,q[a+4>>2]=3|D):(q[1928]=0,q[1925]=0,q[a+4>>2]=3|o,q[4+(o=a+o|0)>>2]=1|q[o+4>>2]),a=a+8|0;break a}if(D>>>0<(A=q[1926])>>>0){o=A-D|0,q[1926]=o,w=(a=q[1929])+D|0,q[1929]=w,q[w+4>>2]=1|o,q[a+4>>2]=3|D,a=a+8|0;break a}if((w=(C=(w=B=D+47|(a=0))+(o=q[2041]?q[2043]:(q[2044]=-1,q[2045]=-1,q[2042]=4096,q[2043]=4096,q[2041]=12+Y&-16^1431655768,q[2046]=0,q[2034]=0,4096))|0)&(E=0-o|0))>>>0<=D>>>0)break a;if((o=q[2033])&&(W=(V=q[2031])+w|0)>>>0<=V>>>0|o>>>0<W>>>0)break a;if(4&r[8136])break f;v:{w:{if(o=q[1929])for(a=8140;;){if((V=q[a>>2])+q[a+4>>2]>>>0>o>>>0&&V>>>0<=o>>>0)break w;if(!(a=q[a+8>>2]))break}if(-1==(0|(o=da(0))))break g;if(C=w,(A=(a=q[2042])+-1|0)&o&&(C=(w-o|0)+(o+A&0-a)|0),C>>>0<=D>>>0|2147483646<C>>>0)break g;if((a=q[2033])&&(E=(A=q[2031])+C|0)>>>0<=A>>>0|a>>>0<E>>>0)break g;if((0|o)!=(0|(a=da(C))))break v;break e}if(2147483646<(C=E&C-A)>>>0)break g;if((0|(o=da(C)))==(q[a>>2]+q[a+4>>2]|0))break h;a=o}if(!(D+48>>>0<=C>>>0|2147483646<C>>>0|-1==(0|(o=a)))){if(2147483646<(a=(a=q[2043])+(B-C|0)&0-a)>>>0)break e;if(-1!=(0|da(a))){C=a+C|0;break e}da(0-C|0);break g}if(-1!=(0|o))break e;break g}B=0;break b}o=0;break c}if(-1!=(0|o))break e}q[2034]=4|q[2034]}if(2147483646<w>>>0)break d;if(o=da(w),(a=da(0))>>>0<=o>>>0|-1==(0|o)|-1==(0|a))break d;if((C=a-o|0)>>>0<=D+40>>>0)break d}a=q[2031]+C|0,(q[2031]=a)>>>0>t[2032]&&(q[2032]=a);x:{y:{z:{if(w=q[1929]){for(a=8140;;){if(((A=q[a>>2])+(B=q[a+4>>2])|0)==(0|o))break z;if(!(a=q[a+8>>2]))break}break y}for((a=q[1927])>>>0<=o>>>0&&a||(q[1927]=o),a=0,q[2036]=C,q[2035]=o,q[1931]=-1,q[1932]=q[2041],q[2038]=0;A=7732+(w=a<<3)|0,q[w+7740>>2]=A,q[w+7744>>2]=A,32!=(0|(a=a+1|0)););A=(a=C+-40|0)-(w=o+8&7?-8-o&7:0)|0,q[1926]=A,w=o+w|0,q[1929]=w,q[w+4>>2]=1|A,q[4+(a+o|0)>>2]=40,q[1930]=q[2045];break x}if(!(8&r[a+12|0]|o>>>0<=w>>>0|w>>>0<A>>>0)){q[a+4>>2]=B+C,o=(a=w+8&7?-8-w&7:0)+w|0,q[1929]=o,a=(A=q[1926]+C|0)-a|0,q[1926]=a,q[o+4>>2]=1|a,q[4+(w+A|0)>>2]=40,q[1930]=q[2045];break x}}o>>>0<(B=q[1927])>>>0&&(q[1927]=o,B=0),A=o+C|0,a=8140;A:{B:{C:{D:{E:{F:{for(;(0|A)!=q[a>>2];)if(!(a=q[a+8>>2]))break F;if(!(8&r[a+12|0]))break E}for(a=8140;;){if((A=q[a>>2])>>>0<=w>>>0&&w>>>0<(B=A+q[a+4>>2]|0)>>>0)break D;a=q[a+8>>2]}}if(q[a>>2]=o,q[a+4>>2]=q[a+4>>2]+C,q[4+(W=(o+8&7?-8-o&7:0)+o|0)>>2]=3|D,a=((o=A+(A+8&7?-8-A&7:0)|0)-W|0)-D|0,E=D+W|0,(0|o)==(0|w)){q[1929]=E,a=q[1926]+a|0,q[1926]=a,q[E+4>>2]=1|a;break B}if(q[1928]==(0|o)){q[1928]=E,a=q[1925]+a|0,q[1925]=a,q[E+4>>2]=1|a,q[a+E>>2]=a;break B}if(1==(3&(w=q[o+4>>2]))){X=-8&w;G:if(w>>>0<=255){if(B=w>>>3,w=q[o+8>>2],(0|(A=q[o+12>>2]))==(0|w)){Z=7692,_=q[1923]&jc(B),q[Z>>2]=_;break G}q[w+12>>2]=A,q[A+8>>2]=w}else{if(V=q[o+24>>2],(0|(C=q[o+12>>2]))==(0|o))if((D=q[(A=o+20|0)>>2])||(D=q[(A=o+16|0)>>2])){for(;w=A,(D=q[(A=(C=D)+20|0)>>2])||(A=C+16|0,D=q[C+16>>2]););q[w>>2]=0}else C=0;else w=q[o+8>>2],q[w+12>>2]=C,q[C+8>>2]=w;if(V){w=q[o+28>>2];J:{if(q[(A=7996+(w<<2)|0)>>2]==(0|o)){if(q[A>>2]=C)break J;Z=7696,_=q[1924]&jc(w),q[Z>>2]=_;break G}if(!(q[V+(q[V+16>>2]==(0|o)?16:20)>>2]=C))break G}q[C+24>>2]=V,(w=q[o+16>>2])&&(q[C+16>>2]=w,q[w+24>>2]=C),(w=q[o+20>>2])&&(q[C+20>>2]=w,q[w+24>>2]=C)}}o=o+X|0,a=a+X|0}if(q[o+4>>2]=-2&q[o+4>>2],q[E+4>>2]=1|a,(q[a+E>>2]=a)>>>0<=255){a=7732+((o=a>>>3)<<3)|0,o=(w=q[1923])&(o=1<<o)?q[a+8>>2]:(q[1923]=o|w,a),q[a+8>>2]=E,q[o+12>>2]=E,q[E+12>>2]=a,q[E+8>>2]=o;break B}if(o=0,(A=a>>>8)&&(o=31,16777215<a>>>0||(o=28+((o=((D=(A<<=B=A+1048320>>>16&8)<<(o=A+520192>>>16&4))<<(A=D+245760>>>16&2)>>>15)-(A|o|B)|0)<<1|a>>>o+21&1)|0)),q[(w=E)+28>>2]=o,q[E+16>>2]=0,w=7996+(o<<2)|(q[E+20>>2]=0),(A=q[1924])&(B=1<<o)){for(A=a<<(31==(0|o)?0:25-(o>>>1)|0),o=q[w>>2];;){if((-8&q[(w=o)+4>>2])==(0|a))break C;if(o=A>>>29,A<<=1,!(o=q[16+(B=(4&o)+w|0)>>2]))break}q[B+16>>2]=E}else q[1924]=A|B,q[w>>2]=E;q[E+24>>2]=w,q[E+12>>2]=E,q[E+8>>2]=E;break B}for(E=(a=C+-40|0)-(A=o+8&7?-8-o&7:0)|0,q[1926]=E,A=o+A|0,q[1929]=A,q[A+4>>2]=1|E,q[4+(a+o|0)>>2]=40,q[1930]=q[2045],q[(A=(a=(B+(B+-39&7?39-B&7:0)|0)-47|0)>>>0<w+16>>>0?w:a)+4>>2]=27,a=q[2038],q[A+16>>2]=q[2037],q[A+20>>2]=a,a=q[2036],q[A+8>>2]=q[2035],q[A+12>>2]=a,q[2037]=A+8,q[2036]=C,q[2035]=o,a=A+24|(q[2038]=0);q[a+4>>2]=7,o=a+8|0,a=a+4|0,o>>>0<B>>>0;);if((0|w)==(0|A))break x;if(q[A+4>>2]=-2&q[A+4>>2],B=A-w|0,q[w+4>>2]=1|B,(q[A>>2]=B)>>>0<=255){a=7732+((o=B>>>3)<<3)|0,o=(A=q[1923])&(o=1<<o)?q[a+8>>2]:(q[1923]=o|A,a),q[a+8>>2]=w,q[o+12>>2]=w,q[w+12>>2]=a,q[w+8>>2]=o;break x}if(q[w+16>>2]=0,a=q[w+20>>2]=0,(A=B>>>8)&&(a=31,16777215<B>>>0||(a=28+((a=((E=(A<<=C=A+1048320>>>16&8)<<(a=A+520192>>>16&4))<<(A=E+245760>>>16&2)>>>15)-(A|a|C)|0)<<1|B>>>a+21&1)|0)),o=7996+((q[(o=w)+28>>2]=a)<<2)|0,(A=q[1924])&(C=1<<a)){for(a=B<<(31==(0|a)?0:25-(a>>>1)|0),o=q[o>>2];;){if((0|B)==(-8&q[(A=o)+4>>2]))break A;if(o=a>>>29,a<<=1,!(o=q[16+(C=A+(4&o)|0)>>2]))break}q[C+16>>2]=w,q[w+24>>2]=A}else q[1924]=A|C,q[o>>2]=w,q[w+24>>2]=o;q[w+12>>2]=w,q[w+8>>2]=w;break x}a=q[w+8>>2],q[a+12>>2]=E,q[w+8>>2]=E,q[E+24>>2]=0,q[E+12>>2]=w,q[E+8>>2]=a}a=W+8|0;break a}a=q[A+8>>2],q[a+12>>2]=w,q[A+8>>2]=w,q[w+24>>2]=0,q[w+12>>2]=A,q[w+8>>2]=a}if(!((a=q[1926])>>>0<=D>>>0)){o=a-D|0,q[1926]=o,w=(a=q[1929])+D|0,q[1929]=w,q[w+4>>2]=1|o,q[a+4>>2]=3|D,a=a+8|0;break a}}q[1906]=48,a=0;break a}Q:if(E){a=q[B+28>>2];R:{if(q[(A=7996+(a<<2)|0)>>2]==(0|B)){if(q[A>>2]=o)break R;V=jc(a)&V,q[1924]=V;break Q}if(!(q[E+(q[E+16>>2]==(0|B)?16:20)>>2]=o))break Q}q[o+24>>2]=E,(a=q[B+16>>2])&&(q[o+16>>2]=a,q[a+24>>2]=o),(a=q[B+20>>2])&&(q[o+20>>2]=a,q[a+24>>2]=o)}S:if(w>>>0<=15)a=w+D|0,q[B+4>>2]=3|a,q[4+(a=a+B|0)>>2]=1|q[a+4>>2];else if(q[B+4>>2]=3|D,q[4+(A=B+D|0)>>2]=1|w,(q[w+A>>2]=w)>>>0<=255)a=7732+((o=w>>>3)<<3)|0,o=(w=q[1923])&(o=1<<o)?q[a+8>>2]:(q[1923]=o|w,a),q[a+8>>2]=A,q[o+12>>2]=A,q[A+12>>2]=a,q[A+8>>2]=o;else{a=0,(D=w>>>8)&&(a=31,16777215<w>>>0||(a=28+((a=((E=(D<<=C=D+1048320>>>16&8)<<(a=D+520192>>>16&4))<<(D=E+245760>>>16&2)>>>15)-(D|a|C)|0)<<1|w>>>a+21&1)|0)),q[(o=A)+28>>2]=a,q[A+16>>2]=0,o=7996+(a<<2)|(q[A+20>>2]=0);V:{if((D=1<<a)&V){for(a=w<<(31==(0|a)?0:25-(a>>>1)|0),D=q[o>>2];;){if((-8&q[(o=D)+4>>2])==(0|w))break V;if(D=a>>>29,a<<=1,!(D=q[16+(C=(4&D)+o|0)>>2]))break}q[C+16>>2]=A}else q[1924]=D|V,q[o>>2]=A;q[A+24>>2]=o,q[A+12>>2]=A,q[A+8>>2]=A;break S}a=q[o+8>>2],q[a+12>>2]=A,q[o+8>>2]=A,q[A+24>>2]=0,q[A+12>>2]=o,q[A+8>>2]=a}a=B+8|0;break a}X:if(W){a=q[o+28>>2];Y:{if(q[(w=7996+(a<<2)|0)>>2]==(0|o)){if(q[w>>2]=B)break Y;Z=7696,_=jc(a)&X,q[Z>>2]=_;break X}if(!(q[W+(q[W+16>>2]==(0|o)?16:20)>>2]=B))break X}q[B+24>>2]=W,(a=q[o+16>>2])&&(q[B+16>>2]=a,q[a+24>>2]=B),(a=q[o+20>>2])&&(q[B+20>>2]=a,q[a+24>>2]=B)}A>>>0<=15?(a=A+D|0,q[o+4>>2]=3|a,q[4+(a=a+o|0)>>2]=1|q[a+4>>2]):(q[o+4>>2]=3|D,q[4+(D=o+D|0)>>2]=1|A,q[A+D>>2]=A,V&&(a=7732+((w=V>>>3)<<3)|0,B=q[1928],w=(w=1<<w)&C?q[a+8>>2]:(q[1923]=w|C,a),q[a+8>>2]=B,q[w+12>>2]=B,q[B+12>>2]=a,q[B+8>>2]=w),q[1928]=D,q[1925]=A),a=o+8|0}return L=16+Y|0,a}function ka(a){var q=0,t=x(0),L=0,$=0,aa=x(0),ba=x(0);j(a);a:{if(1283457024<=(q=2147483647&($=e(0)))>>>0){if(2139095040<q>>>0)break a;return x((0|$)<0?-1.570796251296997:1.570796251296997)}b:{if(q>>>0<=1054867455){if(L=-1,964689920<=q>>>0)break b;break a}if(a=x(y(a)),q>>>0<=1066926079){if(q>>>0<=1060110335){a=x(x(x(a+a)+x(-1))/x(a+x(2))),L=0;break b}a=x(x(a+x(-1))/x(a+x(1))),L=1}else L=q>>>0<=1075576831?(a=x(x(a+x(-1.5))/x(x(a*x(1.5))+x(1))),2):(a=x(x(-1)/a),3)}if(q=L,aa=x(a*a),t=x(aa*aa),ba=x(t*x(x(t*x(-.106480173766613))+x(-.19999158382415771))),t=x(aa*x(x(t*x(x(t*x(.06168760731816292))+x(.14253635704517365)))+x(.333333283662796))),(0|q)<=-1)return x(a-x(a*x(ba+t)));a=x(u[6080+(q<<=2)>>2]-x(x(x(a*x(ba+t))-u[q+6096>>2])-a)),a=(0|$)<0?x(-a):a}return a}function la(a,ca){var fa,da=0,ea=0,ga=0,ha=0,ia=0;L=fa=L-16|0,j(a);a:if((da=2147483647&(ga=e(0)))>>>0<=1305022426){if(ea=.6366197723675814*(ha=+a)+6755399441055744-6755399441055744,v[ca>>3]=ha+-1.5707963109016418*ea+-1.5893254773528196e-8*ea,y(ea)<2147483648){da=~~ea;break a}da=-2147483648}else 2139095040<=da>>>0?(v[ca>>3]=x(a-a),da=0):(da=((ia=da)>>>23)-150|0,v[8+fa>>3]=(f(0,ia-(da<<23)|0),k()),da=Da(8+fa|0,fa,da),ea=v[fa>>3],(0|ga)<=-1?(v[ca>>3]=-ea,da=0-da|0):v[ca>>3]=ea);return L=16+fa|0,da}function ma(a){var ca=0,ja=0,ka=0,la=0,ma=0;ka=4,ja=1082;a:if(ca=r[0|a]){for(;!((0|(la=r[0|ja]))!=(0|ca)||!(ka=ka+-1|0)|!la);)if(ja=ja+1|0,ca=r[a+1|0],a=a+1|0,!ca)break a;ma=ca}return(255&ma)-r[0|ja]|0}function oa(a,na){return a?function(a,Ub){a:{if(a){if(Ub>>>0<=127)break a;if(q[q[1625]>>2]){if(Ub>>>0<=2047)return o[a+1|0]=63&Ub|128,o[0|a]=Ub>>>6|192,2;if(!(57344!=(-8192&Ub)&&55296<=Ub>>>0))return o[a+2|0]=63&Ub|128,o[0|a]=Ub>>>12|224,o[a+1|0]=Ub>>>6&63|128,3;if(Ub+-65536>>>0<=1048575)return o[a+3|0]=63&Ub|128,o[0|a]=Ub>>>18|240,o[a+2|0]=Ub>>>6&63|128,o[a+1|0]=Ub>>>12&63|128,4}else if(57216==(-128&Ub))break a;q[1906]=25,a=-1}else a=1;return a}return o[0|a]=Ub,1}(a,na):0}function pa(a,na,oa,sa){a:{if(!(20<na>>>0||9<(na=na+-9|0)>>>0)){switch(na-1|0){default:return na=q[oa>>2],q[oa>>2]=na+4,void(q[a>>2]=q[na>>2]);case 0:return na=q[oa>>2],q[oa>>2]=na+4,na=q[na>>2],q[a>>2]=na,void(q[a+4>>2]=na>>31);case 1:return na=q[oa>>2],q[oa>>2]=na+4,q[a>>2]=q[na>>2],void(q[a+4>>2]=0);case 3:return na=q[oa>>2],q[oa>>2]=na+4,na=p[na>>1],q[a>>2]=na,void(q[a+4>>2]=na>>31);case 4:return na=q[oa>>2],q[oa>>2]=na+4,q[a>>2]=s[na>>1],void(q[a+4>>2]=0);case 5:return na=q[oa>>2],q[oa>>2]=na+4,na=o[0|na],q[a>>2]=na,void(q[a+4>>2]=na>>31);case 6:return na=q[oa>>2],q[oa>>2]=na+4,q[a>>2]=r[0|na],void(q[a+4>>2]=0);case 2:case 7:break a;case 8:}n[sa](a,oa)}return}na=q[oa>>2]+7&-8,q[oa>>2]=na+8,oa=q[na+4>>2],q[a>>2]=q[na>>2],q[a+4>>2]=oa}function qa(a){var na=0,oa=0,sa=0;if(ga(o[q[a>>2]]))for(;na=q[a>>2],sa=o[0|na],q[a>>2]=na+1,oa=(w(oa,10)+sa|0)-48|0,ga(o[na+1|0]););return oa}function ra(a,ta,ua,va,wa){var xa,ya=0,za=0;q[204+(L=xa=L-208|0)>>2]=ua,ba(160+xa|(ua=0),0,40),q[200+xa>>2]=q[204+xa>>2],(0|ia(0,ta,200+xa|0,80+xa|0,160+xa|0,va,wa))<0||(ua=0<=q[a+76>>2]?1:ua,ya=q[a>>2],o[a+74|0]<=0&&(q[a>>2]=-33&ya),za=32&ya,q[a+48>>2]?ia(a,ta,200+xa|0,80+xa|0,160+xa|0,va,wa):(q[a+48>>2]=80,q[a+16>>2]=80+xa,q[a+28>>2]=xa,q[a+20>>2]=xa,ya=q[a+44>>2],ia(a,ta,200+(q[a+44>>2]=xa)|0,80+xa|0,160+xa|0,va,wa),ya&&(n[q[a+36>>2]](a,0,0),q[a+48>>2]=0,q[a+44>>2]=ya,q[a+28>>2]=0,q[a+16>>2]=0,q[a+20>>2]=0)),q[a>>2]=q[a>>2]|za),L=208+xa|0}function sa(a,ta,ua){var va,wa=0;fa(8+(L=va=L-160|0)|0,2536,144),q[52+va>>2]=a,wa=(wa=-2-(q[28+va>>2]=a)|0)>>>0<256?wa:256,a=a+(q[56+va>>2]=wa)|0,q[36+va>>2]=a,q[24+va>>2]=a,ra(8+va|0,ta,ua,15,16),wa&&(a=q[28+va>>2],o[a-((0|a)==q[24+va>>2])|0]=0),L=160+va|0}function ta(a){var ta=0,ua=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=x(0),Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=x(0),Oa=0,Pa=x(0),Qa=0,Ra=0,Sa=x(0),Ta=x(0),Ua=x(0),Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0;if(q[a+256>>2]&&(ta=q[a+200>>2]<<2,fa(q[a+280>>2],q[a+264>>2],ta),fa(q[a+284>>2],q[a+268>>2],ta),fa(q[a+288>>2],q[a+276>>2],ta)),!((0|(Ca=q[a+292>>2]))<1)){for(Ga=(Ea=q[a+296>>2])+w(Ca,40)|0,Aa=q[a+300>>2],ta=Ea;Ua=u[Aa>>2],(Pa=u[ta+32>>2])==(Fa=(ua=q[ta+12>>2])?(Sa=u[ta>>2],Fa=x(Ua-Sa),Ua=u[ta+8>>2],Na=x(Fa/Ua),Fa=x(C(Na)),Ba=x(y(Fa))<x(2147483648)?~~Fa:-2147483648,x(Sa+x(Ua*x(Na-x(0|Ba))))):(Na=u[ta>>2],Fa=u[ta+4>>2],Ua<Na?Na:Fa<Ua?Fa:Ua))?q[ta+36>>2]=0:(u[ta+32>>2]=Fa,q[ta+36>>2]=1),ua||(u[Aa>>2]=Fa),Aa=Aa+4|0,(ta=ta+40|0)>>>0<Ga>>>0;);if(!((0|Ca)<1))for(Oa=q[a+308>>2],Ma=q[a+376>>2];;){e:if(!((0|(ua=q[Ea+28>>2]))<1))if(Ha=(ta=Oa+w(q[Ea+24>>2],28)|0)+w(ua,28)|0,Ua=u[Ea+20>>2],Ta=u[Ea+16>>2],Pa=u[Ea+32>>2],Ma)for(;;){Sa=x(Ca=0);l:{m:{n:{if((0|(Da=q[ta>>2]))<1)Aa=Ba=0;else if(ua=q[ta+4>>2],Na=u[ua>>2],Fa=x(Na-Ta),1!=(0|Da)){if(Pa<Fa){Ba=1,Aa=0;break m}if(Ba=0,Pa<x(Ta+Na))Aa=0;else{if(Aa=1,Fa=u[ua+4>>2],!(Pa<x(Ta+Fa)))for(;;){if((0|Da)==(0|(Aa=Aa+1|0)))break n;if(Na=Fa,Fa=u[ua+(Aa<<2)>>2],Pa<x(Ta+Fa))break}x(Fa-Ta)<Pa||(Aa=Aa+-1|0,(Fa=x(Fa-Na))<Ua||(Sa=x(x(Pa-Na)/Fa)))}}else Ba=Pa<x(Ta+Na)^1|Fa<Pa^1,Aa=0;if(Ba)break m;if(La=Da=1,!q[ta+16>>2])break m;break l}Aa=Da+-1|0,Ba=1}La=(Da=(Fa=u[ta+12>>2])!=Sa)&(Sa==x(0)|Fa==x(0))|q[ta+8>>2]!=(0|Aa),Ca=Ba}if(q[ta+20>>2]=La,q[ta+24>>2]=Da,u[ta+12>>2]=Sa,q[ta+16>>2]=Ca,q[ta+8>>2]=Aa,!((ta=ta+28|0)>>>0<Ha>>>0))break}else{if(!q[Ea+36>>2])for(;;)if(q[ta+20>>2]=0,!((ta=ta+28|(q[ta+24>>2]=0))>>>0<Ha>>>0))break e;for(;;){Sa=x(Ca=0);f:{g:{h:{i:if(!(((Ba=0)|(Aa=q[(ua=ta)>>2]))<1)){if(Ja=q[ta+4>>2],Na=u[Ja>>2],Fa=x(Na-Ta),1!=(0|Aa)){if(!(Pa<Fa)){if(Ba=0,Pa<x(Ta+Na))break i;Da=1;j:if(Fa=u[Ja+4>>2],!(Pa<x(Ta+Fa))){for(Aa=Aa+-1|0;Na=Fa,(0|Aa)!=(0|Da);)if(Fa=u[Ja+((Da=Da+1|0)<<2)>>2],Pa<x(Ta+Fa))break j;Ba=1;break g}if(Ba=0,x(Fa-Ta)<Pa){Aa=Da;break h}if(Aa=Da+-1|0,(Fa=x(Fa-Na))<Ua)break h;Sa=x(x(Pa-Na)/Fa);break h}Ba=1,Aa=0;break g}Ba=Pa<x(Ta+Na)^1|Fa<Pa^1}Aa=0}if(!Ba&&(Ja=Da=1,q[ta+16>>2]))break f}Ca=Ba,Ja=(Da=(Fa=u[ta+12>>2])!=Sa)&(Sa==x(0)|Fa==x(0))|q[ta+8>>2]!=(0|Aa)}if(q[ua+20>>2]=Ja,q[ta+24>>2]=Da,u[ta+12>>2]=Sa,q[ta+16>>2]=Ca,q[ta+8>>2]=Aa,!((ta=ta+28|0)>>>0<Ha>>>0))break}}if(!((Ea=Ea+40|0)>>>0<Ga>>>0))break}}if(1<=(0|(ta=q[a+312>>2])))for(Ja=(Ia=q[a+316>>2])+w(ta,36)|0,Ga=q[a+376>>2];;){Za=(ua=q[Ia+12>>2])+((Ea=q[Ia>>2])<<2)|0,Qa=q[a+308>>2],ta=ua;p:{if(!(Ea=((Da=Ba=Ca=0)|Ea)<1))for(;;){if(Aa=Qa+w(q[ta>>2],28)|0,q[Aa+16>>2]){La=1,Ra=Ya=0;break p}if(Ca=Ca||q[Aa+24>>2],Da=Da||q[Aa+20>>2],Ba=(u[Aa+12>>2]!=x(0))+Ba|0,!((ta=ta+4|0)>>>0<Za>>>0))break}if(La=0,(Ra=Ga?1:Da)|(Ya=Ga?1:Ca)&&(Xa=1<<Ba,q[Ia+8>>2]=Xa,31!=(0|Ba))){for(Ca=q[Ia+20>>2],Aa=(ta=q[Ia+16>>2])+(Da=Xa<<2)|0,Va=ba(Ka=ta,0,4+((Ha=-1^ta)+((ta=ta+4|0)>>>0<Aa>>>0?Aa:ta)|0)&-4),Da=Ca+Da|0,ta=Ca;q[ta>>2]=1065353216,(ta=ta+4|0)>>>0<Da>>>0;);if(!Ea)if(Da=Ea=1,Ba)for(;;){if(Ka=Qa+w(q[ua>>2],28)|0,Ba=q[Ka+8>>2],Ha=w(Ba,Ea),ta=0,(Fa=u[Ka+12>>2])==x(0))for(;q[(Ba=Va+(ta<<2)|0)>>2]=Ha+q[Ba>>2],(0|Xa)!=(0|(ta=ta+1|0)););else{for(q[Va>>2]=Ha+q[Va>>2],u[Ca>>2]=x(x(1)-Fa)*u[Ca>>2],Oa=w(Ba+(ta=1)|0,Ea);Fa=u[Ka+12>>2],Aa=ta&Da,q[(Ba=(Ma=ta<<2)+Va|0)>>2]=q[Ba>>2]+(Aa?Oa:Ha),u[(Ba=Ca+Ma|0)>>2]=(Aa?Fa:x(x(1)-Fa))*u[Ba>>2],(0|Xa)!=(0|(ta=ta+1|0)););Da<<=1}if(Ea=w(q[Ka>>2],Ea),!((ua=ua+4|0)>>>0<Za>>>0))break}else for(;;){if(Aa=Qa+w(q[ua>>2],28)|0,Da=w(q[Aa+8>>2],Ea),ta=0,(Fa=u[Aa+12>>2])==x(0))for(;q[(Ba=Va+(ta<<2)|0)>>2]=Da+q[Ba>>2],(0|Xa)!=(0|(ta=ta+1|0)););else q[Va>>2]=Da+q[Va>>2],u[Ca>>2]=x(x(1)-Fa)*u[Ca>>2];if(Ea=w(q[Aa>>2],Ea),!((ua=ua+4|0)>>>0<Za>>>0))break}}}if(q[Ia+32>>2]=La,q[Ia+24>>2]=Ra,q[Ia+28>>2]=Ya,!((Ia=Ia+36|0)>>>0<Ja>>>0))break}if(!((0|(Ba=q[a+4>>2]))<=0)){for(ua=(ta=q[a+52>>2])+(Ba<<2)|0;Fa=u[ta>>2],u[ta>>2]=Fa<x(0)?x(0):x(A(Fa,x(1))),(ta=ta+4|0)>>>0<ua>>>0;);if(!((0|Ba)<1)){for(Ea=(ta=q[a+8>>2])+(Ba<<3)|0,Ha=q[a+316>>2],Ca=q[a+40>>2],Aa=Da=q[a+36>>2];Ba=0,q[ta+4>>2]&&(ua=q[ta>>2],!q[Da+(ua<<2)>>2]&&-1!=(0|ua)||(Ba=!q[32+(Ha+w(q[Ca>>2],36)|0)>>2])),q[Aa>>2]=Ba,Ca=Ca+4|0,Aa=Aa+4|0,(ta=ta+8|0)>>>0<Ea>>>0;);if(!((0|(Ga=q[a+4>>2]))<1))for(Ja=q[a>>2],Oa=q[Ja+724>>2],ua=q[a+40>>2],Da=Ea=0;;){if(Ka=Ha+w(q[ua>>2],36)|0,(q[Ka+28>>2]||q[Ka+24>>2])&&(q[(Ca=Ea<<2)+q[a+16>>2]>>2]=q[Ka+8>>2],q[Ka+24>>2]&&!((0|(Ba=q[Ka+8>>2]))<1)))for(Ma=(ta=q[Ka+16>>2])+(Ba<<2)|0,Ca=q[Ca+Oa>>2],Aa=q[a+28>>2]+(Da<<2)|0,Ba=q[Ja+936>>2];q[Aa>>2]=q[Ba+(Ca+q[ta>>2]<<2)>>2],Aa=Aa+4|0,(ta=ta+4|0)>>>0<Ma>>>0;);if(q[Ka+28>>2]&&!((0|(Ba=q[Ka+8>>2]))<1))for(Ba=(ta=q[Ka+20>>2])+(Ba<<2)|0,Aa=q[a+20>>2]+(Da<<2)|0;q[Aa>>2]=q[ta>>2],Aa=Aa+4|0,(ta=ta+4|0)>>>0<Ba>>>0;);if(ua=ua+4|0,Da=q[Ka+4>>2]+Da|0,(0|Ga)==(0|(Ea=Ea+1|0)))break}}}if(n[q[1644]](a),_a=q[a+316>>2],1<=(0|(ua=q[a+56>>2]))){for(Ga=(ta=q[a+60>>2])+(ua<<5)|0,Ja=q[a+176>>2],Oa=q[a+172>>2],Ma=q[a+36>>2],Ba=q[a+180>>2],Ca=Aa=q[a+168>>2];;){Da=Ca,ua=0,q[ta+28>>2]&&(-1!=(0|(Ea=q[ta>>2]))&&(ua=0,!q[Ma+(Ea<<2)>>2])||-1!=(0|(Ea=q[ta+4>>2]))&&(ua=0,!q[Aa+(Ea<<2)>>2])||(ua=!q[32+(w(q[Ba>>2],36)+_a|0)>>2])),q[Da>>2]=ua;x:if((Da=q[ta+8>>2])>>>0<=1){if(Da-1){q[Oa+(q[ta+12>>2]<<2)>>2]=ua;break x}q[Ja+(q[ta+12>>2]<<2)>>2]=ua}else Y(4,1473,0);if(Ba=Ba+4|0,Ca=Ca+4|0,!((ta=ta+32|0)>>>0<Ga>>>0))break}_a=q[a+316>>2]}if(Ea=q[a>>2],1<=(0|(Ga=q[a- -64>>2]))){for(Ja=q[Ea+988>>2],Oa=q[Ea+784>>2],La=q[a+184>>2],Ia=ua=0;;){if(Ha=w(q[La>>2],36)+_a|0,(q[Ha+28>>2]||q[Ha+24>>2])&&(q[(Ca=ua<<2)+q[a+84>>2]>>2]=q[Ha+8>>2],q[Ha+24>>2]&&!((0|(Ba=q[Ha+8>>2]))<1)))for(Ma=(ta=q[Ha+16>>2])+(Ba<<2)|0,Da=q[Ca+Oa>>2],Aa=(Ba=Ia<<2)+q[a+100>>2]|0,Ca=Ba+q[a+96>>2]|0;Ba=Da+q[ta>>2]<<2,q[Aa>>2]=Ja+(q[Ba+q[Ea+944>>2]>>2]<<2),q[Ca>>2]=q[Ba+q[Ea+940>>2]>>2],Ca=Ca+4|0,Aa=Aa+4|0,(ta=ta+4|0)>>>0<Ma>>>0;);if(q[Ha+28>>2]&&!((0|(Ba=q[Ha+8>>2]))<1))for(Ba=(ta=q[Ha+20>>2])+(Ba<<2)|0,Aa=q[a+88>>2]+(Ia<<2)|0;q[Aa>>2]=q[ta>>2],Aa=Aa+4|0,(ta=ta+4|0)>>>0<Ba>>>0;);if(La=La+4|0,Ia=q[Ha+4>>2]+Ia|0,(0|Ga)==(0|(ua=ua+1|0)))break}_a=q[a+316>>2],Ea=q[a>>2]}if(1<=(0|(Xa=q[a+72>>2])))for(Za=q[a+76>>2],Qa=q[Ea+808>>2],Ya=q[a+188>>2],Ra=Ia=0;;){if(Wa=w(q[Ya>>2],36)+_a|0,(q[Wa+28>>2]||q[Wa+24>>2])&&(q[(ua=Ia<<2)+q[a+116>>2]>>2]=q[Wa+8>>2],q[Wa+24>>2])){if(ta=q[Wa+16>>2],Va=q[ua+Qa>>2],1<=(0|(ua=q[Wa+8>>2])))for(Ka=ta+(ua<<2)|0,Aa=(ua=Ra<<2)+q[a+132>>2]|0,Ca=ua+q[a+136>>2]|0,Ba=ua+q[a+140>>2]|0,Da=ua+q[a+144>>2]|0,La=ua+q[a+128>>2]|0,Ha=q[Ea+948>>2],Ga=q[Ea+964>>2],Ja=q[Ea+960>>2],Oa=q[Ea+956>>2],Ma=q[Ea+952>>2],ua=ta;$a=Va+q[ua>>2]<<2,q[Aa>>2]=q[$a+Ma>>2],q[Ca>>2]=q[Oa+$a>>2],q[Ba>>2]=q[Ja+$a>>2],q[Da>>2]=q[Ga+$a>>2],q[La>>2]=q[Ha+$a>>2],La=La+4|0,Da=Da+4|0,Ba=Ba+4|0,Ca=Ca+4|0,Aa=Aa+4|0,(ua=ua+4|0)>>>0<Ka>>>0;);ua=Za+(Ia<<5)|0,ta=Va+q[ta>>2]<<2,q[ua+24>>2]=q[ta+q[Ea+968>>2]>>2],q[ua+28>>2]=q[ta+q[Ea+972>>2]>>2]}if(q[Wa+28>>2]&&!((0|(ua=q[Wa+8>>2]))<1))for(ua=(ta=q[Wa+20>>2])+(ua<<2)|0,Aa=q[a+120>>2]+(Ra<<2)|0;q[Aa>>2]=q[ta>>2],Aa=Aa+4|0,(ta=ta+4|0)>>>0<ua>>>0;);if(Ya=Ya+4|0,Ra=q[Wa+4>>2]+Ra|0,(0|Xa)==(0|(Ia=Ia+1|0)))break}if(n[q[1642]](a),n[q[1645]](a),!((0|(ua=q[a+200>>2]))<1)){for(Ma=(ta=q[a+204>>2])+(ua<<4)|0,Ea=q[a+168>>2],Da=q[a+36>>2],Ha=q[a+316>>2],Ca=q[a+252>>2],Aa=q[a+248>>2];Ba=0,q[ta+8>>2]&&(ua=q[ta>>2],!q[Da+(ua<<2)>>2]&&-1!=(0|ua)||(ua=q[ta+4>>2],!q[Ea+(ua<<2)>>2]&&-1!=(0|ua)||(Ba=!q[32+(Ha+w(q[Ca>>2],36)|0)>>2]))),q[Aa>>2]=Ba,Ca=Ca+4|0,Aa=Aa+4|0,(ta=ta+16|0)>>>0<Ma>>>0;);if(!((0|(Ja=q[a+200>>2]))<1))for(Ka=q[a>>2],Oa=q[Ka+988>>2],Ma=q[Ka+844>>2],ua=q[a+252>>2],La=Ia=0;;){if(Qa=Ha+w(q[ua>>2],36)|0,(q[Qa+28>>2]||q[Qa+24>>2])&&(q[(Ca=Ia<<2)+q[a+212>>2]>>2]=q[Qa+8>>2],q[Qa+24>>2]&&!((0|(Ba=q[Qa+8>>2]))<1)))for(Ea=(ta=q[Qa+16>>2])+(Ba<<2)|0,Da=q[Ca+Ma>>2],Aa=(Ba=La<<2)+q[a+232>>2]|0,Ca=Ba+q[a+224>>2]|0,Ba=Ba+q[a+228>>2]|0;Ga=Da+q[ta>>2]<<2,q[Aa>>2]=Oa+(q[Ga+q[Ka+984>>2]>>2]<<2),q[Ca>>2]=q[Ga+q[Ka+976>>2]>>2],q[Ba>>2]=q[Ga+q[Ka+980>>2]>>2],Ba=Ba+4|0,Ca=Ca+4|0,Aa=Aa+4|0,(ta=ta+4|0)>>>0<Ea>>>0;);if(q[Qa+28>>2]&&!((0|(Ba=q[Qa+8>>2]))<1))for(Ba=(ta=q[Qa+20>>2])+(Ba<<2)|0,Aa=q[a+216>>2]+(La<<2)|0;q[Aa>>2]=q[ta>>2],Aa=Aa+4|0,(ta=ta+4|0)>>>0<Ba>>>0;);if(ua=ua+4|0,La=q[Qa+4>>2]+La|0,(0|Ja)==(0|(Ia=Ia+1|0)))break}}if(n[q[1643]](a),function(a){var ke,de=0,ee=0,fe=0,ge=0,he=0,ie=0,je=0,le=0,me=0,ne=0,oe=0,pe=0;if(1<=(0|(ke=q[a+340>>2])))for(me=q[a+316>>2],le=q[a>>2],ne=q[le+1072>>2],he=q[a+372>>2];;){if(fe=w(q[he>>2],36)+me|0,(q[fe+28>>2]||q[fe+24>>2])&&(q[(de=ie<<2)+q[a+352>>2]>>2]=q[fe+8>>2],q[fe+24>>2]&&!((0|(ge=q[fe+8>>2]))<1)))for(ge=(ee=q[fe+16>>2])+(ge<<2)|0,oe=q[de+ne>>2],de=q[a+364>>2]+(je<<2)|0,pe=q[le+1104>>2];q[de>>2]=q[(q[ee>>2]+oe<<2)+pe>>2],de=de+4|0,(ee=ee+4|0)>>>0<ge>>>0;);if(q[fe+28>>2]&&!((0|(de=q[fe+8>>2]))<1))for(ge=(ee=q[fe+20>>2])+(de<<2)|0,de=q[a+356>>2]+(je<<2)|0;q[de>>2]=q[ee>>2],de=de+4|0,(ee=ee+4|0)>>>0<ge>>>0;);if(he=he+4|0,je=q[fe+4>>2]+je|0,(0|ke)==(0|(ie=ie+1|0)))break}}(a),n[q[1646]](a),ua=q[a+48>>2],1<=(0|(ta=q[a+4>>2])))for(Ea=(Ca=q[a+8>>2])+(ta<<3)|0,Ba=q[a+52>>2],Aa=q[a+36>>2],ta=ua;q[Aa>>2]&&(Fa=u[Ba>>2],u[ta>>2]=Fa,-1!=(0|(Da=q[Ca>>2]))&&(u[ta>>2]=Fa*u[(Da<<2)+ua>>2])),ta=ta+4|0,Ba=Ba+4|0,Aa=Aa+4|0,(Ca=Ca+8|0)>>>0<Ea>>>0;);if(1<=(0|(Ba=q[a+56>>2]))){for(ua=a+56|0,ta=q[a+60>>2],Aa=q[a+168>>2],Ca=0;q[Aa>>2]&&n[q[ta+16>>2]](ta,Ca,ua),Aa=Aa+4|0,ta=ta+32|0,(0|Ba)!=(0|(Ca=Ca+1|0)););ua=q[a+48>>2]}if(1<=(0|(Ba=q[a+200>>2])))for(Ja=(ta=q[a+204>>2])+(Ba<<4)|0,Oa=q[a+192>>2],Ma=q[a+60>>2],Ca=q[a+248>>2],Aa=q[a+276>>2],Ba=q[a+272>>2];q[Ca>>2]&&(-1!=(0|(Da=q[ta>>2]))&&(u[Aa>>2]=u[(Da<<2)+ua>>2]*u[Aa>>2]),-1!=(0|(Da=q[ta+4>>2]))&&(u[Aa>>2]=u[Oa+(Da<<2)>>2]*u[Aa>>2],Ea=Ma+(Da<<5)|0,Da=q[Ba>>2],n[q[Ea+20>>2]](q[Ea+24>>2],Da,Da,q[ta+12>>2]))),Ba=Ba+4|0,Aa=Aa+4|0,Ca=Ca+4|0,(ta=ta+16|0)>>>0<Ja>>>0;);if(function(a){var Bd=0,Cd=0,Dd=0,Ed=0,Fd=x(0),Gd=x(0),Hd=x(0),Id=x(0),Jd=x(0),Kd=0,Ld=0,Md=0,Nd=0,Od=0,Pd=x(0),Qd=0,Rd=0,Sd=x(0),Td=0;if(1<=(0|(Dd=q[a+340>>2])))for(Td=(Bd=q[a+344>>2])+w(Dd,24)|0,Dd=q[a+272>>2];;){if((a=0)<(0|(Kd=q[Bd+8>>2])))for(Ld=q[Dd+(q[Bd+4>>2]<<2)>>2],Md=q[Dd+(q[Bd>>2]<<2)>>2],Fd=u[Bd+20>>2],Nd=q[Bd+16>>2],Od=q[Bd+12>>2];Pd=u[((Cd=1|a)<<2)+Od>>2],Ed=s[(a<<1)+Nd>>1]<<3&262136,Gd=u[(Qd=(4|Ed)+Md|0)>>2],Cd=s[(Cd<<1)+Nd>>1]<<3&262136,Hd=u[(Rd=(4|Cd)+Ld|0)>>2],Id=u[(Ed=Ed+Md|0)>>2],Sd=u[(a<<2)+Od>>2],Jd=u[(Cd=Cd+Ld|0)>>2],u[Ed>>2]=Id+x(Fd*x(Sd*x(Jd-Id))),u[Qd>>2]=Gd+x(Fd*x(Sd*x(Hd-Gd))),u[Cd>>2]=Jd+x(Fd*x(Pd*x(Id-Jd))),u[Rd>>2]=Hd+x(Fd*x(Pd*x(Gd-Hd))),(0|(a=a+2|0))<(0|Kd););if(!((Bd=Bd+24|0)>>>0<Td>>>0))break}}(a),n[q[1647]](a),La=q[a+248>>2],Ia=q[a+268>>2],1<=(0|(Ha=q[a+320>>2]))){for(Ja=(Ba=q[a+324>>2])+w(Ha,28)|0,Oa=q[a+44>>2],Ma=q[a+36>>2],ua=Ba;;){if(1<=(0|(Aa=q[ua+4>>2])))for(Ea=ua+20|0,Da=q[ua+12>>2],ta=0;Ga=q[4+(Ca=Da+(ta<<4)|0)>>2]<<2,Ca=1==q[(Ka=Ca)>>2],q[Ka+12>>2]=q[(q[Ga+(Ca?Ma:La)>>2]?Ga+(Ca?Oa:Ia)|0:Ea)>>2],(0|Aa)!=(0|(ta=ta+1|0)););if(!((ua=ua+28|0)>>>0<Ja>>>0))break}for(Oa=q[a+264>>2],Ra=0;;){if(Ga=Ba+w(Ra,28)|0,!(q[(Ja=Ga)+24>>2]<1)){for(Ca=q[a+328>>2],ta=0;q[Ca+(ta<<2)>>2]=-1,(0|(ta=ta+1|0))<(0|(ua=q[Ja+24>>2])););if(!((0|ua)<1))for(ua=q[a+336>>2],ta=0;q[ua+(ta<<2)>>2]=-1,(0|(ta=ta+1|0))<q[Ja+24>>2];);}if(!(q[Ga+4>>2]<1)){for(Ma=q[a+332>>2],ta=0;q[Ma+(ta<<2)>>2]=-1,(0|(ta=ta+1|0))<(0|(ua=q[Ga+4>>2])););if(!((0|ua)<1))for(Aa=q[Ga+12>>2],Ea=q[a+336>>2],ta=0;Da=q[12+(Aa+(ta<<4)|0)>>2]-q[Ga+20>>2]<<2,ua=-1!=(0|(ua=q[(Ca=Da+Ea|0)>>2]))?Ma+(ua<<2)|0:Da+q[a+328>>2]|0,q[ua>>2]=ta,(0|(ta=(q[Ca>>2]=ta)+1|0))<q[Ga+4>>2];);}if(1<=(0|(Ca=q[Ja+24>>2])))for(Aa=q[Ga+8>>2],Ma=q[a+328>>2],Ea=0;;){if(-1!=(0|(ta=q[Ma+(Ea<<2)>>2]))){for(Da=q[a+332>>2],Ca=q[Ga+12>>2];Aa=(ua=1!=q[(ua=Ca+(ta<<4)|0)>>2]?(q[Oa+(q[ua+4>>2]<<2)>>2]=Aa,1):(ua=Ba+w(q[ua+8>>2],28)|0,q[ua+8>>2]=Aa,q[ua>>2]))+Aa|0,(0|ta)<(0|(ua=q[Da+(ta<<2)>>2]))&&-1!=(0|(ta=ua)););Ca=q[Ja+24>>2]}if(!((0|(Ea=Ea+1|0))<(0|Ca)))break}if((0|Ha)==(0|(Ra=Ra+1|0)))break}}Da=q[a+200>>2];M:{if(q[a+376>>2]){if(ta=0,((q[a+256>>2]=0)|Da)<1)break M;for(;;){if(Aa=62,Ca=q[a+260>>2]+ta|0,!q[(ua=ta<<2)+La>>2]|u[ua+q[a+276>>2]>>2]==x(0)||(Aa=63),o[0|Ca]=Aa,(0|Da)==(0|(ta=ta+1|0)))break M;La=q[a+248>>2]}}if(!q[a+256>>2]){if((0|Da)<1)break M;for(ta=0;;){if(!q[(ua=ta<<2)+La>>2]|u[ua+q[a+276>>2]>>2]==x(0)?(ua=q[a+260>>2]+ta|0,o[0|ua]=254&r[0|ua]):(ua=q[a+260>>2]+ta|0,o[0|ua]=1|r[0|ua]),(0|Da)==(0|(ta=ta+1|0)))break M;La=q[a+248>>2]}}if(!(((q[a+256>>2]=0)|Da)<1))for(Aa=0;;){if(Fa=u[(Ca=Aa<<2)+q[a+276>>2]>>2],Ba=q[Ca+La>>2],ta=Fa!=x(0)&0!=(0|Ba),ua=q[a+260>>2]+Aa|0,ta=(0|ta)==(1&o[0|ua])?ta:2|ta,ta=Fa!=u[Ca+q[a+288>>2]>>2]?4|ta:ta,ta=q[Ca+Ia>>2]==q[Ca+q[a+284>>2]>>2]?ta:8|ta,ta=q[Ca+q[a+264>>2]>>2]==q[Ca+q[a+280>>2]>>2]?ta:16|ta,o[0|ua]=Ba?32|ta:ta,(0|Da)==(0|(Aa=Aa+1|0)))break M;Ia=q[a+268>>2],La=q[a+248>>2]}}q[a+376>>2]=0}function ua(a,ab,bb){var cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0;if(q[ab>>2]=384,db=q[a>>2],1<=(0|(fb=q[db>>2]))){for(hb=q[a+16>>2],ib=q[a+296>>2];eb=(1<<q[ib+(q[hb+(cb<<2)>>2]<<2)>>2])+eb|0,(0|fb)!=(0|(cb=cb+1|0)););cb=eb<<2}if(q[ab+4>>2]=fb<<3,q[ab+8>>2]=q[db>>2]<<2,q[ab+12>>2]=q[db>>2]<<2,q[ab+16>>2]=q[db>>2]<<2,q[ab+20>>2]=q[db>>2]<<2,q[ab+24>>2]=q[db>>2]<<2,eb=q[db>>2],q[ab+40>>2]=cb,q[ab+36>>2]=cb,q[ab+32>>2]=cb,q[ab+28>>2]=eb<<2,1<=((eb=cb=0)|(ib=q[db+8>>2]))){for(kb=q[a+296>>2],lb=q[a+88>>2],jb=q[a+76>>2],fb=0;cb=(0|cb)<(0|(hb=q[(mb=eb<<2)+lb>>2]))?hb:cb,gb=(15+(hb<<3)&-16)+gb|0,fb=(1<<q[kb+(q[jb+mb>>2]<<2)>>2])+fb|0,(0|ib)!=(0|(eb=eb+1|0)););eb=cb<<3,cb=fb<<2}if(q[ab+44>>2]=q[db+4>>2]<<5,q[ab+48>>2]=w(q[db+8>>2],24),q[ab+52>>2]=q[db+12>>2]<<5,q[ab+56>>2]=q[db+4>>2]<<2,q[ab+60>>2]=q[db+8>>2]<<2,q[ab+64>>2]=q[db+12>>2]<<2,q[ab+68>>2]=q[db+4>>2]<<2,fb=q[db+4>>2],q[ab+76>>2]=gb,q[ab+72>>2]=fb<<2,q[ab+80>>2]=q[db+8>>2]<<2,fb=q[db+8>>2],q[ab+104>>2]=eb,q[ab+100>>2]=cb,q[ab+96>>2]=cb,q[ab+92>>2]=cb,q[ab+88>>2]=cb,q[ab+84>>2]=fb<<2,1<=((cb=gb=0)|(fb=q[db+12>>2]))){for(hb=q[a+296>>2],ib=q[a+100>>2],eb=0;eb=(1<<q[hb+(q[ib+(cb<<2)>>2]<<2)>>2])+eb|0,(0|fb)!=(0|(cb=cb+1|0)););cb=eb<<2}if(q[ab+108>>2]=fb<<2,eb=q[db+12>>2],q[ab+156>>2]=cb,q[ab+152>>2]=cb,q[ab+148>>2]=cb,q[ab+144>>2]=cb,q[ab+140>>2]=cb,q[ab+136>>2]=cb,q[ab+132>>2]=cb,q[ab+128>>2]=cb,q[ab+124>>2]=cb,q[ab+120>>2]=cb,q[ab+116>>2]=cb,q[ab+112>>2]=eb<<2,1<=((eb=cb=0)|(hb=q[db+16>>2]))){for(kb=q[a+136>>2],lb=q[a+296>>2],jb=q[a+172>>2],fb=0;cb=(0|cb)<(0|(ib=q[(mb=eb<<2)+jb>>2]))?ib:cb,gb=(15+(ib<<3)&-16)+gb|0,fb=(1<<q[lb+(q[kb+mb>>2]<<2)>>2])+fb|0,(0|hb)!=(0|(eb=eb+1|0)););eb=cb<<3,cb=fb<<2}if(q[ab+160>>2]=hb<<4,q[ab+164>>2]=q[db+16>>2]<<2,q[ab+168>>2]=q[db+16>>2],q[ab+172>>2]=q[db+16>>2]<<2,q[ab+176>>2]=q[db+16>>2]<<2,fb=q[db+16>>2],q[ab+184>>2]=gb,q[ab+180>>2]=fb<<2,q[ab+188>>2]=q[db+16>>2]<<2,q[ab+192>>2]=q[db+16>>2]<<2,q[ab+196>>2]=q[db+16>>2]<<2,q[ab+200>>2]=q[db+16>>2]<<2,q[ab+204>>2]=q[db+16>>2]<<2,fb=q[db+16>>2],q[ab+236>>2]=eb,q[ab+232>>2]=cb,q[ab+228>>2]=cb,q[ab+224>>2]=cb,q[ab+220>>2]=cb,q[ab+216>>2]=cb,q[ab+212>>2]=cb,q[ab+208>>2]=fb<<2,q[ab+240>>2]=w(q[db+20>>2],40),q[ab+244>>2]=q[db+20>>2]<<2,q[ab+248>>2]=w(q[db+52>>2],28),1<=((cb=fb=0)|(gb=q[db+48>>2]))){for(hb=q[a+296>>2],eb=0;eb=(1<<q[hb+(cb<<2)>>2])+eb|0,(0|gb)!=(0|(cb=cb+1|0)););cb=eb<<2}if(q[ab+260>>2]=cb,q[ab+256>>2]=cb,q[ab+252>>2]=w(gb,36),q[ab+264>>2]=w(q[db+72>>2],28),1<=((cb=0)|(hb=q[db+72>>2]))){for(ib=q[a+340>>2],kb=q[a+336>>2],lb=q[a+328>>2],eb=0;eb=(0|(jb=q[(gb=fb<<2)+kb>>2]-q[gb+ib>>2]|0))<(0|eb)?eb:jb+1|0,cb=(0|cb)<(0|(gb=q[gb+lb>>2]))?gb:cb,(0|hb)!=(0|(fb=fb+1|0)););fb=eb<<2,cb<<=2}if(eb=q[db+76>>2],q[ab+280>>2]=fb,q[ab+276>>2]=cb,q[ab+272>>2]=fb,q[ab+268>>2]=eb<<4,1<=((cb=0)|(fb=q[db+80>>2]))){for(gb=q[a+364>>2],a=q[a+296>>2],eb=0;eb=(1<<q[a+(q[gb+(cb<<2)>>2]<<2)>>2])+eb|0,(0|fb)!=(0|(cb=cb+1|0)););cb=eb<<2}for(q[ab+284>>2]=w(fb,24),q[ab+288>>2]=q[db+80>>2]<<2,a=q[db+80>>2],q[ab+304>>2]=cb,q[ab+300>>2]=cb,q[ab+296>>2]=cb,q[ab>>2]=0,q[ab+292>>2]=a<<2,cb=384,eb=1;cb=((db=q[(a=(eb<<2)+ab|0)>>2])+15&-16)+(q[a>>2]=cb)|0,77!=(0|(eb=eb+1|0)););q[bb>>2]=cb}function va(a,ab,bb){var nb;ab|=0,bb|=0,L=nb=L+-64|0;a:{if(a|=0)if(ab)if((ab+15&-16)==(0|ab)){if(ab=function(a,fh,gh){var lh,hh=0,ih=0,jh=0,kh=0,mh=0,nh=0,oh=0,ph=0,qh=0,rh=0,sh=0,th=0,uh=0,vh=0,wh=0,xh=0,yh=0,zh=0,Ah=x(0);if(ba(16+(L=lh=L-336|0)|0,0,308),ua(a+704|0,16+lh|0,12+lh|0),(ih=q[12+lh>>2])>>>0<=gh>>>0){if(hh=(jh=ba(fh,gh=0,ih))+q[16+lh>>2]|0,q[hh+8>>2]=jh+q[20+lh>>2],q[hh+36>>2]=jh+q[24+lh>>2],q[hh+44>>2]=jh+q[28+lh>>2],q[hh+48>>2]=jh+q[32+lh>>2],q[hh+52>>2]=jh+q[36+lh>>2],q[hh+12>>2]=jh+q[40+lh>>2],q[hh+16>>2]=jh+q[44+lh>>2],q[hh+20>>2]=jh+q[48+lh>>2],q[hh+28>>2]=jh+q[52+lh>>2],q[hh+32>>2]=jh+q[56+lh>>2],fh=q[a+704>>2],q[hh+60>>2]=jh+q[60+lh>>2],kh=jh+q[64+lh>>2]|0,q[hh+68>>2]=kh,q[hh+76>>2]=jh+q[68+lh>>2],q[hh+168>>2]=jh+q[72+lh>>2],q[hh+172>>2]=jh+q[76+lh>>2],q[hh+176>>2]=jh+q[80+lh>>2],q[hh+192>>2]=jh+q[84+lh>>2],q[hh+196>>2]=jh+q[88+lh>>2],1<=(0|(fh=q[fh+8>>2])))for(ih=jh+q[92+lh>>2]|0,mh=q[a+792>>2];q[20+(kh+w(gh,24)|0)>>2]=ih,ih=(15+(q[mh+(gh<<2)>>2]<<3)&-16)+ih|0,(0|fh)!=(0|(gh=gh+1|0)););if(q[hh+80>>2]=jh+q[96+lh>>2],q[hh+84>>2]=jh+q[100+lh>>2],q[hh+88>>2]=jh+q[104+lh>>2],q[hh+96>>2]=jh+q[108+lh>>2],q[hh+100>>2]=jh+q[112+lh>>2],q[hh+104>>2]=jh+q[116+lh>>2],q[hh+108>>2]=jh+q[120+lh>>2],q[hh+112>>2]=jh+q[124+lh>>2],q[hh+116>>2]=jh+q[128+lh>>2],q[hh+120>>2]=jh+q[132+lh>>2],q[hh+128>>2]=jh+q[136+lh>>2],q[hh+132>>2]=jh+q[140+lh>>2],q[hh+136>>2]=jh+q[144+lh>>2],q[hh+140>>2]=jh+q[148+lh>>2],q[hh+144>>2]=jh+q[152+lh>>2],q[hh+148>>2]=jh+q[156+lh>>2],q[hh+152>>2]=jh+q[160+lh>>2],q[hh+156>>2]=jh+q[164+lh>>2],q[hh+160>>2]=jh+q[168+lh>>2],q[hh+164>>2]=jh+q[172+lh>>2],fh=q[a+704>>2],q[hh+204>>2]=jh+q[176+lh>>2],q[hh+248>>2]=jh+q[180+lh>>2],q[hh+260>>2]=jh+q[184+lh>>2],q[hh+264>>2]=jh+q[188+lh>>2],q[hh+268>>2]=jh+q[192+lh>>2],gh=jh+q[196+lh>>2]|0,q[hh+272>>2]=gh,!((0|(fh=q[fh+16>>2]))<1)&&(ih=jh+q[200+lh>>2]|0,q[gh>>2]=ih,(gh=1)!=(0|fh)))for(kh=0;ih=(15+(q[q[a+876>>2]+(kh<<2)>>2]<<3)&-16)+ih|0,q[q[hh+272>>2]+(gh<<2)>>2]=ih,(0|fh)!=(0|(gh=(kh=gh)+1|0)););if(q[hh+276>>2]=jh+q[204+lh>>2],q[hh+280>>2]=jh+q[208+lh>>2],q[hh+284>>2]=jh+q[212+lh>>2],q[hh+288>>2]=jh+q[216+lh>>2],q[hh+208>>2]=jh+q[220+lh>>2],q[hh+212>>2]=jh+q[224+lh>>2],q[hh+216>>2]=jh+q[228+lh>>2],q[hh+224>>2]=jh+q[232+lh>>2],q[hh+228>>2]=jh+q[236+lh>>2],q[hh+232>>2]=jh+q[240+lh>>2],q[hh+236>>2]=jh+q[244+lh>>2],q[hh+240>>2]=jh+q[248+lh>>2],q[hh+244>>2]=jh+q[252+lh>>2],fh=q[256+lh>>2],oh=jh+q[260+lh>>2]|0,q[hh+300>>2]=oh,qh=fh+jh|0,q[hh+296>>2]=qh,rh=jh+q[264+lh>>2]|0,q[hh+308>>2]=rh,fh=q[a+704>>2],gh=q[276+lh>>2],ih=q[272+lh>>2],ph=jh+q[268+lh>>2]|0,q[hh+316>>2]=ph,1<=(0|(kh=q[fh+48>>2])))for(ih=jh+ih|0,fh=gh+jh|0,mh=q[a+1e3>>2],gh=0;nh=ph+w(gh,36)|0,q[nh+20>>2]=fh,q[nh+16>>2]=ih,fh=(nh=1<<q[mh+(gh<<2)>>2]<<2)+fh|0,ih=ih+nh|0,(0|kh)!=(0|(gh=gh+1|0)););if(fh=q[a+704>>2],kh=jh+q[280+lh>>2]|0,q[hh+324>>2]=kh,1<=(0|(fh=q[fh+72>>2])))for(ih=jh+q[284+lh>>2]|0,mh=q[a+1032>>2],gh=0;q[12+(kh+w(gh,28)|0)>>2]=ih,ih=(q[mh+(gh<<2)>>2]<<4)+ih|0,(0|fh)!=(0|(gh=gh+1|0)););if(q[hh+328>>2]=jh+q[288+lh>>2],q[hh+332>>2]=jh+q[292+lh>>2],q[hh+336>>2]=jh+q[296+lh>>2],q[hh+344>>2]=jh+q[300+lh>>2],q[hh+348>>2]=jh+q[304+lh>>2],q[hh+352>>2]=jh+q[308+lh>>2],q[hh+356>>2]=jh+q[312+lh>>2],q[hh+364>>2]=jh+q[316+lh>>2],fh=q[320+lh>>2],q[hh+376>>2]=1,q[hh+368>>2]=fh+jh,q[hh+380>>2]=1&o[q[a+708>>2]+20|0],jh=q[a+704>>2],ih=q[jh+20>>2],1<=(0|(q[hh+292>>2]=ih))){for(sh=q[a+932>>2],th=q[a+928>>2],uh=q[a+924>>2],nh=q[a+916>>2],wh=q[a+920>>2],xh=q[a+908>>2],yh=q[a+912>>2],fh=ih;kh=qh+w(gh=fh+-1|0,40)|0,vh=(mh=gh<<2)+yh|0,q[kh>>2]=q[vh>>2],zh=mh+xh|0,q[kh+4>>2]=q[zh>>2],u[kh+8>>2]=u[zh>>2]-u[vh>>2],q[kh+12>>2]=q[mh+wh>>2],q[kh+32>>2]=q[mh+nh>>2],Ah=$b(x(q[mh+uh>>2])),u[kh+16>>2]=Ah,u[kh+20>>2]=Ah*x(1.5),q[kh+24>>2]=q[mh+th>>2],mh=q[mh+sh>>2],q[kh+36>>2]=1,q[kh+28>>2]=mh,kh=1<(0|fh),fh=gh,kh;);for(;q[(gh=(fh=ih+-1|0)<<2)+oh>>2]=q[gh+nh>>2],gh=1<(0|ih),ih=fh,gh;);}if(fh=q[jh+52>>2],1<=(0|(q[hh+304>>2]=fh)))for(kh=q[a+1004>>2],mh=q[a+1012>>2],nh=q[a+1008>>2];ih=rh+w(gh=fh+-1|0,28)|0,oh=gh<<2,q[ih>>2]=q[oh+nh>>2],oh=q[kh+oh>>2],q[ih+20>>2]=1,q[ih+24>>2]=1,q[ih+12>>2]=0,q[ih+4>>2]=mh+(oh<<2),ih=1<(0|fh),fh=gh,ih;);if(fh=q[jh+48>>2],1<=(0|(q[hh+312>>2]=fh)))for(kh=q[a+996>>2],mh=q[a+992>>2],nh=q[a+1e3>>2];ih=ph+w(gh=fh+-1|0,36)|0,qh=q[(oh=gh<<2)+nh>>2],q[ih>>2]=qh,q[ih+4>>2]=1<<qh,oh=q[kh+oh>>2],q[ih+24>>2]=1,q[ih+28>>2]=1,q[ih+12>>2]=mh+(oh<<2),ih=1<(0|fh),fh=gh,ih;);if(fh=q[jh>>2],q[hh+4>>2]=fh,mh=q[a+720>>2],q[hh+40>>2]=mh,(0|fh)<1)gh=0;else{for(nh=q[a+732>>2],oh=q[a+736>>2],qh=q[a+740>>2],rh=q[hh+52>>2],sh=q[hh+8>>2],ih=fh;kh=(gh=ih+-1|0)<<2,q[(th=sh+(gh<<3)|0)>>2]=q[kh+qh>>2],q[th+4>>2]=q[kh+oh>>2],u[kh+rh>>2]=q[kh+nh>>2]?x(1):x(0),kh=1<(0|ih),ih=gh,kh;);for(nh=q[hh+12>>2],gh=0;kh=q[4+(ph+w(q[(oh=(ih=fh+-1|0)<<2)+mh>>2],36)|0)>>2],gh=gh+(q[nh+oh>>2]=kh)|0,kh=1<(0|fh),fh=ih,kh;);}if(q[hh+24>>2]=gh,ih=q[jh+4>>2],q[hh+56>>2]=ih,q[hh+180>>2]=q[a+752>>2],q[hh+184>>2]=q[a+780>>2],q[hh+188>>2]=q[a+804>>2],1<=(0|ih)){for(;;){ih=(fh=ih)+-1|0,gh=q[hh+60>>2]+(ih<<5)|0,kh=ih<<2,q[gh>>2]=q[kh+q[a+764>>2]>>2],q[gh+4>>2]=q[kh+q[a+768>>2]>>2],jh=q[kh+q[a+772>>2]>>2],q[gh+8>>2]=jh,mh=q[kh+q[a+776>>2]>>2],q[gh+12>>2]=mh,q[gh+28>>2]=q[kh+q[a+760>>2]>>2];c:if(jh>>>0<=1){if(jh-1){q[gh+20>>2]=1,q[gh+16>>2]=2,q[gh+24>>2]=q[hh+68>>2]+w(mh,24);break c}q[gh+20>>2]=3,q[gh+16>>2]=4,q[gh+24>>2]=q[hh+76>>2]+(mh<<5)}else Y(4,1026,0);if(!(1<(0|fh)))break}jh=q[a+704>>2]}fh=q[jh+8>>2];d:if(!((0|(q[hh+64>>2]=fh))<1)){if(gh=fh+-1|0,mh=q[a+792>>2],ph=q[a+800>>2],nh=q[a+796>>2],oh=q[hh+68>>2],r[a+4|0]<2)for(;;)if(ih=oh+w(gh,24)|0,kh=gh<<2,q[ih>>2]=q[kh+nh>>2],q[ih+4>>2]=q[kh+ph>>2],kh=q[kh+mh>>2],q[ih+8>>2]=0,q[ih+12>>2]=kh,ih=0<(0|gh),gh=gh+-1|0,!ih)break d;for(qh=q[a+1108>>2];ih=oh+w(gh,24)|0,kh=gh<<2,q[ih>>2]=q[kh+nh>>2],q[ih+4>>2]=q[kh+ph>>2],q[ih+12>>2]=q[kh+mh>>2],q[ih+8>>2]=q[kh+qh>>2],ih=0<(0|gh),gh=gh+-1|0,ih;);}if(gh=q[jh+12>>2],1<=(0|(q[hh+72>>2]=gh)))for(mh=q[a+816>>2],ph=q[hh+76>>2],ih=gh;q[ph+((kh=ih+-1|0)<<5)>>2]=q[mh+(kh<<2)>>2],nh=1<(0|ih),ih=kh,nh;);if(1<=((kh=ih=0)|fh)){for(ph=q[hh+80>>2],nh=q[hh+184>>2],oh=q[hh+316>>2];mh=q[4+(oh+w(q[(qh=(gh=fh+-1|0)<<2)+nh>>2],36)|0)>>2],kh=kh+(q[ph+qh>>2]=mh)|0,mh=1<(0|fh),fh=gh,mh;);gh=q[hh+72>>2]}if(q[hh+92>>2]=kh,1<=(0|gh))for(mh=q[hh+112>>2],ph=q[hh+188>>2],nh=q[hh+316>>2];kh=q[4+(nh+w(q[(oh=(fh=gh+-1|0)<<2)+ph>>2],36)|0)>>2],ih=ih+(q[mh+oh>>2]=kh)|0,kh=1<(0|gh),gh=fh,kh;);if(q[hh+124>>2]=ih,ih=q[jh+16>>2],q[hh+200>>2]=ih,ph=q[a+840>>2],q[hh+252>>2]=ph,(0|ih)<1)gh=0;else{for(nh=q[a+856>>2],oh=q[a+876>>2],qh=q[a+864>>2],rh=q[a+860>>2],sh=q[hh+204>>2],kh=ih;mh=(fh=kh+-1|0)<<2,q[(gh=sh+(fh<<4)|0)>>2]=q[mh+rh>>2],q[gh+4>>2]=q[mh+qh>>2],q[gh+12>>2]=q[mh+oh>>2],q[gh+8>>2]=q[mh+nh>>2],gh=1<(0|kh),kh=fh,gh;);for(mh=q[hh+208>>2],nh=q[hh+316>>2],gh=0;kh=q[4+(nh+w(q[(oh=(fh=ih+-1|0)<<2)+ph>>2],36)|0)>>2],gh=gh+(q[mh+oh>>2]=kh)|0,kh=1<(0|ih),ih=fh,kh;);}if(q[hh+220>>2]=gh,kh=q[jh+72>>2],1<=(0|(q[hh+320>>2]=kh)))for(nh=q[a+1028>>2],oh=q[a+1044>>2],qh=q[a+1040>>2],rh=q[a+1036>>2],sh=q[a+1032>>2],th=q[hh+324>>2],ih=0;;){if(fh=th+w(ih,28)|0,mh=q[(gh=ih<<2)+sh>>2],q[fh+4>>2]=mh,q[fh>>2]=q[gh+rh>>2],ph=q[gh+qh>>2],q[fh+16>>2]=ph,uh=q[gh+oh>>2],q[fh+20>>2]=uh,q[fh+8>>2]=0,q[fh+24>>2]=1+(ph-uh|0),1<=(0|mh))for(uh=q[gh+nh>>2],wh=q[fh+12>>2],xh=q[a+1056>>2],yh=q[a+1048>>2],vh=q[a+1052>>2],gh=0;ph=gh+uh<<2,q[4+(fh=wh+(gh<<4)|0)>>2]=q[ph+vh>>2],q[fh>>2]=q[ph+yh>>2],ph=q[ph+xh>>2],q[fh+12>>2]=0,q[fh+8>>2]=ph,(0|mh)!=(0|(gh=gh+1|0)););if((0|kh)==(0|(ih=ih+1|0)))break}if(ih=q[jh+80>>2],q[hh+340>>2]=ih,mh=q[a+1068>>2],q[hh+372>>2]=mh,!(((fh=0)|ih)<1)){for(ph=q[a+1100>>2],nh=q[a+1088>>2],oh=q[a+1096>>2],qh=q[a+1092>>2],rh=q[a+1084>>2],sh=q[a+1080>>2],th=q[hh+344>>2];kh=th+w(gh=ih+-1|0,24)|0,jh=gh<<2,q[kh>>2]=q[jh+sh>>2],q[kh+4>>2]=q[jh+rh>>2],q[kh+8>>2]=q[jh+qh>>2],jh=q[jh+nh>>2],q[kh+16>>2]=ph+(jh<<1),q[kh+12>>2]=oh+(jh<<2),kh=1<(0|ih),ih=gh,kh;);if(!((0|(gh=q[hh+340>>2]))<1))for(jh=q[hh+348>>2],ph=q[hh+316>>2];kh=q[4+(ph+w(q[(nh=(ih=gh+-1|0)<<2)+mh>>2],36)|0)>>2],fh=fh+(q[jh+nh>>2]=kh)|0,kh=1<(0|gh),gh=ih,kh;);}q[hh>>2]=a,q[hh+360>>2]=fh,ta(hh)}return L=336+lh|0,hh}(a,ab,bb))break a;q[36+nb>>2]=1872,q[32+nb>>2]=1846,Y(4,1087,32+nb|0)}else q[52+nb>>2]=1441,q[48+nb>>2]=1846,Y(4,1087,48+nb|0);else q[20+nb>>2]=1246,q[16+nb>>2]=1846,Y(4,1087,16+nb|0);else q[4+nb>>2]=1828,q[nb>>2]=1846,Y(4,1087,nb);ab=0}return L=64+nb|0,0|ab}function wa(a){var ab;return L=ab=L-16|0,a=(a|=0)?function(a){var Th;return ba(16+(L=Th=L-336|0)|0,0,308),ua(a+704|0,16+Th|0,12+Th|0),L=336+Th|0,q[12+Th>>2]}(a):(q[4+ab>>2]=1828,q[ab>>2]=1810,Y(4,1087,ab),0),L=16+ab|0,0|a}function xa(a,bb){var ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0;rb=a+bb|0;a:{b:if(!(1&(ob=q[a+4>>2]))){if(!(3&ob))break a;if(bb=(ob=q[a>>2])+bb|0,(0|(a=a-ob|0))==q[1928]){if(3==(3&(ob=q[rb+4>>2])))return q[1925]=bb,q[rb+4>>2]=-2&ob,q[a+4>>2]=1|bb,void(q[rb>>2]=bb)}else{if(ob>>>0<=255){if(qb=ob>>>3,ob=q[a+8>>2],(0|(pb=q[a+12>>2]))==(0|ob)){ub=7692,vb=q[1923]&jc(qb),q[ub>>2]=vb;break b}q[ob+12>>2]=pb,q[pb+8>>2]=ob;break b}if(tb=q[a+24>>2],(0|(ob=q[a+12>>2]))==(0|a))if((qb=q[(pb=a+20|0)>>2])||(qb=q[(pb=a+16|0)>>2])){for(;sb=pb,(qb=q[(pb=(ob=qb)+20|0)>>2])||(pb=ob+16|0,qb=q[ob+16>>2]););q[sb>>2]=0}else ob=0;else pb=q[a+8>>2],q[pb+12>>2]=ob,q[ob+8>>2]=pb;if(!tb)break b;pb=q[a+28>>2];e:{if(q[(qb=7996+(pb<<2)|0)>>2]==(0|a)){if(q[qb>>2]=ob)break e;ub=7696,vb=q[1924]&jc(pb),q[ub>>2]=vb;break b}if(!(q[tb+(q[tb+16>>2]==(0|a)?16:20)>>2]=ob))break b}if(q[ob+24>>2]=tb,(pb=q[a+16>>2])&&(q[ob+16>>2]=pb,q[pb+24>>2]=ob),!(pb=q[a+20>>2]))break b;q[ob+20>>2]=pb,q[pb+24>>2]=ob}}f:{if(!(2&(ob=q[rb+4>>2]))){if(q[1929]==(0|rb)){if(q[1929]=a,bb=q[1926]+bb|0,q[1926]=bb,q[a+4>>2]=1|bb,q[1928]!=(0|a))break a;return q[1925]=0,void(q[1928]=0)}if(q[1928]==(0|rb))return q[1928]=a,bb=q[1925]+bb|0,q[1925]=bb,q[a+4>>2]=1|bb,void(q[a+bb>>2]=bb);bb=(-8&ob)+bb|0;g:if(ob>>>0<=255){if(qb=ob>>>3,ob=q[rb+8>>2],(0|(pb=q[rb+12>>2]))==(0|ob)){ub=7692,vb=q[1923]&jc(qb),q[ub>>2]=vb;break g}q[ob+12>>2]=pb,q[pb+8>>2]=ob}else{if(tb=q[rb+24>>2],(0|rb)==(0|(ob=q[rb+12>>2])))if((qb=q[(pb=rb+20|0)>>2])||(qb=q[(pb=rb+16|0)>>2])){for(;sb=pb,(qb=q[(pb=(ob=qb)+20|0)>>2])||(pb=ob+16|0,qb=q[ob+16>>2]););q[sb>>2]=0}else ob=0;else pb=q[rb+8>>2],q[pb+12>>2]=ob,q[ob+8>>2]=pb;if(tb){pb=q[rb+28>>2];j:{if(q[(qb=7996+(pb<<2)|0)>>2]==(0|rb)){if(q[qb>>2]=ob)break j;ub=7696,vb=q[1924]&jc(pb),q[ub>>2]=vb;break g}if(!(q[tb+(q[tb+16>>2]==(0|rb)?16:20)>>2]=ob))break g}q[ob+24>>2]=tb,(pb=q[rb+16>>2])&&(q[ob+16>>2]=pb,q[pb+24>>2]=ob),(pb=q[rb+20>>2])&&(q[ob+20>>2]=pb,q[pb+24>>2]=ob)}}if(q[a+4>>2]=1|bb,q[a+bb>>2]=bb,q[1928]!=(0|a))break f;return void(q[1925]=bb)}q[rb+4>>2]=-2&ob,q[a+4>>2]=1|bb,q[a+bb>>2]=bb}if(bb>>>0<=255)return bb=7732+((ob=bb>>>3)<<3)|0,ob=(pb=q[1923])&(ob=1<<ob)?q[bb+8>>2]:(q[1923]=ob|pb,bb),q[bb+8>>2]=a,q[ob+12>>2]=a,q[a+12>>2]=bb,void(q[a+8>>2]=ob);q[a+16>>2]=0,ob=q[a+20>>2]=0,(qb=bb>>>8)&&(ob=31,16777215<bb>>>0||(ob=28+((ob=((rb=(qb<<=sb=qb+1048320>>>16&8)<<(ob=qb+520192>>>16&4))<<(qb=rb+245760>>>16&2)>>>15)-(qb|ob|sb)|0)<<1|bb>>>ob+21&1)|0)),qb=7996+((q[(pb=a)+28>>2]=ob)<<2)|0;m:{if((pb=q[1924])&(sb=1<<ob)){for(pb=bb<<(31==(0|ob)?0:25-(ob>>>1)|0),ob=q[qb>>2];;){if((-8&q[(qb=ob)+4>>2])==(0|bb))break m;if(ob=pb>>>29,pb<<=1,!(ob=q[16+(sb=qb+(4&ob)|0)>>2]))break}q[sb+16>>2]=a}else q[1924]=pb|sb,q[qb>>2]=a;return q[a+24>>2]=qb,q[a+12>>2]=a,void(q[a+8>>2]=a)}bb=q[qb+8>>2],q[bb+12>>2]=a,q[qb+8>>2]=a,q[a+24>>2]=0,q[a+12>>2]=qb,q[a+8>>2]=bb}}function ya(a,bb,wb){var xb=0;a:{if(8!=(0|bb)){if(xb=28,3&bb|1!=(0|function(a){for(var qi=0,si=0;si=qi,a;)a&=a-1,qi=qi+1|0;return si}(bb>>>2)))break a;if(xb=48,-64-bb>>>0<wb>>>0)break a;bb=function(a,_h){var $h=0,ai=0,ci=0,di=0,ei=0;if((ai=a>>>0>($h=16)?a:16)+-1&ai)for(;$h=(a=$h)<<1,a>>>0<ai>>>0;);else a=ai;return-64-a>>>0<=_h>>>0?(q[1906]=48,0):($h=ja(12+((ai=_h>>>0<11?16:_h+11&-8)+a|0)|0))?(_h=$h+-8|0,$h&a+-1?(ci=(-8&(ei=q[(di=$h+-4|0)>>2]))-($h=(a=15<($h=((a+$h|0)-1&0-a)-8|0)-_h>>>0?$h:a+$h|0)-_h|0)|0,3&ei?(q[a+4>>2]=ci|1&q[a+4>>2]|2,q[4+(ci=a+ci|0)>>2]=1|q[ci+4>>2],q[di>>2]=$h|1&q[di>>2]|2,q[a+4>>2]=1|q[a+4>>2],xa(_h,$h)):(_h=q[_h>>2],q[a+4>>2]=ci,q[a>>2]=_h+$h)):a=_h,3&(_h=q[a+4>>2])&&(($h=-8&_h)>>>0<=ai+16>>>0||(q[a+4>>2]=ai|1&_h|2,_h=a+ai|0,ai=$h-ai|0,q[_h+4>>2]=3|ai,q[4+($h=a+$h|0)>>2]=1|q[$h+4>>2],xa(_h,ai))),a+8|0):0}(16<bb>>>0?bb:16,wb)}else bb=ja(wb);if(!bb)return 1;q[a>>2]=bb,xb=0}return xb}function za(a){var bb=0,wb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0;a:if(a){Ab=(yb=a+-8|0)+(a=-8&(wb=q[a+-4>>2]))|0;b:if(!(1&wb)){if(!(3&wb))break a;if((yb=yb-(wb=q[yb>>2])|0)>>>0<t[1927])break a;if(a=a+wb|0,q[1928]==(0|yb)){if(3==(3&(wb=q[Ab+4>>2])))return q[1925]=a,q[Ab+4>>2]=-2&wb,q[yb+4>>2]=1|a,void(q[a+yb>>2]=a)}else{if(wb>>>0<=255){if(zb=q[yb+8>>2],wb>>>=3,(0|(bb=q[yb+12>>2]))==(0|zb)){Db=7692,Eb=q[1923]&jc(wb),q[Db>>2]=Eb;break b}q[zb+12>>2]=bb,q[bb+8>>2]=zb;break b}if(Cb=q[yb+24>>2],(0|yb)==(0|(wb=q[yb+12>>2])))if((bb=q[(zb=yb+20|0)>>2])||(bb=q[(zb=yb+16|0)>>2])){for(;Bb=zb,(bb=q[(zb=(wb=bb)+20|0)>>2])||(zb=wb+16|0,bb=q[wb+16>>2]););q[Bb>>2]=0}else wb=0;else bb=q[yb+8>>2],q[bb+12>>2]=wb,q[wb+8>>2]=bb;if(!Cb)break b;zb=q[yb+28>>2];e:{if(q[(bb=7996+(zb<<2)|0)>>2]==(0|yb)){if(q[bb>>2]=wb)break e;Db=7696,Eb=q[1924]&jc(zb),q[Db>>2]=Eb;break b}if(!(q[Cb+(q[Cb+16>>2]==(0|yb)?16:20)>>2]=wb))break b}if(q[wb+24>>2]=Cb,(bb=q[yb+16>>2])&&(q[wb+16>>2]=bb,q[bb+24>>2]=wb),!(bb=q[yb+20>>2]))break b;q[wb+20>>2]=bb,q[bb+24>>2]=wb}}if(!(Ab>>>0<=yb>>>0)&&1&(wb=q[Ab+4>>2])){f:{if(!(2&wb)){if(q[1929]==(0|Ab)){if(q[1929]=yb,a=q[1926]+a|0,q[1926]=a,q[yb+4>>2]=1|a,q[1928]!=(0|yb))break a;return q[1925]=0,void(q[1928]=0)}if(q[1928]==(0|Ab))return q[1928]=yb,a=q[1925]+a|0,q[1925]=a,q[yb+4>>2]=1|a,void(q[a+yb>>2]=a);a=(-8&wb)+a|0;g:if(wb>>>0<=255){if(wb>>>=3,(0|(bb=q[Ab+8>>2]))==(0|(zb=q[Ab+12>>2]))){Db=7692,Eb=q[1923]&jc(wb),q[Db>>2]=Eb;break g}q[bb+12>>2]=zb,q[zb+8>>2]=bb}else{if(Cb=q[Ab+24>>2],(0|Ab)==(0|(wb=q[Ab+12>>2])))if((bb=q[(zb=Ab+20|0)>>2])||(bb=q[(zb=Ab+16|0)>>2])){for(;Bb=zb,(bb=q[(zb=(wb=bb)+20|0)>>2])||(zb=wb+16|0,bb=q[wb+16>>2]););q[Bb>>2]=0}else wb=0;else bb=q[Ab+8>>2],q[bb+12>>2]=wb,q[wb+8>>2]=bb;if(Cb){zb=q[Ab+28>>2];j:{if(q[(bb=7996+(zb<<2)|0)>>2]==(0|Ab)){if(q[bb>>2]=wb)break j;Db=7696,Eb=q[1924]&jc(zb),q[Db>>2]=Eb;break g}if(!(q[Cb+(q[Cb+16>>2]==(0|Ab)?16:20)>>2]=wb))break g}q[wb+24>>2]=Cb,(bb=q[Ab+16>>2])&&(q[wb+16>>2]=bb,q[bb+24>>2]=wb),(bb=q[Ab+20>>2])&&(q[wb+20>>2]=bb,q[bb+24>>2]=wb)}}if(q[yb+4>>2]=1|a,q[a+yb>>2]=a,q[1928]!=(0|yb))break f;return void(q[1925]=a)}q[Ab+4>>2]=-2&wb,q[yb+4>>2]=1|a,q[a+yb>>2]=a}if(a>>>0<=255)return wb=7732+((a>>>=3)<<3)|0,a=(bb=q[1923])&(a=1<<a)?q[wb+8>>2]:(q[1923]=a|bb,wb),q[wb+8>>2]=yb,q[a+12>>2]=yb,q[yb+12>>2]=wb,void(q[yb+8>>2]=a);q[yb+16>>2]=0,bb=q[yb+20>>2]=0,(zb=a>>>8)&&(bb=31,16777215<a>>>0||(bb=zb,bb<<=zb=zb+1048320>>>16&8,bb=28+((bb=((bb<<=Cb=bb+520192>>>16&4)<<(Bb=bb+245760>>>16&2)>>>15)-(Bb|zb|Cb)|0)<<1|a>>>bb+21&1)|0)),Bb=7996+((q[(wb=yb)+28>>2]=bb)<<2)|0;m:if((zb=q[1924])&(wb=1<<bb)){zb=a<<(31==(0|bb)?0:25-(bb>>>1)|0),wb=q[Bb>>2];n:{for(;;){if((-8&q[(bb=wb)+4>>2])==(0|a))break n;if(wb=zb>>>29,zb<<=1,!(wb=q[16+(Bb=bb+(4&wb)|0)>>2]))break}q[Bb+16>>2]=yb,q[yb+12>>2]=yb,q[yb+24>>2]=bb,q[yb+8>>2]=yb;break m}a=q[bb+8>>2],q[a+12>>2]=yb,q[bb+8>>2]=yb,q[yb+24>>2]=0,q[yb+12>>2]=bb,q[yb+8>>2]=a}else q[1924]=wb|zb,q[Bb>>2]=yb,q[yb+12>>2]=yb,q[yb+24>>2]=Bb,q[yb+8>>2]=yb;if(a=q[1931]+-1|0,!(q[1931]=a)){for(yb=8148;yb=(a=q[yb>>2])+8|0,a;);q[1931]=-1}}}}function Aa(a,Fb){var Lb,Ib,Gb=0,Hb=0,Jb=0,Kb=x(0);if(j(Fb),!((Ib=2147483647&(Gb=e(0)))>>>0<=2139095040&&(j(a),(Hb=2147483647&(Jb=e(0)))>>>0<2139095041)))return x(a+Fb);if(1065353216==(0|Gb))return ka(a);Gb=(Lb=Gb>>>30&2)|Jb>>>31;b:{c:{d:{e:{if(!Hb){f:switch(Gb-2|0){case 0:break e;case 1:break f;default:break d}return x(-3.1415927410125732)}if(2139095040!=(0|Ib)){if(!Ib|!(Hb>>>0<=218103808+Ib>>>0&&2139095040!=(0|Hb)))break b;if(Hb+218103808>>>0<Ib>>>0&&(Kb=x(0),Lb)||(Kb=ka(x(y(x(a/Fb))))),a=Kb,Gb>>>0<=2){h:switch(Gb-1|0){case 0:return x(-a);case 1:break h;default:break d}return x(x(3.1415927410125732)-x(a+x(8.742277657347586e-8)))}return x(x(a+x(8.742277657347586e-8))+x(-3.1415927410125732))}if(2139095040==(0|Hb))break c;return u[6128+(Gb<<2)>>2]}a=x(3.1415927410125732)}return a}return u[6112+(Gb<<2)>>2]}return x((0|Jb)<0?-1.5707963705062866:1.5707963705062866)}function Da(a,Ub,Vb){var Zb,bc,gc,hc,kc,Wb=0,Xb=0,Yb=0,_b=0,$b=0,ac=0,cc=0,dc=0,ec=0,fc=0,ic=0,jc=0;if(L=Zb=L-560|0,cc=(Xb=Vb)+w(gc=0<(0|(Vb=(Vb+-3|0)/24|0))?Vb:0,-24)|0,0<=(0|(bc=q[808])))for(Xb=bc+1|0,Vb=gc;v[(320+Zb|0)+(Yb<<3)>>3]=(0|Vb)<0?0:+q[3248+(Vb<<2)>>2],Vb=Vb+1|0,(0|Xb)!=(0|(Yb=Yb+1|0)););for(ac=cc+-24|0,Xb=0;;){for(Wb=Vb=0;Wb+=v[(Vb<<3)+a>>3]*v[(320+Zb|0)+(Xb-Vb<<3)>>3],1!=(0|(Vb=Vb+1|0)););if(v[(Xb<<3)+Zb>>3]=Wb,Vb=(0|Xb)<(0|bc),Xb=Xb+1|0,!Vb)break}kc=23-ac|0,hc=24-ac|0,Xb=bc;a:{for(;;){if(Wb=v[(Xb<<3)+Zb>>3],!(ec=((Vb=0)|(Yb=Xb))<1))for(;$b=(480+Zb|0)+(Vb<<2)|0,dc=Wb,_b=y(Wb*=5.960464477539063e-8)<2147483648?~~Wb:-2147483648,_b=y(dc+=-16777216*(Wb=+(0|_b)))<2147483648?~~dc:-2147483648,q[$b>>2]=_b,Wb=v[(($b=Yb+-1|0)<<3)+Zb>>3]+Wb,Vb=Vb+1|0,_b=1<(0|Yb),Yb=$b,_b;);Wb=ha(Wb,ac),Wb+=-8*C(.125*Wb),Wb-=0|($b=y(Wb)<2147483648?~~Wb:-2147483648);e:{f:{g:{if(ic=(0|ac)<1){if(ac)break g;_b=q[476+((Xb<<2)+Zb|0)>>2]>>23}else fc=Yb=(Xb<<2)+Zb|0,Yb=(_b=q[Yb+476>>2])-((Vb=_b>>hc)<<hc)|0,$b=Vb+$b|0,_b=(q[fc+476>>2]=Yb)>>kc;if((0|_b)<1)break e;break f}if(_b=2,!(.5<=Wb)){_b=0;break e}}if(Yb=Vb=0,!ec)for(;;){ec=q[(jc=(480+Zb|0)+(Vb<<2)|0)>>2],fc=16777215;i:{j:{if(!Yb){if(!ec)break j;fc=16777216,Yb=1}q[jc>>2]=fc-ec;break i}Yb=0}if((0|Xb)==(0|(Vb=Vb+1|0)))break}ic||1<(Vb=ac+-1|0)>>>0||(q[476+(Vb=(Xb<<2)+Zb|0)>>2]=Vb-1?8388607&q[Vb+476>>2]:4194303&q[Vb+476>>2]),$b=$b+1|0,2==(0|_b)&&(Wb=1-Wb,_b=2,Yb&&(Wb-=ha(1,ac)))}if(0!=Wb)break;if(!(((Yb=0)|(Vb=Xb))<=(0|bc))){for(;Yb=q[(480+Zb|0)+((Vb=Vb+-1|0)<<2)>>2]|Yb,(0|bc)<(0|Vb););if(Yb){for(cc=ac;cc=cc+-24|0,!q[(480+Zb|0)+((Xb=Xb+-1|0)<<2)>>2];);break a}}for(Vb=1;Vb=(Yb=Vb)+1|0,!q[(480+Zb|0)+(bc-Yb<<2)>>2];);for(Yb=Xb+Yb|0;;){for(Xb=$b=Xb+1|0,v[(320+Zb|0)+($b<<3)>>3]=q[3248+(gc+Xb<<2)>>2],Wb=Vb=0;Wb+=v[(Vb<<3)+a>>3]*v[(320+Zb|0)+($b-Vb<<3)>>3],1!=(0|(Vb=Vb+1|0)););if(v[(Xb<<3)+Zb>>3]=Wb,!((0|Xb)<(0|Yb)))break}Xb=Yb}16777216<=(Wb=ha(Wb,0-ac|0))?(a=(480+Zb|0)+(Xb<<2)|0,dc=Wb,Vb=y(Wb*=5.960464477539063e-8)<2147483648?~~Wb:-2147483648,Yb=y(Wb=dc+-16777216*(0|Vb))<2147483648?~~Wb:-2147483648,q[a>>2]=Yb,Xb=Xb+1|0):(Vb=y(Wb)<2147483648?~~Wb:-2147483648,cc=ac),q[(480+Zb|0)+(Xb<<2)>>2]=Vb}if(Wb=ha(1,cc),!((0|Xb)<=-1)){for(Vb=Xb;v[(Vb<<3)+Zb>>3]=Wb*q[(480+Zb|0)+(Vb<<2)>>2],Wb*=5.960464477539063e-8,a=0<(0|Vb),Vb=Vb+-1|0,a;);if(!((0|Xb)<=-1))for(Vb=Xb;;){for(Yb=Xb-(a=Vb)|0,Vb=Wb=0;Wb+=v[6016+(Vb<<3)>>3]*v[(a+Vb<<3)+Zb>>3],!((0|bc)<=(0|Vb))&&(ac=Vb>>>0<Yb>>>0,Vb=Vb+1|0,ac););if(v[(160+Zb|0)+(Yb<<3)>>3]=Wb,Vb=a+-1|0,!(0<(0|a)))break}}if((Wb=0)<=(0|Xb))for(;Wb+=v[(160+Zb|0)+(Xb<<3)>>3],a=0<(0|Xb),Xb=Xb+-1|0,a;);return v[Ub>>3]=_b?-Wb:Wb,L=560+Zb|0,7&$b}function Ia(a,Ub){var Vb=0,lc=0,tc=0;Vb=0!=(0|Ub);a:{b:{c:{d:if(!(!Ub|!(3&a)))for(;;){if(!r[0|a])break c;if(a=a+1|0,Vb=0!=(0|(Ub=Ub+-1|0)),!Ub)break d;if(!(3&a))break}if(!Vb)break b}if(!r[0|a])break a;e:{if(4<=Ub>>>0){for(Vb=(Vb=Ub+-4|0)-(lc=-4&Vb)|0,lc=4+(a+lc|0)|0;;){if((-1^(tc=q[a>>2]))&tc+-16843009&-2139062144)break e;if(a=a+4|0,!(3<(Ub=Ub+-4|0)>>>0))break}Ub=Vb,a=lc}if(!Ub)break b}for(;;){if(!r[0|a])break a;if(a=a+1|0,!(Ub=Ub+-1|0))break}}return 0}return a}function Na(a,Ub,Fc,Gc){if(a|Ub)for(;o[0|(Fc=Fc+-1|0)]=r[3168+(15&a)|0]|Gc,(a=(15&Ub)<<28|a>>>4)|(Ub>>>=4););return Fc}function Oa(a,Ub,Fc){if(a|Ub)for(;o[0|(Fc=Fc+-1|0)]=7&a|48,(a=(7&Ub)<<29|a>>>3)|(Ub>>>=3););return Fc}function $b(a){var _h=x(0),fi=x(0),gi=0,hi=0,ii=x(0),ji=x(0),ki=x(0),li=x(0),mi=0,ni=x(0),oi=x(0),pi=0;a:{b:{if(j(a),hi=2147483647&(gi=e(0))){if(!(hi>>>0<2139095041))return x(x(.10000000149011612)+a);if(1065353216==(0|hi))return x(-1<(0|gi)?.10000000149011612:10);if(2139095040==(0|hi))return x(-1<(0|gi)?0:-a);if(1073741824==(0|gi))return x(.010000000707805157);if(1056964608==(0|gi))return x(.3162277638912201);if(1291845633<=hi>>>0)return x((0|gi)<0?H:0);if(ii=u[1537],ji=x(x(1.600000023841858)-ii),ki=x(x(1)/x(ii+x(1.600000023841858))),f(0,-4096&(j(fi=x(ji*ki)),e(0))),_h=k(),li=x(_h*_h),oi=u[1541],ii=x(ki*x(x(ji-x((ni=_h)*x(3.099609375)))-x(_h*x(x(1.600000023841858)-x(x(3.099609375)-ii))))),ki=x(x(fi+_h)*ii),_h=x(fi*fi),ji=x(ki+x(x(_h*_h)*x(x(_h*x(x(_h*x(x(_h*x(x(_h*x(x(_h*x(.20697501301765442))+x(.23066075146198273)))+x(.2727281153202057)))+x(.3333333432674408)))+x(.4285714328289032)))+x(.6000000238418579)))),f(0,-4096&(j(x(x(li+x(3))+ji)),e(0))),_h=k(),ki=x(ni*_h),fi=x(x(ii*_h)+x(fi*x(ji-x(x(_h+x(-3))-li)))),f(0,-4096&(j(x(ki+fi)),e(0))),_h=k(),ii=x(_h*x(.9619140625)),li=x(u[1539]+x(x(x(fi-x(_h-ki))*x(.9617967009544373))+x(_h*x(-.00011736857413779944)))),f(0,-4096&(j(x(x(oi+x(ii+li))+x(-4))),e(0))),fi=k(),f(0,-4096&gi),ji=k(),_h=x(fi*ji),a=x(x(x(li-x(x(x(fi-x(-4))-oi)-ii))*a)+x(x(a-ji)*fi)),j(fi=x(_h+a)),1124073473<=(0|(gi=e(0))))break b;d:{e:{if((hi=1124073472)==(0|gi)){if(!(x(a+x(4.299566569443414e-8))>x(fi-_h)))break e;break b}if(hi=2147483647&gi,!(a<=x(fi-_h)^1|-1021968384!=(0|gi))|1125515265<=hi>>>0)break a;if(hi>>>0<1056964609)break d}mi=(8388607&(hi=(8388608>>>(hi>>>23)-126)+gi|0)|8388608)>>>150-(pi=hi>>>23&255),mi=(0|gi)<0?0-mi|0:mi,_h=x(_h-(f(0,hi&-8388608>>pi+-127),k())),j(x(a+_h)),gi=e(0)}f(0,-32768&gi),fi=k(),ii=x(fi*x(.693145751953125)),fi=x(x(fi*x(14286065379565116e-22))+x(x(a-x(fi-_h))*x(.6931471824645996))),a=x(ii+fi),_h=x(a*a),_h=x(a-x(_h*x(x(_h*x(x(_h*x(x(_h*x(x(_h*x(4.138136944220605e-8))+x(-16533901998627698e-22)))+x(661375597701408e-19)))+x(-.0027777778450399637)))+x(.1666666716337204)))),ni=x(x(a*_h)/x(_h+x(-2))),_h=x(fi-x(a-ii)),a=(0|(gi=0|(j(a=x(x(a-x(ni-x(_h+x(a*_h))))+x(1))),e(0)+(mi<<23))))<=8388607?function(a,qi){a:if(128<=(0|qi)){if(a=x(a*x(17014118346046923e22)),(0|qi)<255){qi=qi+-127|0;break a}a=x(a*x(17014118346046923e22)),qi=((0|qi)<381?qi:381)+-254|0}else-127<(0|qi)||(a=x(a*x(11754943508222875e-54)),qi=-253<(0|qi)?qi+126|0:(a=x(a*x(11754943508222875e-54)),(-378<(0|qi)?qi:-378)+252|0));return x(a*(f(0,1065353216+(qi<<23)|0),k()))}(a,mi):(f(0,gi),k()),a=x(x(1)*a)}else a=x(1);return a}return x(H)}return x(0)}function dc(a,qi){var low,high;low=0|a,high=0|qi,b[0]=low,b[1]=high}function gc(a,qi,si){return function(a,qi,si){var ui,vi,wi,xi,ti=0;return xi=w(ui=si>>>16,ti=a>>>16),a=(65535&(ti=((wi=w(vi=65535&si,a&=65535))>>>16)+w(ti,vi)|0))+w(a,ui)|0,M=((xi+w(qi,si)|0)+(ti>>>16)|0)+(a>>>16)|0,65535&wi|a<<16}(a,qi,si)}function hc(a,qi,si){return function(a,qi,si){var yi=0,zi=0,Ai=0,Bi=0,Ci=0,Di=0,Ei=0,Fi=0,Gi=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{if(zi=qi){if(!(yi=si))break i;break h}return dc((qi=a)-w(a=(a>>>0)/(si>>>0)|0,si)|0,0),M=0,a}if(!a)break g;break f}if(!((Bi=yi+-1|0)&yi))break e;Ci=0-(Bi=(z(yi)+33|0)-z(zi)|0)|0;break c}return dc(0,zi-w(a=(zi>>>0)/0|0,0)|0),M=0,a}if((yi=32-z(zi)|0)>>>0<31)break d;break b}if(dc(a&Bi,0),1==(0|yi))break a;return si=31&(yi=yi?31-z(yi+-1^yi)|0:32),a=32<=(63&yi)>>>0?(zi=0,qi>>>si):(zi=qi>>>si,((1<<si)-1&qi)<<32-si|a>>>si),M=zi,a}Bi=yi+1|0,Ci=63-yi|0}if(yi=qi,Ai=31&(zi=63&Bi),Ai=32<=zi>>>0?(zi=0,yi>>>Ai):(zi=yi>>>Ai,((1<<Ai)-1&yi)<<32-Ai|a>>>Ai),yi=31&(Ci&=63),32<=Ci>>>0?(qi=a<<yi,a=0):(qi=(1<<yi)-1&a>>>32-yi|qi<<yi,a<<=yi),Bi)for((Ci=si+(yi=-1)|0)>>>0<4294967295&&(yi=0);Ai=(Ei=Di=Ai<<1|qi>>>31)-(Fi=si&(Di=yi-((zi=zi<<1|Ai>>>31)+(Ci>>>0<Di>>>0)|0)>>31))|0,zi=zi-(Ei>>>0<Fi>>>0)|0,qi=qi<<1|a>>>31,a=Gi|a<<1,Gi=Di&=1,Bi=Bi+-1|0;);return dc(Ai,zi),M=qi<<1|a>>>31,Di|a<<1}dc(a,qi),qi=a=0}return M=qi,a}(a,qi,si)}function jc(a){var Hi;return(-1>>>(Hi=31&a)&-2)<<Hi|(-1<<(a=0-a&31)&-2)>>>a}function N(){return buffer.byteLength/65536|0}}(H,I,J)}}l=null,b.wasmBinary&&(F=b.wasmBinary);var fa=Error,WebAssembly={};F=[],\"object\"!=typeof WebAssembly&&E(\"no native wasm support detected\");var I,J=new function(a){var c=Array(17);return c.grow=function(){18<=c.length&&B(\"Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.\"),c.push(null)},c.set=function(a,e){c[a]=e},c.get=function(a){return c[a]},c}({initial:17,maximum:18,element:\"anyfunc\"}),K=!1;function assert(a,c){a||B(\"Assertion failed: \"+c)}var buffer,M,L,N,ia=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function ja(a,c,d){var e=c+d;for(d=c;a[d]&&!(e<=d);)++d;if(16<d-c&&a.subarray&&ia)return ia.decode(a.subarray(c,d));for(e=\"\";c<d;){var f=a[c++];if(128&f){var g=63&a[c++];if(192==(224&f))e+=String.fromCharCode((31&f)<<6|g);else{var m=63&a[c++];(f=224==(240&f)?(15&f)<<12|g<<6|m:(7&f)<<18|g<<12|m<<6|63&a[c++])<65536?e+=String.fromCharCode(f):(f-=65536,e+=String.fromCharCode(55296|f>>10,56320|1023&f))}}else e+=String.fromCharCode(f)}return e}function ka(a,c){return a?ja(L,a,c):\"\"}function la(a){return 0<a%65536&&(a+=65536-a%65536),a}function ma(a){buffer=a,b.HEAP8=M=new Int8Array(a),b.HEAP16=new Int16Array(a),b.HEAP32=N=new Int32Array(a),b.HEAPU8=L=new Uint8Array(a),b.HEAPU16=new Uint16Array(a),b.HEAPU32=new Uint32Array(a),b.HEAPF32=new Float32Array(a),b.HEAPF64=new Float64Array(a)}\"undefined\"!=typeof TextDecoder&&new TextDecoder(\"utf-16le\");var G=b.TOTAL_MEMORY||16777216;function O(a){for(;0<a.length;){var c=a.shift();if(\"function\"==typeof c)c();else{var d=c.b;\"number\"==typeof d?void 0===c.a?b.dynCall_v(d):b.dynCall_vi(d,c.a):d(void 0===c.a?null:c.a)}}}(I=b.wasmMemory?b.wasmMemory:new function(){return{buffer:new ArrayBuffer(G/65536*65536),grow:function(a){return ca(a)}}})&&(buffer=I.buffer),G=buffer.byteLength,ma(buffer),N[2052]=5251248;var na=[],oa=[],pa=[],qa=[];function ra(){var a=b.preRun.shift();na.unshift(a)}if(Math.imul&&-5===Math.imul(4294967295,5)||(Math.imul=function(a,c){var d=65535&a,e=65535&c;return d*e+((a>>>16)*e+d*(c>>>16)<<16)|0}),!Math.fround){var sa=new Float32Array(1);Math.fround=function(a){return sa[0]=a,sa[0]}}Math.clz32||(Math.clz32=function(a){var c=32,d=a>>16;return d&&(c-=16,a=d),(d=a>>8)&&(c-=8,a=d),(d=a>>4)&&(c-=4,a=d),(d=a>>2)&&(c-=2,a=d),a>>1?c-2:c-a}),Math.trunc||(Math.trunc=function(a){return a<0?Math.ceil(a):Math.floor(a)});var P=0,Q=null,U=null;function B(a){throw b.onAbort&&b.onAbort(a),D(a),E(a),K=!0,new fa(\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\")}b.preloadedImages={},b.preloadedAudios={};var V=\"data:application/octet-stream;base64,\";function W(a){return String.prototype.startsWith?a.startsWith(V):0===a.indexOf(V)}var X=\"_em_module.wasm\";if(!W(X)){var ta=X;X=b.locateFile?b.locateFile(ta,u):u+ta}function ua(){try{if(F)return new Uint8Array(F);var a=z(X);if(a)return a;if(w)return w(X);throw\"both async and sync fetching of the wasm failed\"}catch(c){B(c)}}oa.push({b:function(){wa()}});var xa=[null,[],[]],ya=!1;function C(a){for(var c=[],d=0;d<a.length;d++){var e=a[d];255<e&&(ya&&assert(!1,\"Character code \"+e+\" (\"+String.fromCharCode(e)+\")  at offset \"+d+\" not in 0x00-0xFF.\"),e&=255),c.push(String.fromCharCode(e))}return c.join(\"\")}var za=\"function\"==typeof atob?atob:function(a){var c=\"\",d=0;a=a.replace(/[^A-Za-z0-9\\+\\/=]/g,\"\");do{var e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(d++)),f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(d++)),g=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(d++)),m=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(d++));e=e<<2|f>>4,f=(15&f)<<4|g>>2;var h=(3&g)<<6|m;c+=String.fromCharCode(e),64!==g&&(c+=String.fromCharCode(f)),64!==m&&(c+=String.fromCharCode(h))}while(d<a.length);return c};function z(a){if(W(a)){if(a=a.slice(V.length),\"boolean\"==typeof r&&r){try{var c=Buffer.from(a,\"base64\")}catch(g){c=new Buffer(a,\"base64\")}var d=new Uint8Array(c.buffer,c.byteOffset,c.byteLength)}else try{var e=za(a),f=new Uint8Array(e.length);for(c=0;c<e.length;++c)f[c]=e.charCodeAt(c);d=f}catch(g){throw Error(\"Converting base64 string to bytes failed.\")}return d}}var H={emscripten_memcpy_big:function(a,c,d){L.set(L.subarray(c,c+d),a)},emscripten_resize_heap:function(a){if(2147418112<a)return!1;for(var c=Math.max(M.length,16777216);c<a;)c=c<=536870912?la(2*c):Math.min(la((3*c+2147483648)/4),2147418112);a:{try{I.grow(c-buffer.byteLength+65535>>16),ma(I.buffer);var d=1;break a}catch(e){}d=void 0}return!!d},fd_write:function(a,c,d,e){try{for(var f=0,g=0;g<d;g++){for(var m=N[c+8*g>>2],h=N[c+(8*g+4)>>2],A=0;A<h;A++){var R=L[m+A],S=xa[a];0===R||10===R?((1===a?D:E)(ja(S,0)),S.length=0):S.push(R)}f+=h}return N[e>>2]=f,0}catch(T){return\"undefined\"!=typeof FS&&T instanceof FS.c||B(T),T.f}},memory:I,table:J},Aa=function(){function a(a){b.asm=a.exports,P--,b.monitorRunDependencies&&b.monitorRunDependencies(P),0==P&&(null!==Q&&(clearInterval(Q),Q=null),U&&(a=U,U=null,a()))}function c(c){a(c.instance)}function d(a){return(F||!p&&!q||\"function\"!=typeof fetch?new Promise(function(a){a(ua())}):fetch(X,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+X+\"'\";return a.arrayBuffer()}).catch(function(){return ua()})).then(function(){return{then:function(a){a({instance:new da})}}}).then(a,function(a){E(\"failed to asynchronously prepare wasm: \"+a),B(a)})}var e={env:H,wasi_snapshot_preview1:H};if(P++,b.monitorRunDependencies&&b.monitorRunDependencies(P),b.instantiateWasm)try{return b.instantiateWasm(e,a)}catch(f){return E(\"Module.instantiateWasm callback failed with error: \"+f),!1}return function(){if(F||\"function\"!=typeof WebAssembly.instantiateStreaming||W(X)||\"function\"!=typeof fetch)return d(c);fetch(X,{credentials:\"same-origin\"}).then(function(a){return WebAssembly.instantiateStreaming(a,e).then(c,function(a){E(\"wasm streaming compile failed: \"+a),E(\"falling back to ArrayBuffer instantiation\"),d(c)})})}(),{}}();b.asm=Aa;var wa=b.___wasm_call_ctors=function(){return b.asm.__wasm_call_ctors.apply(null,arguments)};b._csmGetVersion=function(){return b.asm.csmGetVersion.apply(null,arguments)},b._csmGetLatestMocVersion=function(){return b.asm.csmGetLatestMocVersion.apply(null,arguments)},b._csmGetMocVersion=function(){return b.asm.csmGetMocVersion.apply(null,arguments)},b._csmSetLogFunction=function(){return b.asm.csmSetLogFunction.apply(null,arguments)},b._csmReviveMocInPlace=function(){return b.asm.csmReviveMocInPlace.apply(null,arguments)},b._csmReadCanvasInfo=function(){return b.asm.csmReadCanvasInfo.apply(null,arguments)},b._csmGetSizeofModel=function(){return b.asm.csmGetSizeofModel.apply(null,arguments)},b._csmInitializeModelInPlace=function(){return b.asm.csmInitializeModelInPlace.apply(null,arguments)},b._csmUpdateModel=function(){return b.asm.csmUpdateModel.apply(null,arguments)},b._csmGetParameterCount=function(){return b.asm.csmGetParameterCount.apply(null,arguments)},b._csmGetParameterIds=function(){return b.asm.csmGetParameterIds.apply(null,arguments)},b._csmGetParameterMinimumValues=function(){return b.asm.csmGetParameterMinimumValues.apply(null,arguments)},b._csmGetParameterMaximumValues=function(){return b.asm.csmGetParameterMaximumValues.apply(null,arguments)},b._csmGetParameterDefaultValues=function(){return b.asm.csmGetParameterDefaultValues.apply(null,arguments)},b._csmGetParameterValues=function(){return b.asm.csmGetParameterValues.apply(null,arguments)},b._csmGetPartCount=function(){return b.asm.csmGetPartCount.apply(null,arguments)},b._csmGetPartIds=function(){return b.asm.csmGetPartIds.apply(null,arguments)},b._csmGetPartOpacities=function(){return b.asm.csmGetPartOpacities.apply(null,arguments)},b._csmGetPartParentPartIndices=function(){return b.asm.csmGetPartParentPartIndices.apply(null,arguments)},b._csmGetDrawableCount=function(){return b.asm.csmGetDrawableCount.apply(null,arguments)},b._csmGetDrawableIds=function(){return b.asm.csmGetDrawableIds.apply(null,arguments)},b._csmGetDrawableConstantFlags=function(){return b.asm.csmGetDrawableConstantFlags.apply(null,arguments)},b._csmGetDrawableDynamicFlags=function(){return b.asm.csmGetDrawableDynamicFlags.apply(null,arguments)},b._csmGetDrawableTextureIndices=function(){return b.asm.csmGetDrawableTextureIndices.apply(null,arguments)},b._csmGetDrawableDrawOrders=function(){return b.asm.csmGetDrawableDrawOrders.apply(null,arguments)},b._csmGetDrawableRenderOrders=function(){return b.asm.csmGetDrawableRenderOrders.apply(null,arguments)},b._csmGetDrawableOpacities=function(){return b.asm.csmGetDrawableOpacities.apply(null,arguments)},b._csmGetDrawableMaskCounts=function(){return b.asm.csmGetDrawableMaskCounts.apply(null,arguments)},b._csmGetDrawableMasks=function(){return b.asm.csmGetDrawableMasks.apply(null,arguments)},b._csmGetDrawableVertexCounts=function(){return b.asm.csmGetDrawableVertexCounts.apply(null,arguments)},b._csmGetDrawableVertexPositions=function(){return b.asm.csmGetDrawableVertexPositions.apply(null,arguments)},b._csmGetDrawableVertexUvs=function(){return b.asm.csmGetDrawableVertexUvs.apply(null,arguments)},b._csmGetDrawableIndexCounts=function(){return b.asm.csmGetDrawableIndexCounts.apply(null,arguments)},b._csmGetDrawableIndices=function(){return b.asm.csmGetDrawableIndices.apply(null,arguments)},b._csmResetDrawableDynamicFlags=function(){return b.asm.csmResetDrawableDynamicFlags.apply(null,arguments)},b._csmMallocMoc=function(){return b.asm.csmMallocMoc.apply(null,arguments)},b._csmMallocModelAndInitialize=function(){return b.asm.csmMallocModelAndInitialize.apply(null,arguments)},b._csmMalloc=function(){return b.asm.csmMalloc.apply(null,arguments)},b._csmFree=function(){return b.asm.csmFree.apply(null,arguments)};var Y,Ba=b.stackSave=function(){return b.asm.stackSave.apply(null,arguments)},Ca=b.stackAlloc=function(){return b.asm.stackAlloc.apply(null,arguments)},Da=b.stackRestore=function(){return b.asm.stackRestore.apply(null,arguments)},ca=b.__growWasmMemory=function(){return b.asm.__growWasmMemory.apply(null,arguments)};function Z(){function a(){if(!Y&&(Y=!0,!K)){if(O(oa),O(pa),b.onRuntimeInitialized&&b.onRuntimeInitialized(),b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var a=b.postRun.shift();qa.unshift(a)}O(qa)}}if(!(0<P)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)ra();O(na),0<P||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1),a()},1)):a())}}if(b.dynCall_vi=function(){return b.asm.dynCall_vi.apply(null,arguments)},b.asm=Aa,b.ccall=function(a,c,d,e){var f={string:function(a){var c=0;if(null!=a&&0!==a){var d=1+(a.length<<2),e=c=Ca(d),f=L;if(0<d){d=e+d-1;for(var g=0;g<a.length;++g){var k=a.charCodeAt(g);if(55296<=k&&k<=57343&&(k=65536+((1023&k)<<10)|1023&a.charCodeAt(++g)),k<=127){if(d<=e)break;f[e++]=k}else{if(k<=2047){if(d<=e+1)break;f[e++]=192|k>>6}else{if(k<=65535){if(d<=e+2)break;f[e++]=224|k>>12}else{if(d<=e+3)break;f[e++]=240|k>>18,f[e++]=128|k>>12&63}f[e++]=128|k>>6&63}f[e++]=128|63&k}}f[e]=0}}return c},array:function(a){var c=Ca(a.length);return M.set(a,c),c}},g=function(a){var c=b[\"_\"+a];return assert(c,\"Cannot call unknown function \"+a+\", make sure it is exported\"),c}(a),m=[];if(a=0,e)for(var h=0;h<e.length;h++){var A=f[d[h]];A?(0===a&&(a=Ba()),m[h]=A(e[h])):m[h]=e[h]}return d=function(a){return\"string\"===c?ka(a):\"boolean\"===c?!!a:a}(d=g.apply(null,m)),0!==a&&Da(a),d},b.UTF8ToString=ka,b.addFunction=function(a,c){var d=J.length;try{J.grow(1)}catch(e){if(!e instanceof RangeError)throw e;throw\"Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.\"}try{J.set(d,a)}catch(e){if(!e instanceof TypeError)throw e;assert(void 0!==c,\"Missing signature argument to addFunction\"),J.set(d,a)}return d},b.then=function(a){if(Y)a(b);else{var c=b.onRuntimeInitialized;b.onRuntimeInitialized=function(){c&&c(),a(b)}}return b},U=function Ea(){Y||Z(),Y||(U=Ea)},b.run=Z,b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();return Z(),_em_module});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=_em_module:\"function\"==typeof define&&define.amd?define([],function(){return _em_module}):\"object\"==typeof exports&&(exports._em_module=_em_module);var _em=_em_module()}(Live2DCubismCore=Live2DCubismCore||{});");

/***/ }),

/***/ "./src/SDKv4/Framework/src/cubismdefaultparameterid.ts":
/*!*************************************************************!*\
  !*** ./src/SDKv4/Framework/src/cubismdefaultparameterid.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.HitAreaPrefix = 'HitArea';
    Live2DCubismFramework.HitAreaHead = 'Head';
    Live2DCubismFramework.HitAreaBody = 'Body';
    Live2DCubismFramework.PartsIdCore = 'Parts01Core';
    Live2DCubismFramework.PartsArmPrefix = 'Parts01Arm_';
    Live2DCubismFramework.PartsArmLPrefix = 'Parts01ArmL_';
    Live2DCubismFramework.PartsArmRPrefix = 'Parts01ArmR_';
    Live2DCubismFramework.ParamAngleX = 'ParamAngleX';
    Live2DCubismFramework.ParamAngleY = 'ParamAngleY';
    Live2DCubismFramework.ParamAngleZ = 'ParamAngleZ';
    Live2DCubismFramework.ParamEyeLOpen = 'ParamEyeLOpen';
    Live2DCubismFramework.ParamEyeLSmile = 'ParamEyeLSmile';
    Live2DCubismFramework.ParamEyeROpen = 'ParamEyeROpen';
    Live2DCubismFramework.ParamEyeRSmile = 'ParamEyeRSmile';
    Live2DCubismFramework.ParamEyeBallX = 'ParamEyeBallX';
    Live2DCubismFramework.ParamEyeBallY = 'ParamEyeBallY';
    Live2DCubismFramework.ParamEyeBallForm = 'ParamEyeBallForm';
    Live2DCubismFramework.ParamBrowLY = 'ParamBrowLY';
    Live2DCubismFramework.ParamBrowRY = 'ParamBrowRY';
    Live2DCubismFramework.ParamBrowLX = 'ParamBrowLX';
    Live2DCubismFramework.ParamBrowRX = 'ParamBrowRX';
    Live2DCubismFramework.ParamBrowLAngle = 'ParamBrowLAngle';
    Live2DCubismFramework.ParamBrowRAngle = 'ParamBrowRAngle';
    Live2DCubismFramework.ParamBrowLForm = 'ParamBrowLForm';
    Live2DCubismFramework.ParamBrowRForm = 'ParamBrowRForm';
    Live2DCubismFramework.ParamMouthForm = 'ParamMouthForm';
    Live2DCubismFramework.ParamMouthOpenY = 'ParamMouthOpenY';
    Live2DCubismFramework.ParamCheek = 'ParamCheek';
    Live2DCubismFramework.ParamBodyAngleX = 'ParamBodyAngleX';
    Live2DCubismFramework.ParamBodyAngleY = 'ParamBodyAngleY';
    Live2DCubismFramework.ParamBodyAngleZ = 'ParamBodyAngleZ';
    Live2DCubismFramework.ParamBreath = 'ParamBreath';
    Live2DCubismFramework.ParamArmLA = 'ParamArmLA';
    Live2DCubismFramework.ParamArmRA = 'ParamArmRA';
    Live2DCubismFramework.ParamArmLB = 'ParamArmLB';
    Live2DCubismFramework.ParamArmRB = 'ParamArmRB';
    Live2DCubismFramework.ParamHandL = 'ParamHandL';
    Live2DCubismFramework.ParamHandR = 'ParamHandR';
    Live2DCubismFramework.ParamHairFront = 'ParamHairFront';
    Live2DCubismFramework.ParamHairSide = 'ParamHairSide';
    Live2DCubismFramework.ParamHairBack = 'ParamHairBack';
    Live2DCubismFramework.ParamHairFluffy = 'ParamHairFluffy';
    Live2DCubismFramework.ParamShoulderY = 'ParamShoulderY';
    Live2DCubismFramework.ParamBustX = 'ParamBustX';
    Live2DCubismFramework.ParamBustY = 'ParamBustY';
    Live2DCubismFramework.ParamBaseX = 'ParamBaseX';
    Live2DCubismFramework.ParamBaseY = 'ParamBaseY';
    Live2DCubismFramework.ParamNONE = 'NONE:';
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/cubismframeworkconfig.ts":
/*!**********************************************************!*\
  !*** ./src/SDKv4/Framework/src/cubismframeworkconfig.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_OFF = exports.CSM_LOG_LEVEL_ERROR = exports.CSM_LOG_LEVEL_WARNING = exports.CSM_LOG_LEVEL_INFO = exports.CSM_LOG_LEVEL_DEBUG = exports.CSM_LOG_LEVEL_VERBOSE = void 0;
exports.CSM_LOG_LEVEL_VERBOSE = 0;
exports.CSM_LOG_LEVEL_DEBUG = 1;
exports.CSM_LOG_LEVEL_INFO = 2;
exports.CSM_LOG_LEVEL_WARNING = 3;
exports.CSM_LOG_LEVEL_ERROR = 4;
exports.CSM_LOG_LEVEL_OFF = 5;
exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_VERBOSE;


/***/ }),

/***/ "./src/SDKv4/Framework/src/cubismmodelsettingjson.ts":
/*!***********************************************************!*\
  !*** ./src/SDKv4/Framework/src/cubismmodelsettingjson.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ./live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var icubismmodelsetting_1 = __webpack_require__(/*! ./icubismmodelsetting */ "./src/SDKv4/Framework/src/icubismmodelsetting.ts");
var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "./src/SDKv4/Framework/src/utils/cubismjson.ts");
var csmvector_1 = __webpack_require__(/*! ./type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;
var ICubismModelSetting = icubismmodelsetting_1.Live2DCubismFramework.ICubismModelSetting;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var Version = 'Version';
    var FileReferences = 'FileReferences';
    var Groups = 'Groups';
    var Layout = 'Layout';
    var HitAreas = 'HitAreas';
    var Moc = 'Moc';
    var Textures = 'Textures';
    var Physics = 'Physics';
    var Pose = 'Pose';
    var Expressions = 'Expressions';
    var Motions = 'Motions';
    var UserData = 'UserData';
    var Name = 'Name';
    var FilePath = 'File';
    var Id = 'Id';
    var Ids = 'Ids';
    var Target = 'Target';
    var Idle = 'Idle';
    var TapBody = 'TapBody';
    var PinchIn = 'PinchIn';
    var PinchOut = 'PinchOut';
    var Shake = 'Shake';
    var FlickHead = 'FlickHead';
    var Parameter = 'Parameter';
    var SoundPath = 'Sound';
    var SoundDelay = 'SoundDelay';
    var FadeInTime = 'FadeInTime';
    var FadeOutTime = 'FadeOutTime';
    var CenterX = 'CenterX';
    var CenterY = 'CenterY';
    var X = 'X';
    var Y = 'Y';
    var Width = 'Width';
    var Height = 'Height';
    var LipSync = 'LipSync';
    var EyeBlink = 'EyeBlink';
    var InitParameter = 'init_param';
    var InitPartsVisible = 'init_parts_visible';
    var Val = 'val';
    var FrequestNode;
    (function (FrequestNode) {
        FrequestNode[FrequestNode["FrequestNode_Groups"] = 0] = "FrequestNode_Groups";
        FrequestNode[FrequestNode["FrequestNode_Moc"] = 1] = "FrequestNode_Moc";
        FrequestNode[FrequestNode["FrequestNode_Motions"] = 2] = "FrequestNode_Motions";
        FrequestNode[FrequestNode["FrequestNode_Expressions"] = 3] = "FrequestNode_Expressions";
        FrequestNode[FrequestNode["FrequestNode_Textures"] = 4] = "FrequestNode_Textures";
        FrequestNode[FrequestNode["FrequestNode_Physics"] = 5] = "FrequestNode_Physics";
        FrequestNode[FrequestNode["FrequestNode_Pose"] = 6] = "FrequestNode_Pose";
        FrequestNode[FrequestNode["FrequestNode_HitAreas"] = 7] = "FrequestNode_HitAreas";
    })(FrequestNode || (FrequestNode = {}));
    var CubismModelSettingJson = (function (_super) {
        __extends(CubismModelSettingJson, _super);
        function CubismModelSettingJson(buffer, size) {
            var _this = _super.call(this) || this;
            _this._json = CubismJson.create(buffer, size);
            if (_this._json) {
                _this._jsonValue = new csmVector();
                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(Groups));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Moc));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Motions));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Expressions));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Textures));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Physics));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Pose));
                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(HitAreas));
            }
            return _this;
        }
        CubismModelSettingJson.prototype.release = function () {
            CubismJson.delete(this._json);
            this._jsonValue = null;
        };
        CubismModelSettingJson.prototype.GetJson = function () {
            return this._json;
        };
        CubismModelSettingJson.prototype.getModelFileName = function () {
            if (!this.isExistModelFile()) {
                return '';
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();
        };
        CubismModelSettingJson.prototype.getTextureCount = function () {
            if (!this.isExistTextureFiles()) {
                return 0;
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();
        };
        CubismModelSettingJson.prototype.getTextureDirectory = function () {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Textures)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getTextureFileName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Textures)
                .getValueByIndex(index)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getHitAreasCount = function () {
            if (!this.isExistHitAreas()) {
                return 0;
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();
        };
        CubismModelSettingJson.prototype.getHitAreaId = function (index) {
            return CubismFramework.getIdManager().getId(this._jsonValue
                .at(FrequestNode.FrequestNode_HitAreas)
                .getValueByIndex(index)
                .getValueByString(Id)
                .getRawString());
        };
        CubismModelSettingJson.prototype.getHitAreaName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_HitAreas)
                .getValueByIndex(index)
                .getValueByString(Name)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getPhysicsFileName = function () {
            if (!this.isExistPhysicsFile()) {
                return '';
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Physics)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getPoseFileName = function () {
            if (!this.isExistPoseFile()) {
                return '';
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();
        };
        CubismModelSettingJson.prototype.getExpressionCount = function () {
            if (!this.isExistExpressionFile()) {
                return 0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Expressions)
                .getSize();
        };
        CubismModelSettingJson.prototype.getExpressionName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Expressions)
                .getValueByIndex(index)
                .getValueByString(Name)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getExpressionFileName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Expressions)
                .getValueByIndex(index)
                .getValueByString(FilePath)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getMotionGroupCount = function () {
            if (!this.isExistMotionGroups()) {
                return 0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getKeys()
                .getSize();
        };
        CubismModelSettingJson.prototype.getMotionGroupName = function (index) {
            if (!this.isExistMotionGroups()) {
                return null;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getKeys()
                .at(index);
        };
        CubismModelSettingJson.prototype.getMotionCount = function (groupName) {
            if (!this.isExistMotionGroupName(groupName)) {
                return 0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getSize();
        };
        CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {
            if (!this.isExistMotionGroupName(groupName)) {
                return '';
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FilePath)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {
            if (!this.isExistMotionSoundFile(groupName, index)) {
                return '';
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(SoundPath)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getMotionSoundDelay = function (groupName, index) {
            if (!this.isExistMotionSoundDelay(groupName, index)) {
                return 0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(SoundDelay)
                .toInt();
        };
        CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {
            if (!this.isExistMotionFadeIn(groupName, index)) {
                return -1.0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeInTime)
                .toFloat();
        };
        CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {
            if (!this.isExistMotionFadeOut(groupName, index)) {
                return -1.0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeOutTime)
                .toFloat();
        };
        CubismModelSettingJson.prototype.getUserDataFile = function () {
            if (!this.isExistUserDataFile()) {
                return '';
            }
            return this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(UserData)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {
            var map = this._json
                .getRoot()
                .getValueByString(Layout)
                .getMap();
            if (map == null) {
                return false;
            }
            var ret = false;
            for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {
                outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());
                ret = true;
            }
            return ret;
        };
        CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {
            if (!this.isExistEyeBlinkParameters()) {
                return 0;
            }
            var num = 0;
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                    num = refI
                        .getValueByString(Ids)
                        .getVector()
                        .getSize();
                    break;
                }
            }
            return num;
        };
        CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {
            if (!this.isExistEyeBlinkParameters()) {
                return null;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                    return CubismFramework.getIdManager().getId(refI
                        .getValueByString(Ids)
                        .getValueByIndex(index)
                        .getRawString());
                }
            }
            return null;
        };
        CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {
            if (!this.isExistLipSyncParameters()) {
                return 0;
            }
            var num = 0;
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == LipSync) {
                    num = refI
                        .getValueByString(Ids)
                        .getVector()
                        .getSize();
                    break;
                }
            }
            return num;
        };
        CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {
            if (!this.isExistLipSyncParameters()) {
                return null;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == LipSync) {
                    return CubismFramework.getIdManager().getId(refI
                        .getValueByString(Ids)
                        .getValueByIndex(index)
                        .getRawString());
                }
            }
            return null;
        };
        CubismModelSettingJson.prototype.isExistModelFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistTextureFiles = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistHitAreas = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistPhysicsFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistPoseFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistExpressionFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionGroups = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(SoundPath);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionSoundDelay = function (groupName, index) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(SoundDelay);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeInTime);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeOutTime);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistUserDataFile = function () {
            var node = this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(UserData);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {
            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
                return false;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
                if (this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i)
                    .getValueByString(Name)
                    .getRawString() == EyeBlink) {
                    return true;
                }
            }
            return false;
        };
        CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {
            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
                return false;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
                if (this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i)
                    .getValueByString(Name)
                    .getRawString() == LipSync) {
                    return true;
                }
            }
            return false;
        };
        return CubismModelSettingJson;
    }(ICubismModelSetting));
    Live2DCubismFramework.CubismModelSettingJson = CubismModelSettingJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/effect/cubismbreath.ts":
/*!********************************************************!*\
  !*** ./src/SDKv4/Framework/src/effect/cubismbreath.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismBreath = (function () {
        function CubismBreath() {
            this._currentTime = 0.0;
        }
        CubismBreath.create = function () {
            return new CubismBreath();
        };
        CubismBreath.delete = function (instance) {
            if (instance != null) {
                instance = null;
            }
        };
        CubismBreath.prototype.setParameters = function (breathParameters) {
            this._breathParameters = breathParameters;
        };
        CubismBreath.prototype.getParameters = function () {
            return this._breathParameters;
        };
        CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {
            this._currentTime += deltaTimeSeconds;
            var t = this._currentTime * 2.0 * 3.14159;
            for (var i = 0; i < this._breathParameters.getSize(); ++i) {
                var data = this._breathParameters.at(i);
                model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);
            }
        };
        return CubismBreath;
    }());
    Live2DCubismFramework.CubismBreath = CubismBreath;
    var BreathParameterData = (function () {
        function BreathParameterData(parameterId, offset, peak, cycle, weight) {
            this.parameterId = parameterId == undefined ? null : parameterId;
            this.offset = offset == undefined ? 0.0 : offset;
            this.peak = peak == undefined ? 0.0 : peak;
            this.cycle = cycle == undefined ? 0.0 : cycle;
            this.weight = weight == undefined ? 0.0 : weight;
        }
        return BreathParameterData;
    }());
    Live2DCubismFramework.BreathParameterData = BreathParameterData;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/effect/cubismeyeblink.ts":
/*!**********************************************************!*\
  !*** ./src/SDKv4/Framework/src/effect/cubismeyeblink.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismEyeBlink = (function () {
        function CubismEyeBlink(modelSetting) {
            this._blinkingState = EyeState.EyeState_First;
            this._nextBlinkingTime = 0.0;
            this._stateStartTimeSeconds = 0.0;
            this._blinkingIntervalSeconds = 4.0;
            this._closingSeconds = 0.1;
            this._closedSeconds = 0.05;
            this._openingSeconds = 0.15;
            this._userTimeSeconds = 0.0;
            this._parameterIds = new csmVector();
            if (modelSetting == null) {
                return;
            }
            for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {
                this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));
            }
        }
        CubismEyeBlink.create = function (modelSetting) {
            if (modelSetting === void 0) { modelSetting = null; }
            return new CubismEyeBlink(modelSetting);
        };
        CubismEyeBlink.delete = function (eyeBlink) {
            if (eyeBlink != null) {
                eyeBlink = null;
            }
        };
        CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {
            this._blinkingIntervalSeconds = blinkingInterval;
        };
        CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {
            this._closingSeconds = closing;
            this._closedSeconds = closed;
            this._openingSeconds = opening;
        };
        CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {
            this._parameterIds = parameterIds;
        };
        CubismEyeBlink.prototype.getParameterIds = function () {
            return this._parameterIds;
        };
        CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var parameterValue;
            var t = 0.0;
            switch (this._blinkingState) {
                case EyeState.EyeState_Closing:
                    t =
                        (this._userTimeSeconds - this._stateStartTimeSeconds) /
                            this._closingSeconds;
                    if (t >= 1.0) {
                        t = 1.0;
                        this._blinkingState = EyeState.EyeState_Closed;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 1.0 - t;
                    break;
                case EyeState.EyeState_Closed:
                    t =
                        (this._userTimeSeconds - this._stateStartTimeSeconds) /
                            this._closedSeconds;
                    if (t >= 1.0) {
                        this._blinkingState = EyeState.EyeState_Opening;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 0.0;
                    break;
                case EyeState.EyeState_Opening:
                    t =
                        (this._userTimeSeconds - this._stateStartTimeSeconds) /
                            this._openingSeconds;
                    if (t >= 1.0) {
                        t = 1.0;
                        this._blinkingState = EyeState.EyeState_Interval;
                        this._nextBlinkingTime = this.determinNextBlinkingTiming();
                    }
                    parameterValue = t;
                    break;
                case EyeState.EyeState_Interval:
                    if (this._nextBlinkingTime < this._userTimeSeconds) {
                        this._blinkingState = EyeState.EyeState_Closing;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 1.0;
                    break;
                case EyeState.EyeState_First:
                default:
                    this._blinkingState = EyeState.EyeState_Interval;
                    this._nextBlinkingTime = this.determinNextBlinkingTiming();
                    parameterValue = 1.0;
                    break;
            }
            if (!CubismEyeBlink.CloseIfZero) {
                parameterValue = -parameterValue;
            }
            for (var i = 0; i < this._parameterIds.getSize(); ++i) {
                model.setParameterValueById(this._parameterIds.at(i), parameterValue);
            }
        };
        CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {
            var r = Math.random();
            return (this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0));
        };
        CubismEyeBlink.CloseIfZero = true;
        return CubismEyeBlink;
    }());
    Live2DCubismFramework.CubismEyeBlink = CubismEyeBlink;
    var EyeState;
    (function (EyeState) {
        EyeState[EyeState["EyeState_First"] = 0] = "EyeState_First";
        EyeState[EyeState["EyeState_Interval"] = 1] = "EyeState_Interval";
        EyeState[EyeState["EyeState_Closing"] = 2] = "EyeState_Closing";
        EyeState[EyeState["EyeState_Closed"] = 3] = "EyeState_Closed";
        EyeState[EyeState["EyeState_Opening"] = 4] = "EyeState_Opening";
    })(EyeState = Live2DCubismFramework.EyeState || (Live2DCubismFramework.EyeState = {}));
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/effect/cubismpose.ts":
/*!******************************************************!*\
  !*** ./src/SDKv4/Framework/src/effect/cubismpose.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./src/SDKv4/Framework/src/utils/cubismjson.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var Epsilon = 0.001;
    var DefaultFadeInSeconds = 0.5;
    var FadeIn = 'FadeInTime';
    var Link = 'Link';
    var Groups = 'Groups';
    var Id = 'Id';
    var CubismPose = (function () {
        function CubismPose() {
            this._fadeTimeSeconds = DefaultFadeInSeconds;
            this._lastModel = null;
            this._partGroups = new csmVector();
            this._partGroupCounts = new csmVector();
        }
        CubismPose.create = function (pose3json, size) {
            var ret = new CubismPose();
            var json = CubismJson.create(pose3json, size);
            var root = json.getRoot();
            if (!root.getValueByString(FadeIn).isNull()) {
                ret._fadeTimeSeconds = root
                    .getValueByString(FadeIn)
                    .toFloat(DefaultFadeInSeconds);
                if (ret._fadeTimeSeconds <= 0.0) {
                    ret._fadeTimeSeconds = DefaultFadeInSeconds;
                }
            }
            var poseListInfo = root.getValueByString(Groups);
            var poseCount = poseListInfo.getSize();
            for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {
                var idListInfo = poseListInfo.getValueByIndex(poseIndex);
                var idCount = idListInfo.getSize();
                var groupCount = 0;
                for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {
                    var partInfo = idListInfo.getValueByIndex(groupIndex);
                    var partData = new PartData();
                    var parameterId = CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());
                    partData.partId = parameterId;
                    if (!partInfo.getValueByString(Link).isNull()) {
                        var linkListInfo = partInfo.getValueByString(Link);
                        var linkCount = linkListInfo.getSize();
                        for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {
                            var linkPart = new PartData();
                            var linkId = CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());
                            linkPart.partId = linkId;
                            partData.link.pushBack(linkPart);
                        }
                    }
                    ret._partGroups.pushBack(partData.clone());
                    ++groupCount;
                }
                ret._partGroupCounts.pushBack(groupCount);
            }
            CubismJson.delete(json);
            return ret;
        };
        CubismPose.delete = function (pose) {
            if (pose != null) {
                pose = null;
            }
        };
        CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {
            if (model != this._lastModel) {
                this.reset(model);
            }
            this._lastModel = model;
            if (deltaTimeSeconds < 0.0) {
                deltaTimeSeconds = 0.0;
            }
            var beginIndex = 0;
            for (var i = 0; i < this._partGroupCounts.getSize(); i++) {
                var partGroupCount = this._partGroupCounts.at(i);
                this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);
                beginIndex += partGroupCount;
            }
            this.copyPartOpacities(model);
        };
        CubismPose.prototype.reset = function (model) {
            var beginIndex = 0;
            for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {
                var groupCount = this._partGroupCounts.at(i);
                for (var j = beginIndex; j < beginIndex + groupCount; ++j) {
                    this._partGroups.at(j).initialize(model);
                    var partsIndex = this._partGroups.at(j).partIndex;
                    var paramIndex = this._partGroups.at(j).parameterIndex;
                    if (partsIndex < 0) {
                        continue;
                    }
                    model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);
                    model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);
                    for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {
                        this._partGroups
                            .at(j)
                            .link.at(k)
                            .initialize(model);
                    }
                }
                beginIndex += groupCount;
            }
        };
        CubismPose.prototype.copyPartOpacities = function (model) {
            for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {
                var partData = this._partGroups.at(groupIndex);
                if (partData.link.getSize() == 0) {
                    continue;
                }
                var partIndex = this._partGroups.at(groupIndex).partIndex;
                var opacity = model.getPartOpacityByIndex(partIndex);
                for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {
                    var linkPart = partData.link.at(linkIndex);
                    var linkPartIndex = linkPart.partIndex;
                    if (linkPartIndex < 0) {
                        continue;
                    }
                    model.setPartOpacityByIndex(linkPartIndex, opacity);
                }
            }
        };
        CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {
            var visiblePartIndex = -1;
            var newOpacity = 1.0;
            var phi = 0.5;
            var backOpacityThreshold = 0.15;
            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
                var partIndex = this._partGroups.at(i).partIndex;
                var paramIndex = this._partGroups.at(i).parameterIndex;
                if (model.getParameterValueByIndex(paramIndex) > Epsilon) {
                    if (visiblePartIndex >= 0) {
                        break;
                    }
                    visiblePartIndex = i;
                    newOpacity = model.getPartOpacityByIndex(partIndex);
                    newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;
                    if (newOpacity > 1.0) {
                        newOpacity = 1.0;
                    }
                }
            }
            if (visiblePartIndex < 0) {
                visiblePartIndex = 0;
                newOpacity = 1.0;
            }
            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
                var partsIndex = this._partGroups.at(i).partIndex;
                if (visiblePartIndex == i) {
                    model.setPartOpacityByIndex(partsIndex, newOpacity);
                }
                else {
                    var opacity = model.getPartOpacityByIndex(partsIndex);
                    var a1 = void 0;
                    if (newOpacity < phi) {
                        a1 = (newOpacity * (phi - 1)) / phi + 1.0;
                    }
                    else {
                        a1 = ((1 - newOpacity) * phi) / (1.0 - phi);
                    }
                    var backOpacity = (1.0 - a1) * (1.0 - newOpacity);
                    if (backOpacity > backOpacityThreshold) {
                        a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);
                    }
                    if (opacity > a1) {
                        opacity = a1;
                    }
                    model.setPartOpacityByIndex(partsIndex, opacity);
                }
            }
        };
        return CubismPose;
    }());
    Live2DCubismFramework.CubismPose = CubismPose;
    var PartData = (function () {
        function PartData(v) {
            this.parameterIndex = 0;
            this.partIndex = 0;
            this.link = new csmVector();
            if (v != undefined) {
                this.partId = v.partId;
                for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                    this.link.pushBack(ite.ptr().clone());
                }
            }
        }
        PartData.prototype.assignment = function (v) {
            this.partId = v.partId;
            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                this.link.pushBack(ite.ptr().clone());
            }
            return this;
        };
        PartData.prototype.initialize = function (model) {
            this.parameterIndex = model.getParameterIndex(this.partId);
            this.partIndex = model.getPartIndex(this.partId);
            model.setParameterValueByIndex(this.parameterIndex, 1);
        };
        PartData.prototype.clone = function () {
            var clonePartData = new PartData();
            clonePartData.partId = this.partId;
            clonePartData.parameterIndex = this.parameterIndex;
            clonePartData.partIndex = this.partIndex;
            clonePartData.link = new csmVector();
            for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {
                clonePartData.link.pushBack(ite.ptr().clone());
            }
            return clonePartData;
        };
        return PartData;
    }());
    Live2DCubismFramework.PartData = PartData;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/icubismmodelsetting.ts":
/*!********************************************************!*\
  !*** ./src/SDKv4/Framework/src/icubismmodelsetting.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var ICubismModelSetting = (function () {
        function ICubismModelSetting() {
        }
        return ICubismModelSetting;
    }());
    Live2DCubismFramework.ICubismModelSetting = ICubismModelSetting;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/id/cubismid.ts":
/*!************************************************!*\
  !*** ./src/SDKv4/Framework/src/id/cubismid.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./src/SDKv4/Framework/src/type/csmstring.ts");
var csmString = csmstring_1.Live2DCubismFramework.csmString;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismId = (function () {
        function CubismId(id) {
            if (typeof id === 'string') {
                this._id = new csmString(id);
                return;
            }
            this._id = id;
        }
        CubismId.prototype.getString = function () {
            return this._id;
        };
        CubismId.prototype.isEqual = function (c) {
            if (typeof c === 'string') {
                return this._id.isEqual(c);
            }
            else if (c instanceof csmString) {
                return this._id.isEqual(c.s);
            }
            else if (c instanceof CubismId) {
                return this._id.isEqual(c._id.s);
            }
            return false;
        };
        CubismId.prototype.isNotEqual = function (c) {
            if (typeof c == 'string') {
                return !this._id.isEqual(c);
            }
            else if (c instanceof csmString) {
                return !this._id.isEqual(c.s);
            }
            else if (c instanceof CubismId) {
                return !this._id.isEqual(c._id.s);
            }
            return false;
        };
        return CubismId;
    }());
    Live2DCubismFramework.CubismId = CubismId;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/id/cubismidmanager.ts":
/*!*******************************************************!*\
  !*** ./src/SDKv4/Framework/src/id/cubismidmanager.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var cubismid_1 = __webpack_require__(/*! ./cubismid */ "./src/SDKv4/Framework/src/id/cubismid.ts");
var CubismId = cubismid_1.Live2DCubismFramework.CubismId;
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismIdManager = (function () {
        function CubismIdManager() {
            this._ids = new csmVector();
        }
        CubismIdManager.prototype.release = function () {
            for (var i = 0; i < this._ids.getSize(); ++i) {
                this._ids.set(i, void 0);
            }
            this._ids = null;
        };
        CubismIdManager.prototype.registerIds = function (ids) {
            for (var i = 0; i < ids.length; i++) {
                this.registerId(ids[i]);
            }
        };
        CubismIdManager.prototype.registerId = function (id) {
            var result = null;
            if ('string' == typeof id) {
                if ((result = this.findId(id)) != null) {
                    return result;
                }
                result = new CubismId(id);
                this._ids.pushBack(result);
            }
            else {
                return this.registerId(id.s);
            }
            return result;
        };
        CubismIdManager.prototype.getId = function (id) {
            return this.registerId(id);
        };
        CubismIdManager.prototype.isExist = function (id) {
            if ('string' == typeof id) {
                return this.findId(id) != null;
            }
            return this.isExist(id.s);
        };
        CubismIdManager.prototype.findId = function (id) {
            for (var i = 0; i < this._ids.getSize(); ++i) {
                if (this._ids
                    .at(i)
                    .getString()
                    .isEqual(id)) {
                    return this._ids.at(i);
                }
            }
            return null;
        };
        return CubismIdManager;
    }());
    Live2DCubismFramework.CubismIdManager = CubismIdManager;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/live2dcubismframework.ts":
/*!**********************************************************!*\
  !*** ./src/SDKv4/Framework/src/live2dcubismframework.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogLevel = exports.Option = exports.Live2DCubismFramework = exports.strtod = void 0;
var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "./src/SDKv4/Framework/src/utils/cubismjson.ts");
var cubismidmanager_1 = __webpack_require__(/*! ./id/cubismidmanager */ "./src/SDKv4/Framework/src/id/cubismidmanager.ts");
var cubismrenderer_1 = __webpack_require__(/*! ./rendering/cubismrenderer */ "./src/SDKv4/Framework/src/rendering/cubismrenderer.ts");
var cubismdebug_1 = __webpack_require__(/*! ./utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var Value = cubismjson_1.Live2DCubismFramework.Value;
var CubismIdManager = cubismidmanager_1.Live2DCubismFramework.CubismIdManager;
var CubismRenderer = cubismrenderer_1.Live2DCubismFramework.CubismRenderer;
function strtod(s, endPtr) {
    var index = 0;
    for (var i = 1;; i++) {
        var testC = s.slice(i - 1, i);
        if (testC == 'e' || testC == '-' || testC == 'E') {
            continue;
        }
        var test = s.substring(0, i);
        var number = Number(test);
        if (isNaN(number)) {
            break;
        }
        index = i;
    }
    var d = parseFloat(s);
    if (isNaN(d)) {
        d = NaN;
    }
    endPtr[0] = s.slice(index);
    return d;
}
exports.strtod = strtod;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var s_isStarted = false;
    var s_isInitialized = false;
    var s_option = null;
    var s_cubismIdManager = null;
    var Constant;
    (function (Constant) {
        Constant.vertexOffset = 0;
        Constant.vertexStep = 2;
    })(Constant = Live2DCubismFramework.Constant || (Live2DCubismFramework.Constant = {}));
    function csmDelete(address) {
        if (!address) {
            return;
        }
        address = void 0;
    }
    Live2DCubismFramework.csmDelete = csmDelete;
    var CubismFramework = (function () {
        function CubismFramework() {
        }
        CubismFramework.startUp = function (option) {
            if (option === void 0) { option = null; }
            if (s_isStarted) {
                cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is already done.');
                return s_isStarted;
            }
            s_option = option;
            if (s_option != null) {
                Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);
            }
            s_isStarted = true;
            if (s_isStarted) {
                var version = Live2DCubismCore.Version.csmGetVersion();
                var major = (version & 0xff000000) >> 24;
                var minor = (version & 0x00ff0000) >> 16;
                var patch = version & 0x0000ffff;
                var versionNumber = version;
                cubismdebug_1.CubismLogInfo("Live2D Cubism Core version: {0}.{1}.{2} ({3})", ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);
            }
            cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is complete.');
            return s_isStarted;
        };
        CubismFramework.cleanUp = function () {
            s_isStarted = false;
            s_isInitialized = false;
            s_option = null;
            s_cubismIdManager = null;
        };
        CubismFramework.initialize = function () {
            cubismdebug_1.CSM_ASSERT(s_isStarted);
            if (!s_isStarted) {
                cubismdebug_1.CubismLogWarning('CubismFramework is not started.');
                return;
            }
            if (s_isInitialized) {
                cubismdebug_1.CubismLogWarning('CubismFramework.initialize() skipped, already initialized.');
                return;
            }
            Value.staticInitializeNotForClientCall();
            s_cubismIdManager = new CubismIdManager();
            s_isInitialized = true;
            cubismdebug_1.CubismLogInfo('CubismFramework.initialize() is complete.');
        };
        CubismFramework.dispose = function () {
            cubismdebug_1.CSM_ASSERT(s_isStarted);
            if (!s_isStarted) {
                cubismdebug_1.CubismLogWarning('CubismFramework is not started.');
                return;
            }
            if (!s_isInitialized) {
                cubismdebug_1.CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');
                return;
            }
            Value.staticReleaseNotForClientCall();
            s_cubismIdManager.release();
            s_cubismIdManager = null;
            CubismRenderer.staticRelease();
            s_isInitialized = false;
            cubismdebug_1.CubismLogInfo('CubismFramework.dispose() is complete.');
        };
        CubismFramework.isStarted = function () {
            return s_isStarted;
        };
        CubismFramework.isInitialized = function () {
            return s_isInitialized;
        };
        CubismFramework.coreLogFunction = function (message) {
            if (!Live2DCubismCore.Logging.csmGetLogFunction()) {
                return;
            }
            Live2DCubismCore.Logging.csmGetLogFunction()(message);
        };
        CubismFramework.getLoggingLevel = function () {
            if (s_option != null) {
                return s_option.loggingLevel;
            }
            return LogLevel.LogLevel_Off;
        };
        CubismFramework.getIdManager = function () {
            return s_cubismIdManager;
        };
        return CubismFramework;
    }());
    Live2DCubismFramework.CubismFramework = CubismFramework;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
var Option = (function () {
    function Option() {
    }
    return Option;
}());
exports.Option = Option;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["LogLevel_Verbose"] = 0] = "LogLevel_Verbose";
    LogLevel[LogLevel["LogLevel_Debug"] = 1] = "LogLevel_Debug";
    LogLevel[LogLevel["LogLevel_Info"] = 2] = "LogLevel_Info";
    LogLevel[LogLevel["LogLevel_Warning"] = 3] = "LogLevel_Warning";
    LogLevel[LogLevel["LogLevel_Error"] = 4] = "LogLevel_Error";
    LogLevel[LogLevel["LogLevel_Off"] = 5] = "LogLevel_Off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/math/cubismmath.ts":
/*!****************************************************!*\
  !*** ./src/SDKv4/Framework/src/math/cubismmath.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismvector2_1 = __webpack_require__(/*! ./cubismvector2 */ "./src/SDKv4/Framework/src/math/cubismvector2.ts");
var CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismMath = (function () {
        function CubismMath() {
        }
        CubismMath.range = function (value, min, max) {
            if (value < min) {
                value = min;
            }
            else if (value > max) {
                value = max;
            }
            return value;
        };
        CubismMath.sin = function (x) {
            return Math.sin(x);
        };
        CubismMath.cos = function (x) {
            return Math.cos(x);
        };
        CubismMath.abs = function (x) {
            return Math.abs(x);
        };
        CubismMath.sqrt = function (x) {
            return Math.sqrt(x);
        };
        CubismMath.getEasingSine = function (value) {
            if (value < 0.0) {
                return 0.0;
            }
            else if (value > 1.0) {
                return 1.0;
            }
            return 0.5 - 0.5 * this.cos(value * Math.PI);
        };
        CubismMath.max = function (left, right) {
            return left > right ? left : right;
        };
        CubismMath.min = function (left, right) {
            return left > right ? right : left;
        };
        CubismMath.degreesToRadian = function (degrees) {
            return (degrees / 180.0) * Math.PI;
        };
        CubismMath.radianToDegrees = function (radian) {
            return (radian * 180.0) / Math.PI;
        };
        CubismMath.directionToRadian = function (from, to) {
            var q1 = Math.atan2(to.y, to.x);
            var q2 = Math.atan2(from.y, from.x);
            var ret = q1 - q2;
            while (ret < -Math.PI) {
                ret += Math.PI * 2.0;
            }
            while (ret > Math.PI) {
                ret -= Math.PI * 2.0;
            }
            return ret;
        };
        CubismMath.directionToDegrees = function (from, to) {
            var radian = this.directionToRadian(from, to);
            var degree = this.radianToDegrees(radian);
            if (to.x - from.x > 0.0) {
                degree = -degree;
            }
            return degree;
        };
        CubismMath.radianToDirection = function (totalAngle) {
            var ret = new CubismVector2();
            ret.x = this.sin(totalAngle);
            ret.y = this.cos(totalAngle);
            return ret;
        };
        return CubismMath;
    }());
    Live2DCubismFramework.CubismMath = CubismMath;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/math/cubismmatrix44.ts":
/*!********************************************************!*\
  !*** ./src/SDKv4/Framework/src/math/cubismmatrix44.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismMatrix44 = (function () {
        function CubismMatrix44() {
            this._tr = new Float32Array(16);
            this.loadIdentity();
        }
        CubismMatrix44.multiply = function (a, b, dst) {
            var c = new Float32Array([
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0
            ]);
            var n = 4;
            for (var i = 0; i < n; ++i) {
                for (var j = 0; j < n; ++j) {
                    for (var k = 0; k < n; ++k) {
                        c[j + i * 4] += a[k + i * 4] * b[j + k * 4];
                    }
                }
            }
            for (var i = 0; i < 16; ++i) {
                dst[i] = c[i];
            }
        };
        CubismMatrix44.prototype.loadIdentity = function () {
            var c = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0
            ]);
            this.setMatrix(c);
        };
        CubismMatrix44.prototype.setMatrix = function (tr) {
            for (var i = 0; i < 16; ++i) {
                this._tr[i] = tr[i];
            }
        };
        CubismMatrix44.prototype.getArray = function () {
            return this._tr;
        };
        CubismMatrix44.prototype.getScaleX = function () {
            return this._tr[0];
        };
        CubismMatrix44.prototype.getScaleY = function () {
            return this._tr[5];
        };
        CubismMatrix44.prototype.getTranslateX = function () {
            return this._tr[12];
        };
        CubismMatrix44.prototype.getTranslateY = function () {
            return this._tr[13];
        };
        CubismMatrix44.prototype.transformX = function (src) {
            return this._tr[0] * src + this._tr[12];
        };
        CubismMatrix44.prototype.transformY = function (src) {
            return this._tr[5] * src + this._tr[13];
        };
        CubismMatrix44.prototype.invertTransformX = function (src) {
            return (src - this._tr[12]) / this._tr[0];
        };
        CubismMatrix44.prototype.invertTransformY = function (src) {
            return (src - this._tr[13]) / this._tr[5];
        };
        CubismMatrix44.prototype.translateRelative = function (x, y) {
            var tr1 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                x,
                y,
                0.0,
                1.0
            ]);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismMatrix44.prototype.translate = function (x, y) {
            this._tr[12] = x;
            this._tr[13] = y;
        };
        CubismMatrix44.prototype.translateX = function (x) {
            this._tr[12] = x;
        };
        CubismMatrix44.prototype.translateY = function (y) {
            this._tr[13] = y;
        };
        CubismMatrix44.prototype.scaleRelative = function (x, y) {
            var tr1 = new Float32Array([
                x,
                0.0,
                0.0,
                0.0,
                0.0,
                y,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0
            ]);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismMatrix44.prototype.scale = function (x, y) {
            this._tr[0] = x;
            this._tr[5] = y;
        };
        CubismMatrix44.prototype.multiplyByMatrix = function (m) {
            CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);
        };
        CubismMatrix44.prototype.clone = function () {
            var cloneMatrix = new CubismMatrix44();
            for (var i = 0; i < this._tr.length; i++) {
                cloneMatrix._tr[i] = this._tr[i];
            }
            return cloneMatrix;
        };
        return CubismMatrix44;
    }());
    Live2DCubismFramework.CubismMatrix44 = CubismMatrix44;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/math/cubismmodelmatrix.ts":
/*!***********************************************************!*\
  !*** ./src/SDKv4/Framework/src/math/cubismmodelmatrix.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "./src/SDKv4/Framework/src/math/cubismmatrix44.ts");
var CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismModelMatrix = (function (_super) {
        __extends(CubismModelMatrix, _super);
        function CubismModelMatrix(w, h) {
            var _this = _super.call(this) || this;
            _this._width = w !== undefined ? w : 0.0;
            _this._height = h !== undefined ? h : 0.0;
            _this.setHeight(1.0);
            return _this;
        }
        CubismModelMatrix.prototype.setWidth = function (w) {
            var scaleX = w / this._width;
            var scaleY = scaleX;
            this.scale(scaleX, scaleY);
        };
        CubismModelMatrix.prototype.setHeight = function (h) {
            var scaleX = h / this._height;
            var scaleY = scaleX;
            this.scale(scaleX, scaleY);
        };
        CubismModelMatrix.prototype.setPosition = function (x, y) {
            this.translate(x, y);
        };
        CubismModelMatrix.prototype.setCenterPosition = function (x, y) {
            this.centerX(x);
            this.centerY(y);
        };
        CubismModelMatrix.prototype.top = function (y) {
            this.setY(y);
        };
        CubismModelMatrix.prototype.bottom = function (y) {
            var h = this._height * this.getScaleY();
            this.translateY(y - h);
        };
        CubismModelMatrix.prototype.left = function (x) {
            this.setX(x);
        };
        CubismModelMatrix.prototype.right = function (x) {
            var w = this._width * this.getScaleX();
            this.translateX(x - w);
        };
        CubismModelMatrix.prototype.centerX = function (x) {
            var w = this._width * this.getScaleX();
            this.translateX(x - w / 2.0);
        };
        CubismModelMatrix.prototype.setX = function (x) {
            this.translateX(x);
        };
        CubismModelMatrix.prototype.centerY = function (y) {
            var h = this._height * this.getScaleY();
            this.translateY(y - h / 2.0);
        };
        CubismModelMatrix.prototype.setY = function (y) {
            this.translateY(y);
        };
        CubismModelMatrix.prototype.setupFromLayout = function (layout) {
            var keyWidth = 'width';
            var keyHeight = 'height';
            var keyX = 'x';
            var keyY = 'y';
            var keyCenterX = 'center_x';
            var keyCenterY = 'center_y';
            var keyTop = 'top';
            var keyBottom = 'bottom';
            var keyLeft = 'left';
            var keyRight = 'right';
            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
                var key = ite.ptr().first;
                var value = ite.ptr().second;
                if (key == keyWidth) {
                    this.setWidth(value);
                }
                else if (key == keyHeight) {
                    this.setHeight(value);
                }
            }
            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
                var key = ite.ptr().first;
                var value = ite.ptr().second;
                if (key == keyX) {
                    this.setX(value);
                }
                else if (key == keyY) {
                    this.setY(value);
                }
                else if (key == keyCenterX) {
                    this.centerX(value);
                }
                else if (key == keyCenterY) {
                    this.centerY(value);
                }
                else if (key == keyTop) {
                    this.top(value);
                }
                else if (key == keyBottom) {
                    this.bottom(value);
                }
                else if (key == keyLeft) {
                    this.left(value);
                }
                else if (key == keyRight) {
                    this.right(value);
                }
            }
        };
        return CubismModelMatrix;
    }(CubismMatrix44));
    Live2DCubismFramework.CubismModelMatrix = CubismModelMatrix;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/math/cubismtargetpoint.ts":
/*!***********************************************************!*\
  !*** ./src/SDKv4/Framework/src/math/cubismtargetpoint.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmath_1 = __webpack_require__(/*! ./cubismmath */ "./src/SDKv4/Framework/src/math/cubismmath.ts");
var CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var FrameRate = 30;
    var Epsilon = 0.01;
    var CubismTargetPoint = (function () {
        function CubismTargetPoint() {
            this._faceTargetX = 0.0;
            this._faceTargetY = 0.0;
            this._faceX = 0.0;
            this._faceY = 0.0;
            this._faceVX = 0.0;
            this._faceVY = 0.0;
            this._lastTimeSeconds = 0.0;
            this._userTimeSeconds = 0.0;
        }
        CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var faceParamMaxV = 40.0 / 10.0;
            var maxV = (faceParamMaxV * 1.0) / FrameRate;
            if (this._lastTimeSeconds == 0.0) {
                this._lastTimeSeconds = this._userTimeSeconds;
                return;
            }
            var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;
            this._lastTimeSeconds = this._userTimeSeconds;
            var timeToMaxSpeed = 0.15;
            var frameToMaxSpeed = timeToMaxSpeed * FrameRate;
            var maxA = (deltaTimeWeight * maxV) / frameToMaxSpeed;
            var dx = this._faceTargetX - this._faceX;
            var dy = this._faceTargetY - this._faceY;
            if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {
                return;
            }
            var d = CubismMath.sqrt(dx * dx + dy * dy);
            var vx = (maxV * dx) / d;
            var vy = (maxV * dy) / d;
            var ax = vx - this._faceVX;
            var ay = vy - this._faceVY;
            var a = CubismMath.sqrt(ax * ax + ay * ay);
            if (a < -maxA || a > maxA) {
                ax *= maxA / a;
                ay *= maxA / a;
            }
            this._faceVX += ax;
            this._faceVY += ay;
            {
                var maxV_1 = 0.5 *
                    (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -
                        maxA);
                var curV = CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);
                if (curV > maxV_1) {
                    this._faceVX *= maxV_1 / curV;
                    this._faceVY *= maxV_1 / curV;
                }
            }
            this._faceX += this._faceVX;
            this._faceY += this._faceVY;
        };
        CubismTargetPoint.prototype.getX = function () {
            return this._faceX;
        };
        CubismTargetPoint.prototype.getY = function () {
            return this._faceY;
        };
        CubismTargetPoint.prototype.set = function (x, y) {
            this._faceTargetX = x;
            this._faceTargetY = y;
        };
        return CubismTargetPoint;
    }());
    Live2DCubismFramework.CubismTargetPoint = CubismTargetPoint;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/math/cubismvector2.ts":
/*!*******************************************************!*\
  !*** ./src/SDKv4/Framework/src/math/cubismvector2.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismVector2 = (function () {
        function CubismVector2(x, y) {
            this.x = x;
            this.y = y;
            this.x = x == undefined ? 0.0 : x;
            this.y = y == undefined ? 0.0 : y;
        }
        CubismVector2.prototype.add = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x + vector2.x;
            ret.y = this.y + vector2.y;
            return ret;
        };
        CubismVector2.prototype.substract = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x - vector2.x;
            ret.y = this.y - vector2.y;
            return ret;
        };
        CubismVector2.prototype.multiply = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x * vector2.x;
            ret.y = this.y * vector2.y;
            return ret;
        };
        CubismVector2.prototype.multiplyByScaler = function (scalar) {
            return this.multiply(new CubismVector2(scalar, scalar));
        };
        CubismVector2.prototype.division = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x / vector2.x;
            ret.y = this.y / vector2.y;
            return ret;
        };
        CubismVector2.prototype.divisionByScalar = function (scalar) {
            return this.division(new CubismVector2(scalar, scalar));
        };
        CubismVector2.prototype.getLength = function () {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        };
        CubismVector2.prototype.getDistanceWith = function (a) {
            return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));
        };
        CubismVector2.prototype.dot = function (a) {
            return this.x * a.x + this.y * a.y;
        };
        CubismVector2.prototype.normalize = function () {
            var length = Math.pow(this.x * this.x + this.y * this.y, 0.5);
            this.x = this.x / length;
            this.y = this.y / length;
        };
        CubismVector2.prototype.isEqual = function (rhs) {
            return this.x == rhs.x && this.y == rhs.y;
        };
        CubismVector2.prototype.isNotEqual = function (rhs) {
            return !this.isEqual(rhs);
        };
        return CubismVector2;
    }());
    Live2DCubismFramework.CubismVector2 = CubismVector2;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/math/cubismviewmatrix.ts":
/*!**********************************************************!*\
  !*** ./src/SDKv4/Framework/src/math/cubismviewmatrix.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "./src/SDKv4/Framework/src/math/cubismmatrix44.ts");
var CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismViewMatrix = (function (_super) {
        __extends(CubismViewMatrix, _super);
        function CubismViewMatrix() {
            var _this = _super.call(this) || this;
            _this._screenLeft = 0.0;
            _this._screenRight = 0.0;
            _this._screenTop = 0.0;
            _this._screenBottom = 0.0;
            _this._maxLeft = 0.0;
            _this._maxRight = 0.0;
            _this._maxTop = 0.0;
            _this._maxBottom = 0.0;
            _this._maxScale = 0.0;
            _this._minScale = 0.0;
            return _this;
        }
        CubismViewMatrix.prototype.adjustTranslate = function (x, y) {
            if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {
                x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];
            }
            if (this._tr[0] * this._maxRight + (this._tr[12] + x) <
                this._screenRight) {
                x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];
            }
            if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {
                y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];
            }
            if (this._tr[5] * this._maxBottom + (this._tr[13] + y) >
                this._screenBottom) {
                y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];
            }
            var tr1 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                x,
                y,
                0.0,
                1.0
            ]);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismViewMatrix.prototype.adjustScale = function (cx, cy, scale) {
            var maxScale = this.getMaxScale();
            var minScale = this.getMinScale();
            var targetScale = scale * this._tr[0];
            if (targetScale < minScale) {
                if (this._tr[0] > 0.0) {
                    scale = minScale / this._tr[0];
                }
            }
            else if (targetScale > maxScale) {
                if (this._tr[0] > 0.0) {
                    scale = maxScale / this._tr[0];
                }
            }
            var tr1 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                cx,
                cy,
                0.0,
                1.0
            ]);
            var tr2 = new Float32Array([
                scale,
                0.0,
                0.0,
                0.0,
                0.0,
                scale,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0
            ]);
            var tr3 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                -cx,
                -cy,
                0.0,
                1.0
            ]);
            CubismMatrix44.multiply(tr3, this._tr, this._tr);
            CubismMatrix44.multiply(tr2, this._tr, this._tr);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismViewMatrix.prototype.setScreenRect = function (left, right, bottom, top) {
            this._screenLeft = left;
            this._screenRight = right;
            this._screenBottom = bottom;
            this._screenTop = top;
        };
        CubismViewMatrix.prototype.setMaxScreenRect = function (left, right, bottom, top) {
            this._maxLeft = left;
            this._maxRight = right;
            this._maxTop = top;
            this._maxBottom = bottom;
        };
        CubismViewMatrix.prototype.setMaxScale = function (maxScale) {
            this._maxScale = maxScale;
        };
        CubismViewMatrix.prototype.setMinScale = function (minScale) {
            this._minScale = minScale;
        };
        CubismViewMatrix.prototype.getMaxScale = function () {
            return this._maxScale;
        };
        CubismViewMatrix.prototype.getMinScale = function () {
            return this._minScale;
        };
        CubismViewMatrix.prototype.isMaxScale = function () {
            return this.getScaleX() >= this._maxScale;
        };
        CubismViewMatrix.prototype.isMinScale = function () {
            return this.getScaleX() <= this._minScale;
        };
        CubismViewMatrix.prototype.getScreenLeft = function () {
            return this._screenLeft;
        };
        CubismViewMatrix.prototype.getScreenRight = function () {
            return this._screenRight;
        };
        CubismViewMatrix.prototype.getScreenBottom = function () {
            return this._screenBottom;
        };
        CubismViewMatrix.prototype.getScreenTop = function () {
            return this._screenTop;
        };
        CubismViewMatrix.prototype.getMaxLeft = function () {
            return this._maxLeft;
        };
        CubismViewMatrix.prototype.getMaxRight = function () {
            return this._maxRight;
        };
        CubismViewMatrix.prototype.getMaxBottom = function () {
            return this._maxBottom;
        };
        CubismViewMatrix.prototype.getMaxTop = function () {
            return this._maxTop;
        };
        return CubismViewMatrix;
    }(CubismMatrix44));
    Live2DCubismFramework.CubismViewMatrix = CubismViewMatrix;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/model/cubismmoc.ts":
/*!****************************************************!*\
  !*** ./src/SDKv4/Framework/src/model/cubismmoc.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmodel_1 = __webpack_require__(/*! ./cubismmodel */ "./src/SDKv4/Framework/src/model/cubismmodel.ts");
var CubismModel = cubismmodel_1.Live2DCubismFramework.CubismModel;
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismMoc = (function () {
        function CubismMoc(moc) {
            this._moc = moc;
            this._modelCount = 0;
        }
        CubismMoc.create = function (mocBytes) {
            var cubismMoc = null;
            var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);
            if (moc) {
                cubismMoc = new CubismMoc(moc);
            }
            return cubismMoc;
        };
        CubismMoc.delete = function (moc) {
            moc._moc._release();
            moc._moc = null;
            moc = null;
        };
        CubismMoc.prototype.createModel = function () {
            var cubismModel = null;
            var model = Live2DCubismCore.Model.fromMoc(this._moc);
            if (model) {
                cubismModel = new CubismModel(model);
                cubismModel.initialize();
                ++this._modelCount;
            }
            return cubismModel;
        };
        CubismMoc.prototype.deleteModel = function (model) {
            if (model != null) {
                model.release();
                model = null;
                --this._modelCount;
            }
        };
        CubismMoc.prototype.release = function () {
            cubismdebug_1.CSM_ASSERT(this._modelCount == 0);
            this._moc._release();
            this._moc = null;
        };
        return CubismMoc;
    }());
    Live2DCubismFramework.CubismMoc = CubismMoc;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/model/cubismmodel.ts":
/*!******************************************************!*\
  !*** ./src/SDKv4/Framework/src/model/cubismmodel.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismrenderer_1 = __webpack_require__(/*! ../rendering/cubismrenderer */ "./src/SDKv4/Framework/src/rendering/cubismrenderer.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "./src/SDKv4/Framework/src/type/csmmap.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismBlendMode = cubismrenderer_1.Live2DCubismFramework.CubismBlendMode;
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var csmMap = csmmap_1.Live2DCubismFramework.csmMap;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismModel = (function () {
        function CubismModel(model) {
            this._model = model;
            this._parameterValues = null;
            this._parameterMaximumValues = null;
            this._parameterMinimumValues = null;
            this._partOpacities = null;
            this._savedParameters = new csmVector();
            this._parameterIds = new csmVector();
            this._drawableIds = new csmVector();
            this._partIds = new csmVector();
            this._notExistPartId = new csmMap();
            this._notExistParameterId = new csmMap();
            this._notExistParameterValues = new csmMap();
            this._notExistPartOpacities = new csmMap();
        }
        CubismModel.prototype.update = function () {
            this._model.update();
            this._model.drawables.resetDynamicFlags();
        };
        CubismModel.prototype.getCanvasWidth = function () {
            if (this._model == null) {
                return 0.0;
            }
            return (this._model.canvasinfo.CanvasWidth /
                this._model.canvasinfo.PixelsPerUnit);
        };
        CubismModel.prototype.getCanvasHeight = function () {
            if (this._model == null) {
                return 0.0;
            }
            return (this._model.canvasinfo.CanvasHeight /
                this._model.canvasinfo.PixelsPerUnit);
        };
        CubismModel.prototype.saveParameters = function () {
            var parameterCount = this._model.parameters.count;
            var savedParameterCount = this._savedParameters.getSize();
            for (var i = 0; i < parameterCount; ++i) {
                if (i < savedParameterCount) {
                    this._savedParameters.set(i, this._parameterValues[i]);
                }
                else {
                    this._savedParameters.pushBack(this._parameterValues[i]);
                }
            }
        };
        CubismModel.prototype.getModel = function () {
            return this._model;
        };
        CubismModel.prototype.getPartIndex = function (partId) {
            var partIndex;
            var partCount = this._model.parts.count;
            for (partIndex = 0; partIndex < partCount; ++partIndex) {
                if (partId == this._partIds.at(partIndex)) {
                    return partIndex;
                }
            }
            if (this._notExistPartId.isExist(partId)) {
                return this._notExistPartId.getValue(partId);
            }
            partIndex = partCount + this._notExistPartId.getSize();
            this._notExistPartId.setValue(partId, partIndex);
            this._notExistPartOpacities.appendKey(partIndex);
            return partIndex;
        };
        CubismModel.prototype.getPartCount = function () {
            var partCount = this._model.parts.count;
            return partCount;
        };
        CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {
            if (this._notExistPartOpacities.isExist(partIndex)) {
                this._notExistPartOpacities.setValue(partIndex, opacity);
                return;
            }
            cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());
            this._partOpacities[partIndex] = opacity;
        };
        CubismModel.prototype.setPartOpacityById = function (partId, opacity) {
            var index = this.getPartIndex(partId);
            if (index < 0) {
                return;
            }
            this.setPartOpacityByIndex(index, opacity);
        };
        CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {
            if (this._notExistPartOpacities.isExist(partIndex)) {
                return this._notExistPartOpacities.getValue(partIndex);
            }
            cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());
            return this._partOpacities[partIndex];
        };
        CubismModel.prototype.getPartOpacityById = function (partId) {
            var index = this.getPartIndex(partId);
            if (index < 0) {
                return 0;
            }
            return this.getPartOpacityByIndex(index);
        };
        CubismModel.prototype.getParameterIndex = function (parameterId) {
            var parameterIndex;
            var idCount = this._model.parameters.count;
            for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {
                if (parameterId != this._parameterIds.at(parameterIndex)) {
                    continue;
                }
                return parameterIndex;
            }
            if (this._notExistParameterId.isExist(parameterId)) {
                return this._notExistParameterId.getValue(parameterId);
            }
            parameterIndex =
                this._model.parameters.count + this._notExistParameterId.getSize();
            this._notExistParameterId.setValue(parameterId, parameterIndex);
            this._notExistParameterValues.appendKey(parameterIndex);
            return parameterIndex;
        };
        CubismModel.prototype.getParameterCount = function () {
            return this._model.parameters.count;
        };
        CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {
            return this._model.parameters.maximumValues[parameterIndex];
        };
        CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {
            return this._model.parameters.minimumValues[parameterIndex];
        };
        CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {
            return this._model.parameters.defaultValues[parameterIndex];
        };
        CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {
            if (this._notExistParameterValues.isExist(parameterIndex)) {
                return this._notExistParameterValues.getValue(parameterIndex);
            }
            cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());
            return this._parameterValues[parameterIndex];
        };
        CubismModel.prototype.getParameterValueById = function (parameterId) {
            var parameterIndex = this.getParameterIndex(parameterId);
            return this.getParameterValueByIndex(parameterIndex);
        };
        CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            if (this._notExistParameterValues.isExist(parameterIndex)) {
                this._notExistParameterValues.setValue(parameterIndex, weight == 1
                    ? value
                    : this._notExistParameterValues.getValue(parameterIndex) *
                        (1 - weight) +
                        value * weight);
                return;
            }
            cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());
            if (this._model.parameters.maximumValues[parameterIndex] < value) {
                value = this._model.parameters.maximumValues[parameterIndex];
            }
            if (this._model.parameters.minimumValues[parameterIndex] > value) {
                value = this._model.parameters.minimumValues[parameterIndex];
            }
            this._parameterValues[parameterIndex] =
                weight == 1
                    ? value
                    : (this._parameterValues[parameterIndex] =
                        this._parameterValues[parameterIndex] * (1 - weight) +
                            value * weight);
        };
        CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.setParameterValueByIndex(index, value, weight);
        };
        CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);
        };
        CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.addParameterValueByIndex(index, value, weight);
        };
        CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.multiplyParameterValueByIndex(index, value, weight);
        };
        CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) *
                (1.0 + (value - 1.0) * weight));
        };
        CubismModel.prototype.getDrawableIndex = function (drawableId) {
            var drawableCount = this._model.drawables.count;
            for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {
                if (this._drawableIds.at(drawableIndex) == drawableId) {
                    return drawableIndex;
                }
            }
            return -1;
        };
        CubismModel.prototype.getDrawableCount = function () {
            var drawableCount = this._model.drawables.count;
            return drawableCount;
        };
        CubismModel.prototype.getDrawableId = function (drawableIndex) {
            var parameterIds = this._model.drawables.ids;
            return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);
        };
        CubismModel.prototype.getDrawableRenderOrders = function () {
            var renderOrders = this._model.drawables.renderOrders;
            return renderOrders;
        };
        CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {
            var textureIndices = this._model.drawables.textureIndices;
            return textureIndices[drawableIndex];
        };
        CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {
            var indexCounts = this._model.drawables.indexCounts;
            return indexCounts[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {
            var vertexCounts = this._model.drawables.vertexCounts;
            return vertexCounts[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertices = function (drawableIndex) {
            return this.getDrawableVertexPositions(drawableIndex);
        };
        CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {
            var indicesArray = this._model.drawables.indices;
            return indicesArray[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {
            var verticesArray = this._model.drawables
                .vertexPositions;
            return verticesArray[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {
            var uvsArray = this._model.drawables.vertexUvs;
            return uvsArray[drawableIndex];
        };
        CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {
            var opacities = this._model.drawables.opacities;
            return opacities[drawableIndex];
        };
        CubismModel.prototype.getDrawableCulling = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex])
                ? CubismBlendMode.CubismBlendMode_Additive
                : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex])
                    ? CubismBlendMode.CubismBlendMode_Multiplicative
                    : CubismBlendMode.CubismBlendMode_Normal;
        };
        CubismModel.prototype.getDrawableInvertedMaskBit = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableMasks = function () {
            var masks = this._model.drawables.masks;
            return masks;
        };
        CubismModel.prototype.getDrawableMaskCounts = function () {
            var maskCounts = this._model.drawables.maskCounts;
            return maskCounts;
        };
        CubismModel.prototype.isUsingMasking = function () {
            for (var d = 0; d < this._model.drawables.count; ++d) {
                if (this._model.drawables.maskCounts[d] <= 0) {
                    continue;
                }
                return true;
            }
            return false;
        };
        CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.loadParameters = function () {
            var parameterCount = this._model.parameters.count;
            var savedParameterCount = this._savedParameters.getSize();
            if (parameterCount > savedParameterCount) {
                parameterCount = savedParameterCount;
            }
            for (var i = 0; i < parameterCount; ++i) {
                this._parameterValues[i] = this._savedParameters.at(i);
            }
        };
        CubismModel.prototype.initialize = function () {
            cubismdebug_1.CSM_ASSERT(this._model);
            this._parameterValues = this._model.parameters.values;
            this._partOpacities = this._model.parts.opacities;
            this._parameterMaximumValues = this._model.parameters.maximumValues;
            this._parameterMinimumValues = this._model.parameters.minimumValues;
            {
                var parameterIds = this._model.parameters.ids;
                var parameterCount = this._model.parameters.count;
                this._parameterIds.prepareCapacity(parameterCount);
                for (var i = 0; i < parameterCount; ++i) {
                    this._parameterIds.pushBack(CubismFramework.getIdManager().getId(parameterIds[i]));
                }
            }
            {
                var partIds = this._model.parts.ids;
                var partCount = this._model.parts.count;
                this._partIds.prepareCapacity(partCount);
                for (var i = 0; i < partCount; ++i) {
                    this._partIds.pushBack(CubismFramework.getIdManager().getId(partIds[i]));
                }
            }
            {
                var drawableIds = this._model.drawables.ids;
                var drawableCount = this._model.drawables.count;
                this._drawableIds.prepareCapacity(drawableCount);
                for (var i = 0; i < drawableCount; ++i) {
                    this._drawableIds.pushBack(CubismFramework.getIdManager().getId(drawableIds[i]));
                }
            }
        };
        CubismModel.prototype.release = function () {
            this._model.release();
            this._model = null;
        };
        return CubismModel;
    }());
    Live2DCubismFramework.CubismModel = CubismModel;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/model/cubismmodeluserdata.ts":
/*!**************************************************************!*\
  !*** ./src/SDKv4/Framework/src/model/cubismmodeluserdata.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmodeluserdatajson_1 = __webpack_require__(/*! ./cubismmodeluserdatajson */ "./src/SDKv4/Framework/src/model/cubismmodeluserdatajson.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./src/SDKv4/Framework/src/type/csmstring.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var csmString = csmstring_1.Live2DCubismFramework.csmString;
var CubismModelUserDataJson = cubismmodeluserdatajson_1.Live2DCubismFramework.CubismModelUserDataJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var ArtMesh = 'ArtMesh';
    var CubismModelUserDataNode = (function () {
        function CubismModelUserDataNode() {
        }
        return CubismModelUserDataNode;
    }());
    Live2DCubismFramework.CubismModelUserDataNode = CubismModelUserDataNode;
    var CubismModelUserData = (function () {
        function CubismModelUserData() {
            this._userDataNodes = new csmVector();
            this._artMeshUserDataNode = new csmVector();
        }
        CubismModelUserData.create = function (buffer, size) {
            var ret = new CubismModelUserData();
            ret.parseUserData(buffer, size);
            return ret;
        };
        CubismModelUserData.delete = function (modelUserData) {
            if (modelUserData != null) {
                modelUserData.release();
                modelUserData = null;
            }
        };
        CubismModelUserData.prototype.getArtMeshUserDatas = function () {
            return this._artMeshUserDataNode;
        };
        CubismModelUserData.prototype.parseUserData = function (buffer, size) {
            var json = new CubismModelUserDataJson(buffer, size);
            var typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);
            var nodeCount = json.getUserDataCount();
            for (var i = 0; i < nodeCount; i++) {
                var addNode = new CubismModelUserDataNode();
                addNode.targetId = json.getUserDataId(i);
                addNode.targetType = CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));
                addNode.value = new csmString(json.getUserDataValue(i));
                this._userDataNodes.pushBack(addNode);
                if (addNode.targetType == typeOfArtMesh) {
                    this._artMeshUserDataNode.pushBack(addNode);
                }
            }
            json.release();
            json = void 0;
        };
        CubismModelUserData.prototype.release = function () {
            for (var i = 0; i < this._userDataNodes.getSize(); ++i) {
                this._userDataNodes.set(i, null);
            }
            this._userDataNodes = null;
        };
        return CubismModelUserData;
    }());
    Live2DCubismFramework.CubismModelUserData = CubismModelUserData;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/model/cubismmodeluserdatajson.ts":
/*!******************************************************************!*\
  !*** ./src/SDKv4/Framework/src/model/cubismmodeluserdatajson.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./src/SDKv4/Framework/src/utils/cubismjson.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var Meta = 'Meta';
    var UserDataCount = 'UserDataCount';
    var TotalUserDataSize = 'TotalUserDataSize';
    var UserData = 'UserData';
    var Target = 'Target';
    var Id = 'Id';
    var Value = 'Value';
    var CubismModelUserDataJson = (function () {
        function CubismModelUserDataJson(buffer, size) {
            this._json = CubismJson.create(buffer, size);
        }
        CubismModelUserDataJson.prototype.release = function () {
            CubismJson.delete(this._json);
        };
        CubismModelUserDataJson.prototype.getUserDataCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(UserDataCount)
                .toInt();
        };
        CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalUserDataSize)
                .toInt();
        };
        CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {
            return this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(i)
                .getValueByString(Target)
                .getRawString();
        };
        CubismModelUserDataJson.prototype.getUserDataId = function (i) {
            return CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(i)
                .getValueByString(Id)
                .getRawString());
        };
        CubismModelUserDataJson.prototype.getUserDataValue = function (i) {
            return this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(i)
                .getValueByString(Value)
                .getRawString();
        };
        return CubismModelUserDataJson;
    }());
    Live2DCubismFramework.CubismModelUserDataJson = CubismModelUserDataJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/model/cubismusermodel.ts":
/*!**********************************************************!*\
  !*** ./src/SDKv4/Framework/src/model/cubismusermodel.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var cubismmotionmanager_1 = __webpack_require__(/*! ../motion/cubismmotionmanager */ "./src/SDKv4/Framework/src/motion/cubismmotionmanager.ts");
var cubismtargetpoint_1 = __webpack_require__(/*! ../math/cubismtargetpoint */ "./src/SDKv4/Framework/src/math/cubismtargetpoint.ts");
var cubismmodelmatrix_1 = __webpack_require__(/*! ../math/cubismmodelmatrix */ "./src/SDKv4/Framework/src/math/cubismmodelmatrix.ts");
var cubismmoc_1 = __webpack_require__(/*! ./cubismmoc */ "./src/SDKv4/Framework/src/model/cubismmoc.ts");
var cubismmotion_1 = __webpack_require__(/*! ../motion/cubismmotion */ "./src/SDKv4/Framework/src/motion/cubismmotion.ts");
var cubismexpressionmotion_1 = __webpack_require__(/*! ../motion/cubismexpressionmotion */ "./src/SDKv4/Framework/src/motion/cubismexpressionmotion.ts");
var cubismpose_1 = __webpack_require__(/*! ../effect/cubismpose */ "./src/SDKv4/Framework/src/effect/cubismpose.ts");
var cubismmodeluserdata_1 = __webpack_require__(/*! ./cubismmodeluserdata */ "./src/SDKv4/Framework/src/model/cubismmodeluserdata.ts");
var cubismphysics_1 = __webpack_require__(/*! ../physics/cubismphysics */ "./src/SDKv4/Framework/src/physics/cubismphysics.ts");
var cubismbreath_1 = __webpack_require__(/*! ../effect/cubismbreath */ "./src/SDKv4/Framework/src/effect/cubismbreath.ts");
var cubismeyeblink_1 = __webpack_require__(/*! ../effect/cubismeyeblink */ "./src/SDKv4/Framework/src/effect/cubismeyeblink.ts");
var cubismrenderer_webgl_1 = __webpack_require__(/*! ../rendering/cubismrenderer_webgl */ "./src/SDKv4/Framework/src/rendering/cubismrenderer_webgl.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var CubismRenderer_WebGL = cubismrenderer_webgl_1.Live2DCubismFramework.CubismRenderer_WebGL;
var CubismEyeBlink = cubismeyeblink_1.Live2DCubismFramework.CubismEyeBlink;
var CubismBreath = cubismbreath_1.Live2DCubismFramework.CubismBreath;
var Constant = live2dcubismframework_1.Live2DCubismFramework.Constant;
var CubismPhysics = cubismphysics_1.Live2DCubismFramework.CubismPhysics;
var CubismModelUserData = cubismmodeluserdata_1.Live2DCubismFramework.CubismModelUserData;
var CubismPose = cubismpose_1.Live2DCubismFramework.CubismPose;
var CubismExpressionMotion = cubismexpressionmotion_1.Live2DCubismFramework.CubismExpressionMotion;
var CubismMotion = cubismmotion_1.Live2DCubismFramework.CubismMotion;
var CubismMoc = cubismmoc_1.Live2DCubismFramework.CubismMoc;
var CubismModelMatrix = cubismmodelmatrix_1.Live2DCubismFramework.CubismModelMatrix;
var CubismTargetPoint = cubismtargetpoint_1.Live2DCubismFramework.CubismTargetPoint;
var CubismMotionManager = cubismmotionmanager_1.Live2DCubismFramework.CubismMotionManager;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismUserModel = (function () {
        function CubismUserModel(debugMode) {
            this.loadMotion = function (buffer, size, name, onFinishedMotionHandler) { return CubismMotion.create(buffer, size, onFinishedMotionHandler); };
            this._moc = null;
            this._model = null;
            this._motionManager = null;
            this._expressionManager = null;
            this._eyeBlink = null;
            this._breath = null;
            this._modelMatrix = null;
            this._pose = null;
            this._dragManager = null;
            this._physics = null;
            this._modelUserData = null;
            this._initialized = false;
            this._updating = false;
            this._opacity = 1.0;
            this._lipsync = true;
            this._lastLipSyncValue = 0.0;
            this._dragX = 0.0;
            this._dragY = 0.0;
            this._accelerationX = 0.0;
            this._accelerationY = 0.0;
            this._accelerationZ = 0.0;
            this._debugMode = debugMode;
            this._renderer = null;
            this._motionManager = new CubismMotionManager();
            this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);
            this._expressionManager = new CubismMotionManager();
            this._dragManager = new CubismTargetPoint();
        }
        CubismUserModel.prototype.isInitialized = function () {
            return this._initialized;
        };
        CubismUserModel.prototype.setInitialized = function (v) {
            this._initialized = v;
        };
        CubismUserModel.prototype.isUpdating = function () {
            return this._updating;
        };
        CubismUserModel.prototype.setUpdating = function (v) {
            this._updating = v;
        };
        CubismUserModel.prototype.setDragging = function (x, y) {
            this._dragManager.set(x, y);
        };
        CubismUserModel.prototype.setAcceleration = function (x, y, z) {
            this._accelerationX = x;
            this._accelerationY = y;
            this._accelerationZ = z;
        };
        CubismUserModel.prototype.getModelMatrix = function () {
            return this._modelMatrix;
        };
        CubismUserModel.prototype.setOpacity = function (a) {
            this._opacity = a;
        };
        CubismUserModel.prototype.getOpacity = function () {
            return this._opacity;
        };
        CubismUserModel.prototype.loadModel = function (buffer) {
            this._moc = CubismMoc.create(buffer);
            this._model = this._moc.createModel();
            this._model.saveParameters();
            if (this._moc == null || this._model == null) {
                cubismdebug_1.CubismLogError('Failed to CreateModel().');
                return;
            }
            this._modelMatrix = new CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());
        };
        CubismUserModel.prototype.loadExpression = function (buffer, size, name) {
            return CubismExpressionMotion.create(buffer, size);
        };
        CubismUserModel.prototype.loadPose = function (buffer, size) {
            this._pose = CubismPose.create(buffer, size);
        };
        CubismUserModel.prototype.loadUserData = function (buffer, size) {
            this._modelUserData = CubismModelUserData.create(buffer, size);
        };
        CubismUserModel.prototype.loadPhysics = function (buffer, size) {
            this._physics = CubismPhysics.create(buffer, size);
        };
        CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {
            var drawIndex = this._model.getDrawableIndex(drawableId);
            if (drawIndex < 0) {
                return false;
            }
            var count = this._model.getDrawableVertexCount(drawIndex);
            var vertices = this._model.getDrawableVertices(drawIndex);
            var left = vertices[0];
            var right = vertices[0];
            var top = vertices[1];
            var bottom = vertices[1];
            for (var j = 1; j < count; ++j) {
                var x = vertices[Constant.vertexOffset + j * Constant.vertexStep];
                var y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];
                if (x < left) {
                    left = x;
                }
                if (x > right) {
                    right = x;
                }
                if (y < top) {
                    top = y;
                }
                if (y > bottom) {
                    bottom = y;
                }
            }
            var tx = this._modelMatrix.invertTransformX(pointX);
            var ty = this._modelMatrix.invertTransformY(pointY);
            return left <= tx && tx <= right && top <= ty && ty <= bottom;
        };
        CubismUserModel.prototype.getModel = function () {
            return this._model;
        };
        CubismUserModel.prototype.getRenderer = function () {
            return this._renderer;
        };
        CubismUserModel.prototype.createRenderer = function () {
            if (this._renderer) {
                this.deleteRenderer();
            }
            this._renderer = new CubismRenderer_WebGL();
            this._renderer.initialize(this._model);
        };
        CubismUserModel.prototype.deleteRenderer = function () {
            if (this._renderer != null) {
                this._renderer.release();
                this._renderer = null;
            }
        };
        CubismUserModel.prototype.motionEventFired = function (eventValue) {
            cubismdebug_1.CubismLogInfo('{0}', eventValue.s);
        };
        CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {
            var model = customData;
            if (model != null) {
                model.motionEventFired(eventValue);
            }
        };
        CubismUserModel.prototype.release = function () {
            if (this._motionManager != null) {
                this._motionManager.release();
                this._motionManager = null;
            }
            if (this._expressionManager != null) {
                this._expressionManager.release();
                this._expressionManager = null;
            }
            if (this._moc != null) {
                this._moc.deleteModel(this._model);
                this._moc.release();
                this._moc = null;
            }
            this._modelMatrix = null;
            CubismPose.delete(this._pose);
            CubismEyeBlink.delete(this._eyeBlink);
            CubismBreath.delete(this._breath);
            this._dragManager = null;
            CubismPhysics.delete(this._physics);
            CubismModelUserData.delete(this._modelUserData);
            this.deleteRenderer();
        };
        return CubismUserModel;
    }());
    Live2DCubismFramework.CubismUserModel = CubismUserModel;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/acubismmotion.ts":
/*!*********************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/acubismmotion.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "./src/SDKv4/Framework/src/math/cubismmath.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var ACubismMotion = (function () {
        function ACubismMotion() {
            var _this = this;
            this.setFinishedMotionHandler = function (onFinishedMotionHandler) { return (_this._onFinishedMotion = onFinishedMotionHandler); };
            this.getFinishedMotionHandler = function () { return _this._onFinishedMotion; };
            this._fadeInSeconds = -1.0;
            this._fadeOutSeconds = -1.0;
            this._weight = 1.0;
            this._offsetSeconds = 0.0;
            this._firedEventValues = new csmVector();
        }
        ACubismMotion.delete = function (motion) {
            motion.release();
            motion = void 0;
            motion = null;
        };
        ACubismMotion.prototype.release = function () {
            this._weight = 0.0;
        };
        ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {
            if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {
                return;
            }
            if (!motionQueueEntry.isStarted()) {
                motionQueueEntry.setIsStarted(true);
                motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);
                motionQueueEntry.setFadeInStartTime(userTimeSeconds);
                var duration = this.getDuration();
                if (motionQueueEntry.getEndTime() < 0) {
                    motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);
                }
            }
            var fadeWeight = this._weight;
            var fadeIn = this._fadeInSeconds == 0.0
                ? 1.0
                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                    this._fadeInSeconds);
            var fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0
                ? 1.0
                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                    this._fadeOutSeconds);
            fadeWeight = fadeWeight * fadeIn * fadeOut;
            motionQueueEntry.setState(userTimeSeconds, fadeWeight);
            cubismdebug_1.CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);
            this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);
            if (motionQueueEntry.getEndTime() > 0 &&
                motionQueueEntry.getEndTime() < userTimeSeconds) {
                motionQueueEntry.setIsFinished(true);
            }
        };
        ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {
            this._fadeInSeconds = fadeInSeconds;
        };
        ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {
            this._fadeOutSeconds = fadeOutSeconds;
        };
        ACubismMotion.prototype.getFadeOutTime = function () {
            return this._fadeOutSeconds;
        };
        ACubismMotion.prototype.getFadeInTime = function () {
            return this._fadeInSeconds;
        };
        ACubismMotion.prototype.setWeight = function (weight) {
            this._weight = weight;
        };
        ACubismMotion.prototype.getWeight = function () {
            return this._weight;
        };
        ACubismMotion.prototype.getDuration = function () {
            return -1.0;
        };
        ACubismMotion.prototype.getLoopDuration = function () {
            return -1.0;
        };
        ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {
            this._offsetSeconds = offsetSeconds;
        };
        ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
            return this._firedEventValues;
        };
        return ACubismMotion;
    }());
    Live2DCubismFramework.ACubismMotion = ACubismMotion;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/cubismexpressionmotion.ts":
/*!******************************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/cubismexpressionmotion.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "./src/SDKv4/Framework/src/motion/acubismmotion.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./src/SDKv4/Framework/src/utils/cubismjson.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;
var ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var ExpressionKeyFadeIn = 'FadeInTime';
    var ExpressionKeyFadeOut = 'FadeOutTime';
    var ExpressionKeyParameters = 'Parameters';
    var ExpressionKeyId = 'Id';
    var ExpressionKeyValue = 'Value';
    var ExpressionKeyBlend = 'Blend';
    var BlendValueAdd = 'Add';
    var BlendValueMultiply = 'Multiply';
    var BlendValueOverwrite = 'Overwrite';
    var DefaultFadeTime = 1.0;
    var CubismExpressionMotion = (function (_super) {
        __extends(CubismExpressionMotion, _super);
        function CubismExpressionMotion() {
            var _this = _super.call(this) || this;
            _this._parameters = new csmVector();
            return _this;
        }
        CubismExpressionMotion.create = function (buffer, size) {
            var expression = new CubismExpressionMotion();
            var json = CubismJson.create(buffer, size);
            var root = json.getRoot();
            expression.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime));
            expression.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));
            var parameterCount = root
                .getValueByString(ExpressionKeyParameters)
                .getSize();
            expression._parameters.prepareCapacity(parameterCount);
            for (var i = 0; i < parameterCount; ++i) {
                var param = root
                    .getValueByString(ExpressionKeyParameters)
                    .getValueByIndex(i);
                var parameterId = CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString());
                var value = param
                    .getValueByString(ExpressionKeyValue)
                    .toFloat();
                var blendType = void 0;
                if (param.getValueByString(ExpressionKeyBlend).isNull() ||
                    param.getValueByString(ExpressionKeyBlend).getString() ==
                        BlendValueAdd) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Add;
                }
                else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                    BlendValueMultiply) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Multiply;
                }
                else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                    BlendValueOverwrite) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;
                }
                else {
                    blendType = ExpressionBlendType.ExpressionBlendType_Add;
                }
                var item = new ExpressionParameter();
                item.parameterId = parameterId;
                item.blendType = blendType;
                item.value = value;
                expression._parameters.pushBack(item);
            }
            CubismJson.delete(json);
            return expression;
        };
        CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {
            for (var i = 0; i < this._parameters.getSize(); ++i) {
                var parameter = this._parameters.at(i);
                switch (parameter.blendType) {
                    case ExpressionBlendType.ExpressionBlendType_Add: {
                        model.addParameterValueById(parameter.parameterId, parameter.value, weight);
                        break;
                    }
                    case ExpressionBlendType.ExpressionBlendType_Multiply: {
                        model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);
                        break;
                    }
                    case ExpressionBlendType.ExpressionBlendType_Overwrite: {
                        model.setParameterValueById(parameter.parameterId, parameter.value, weight);
                        break;
                    }
                    default:
                        break;
                }
            }
        };
        return CubismExpressionMotion;
    }(ACubismMotion));
    Live2DCubismFramework.CubismExpressionMotion = CubismExpressionMotion;
    var ExpressionBlendType;
    (function (ExpressionBlendType) {
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Add"] = 0] = "ExpressionBlendType_Add";
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Multiply"] = 1] = "ExpressionBlendType_Multiply";
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Overwrite"] = 2] = "ExpressionBlendType_Overwrite";
    })(ExpressionBlendType = Live2DCubismFramework.ExpressionBlendType || (Live2DCubismFramework.ExpressionBlendType = {}));
    var ExpressionParameter = (function () {
        function ExpressionParameter() {
        }
        return ExpressionParameter;
    }());
    Live2DCubismFramework.ExpressionParameter = ExpressionParameter;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/cubismmotion.ts":
/*!********************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/cubismmotion.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmotionjson_1 = __webpack_require__(/*! ./cubismmotionjson */ "./src/SDKv4/Framework/src/motion/cubismmotionjson.ts");
var cubismmotioninternal_1 = __webpack_require__(/*! ./cubismmotioninternal */ "./src/SDKv4/Framework/src/motion/cubismmotioninternal.ts");
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "./src/SDKv4/Framework/src/motion/acubismmotion.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "./src/SDKv4/Framework/src/math/cubismmath.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./src/SDKv4/Framework/src/type/csmstring.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var csmString = csmstring_1.Live2DCubismFramework.csmString;
var CubismMotionData = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionData;
var CubismMotionSegment = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionSegment;
var CubismMotionPoint = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionPoint;
var CubismMotionEvent = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionEvent;
var CubismMotionSegmentType = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionSegmentType;
var CubismMotionCurve = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionCurve;
var CubismMotionCurveTarget = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionCurveTarget;
var CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;
var CubismMotionJson = cubismmotionjson_1.Live2DCubismFramework.CubismMotionJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var EffectNameEyeBlink = 'EyeBlink';
    var EffectNameLipSync = 'LipSync';
    var TargetNameModel = 'Model';
    var TargetNameParameter = 'Parameter';
    var TargetNamePartOpacity = 'PartOpacity';
    function lerpPoints(a, b, t) {
        var result = new CubismMotionPoint();
        result.time = a.time + (b.time - a.time) * t;
        result.value = a.value + (b.value - a.value) * t;
        return result;
    }
    function linearEvaluate(points, time) {
        var t = (time - points[0].time) / (points[1].time - points[0].time);
        if (t < 0.0) {
            t = 0.0;
        }
        return points[0].value + (points[1].value - points[0].value) * t;
    }
    function bezierEvaluate(points, time) {
        var t = (time - points[0].time) / (points[3].time - points[0].time);
        if (t < 0.0) {
            t = 0.0;
        }
        var p01 = lerpPoints(points[0], points[1], t);
        var p12 = lerpPoints(points[1], points[2], t);
        var p23 = lerpPoints(points[2], points[3], t);
        var p012 = lerpPoints(p01, p12, t);
        var p123 = lerpPoints(p12, p23, t);
        return lerpPoints(p012, p123, t).value;
    }
    function steppedEvaluate(points, time) {
        return points[0].value;
    }
    function inverseSteppedEvaluate(points, time) {
        return points[1].value;
    }
    function evaluateCurve(motionData, index, time) {
        var curve = motionData.curves.at(index);
        var target = -1;
        var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;
        var pointPosition = 0;
        for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {
            pointPosition =
                motionData.segments.at(i).basePointIndex +
                    (motionData.segments.at(i).segmentType ==
                        CubismMotionSegmentType.CubismMotionSegmentType_Bezier
                        ? 3
                        : 1);
            if (motionData.points.at(pointPosition).time > time) {
                target = i;
                break;
            }
        }
        if (target == -1) {
            return motionData.points.at(pointPosition).value;
        }
        var segment = motionData.segments.at(target);
        return segment.evaluate(motionData.points.get(segment.basePointIndex), time);
    }
    var CubismMotion = (function (_super) {
        __extends(CubismMotion, _super);
        function CubismMotion() {
            var _this = _super.call(this) || this;
            _this._sourceFrameRate = 30.0;
            _this._loopDurationSeconds = -1.0;
            _this._isLoop = false;
            _this._isLoopFadeIn = true;
            _this._lastWeight = 0.0;
            _this._motionData = null;
            _this._modelCurveIdEyeBlink = null;
            _this._modelCurveIdLipSync = null;
            _this._eyeBlinkParameterIds = null;
            _this._lipSyncParameterIds = null;
            return _this;
        }
        CubismMotion.create = function (buffer, size, onFinishedMotionHandler) {
            var ret = new CubismMotion();
            ret.parse(buffer, size);
            ret._sourceFrameRate = ret._motionData.fps;
            ret._loopDurationSeconds = ret._motionData.duration;
            ret._onFinishedMotion = onFinishedMotionHandler;
            return ret;
        };
        CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {
            if (this._modelCurveIdEyeBlink == null) {
                this._modelCurveIdEyeBlink = CubismFramework.getIdManager().getId(EffectNameEyeBlink);
            }
            if (this._modelCurveIdLipSync == null) {
                this._modelCurveIdLipSync = CubismFramework.getIdManager().getId(EffectNameLipSync);
            }
            var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();
            if (timeOffsetSeconds < 0.0) {
                timeOffsetSeconds = 0.0;
            }
            var lipSyncValue = Number.MAX_VALUE;
            var eyeBlinkValue = Number.MAX_VALUE;
            var MaxTargetSize = 64;
            var lipSyncFlags = 0;
            var eyeBlinkFlags = 0;
            if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {
                cubismdebug_1.CubismLogDebug('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());
            }
            if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {
                cubismdebug_1.CubismLogDebug('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());
            }
            var tmpFadeIn = this._fadeInSeconds <= 0.0
                ? 1.0
                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                    this._fadeInSeconds);
            var tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0
                ? 1.0
                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                    this._fadeOutSeconds);
            var value;
            var c, parameterIndex;
            var time = timeOffsetSeconds;
            if (this._isLoop) {
                while (time > this._motionData.duration) {
                    time -= this._motionData.duration;
                }
            }
            var curves = this._motionData.curves;
            for (c = 0; c < this._motionData.curveCount &&
                curves.at(c).type ==
                    CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {
                value = evaluateCurve(this._motionData, c, time);
                if (curves.at(c).id == this._modelCurveIdEyeBlink) {
                    eyeBlinkValue = value;
                }
                else if (curves.at(c).id == this._modelCurveIdLipSync) {
                    lipSyncValue = value;
                }
            }
            var parameterMotionCurveCount = 0;
            for (; c < this._motionData.curveCount &&
                curves.at(c).type ==
                    CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {
                parameterMotionCurveCount++;
                parameterIndex = model.getParameterIndex(curves.at(c).id);
                if (parameterIndex == -1) {
                    continue;
                }
                var sourceValue = model.getParameterValueByIndex(parameterIndex);
                value = evaluateCurve(this._motionData, c, time);
                if (eyeBlinkValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {
                            value *= eyeBlinkValue;
                            eyeBlinkFlags |= 1 << i;
                            break;
                        }
                    }
                }
                if (lipSyncValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {
                            value += lipSyncValue;
                            lipSyncFlags |= 1 << i;
                            break;
                        }
                    }
                }
                var v = void 0;
                if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {
                    v = sourceValue + (value - sourceValue) * fadeWeight;
                }
                else {
                    var fin = void 0;
                    var fout = void 0;
                    if (curves.at(c).fadeInTime < 0.0) {
                        fin = tmpFadeIn;
                    }
                    else {
                        fin =
                            curves.at(c).fadeInTime == 0.0
                                ? 1.0
                                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                                    curves.at(c).fadeInTime);
                    }
                    if (curves.at(c).fadeOutTime < 0.0) {
                        fout = tmpFadeOut;
                    }
                    else {
                        fout =
                            curves.at(c).fadeOutTime == 0.0 ||
                                motionQueueEntry.getEndTime() < 0.0
                                ? 1.0
                                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                                    curves.at(c).fadeOutTime);
                    }
                    var paramWeight = this._weight * fin * fout;
                    v = sourceValue + (value - sourceValue) * paramWeight;
                }
                model.setParameterValueByIndex(parameterIndex, v, 1.0);
            }
            {
                if (eyeBlinkValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));
                        if ((eyeBlinkFlags >> i) & 0x01) {
                            continue;
                        }
                        var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;
                        model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);
                    }
                }
                if (lipSyncValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));
                        if ((lipSyncFlags >> i) & 0x01) {
                            continue;
                        }
                        var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;
                        model.setParameterValueById(this._lipSyncParameterIds.at(i), v);
                    }
                }
            }
            for (; c < this._motionData.curveCount &&
                curves.at(c).type ==
                    CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {
                parameterIndex = model.getParameterIndex(curves.at(c).id);
                if (parameterIndex == -1) {
                    continue;
                }
                value = evaluateCurve(this._motionData, c, time);
                model.setParameterValueByIndex(parameterIndex, value);
            }
            if (timeOffsetSeconds >= this._motionData.duration) {
                if (this._isLoop) {
                    motionQueueEntry.setStartTime(userTimeSeconds);
                    if (this._isLoopFadeIn) {
                        motionQueueEntry.setFadeInStartTime(userTimeSeconds);
                    }
                }
                else {
                    if (this._onFinishedMotion) {
                        this._onFinishedMotion(this);
                    }
                    motionQueueEntry.setIsFinished(true);
                }
            }
            this._lastWeight = fadeWeight;
        };
        CubismMotion.prototype.setIsLoop = function (loop) {
            this._isLoop = loop;
        };
        CubismMotion.prototype.isLoop = function () {
            return this._isLoop;
        };
        CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {
            this._isLoopFadeIn = loopFadeIn;
        };
        CubismMotion.prototype.isLoopFadeIn = function () {
            return this._isLoopFadeIn;
        };
        CubismMotion.prototype.getDuration = function () {
            return this._isLoop ? -1.0 : this._loopDurationSeconds;
        };
        CubismMotion.prototype.getLoopDuration = function () {
            return this._loopDurationSeconds;
        };
        CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    curves.at(i).fadeInTime = value;
                    return;
                }
            }
        };
        CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    curves.at(i).fadeOutTime = value;
                    return;
                }
            }
        };
        CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    return curves.at(i).fadeInTime;
                }
            }
            return -1;
        };
        CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    return curves.at(i).fadeOutTime;
                }
            }
            return -1;
        };
        CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {
            this._eyeBlinkParameterIds = eyeBlinkParameterIds;
            this._lipSyncParameterIds = lipSyncParameterIds;
        };
        CubismMotion.prototype.release = function () {
            this._motionData = void 0;
            this._motionData = null;
        };
        CubismMotion.prototype.parse = function (motionJson, size) {
            this._motionData = new CubismMotionData();
            var json = new CubismMotionJson(motionJson, size);
            this._motionData.duration = json.getMotionDuration();
            this._motionData.loop = json.isMotionLoop();
            this._motionData.curveCount = json.getMotionCurveCount();
            this._motionData.fps = json.getMotionFps();
            this._motionData.eventCount = json.getEventCount();
            if (json.isExistMotionFadeInTime()) {
                this._fadeInSeconds =
                    json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();
            }
            else {
                this._fadeInSeconds = 1.0;
            }
            if (json.isExistMotionFadeOutTime()) {
                this._fadeOutSeconds =
                    json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();
            }
            else {
                this._fadeOutSeconds = 1.0;
            }
            this._motionData.curves.updateSize(this._motionData.curveCount, CubismMotionCurve, true);
            this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), CubismMotionSegment, true);
            this._motionData.points.updateSize(json.getMotionTotalPointCount(), CubismMotionPoint, true);
            this._motionData.events.updateSize(this._motionData.eventCount, CubismMotionEvent, true);
            var totalPointCount = 0;
            var totalSegmentCount = 0;
            for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {
                if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {
                    this._motionData.curves.at(curveCount).type =
                        CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
                }
                else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {
                    this._motionData.curves.at(curveCount).type =
                        CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;
                }
                else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {
                    this._motionData.curves.at(curveCount).type =
                        CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;
                }
                this._motionData.curves.at(curveCount).id = json.getMotionCurveId(curveCount);
                this._motionData.curves.at(curveCount).baseSegmentIndex = totalSegmentCount;
                this._motionData.curves.at(curveCount).fadeInTime = json.isExistMotionCurveFadeInTime(curveCount)
                    ? json.getMotionCurveFadeInTime(curveCount)
                    : -1.0;
                this._motionData.curves.at(curveCount).fadeOutTime = json.isExistMotionCurveFadeOutTime(curveCount)
                    ? json.getMotionCurveFadeOutTime(curveCount)
                    : -1.0;
                for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {
                    if (segmentPosition == 0) {
                        this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount;
                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition);
                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        totalPointCount += 1;
                        segmentPosition += 2;
                    }
                    else {
                        this._motionData.segments.at(totalSegmentCount).basePointIndex =
                            totalPointCount - 1;
                    }
                    var segment = json.getMotionCurveSegment(curveCount, segmentPosition);
                    switch (segment) {
                        case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                CubismMotionSegmentType.CubismMotionSegmentType_Linear;
                            this._motionData.segments.at(totalSegmentCount).evaluate = linearEvaluate;
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            totalPointCount += 1;
                            segmentPosition += 3;
                            break;
                        }
                        case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                CubismMotionSegmentType.CubismMotionSegmentType_Bezier;
                            this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluate;
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            this._motionData.points.at(totalPointCount + 1).time = json.getMotionCurveSegment(curveCount, segmentPosition + 3);
                            this._motionData.points.at(totalPointCount + 1).value = json.getMotionCurveSegment(curveCount, segmentPosition + 4);
                            this._motionData.points.at(totalPointCount + 2).time = json.getMotionCurveSegment(curveCount, segmentPosition + 5);
                            this._motionData.points.at(totalPointCount + 2).value = json.getMotionCurveSegment(curveCount, segmentPosition + 6);
                            totalPointCount += 3;
                            segmentPosition += 7;
                            break;
                        }
                        case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                CubismMotionSegmentType.CubismMotionSegmentType_Stepped;
                            this._motionData.segments.at(totalSegmentCount).evaluate = steppedEvaluate;
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            totalPointCount += 1;
                            segmentPosition += 3;
                            break;
                        }
                        case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;
                            this._motionData.segments.at(totalSegmentCount).evaluate = inverseSteppedEvaluate;
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            totalPointCount += 1;
                            segmentPosition += 3;
                            break;
                        }
                        default: {
                            cubismdebug_1.CSM_ASSERT(0);
                            break;
                        }
                    }
                    ++this._motionData.curves.at(curveCount).segmentCount;
                    ++totalSegmentCount;
                }
            }
            for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {
                this._motionData.events.at(userdatacount).fireTime = json.getEventTime(userdatacount);
                this._motionData.events.at(userdatacount).value = json.getEventValue(userdatacount);
            }
            json.release();
            json = void 0;
            json = null;
        };
        CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
            this._firedEventValues.updateSize(0);
            for (var u = 0; u < this._motionData.eventCount; ++u) {
                if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&
                    this._motionData.events.at(u).fireTime <= motionTimeSeconds) {
                    this._firedEventValues.pushBack(new csmString(this._motionData.events.at(u).value.s));
                }
            }
            return this._firedEventValues;
        };
        return CubismMotion;
    }(ACubismMotion));
    Live2DCubismFramework.CubismMotion = CubismMotion;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/cubismmotioninternal.ts":
/*!****************************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/cubismmotioninternal.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismMotionCurveTarget;
    (function (CubismMotionCurveTarget) {
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Model"] = 0] = "CubismMotionCurveTarget_Model";
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Parameter"] = 1] = "CubismMotionCurveTarget_Parameter";
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_PartOpacity"] = 2] = "CubismMotionCurveTarget_PartOpacity";
    })(CubismMotionCurveTarget = Live2DCubismFramework.CubismMotionCurveTarget || (Live2DCubismFramework.CubismMotionCurveTarget = {}));
    var CubismMotionSegmentType;
    (function (CubismMotionSegmentType) {
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Linear"] = 0] = "CubismMotionSegmentType_Linear";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Bezier"] = 1] = "CubismMotionSegmentType_Bezier";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Stepped"] = 2] = "CubismMotionSegmentType_Stepped";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_InverseStepped"] = 3] = "CubismMotionSegmentType_InverseStepped";
    })(CubismMotionSegmentType = Live2DCubismFramework.CubismMotionSegmentType || (Live2DCubismFramework.CubismMotionSegmentType = {}));
    var CubismMotionPoint = (function () {
        function CubismMotionPoint() {
            this.time = 0.0;
            this.value = 0.0;
        }
        return CubismMotionPoint;
    }());
    Live2DCubismFramework.CubismMotionPoint = CubismMotionPoint;
    var CubismMotionSegment = (function () {
        function CubismMotionSegment() {
            this.evaluate = null;
            this.basePointIndex = 0;
            this.segmentType = 0;
        }
        return CubismMotionSegment;
    }());
    Live2DCubismFramework.CubismMotionSegment = CubismMotionSegment;
    var CubismMotionCurve = (function () {
        function CubismMotionCurve() {
            this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
            this.segmentCount = 0;
            this.baseSegmentIndex = 0;
            this.fadeInTime = 0.0;
            this.fadeOutTime = 0.0;
        }
        return CubismMotionCurve;
    }());
    Live2DCubismFramework.CubismMotionCurve = CubismMotionCurve;
    var CubismMotionEvent = (function () {
        function CubismMotionEvent() {
            this.fireTime = 0.0;
        }
        return CubismMotionEvent;
    }());
    Live2DCubismFramework.CubismMotionEvent = CubismMotionEvent;
    var CubismMotionData = (function () {
        function CubismMotionData() {
            this.duration = 0.0;
            this.loop = false;
            this.curveCount = 0;
            this.eventCount = 0;
            this.fps = 0.0;
            this.curves = new csmVector();
            this.segments = new csmVector();
            this.points = new csmVector();
            this.events = new csmVector();
        }
        return CubismMotionData;
    }());
    Live2DCubismFramework.CubismMotionData = CubismMotionData;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/cubismmotionjson.ts":
/*!************************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/cubismmotionjson.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./src/SDKv4/Framework/src/utils/cubismjson.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./src/SDKv4/Framework/src/type/csmstring.ts");
var csmString = csmstring_1.Live2DCubismFramework.csmString;
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var Meta = 'Meta';
    var Duration = 'Duration';
    var Loop = 'Loop';
    var CurveCount = 'CurveCount';
    var Fps = 'Fps';
    var TotalSegmentCount = 'TotalSegmentCount';
    var TotalPointCount = 'TotalPointCount';
    var Curves = 'Curves';
    var Target = 'Target';
    var Id = 'Id';
    var FadeInTime = 'FadeInTime';
    var FadeOutTime = 'FadeOutTime';
    var Segments = 'Segments';
    var UserData = 'UserData';
    var UserDataCount = 'UserDataCount';
    var TotalUserDataSize = 'TotalUserDataSize';
    var Time = 'Time';
    var Value = 'Value';
    var CubismMotionJson = (function () {
        function CubismMotionJson(buffer, size) {
            this._json = CubismJson.create(buffer, size);
        }
        CubismMotionJson.prototype.release = function () {
            CubismJson.delete(this._json);
        };
        CubismMotionJson.prototype.getMotionDuration = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(Duration)
                .toFloat();
        };
        CubismMotionJson.prototype.isMotionLoop = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(Loop)
                .toBoolean();
        };
        CubismMotionJson.prototype.getMotionCurveCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(CurveCount)
                .toInt();
        };
        CubismMotionJson.prototype.getMotionFps = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(Fps)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalSegmentCount)
                .toInt();
        };
        CubismMotionJson.prototype.getMotionTotalPointCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalPointCount)
                .toInt();
        };
        CubismMotionJson.prototype.isExistMotionFadeInTime = function () {
            return !this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeInTime)
                .isNull();
        };
        CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {
            return !this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeOutTime)
                .isNull();
        };
        CubismMotionJson.prototype.getMotionFadeInTime = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeInTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionFadeOutTime = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeOutTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Target)
                .getRawString();
        };
        CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {
            return CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Id)
                .getRawString());
        };
        CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {
            return !this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeInTime)
                .isNull();
        };
        CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {
            return !this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeOutTime)
                .isNull();
        };
        CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeInTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeOutTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Segments)
                .getVector()
                .getSize();
        };
        CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Segments)
                .getValueByIndex(segmentIndex)
                .toFloat();
        };
        CubismMotionJson.prototype.getEventCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(UserDataCount)
                .toInt();
        };
        CubismMotionJson.prototype.getTotalEventValueSize = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalUserDataSize)
                .toInt();
        };
        CubismMotionJson.prototype.getEventTime = function (userDataIndex) {
            return this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(userDataIndex)
                .getValueByString(Time)
                .toInt();
        };
        CubismMotionJson.prototype.getEventValue = function (userDataIndex) {
            return new csmString(this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(userDataIndex)
                .getValueByString(Value)
                .getRawString());
        };
        return CubismMotionJson;
    }());
    Live2DCubismFramework.CubismMotionJson = CubismMotionJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/cubismmotionmanager.ts":
/*!***************************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/cubismmotionmanager.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmotionqueuemanager_1 = __webpack_require__(/*! ./cubismmotionqueuemanager */ "./src/SDKv4/Framework/src/motion/cubismmotionqueuemanager.ts");
var CubismMotionQueueManager = cubismmotionqueuemanager_1.Live2DCubismFramework.CubismMotionQueueManager;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismMotionManager = (function (_super) {
        __extends(CubismMotionManager, _super);
        function CubismMotionManager() {
            var _this = _super.call(this) || this;
            _this._currentPriority = 0;
            _this._reservePriority = 0;
            return _this;
        }
        CubismMotionManager.prototype.getCurrentPriority = function () {
            return this._currentPriority;
        };
        CubismMotionManager.prototype.getReservePriority = function () {
            return this._reservePriority;
        };
        CubismMotionManager.prototype.setReservePriority = function (val) {
            this._reservePriority = val;
        };
        CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {
            if (priority == this._reservePriority) {
                this._reservePriority = 0;
            }
            this._currentPriority = priority;
            return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);
        };
        CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);
            if (this.isFinished()) {
                this._currentPriority = 0;
            }
            return updated;
        };
        CubismMotionManager.prototype.reserveMotion = function (priority) {
            if (priority <= this._reservePriority ||
                priority <= this._currentPriority) {
                return false;
            }
            this._reservePriority = priority;
            return true;
        };
        return CubismMotionManager;
    }(CubismMotionQueueManager));
    Live2DCubismFramework.CubismMotionManager = CubismMotionManager;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/cubismmotionqueueentry.ts":
/*!******************************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/cubismmotionqueueentry.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "./src/SDKv4/Framework/src/motion/acubismmotion.ts");
var ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismMotionQueueEntry = (function () {
        function CubismMotionQueueEntry() {
            this._autoDelete = false;
            this._motion = null;
            this._available = true;
            this._finished = false;
            this._started = false;
            this._startTimeSeconds = -1.0;
            this._fadeInStartTimeSeconds = 0.0;
            this._endTimeSeconds = -1.0;
            this._stateTimeSeconds = 0.0;
            this._stateWeight = 0.0;
            this._lastEventCheckSeconds = 0.0;
            this._motionQueueEntryHandle = this;
        }
        CubismMotionQueueEntry.prototype.release = function () {
            if (this._autoDelete && this._motion) {
                ACubismMotion.delete(this._motion);
            }
        };
        CubismMotionQueueEntry.prototype.startFadeout = function (fadeoutSeconds, userTimeSeconds) {
            var newEndTimeSeconds = userTimeSeconds + fadeoutSeconds;
            if (this._endTimeSeconds < 0.0 ||
                newEndTimeSeconds < this._endTimeSeconds) {
                this._endTimeSeconds = newEndTimeSeconds;
            }
        };
        CubismMotionQueueEntry.prototype.isFinished = function () {
            return this._finished;
        };
        CubismMotionQueueEntry.prototype.isStarted = function () {
            return this._started;
        };
        CubismMotionQueueEntry.prototype.getStartTime = function () {
            return this._startTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {
            return this._fadeInStartTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.getEndTime = function () {
            return this._endTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {
            this._startTimeSeconds = startTime;
        };
        CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {
            this._fadeInStartTimeSeconds = startTime;
        };
        CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {
            this._endTimeSeconds = endTime;
        };
        CubismMotionQueueEntry.prototype.setIsFinished = function (f) {
            this._finished = f;
        };
        CubismMotionQueueEntry.prototype.setIsStarted = function (f) {
            this._started = f;
        };
        CubismMotionQueueEntry.prototype.isAvailable = function () {
            return this._available;
        };
        CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {
            this._available = v;
        };
        CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {
            this._stateTimeSeconds = timeSeconds;
            this._stateWeight = weight;
        };
        CubismMotionQueueEntry.prototype.getStateTime = function () {
            return this._stateTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.getStateWeight = function () {
            return this._stateWeight;
        };
        CubismMotionQueueEntry.prototype.getLastCheckEventTime = function () {
            return this._lastEventCheckSeconds;
        };
        CubismMotionQueueEntry.prototype.setLastCheckEventTime = function (checkTime) {
            this._lastEventCheckSeconds = checkTime;
        };
        return CubismMotionQueueEntry;
    }());
    Live2DCubismFramework.CubismMotionQueueEntry = CubismMotionQueueEntry;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/motion/cubismmotionqueuemanager.ts":
/*!********************************************************************!*\
  !*** ./src/SDKv4/Framework/src/motion/cubismmotionqueuemanager.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmotionqueueentry_1 = __webpack_require__(/*! ./cubismmotionqueueentry */ "./src/SDKv4/Framework/src/motion/cubismmotionqueueentry.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismMotionQueueEntry = cubismmotionqueueentry_1.Live2DCubismFramework.CubismMotionQueueEntry;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismMotionQueueManager = (function () {
        function CubismMotionQueueManager() {
            this._userTimeSeconds = 0.0;
            this._eventCallBack = null;
            this._eventCustomData = null;
            this._motions = new csmVector();
        }
        CubismMotionQueueManager.prototype.release = function () {
            for (var i = 0; i < this._motions.getSize(); ++i) {
                if (this._motions.at(i)) {
                    this._motions.at(i).release();
                    this._motions.set(i, void 0);
                    this._motions.set(i, null);
                }
            }
            this._motions = null;
        };
        CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {
            if (motion == null) {
                return Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;
            }
            var motionQueueEntry = null;
            for (var i = 0; i < this._motions.getSize(); ++i) {
                motionQueueEntry = this._motions.at(i);
                if (motionQueueEntry == null) {
                    continue;
                }
                motionQueueEntry.startFadeout(motionQueueEntry._motion.getFadeOutTime(), userTimeSeconds);
            }
            motionQueueEntry = new CubismMotionQueueEntry();
            motionQueueEntry._autoDelete = autoDelete;
            motionQueueEntry._motion = motion;
            this._motions.pushBack(motionQueueEntry);
            return motionQueueEntry._motionQueueEntryHandle;
        };
        CubismMotionQueueManager.prototype.isFinished = function () {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite);
                    continue;
                }
                var motion = motionQueueEntry._motion;
                if (motion == null) {
                    motionQueueEntry.release();
                    motionQueueEntry = void 0;
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite);
                    continue;
                }
                if (!motionQueueEntry.isFinished()) {
                    return false;
                }
                else {
                    ite.preIncrement();
                }
            }
            return true;
        };
        CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    continue;
                }
                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&
                    !motionQueueEntry.isFinished()) {
                    return false;
                }
            }
            return true;
        };
        CubismMotionQueueManager.prototype.stopAllMotions = function () {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite);
                    continue;
                }
                motionQueueEntry.release();
                motionQueueEntry = void 0;
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
            }
        };
        CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    continue;
                }
                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {
                    return motionQueueEntry;
                }
            }
            return null;
        };
        CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {
            if (customData === void 0) { customData = null; }
            this._eventCallBack = callback;
            this._eventCustomData = customData;
        };
        CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {
            var updated = false;
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite);
                    continue;
                }
                var motion = motionQueueEntry._motion;
                if (motion == null) {
                    motionQueueEntry.release();
                    motionQueueEntry = void 0;
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite);
                    continue;
                }
                motion.updateParameters(model, motionQueueEntry, userTimeSeconds);
                updated = true;
                var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventTime() -
                    motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());
                for (var i = 0; i < firedList.getSize(); ++i) {
                    this._eventCallBack(this, firedList.at(i), this._eventCustomData);
                }
                motionQueueEntry.setLastCheckEventTime(userTimeSeconds);
                if (motionQueueEntry.isFinished()) {
                    motionQueueEntry.release();
                    motionQueueEntry = void 0;
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite);
                }
                else {
                    ite.preIncrement();
                }
            }
            return updated;
        };
        return CubismMotionQueueManager;
    }());
    Live2DCubismFramework.CubismMotionQueueManager = CubismMotionQueueManager;
    Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = -1;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/physics/cubismphysics.ts":
/*!**********************************************************!*\
  !*** ./src/SDKv4/Framework/src/physics/cubismphysics.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismphysicsinternal_1 = __webpack_require__(/*! ./cubismphysicsinternal */ "./src/SDKv4/Framework/src/physics/cubismphysicsinternal.ts");
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "./src/SDKv4/Framework/src/math/cubismvector2.ts");
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "./src/SDKv4/Framework/src/math/cubismmath.ts");
var cubismphysicsjson_1 = __webpack_require__(/*! ./cubismphysicsjson */ "./src/SDKv4/Framework/src/physics/cubismphysicsjson.ts");
var CubismPhysicsJson = cubismphysicsjson_1.Live2DCubismFramework.CubismPhysicsJson;
var CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;
var CubismPhysicsRig = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsRig;
var CubismPhysicsSubRig = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsSubRig;
var CubismPhysicsInput = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsInput;
var CubismPhysicsOutput = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsOutput;
var CubismPhysicsParticle = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsParticle;
var CubismPhysicsSource = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsSource;
var CubismPhysicsTargetType = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsTargetType;
var CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var PhysicsTypeTagX = 'X';
    var PhysicsTypeTagY = 'Y';
    var PhysicsTypeTagAngle = 'Angle';
    var AirResistance = 5.0;
    var MaximumWeight = 100.0;
    var MovementThreshold = 0.001;
    var CubismPhysics = (function () {
        function CubismPhysics() {
            this._physicsRig = null;
            this._options = new Options();
            this._options.gravity.y = -1.0;
            this._options.gravity.x = 0;
            this._options.wind.x = 0;
            this._options.wind.y = 0;
        }
        CubismPhysics.create = function (buffer, size) {
            var ret = new CubismPhysics();
            ret.parse(buffer, size);
            ret._physicsRig.gravity.y = 0;
            return ret;
        };
        CubismPhysics.delete = function (physics) {
            if (physics != null) {
                physics.release();
                physics = null;
            }
        };
        CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {
            var totalAngle;
            var weight;
            var radAngle;
            var outputValue;
            var totalTranslation = new CubismVector2();
            var currentSetting;
            var currentInput;
            var currentOutput;
            var currentParticles;
            var parameterValue;
            var parameterMaximumValue;
            var parameterMinimumValue;
            var parameterDefaultValue;
            parameterValue = model.getModel().parameters.values;
            parameterMaximumValue = model.getModel().parameters.maximumValues;
            parameterMinimumValue = model.getModel().parameters.minimumValues;
            parameterDefaultValue = model.getModel().parameters.defaultValues;
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                totalAngle = { angle: 0.0 };
                totalTranslation.x = 0.0;
                totalTranslation.y = 0.0;
                currentSetting = this._physicsRig.settings.at(settingIndex);
                currentInput = this._physicsRig.inputs.get(currentSetting.baseInputIndex);
                currentOutput = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
                currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                for (var i = 0; i < currentSetting.inputCount; ++i) {
                    weight = currentInput[i].weight / MaximumWeight;
                    if (currentInput[i].sourceParameterIndex == -1) {
                        currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);
                    }
                    currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[0].reflect, weight);
                }
                radAngle = CubismMath.degreesToRadian(-totalAngle.angle);
                totalTranslation.x =
                    totalTranslation.x * CubismMath.cos(radAngle) -
                        totalTranslation.y * CubismMath.sin(radAngle);
                totalTranslation.y =
                    totalTranslation.x * CubismMath.sin(radAngle) +
                        totalTranslation.y * CubismMath.cos(radAngle);
                updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);
                for (var i = 0; i < currentSetting.outputCount; ++i) {
                    var particleIndex = currentOutput[i].vertexIndex;
                    if (particleIndex < 1 ||
                        particleIndex >= currentSetting.particleCount) {
                        break;
                    }
                    if (currentOutput[i].destinationParameterIndex == -1) {
                        currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);
                    }
                    var translation = new CubismVector2();
                    translation.x =
                        currentParticles[particleIndex].position.x -
                            currentParticles[particleIndex - 1].position.x;
                    translation.y =
                        currentParticles[particleIndex].position.y -
                            currentParticles[particleIndex - 1].position.y;
                    outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);
                    var destinationParameterIndex = currentOutput[i].destinationParameterIndex;
                    var outParameterValue = !Float32Array.prototype.slice &&
                        'subarray' in Float32Array.prototype
                        ? JSON.parse(JSON.stringify(parameterValue.subarray(destinationParameterIndex)))
                        : parameterValue.slice(destinationParameterIndex);
                    updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);
                    for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {
                        parameterValue[offset] = outParameterValue[outParamIndex];
                    }
                }
            }
        };
        CubismPhysics.prototype.setOptions = function (options) {
            this._options = options;
        };
        CubismPhysics.prototype.getOption = function () {
            return this._options;
        };
        CubismPhysics.prototype.release = function () {
            this._physicsRig = void 0;
            this._physicsRig = null;
        };
        CubismPhysics.prototype.parse = function (physicsJson, size) {
            this._physicsRig = new CubismPhysicsRig();
            var json = new CubismPhysicsJson(physicsJson, size);
            this._physicsRig.gravity = json.getGravity();
            this._physicsRig.wind = json.getWind();
            this._physicsRig.subRigCount = json.getSubRigCount();
            this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, CubismPhysicsSubRig, true);
            this._physicsRig.inputs.updateSize(json.getTotalInputCount(), CubismPhysicsInput, true);
            this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), CubismPhysicsOutput, true);
            this._physicsRig.particles.updateSize(json.getVertexCount(), CubismPhysicsParticle, true);
            var inputIndex = 0, outputIndex = 0, particleIndex = 0;
            for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {
                this._physicsRig.settings.at(i).normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);
                this._physicsRig.settings.at(i).normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);
                this._physicsRig.settings.at(i).normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);
                this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);
                this._physicsRig.settings.at(i).baseInputIndex = inputIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {
                    this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;
                    this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);
                    this._physicsRig.inputs.at(inputIndex + j).reflect = json.getInputReflect(i, j);
                    if (json.getInputType(i, j) == PhysicsTypeTagX) {
                        this._physicsRig.inputs.at(inputIndex + j).type =
                            CubismPhysicsSource.CubismPhysicsSource_X;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;
                    }
                    else if (json.getInputType(i, j) == PhysicsTypeTagY) {
                        this._physicsRig.inputs.at(inputIndex + j).type =
                            CubismPhysicsSource.CubismPhysicsSource_Y;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;
                    }
                    else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {
                        this._physicsRig.inputs.at(inputIndex + j).type =
                            CubismPhysicsSource.CubismPhysicsSource_Angle;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;
                    }
                    this._physicsRig.inputs.at(inputIndex + j).source.targetType =
                        CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                    this._physicsRig.inputs.at(inputIndex + j).source.id = json.getInputSourceId(i, j);
                }
                inputIndex += this._physicsRig.settings.at(i).inputCount;
                this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);
                this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {
                    this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex = -1;
                    this._physicsRig.outputs.at(outputIndex + j).vertexIndex = json.getOutputVertexIndex(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).angleScale = json.getOutputAngleScale(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).weight = json.getOutputWeight(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).destination.targetType =
                        CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                    this._physicsRig.outputs.at(outputIndex + j).destination.id = json.getOutputDestinationId(i, j);
                    if (json.getOutputType(i, j) == PhysicsTypeTagX) {
                        this._physicsRig.outputs.at(outputIndex + j).type =
                            CubismPhysicsSource.CubismPhysicsSource_X;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationX;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationX;
                    }
                    else if (json.getOutputType(i, j) == PhysicsTypeTagY) {
                        this._physicsRig.outputs.at(outputIndex + j).type =
                            CubismPhysicsSource.CubismPhysicsSource_Y;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationY;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationY;
                    }
                    else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {
                        this._physicsRig.outputs.at(outputIndex + j).type =
                            CubismPhysicsSource.CubismPhysicsSource_Angle;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputAngle;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleAngle;
                    }
                    this._physicsRig.outputs.at(outputIndex + j).reflect = json.getOutputReflect(i, j);
                }
                outputIndex += this._physicsRig.settings.at(i).outputCount;
                this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);
                this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {
                    this._physicsRig.particles.at(particleIndex + j).mobility = json.getParticleMobility(i, j);
                    this._physicsRig.particles.at(particleIndex + j).delay = json.getParticleDelay(i, j);
                    this._physicsRig.particles.at(particleIndex + j).acceleration = json.getParticleAcceleration(i, j);
                    this._physicsRig.particles.at(particleIndex + j).radius = json.getParticleRadius(i, j);
                    this._physicsRig.particles.at(particleIndex + j).position = json.getParticlePosition(i, j);
                }
                particleIndex += this._physicsRig.settings.at(i).particleCount;
            }
            this.initialize();
            json.release();
            json = void 0;
            json = null;
        };
        CubismPhysics.prototype.initialize = function () {
            var strand;
            var currentSetting;
            var radius;
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                currentSetting = this._physicsRig.settings.at(settingIndex);
                strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                strand[0].initialPosition = new CubismVector2(0.0, 0.0);
                strand[0].lastPosition = new CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);
                strand[0].lastGravity = new CubismVector2(0.0, -1.0);
                strand[0].lastGravity.y *= -1.0;
                strand[0].velocity = new CubismVector2(0.0, 0.0);
                strand[0].force = new CubismVector2(0.0, 0.0);
                for (var i = 1; i < currentSetting.particleCount; ++i) {
                    radius = new CubismVector2(0.0, 0.0);
                    radius.y = strand[i].radius;
                    strand[i].initialPosition = new CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);
                    strand[i].position = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                    strand[i].lastPosition = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                    strand[i].lastGravity = new CubismVector2(0.0, -1.0);
                    strand[i].lastGravity.y *= -1.0;
                    strand[i].velocity = new CubismVector2(0.0, 0.0);
                    strand[i].force = new CubismVector2(0.0, 0.0);
                }
            }
        };
        return CubismPhysics;
    }());
    Live2DCubismFramework.CubismPhysics = CubismPhysics;
    var Options = (function () {
        function Options() {
            this.gravity = new CubismVector2(0, 0);
            this.wind = new CubismVector2(0, 0);
        }
        return Options;
    }());
    Live2DCubismFramework.Options = Options;
    function sign(value) {
        var ret = 0;
        if (value > 0.0) {
            ret = 1;
        }
        else if (value < 0.0) {
            ret = -1;
        }
        return ret;
    }
    function getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
        targetTranslation.x +=
            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
    }
    function getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
        targetTranslation.y +=
            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
    }
    function getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {
        targetAngle.angle +=
            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;
    }
    function getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue = translation.x;
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue = translation.y;
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue;
        if (particleIndex >= 2) {
            parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);
        }
        else {
            parentGravity = parentGravity.multiplyByScaler(-1.0);
        }
        outputValue = CubismMath.directionToRadian(parentGravity, translation);
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getRangeValue(min, max) {
        var maxValue = CubismMath.max(min, max);
        var minValue = CubismMath.min(min, max);
        return CubismMath.abs(maxValue - minValue);
    }
    function getDefaultValue(min, max) {
        var minValue = CubismMath.min(min, max);
        return minValue + getRangeValue(min, max) / 2.0;
    }
    function getOutputScaleTranslationX(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(translationScale.x));
    }
    function getOutputScaleTranslationY(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(translationScale.y));
    }
    function getOutputScaleAngle(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(angleScale));
    }
    function updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {
        var totalRadian;
        var delay;
        var radian;
        var currentGravity;
        var direction = new CubismVector2(0.0, 0.0);
        var velocity = new CubismVector2(0.0, 0.0);
        var force = new CubismVector2(0.0, 0.0);
        var newDirection = new CubismVector2(0.0, 0.0);
        strand[0].position = new CubismVector2(totalTranslation.x, totalTranslation.y);
        totalRadian = CubismMath.degreesToRadian(totalAngle);
        currentGravity = CubismMath.radianToDirection(totalRadian);
        currentGravity.normalize();
        for (var i = 1; i < strandCount; ++i) {
            strand[i].force = currentGravity
                .multiplyByScaler(strand[i].acceleration)
                .add(windDirection);
            strand[i].lastPosition = new CubismVector2(strand[i].position.x, strand[i].position.y);
            delay = strand[i].delay * deltaTimeSeconds * 30.0;
            direction = strand[i].position.substract(strand[i - 1].position);
            radian =
                CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /
                    airResistance;
            direction.x =
                CubismMath.cos(radian) * direction.x -
                    direction.y * CubismMath.sin(radian);
            direction.y =
                CubismMath.sin(radian) * direction.x +
                    direction.y * CubismMath.cos(radian);
            strand[i].position = strand[i - 1].position.add(direction);
            velocity = strand[i].velocity.multiplyByScaler(delay);
            force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);
            strand[i].position = strand[i].position.add(velocity).add(force);
            newDirection = strand[i].position.substract(strand[i - 1].position);
            newDirection.normalize();
            strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));
            if (CubismMath.abs(strand[i].position.x) < thresholdValue) {
                strand[i].position.x = 0.0;
            }
            if (delay != 0.0) {
                strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);
                strand[i].velocity = strand[i].velocity.divisionByScalar(delay);
                strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);
            }
            strand[i].force = new CubismVector2(0.0, 0.0);
            strand[i].lastGravity = new CubismVector2(currentGravity.x, currentGravity.y);
        }
    }
    function updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {
        var outputScale;
        var value;
        var weight;
        outputScale = output.getScale(output.translationScale, output.angleScale);
        value = translation * outputScale;
        if (value < parameterValueMinimum) {
            if (value < output.valueBelowMinimum) {
                output.valueBelowMinimum = value;
            }
            value = parameterValueMinimum;
        }
        else if (value > parameterValueMaximum) {
            if (value > output.valueExceededMaximum) {
                output.valueExceededMaximum = value;
            }
            value = parameterValueMaximum;
        }
        weight = output.weight / MaximumWeight;
        if (weight >= 1.0) {
            parameterValue[0] = value;
        }
        else {
            value = parameterValue[0] * (1.0 - weight) + value * weight;
            parameterValue[0] = value;
        }
    }
    function normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {
        var result = 0.0;
        var maxValue = CubismMath.max(parameterMaximum, parameterMinimum);
        if (maxValue < value) {
            value = maxValue;
        }
        var minValue = CubismMath.min(parameterMaximum, parameterMinimum);
        if (minValue > value) {
            value = minValue;
        }
        var minNormValue = CubismMath.min(normalizedMinimum, normalizedMaximum);
        var maxNormValue = CubismMath.max(normalizedMinimum, normalizedMaximum);
        var middleNormValue = normalizedDefault;
        var middleValue = getDefaultValue(minValue, maxValue);
        var paramValue = value - middleValue;
        switch (sign(paramValue)) {
            case 1: {
                var nLength = maxNormValue - middleNormValue;
                var pLength = maxValue - middleValue;
                if (pLength != 0.0) {
                    result = paramValue * (nLength / pLength);
                    result += middleNormValue;
                }
                break;
            }
            case -1: {
                var nLength = minNormValue - middleNormValue;
                var pLength = minValue - middleValue;
                if (pLength != 0.0) {
                    result = paramValue * (nLength / pLength);
                    result += middleNormValue;
                }
                break;
            }
            case 0: {
                result = middleNormValue;
                break;
            }
            default: {
                break;
            }
        }
        return isInverted ? result : result * -1.0;
    }
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/physics/cubismphysicsinternal.ts":
/*!******************************************************************!*\
  !*** ./src/SDKv4/Framework/src/physics/cubismphysicsinternal.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "./src/SDKv4/Framework/src/math/cubismvector2.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismPhysicsTargetType;
    (function (CubismPhysicsTargetType) {
        CubismPhysicsTargetType[CubismPhysicsTargetType["CubismPhysicsTargetType_Parameter"] = 0] = "CubismPhysicsTargetType_Parameter";
    })(CubismPhysicsTargetType = Live2DCubismFramework.CubismPhysicsTargetType || (Live2DCubismFramework.CubismPhysicsTargetType = {}));
    var CubismPhysicsSource;
    (function (CubismPhysicsSource) {
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_X"] = 0] = "CubismPhysicsSource_X";
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Y"] = 1] = "CubismPhysicsSource_Y";
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Angle"] = 2] = "CubismPhysicsSource_Angle";
    })(CubismPhysicsSource = Live2DCubismFramework.CubismPhysicsSource || (Live2DCubismFramework.CubismPhysicsSource = {}));
    var PhysicsJsonEffectiveForces = (function () {
        function PhysicsJsonEffectiveForces() {
            this.gravity = new CubismVector2(0, 0);
            this.wind = new CubismVector2(0, 0);
        }
        return PhysicsJsonEffectiveForces;
    }());
    Live2DCubismFramework.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;
    var CubismPhysicsParameter = (function () {
        function CubismPhysicsParameter() {
        }
        return CubismPhysicsParameter;
    }());
    Live2DCubismFramework.CubismPhysicsParameter = CubismPhysicsParameter;
    var CubismPhysicsNormalization = (function () {
        function CubismPhysicsNormalization() {
        }
        return CubismPhysicsNormalization;
    }());
    Live2DCubismFramework.CubismPhysicsNormalization = CubismPhysicsNormalization;
    var CubismPhysicsParticle = (function () {
        function CubismPhysicsParticle() {
            this.initialPosition = new CubismVector2(0, 0);
            this.position = new CubismVector2(0, 0);
            this.lastPosition = new CubismVector2(0, 0);
            this.lastGravity = new CubismVector2(0, 0);
            this.force = new CubismVector2(0, 0);
            this.velocity = new CubismVector2(0, 0);
        }
        return CubismPhysicsParticle;
    }());
    Live2DCubismFramework.CubismPhysicsParticle = CubismPhysicsParticle;
    var CubismPhysicsSubRig = (function () {
        function CubismPhysicsSubRig() {
            this.normalizationPosition = new CubismPhysicsNormalization();
            this.normalizationAngle = new CubismPhysicsNormalization();
        }
        return CubismPhysicsSubRig;
    }());
    Live2DCubismFramework.CubismPhysicsSubRig = CubismPhysicsSubRig;
    var CubismPhysicsInput = (function () {
        function CubismPhysicsInput() {
            this.source = new CubismPhysicsParameter();
        }
        return CubismPhysicsInput;
    }());
    Live2DCubismFramework.CubismPhysicsInput = CubismPhysicsInput;
    var CubismPhysicsOutput = (function () {
        function CubismPhysicsOutput() {
            this.destination = new CubismPhysicsParameter();
            this.translationScale = new CubismVector2(0, 0);
        }
        return CubismPhysicsOutput;
    }());
    Live2DCubismFramework.CubismPhysicsOutput = CubismPhysicsOutput;
    var CubismPhysicsRig = (function () {
        function CubismPhysicsRig() {
            this.settings = new csmVector();
            this.inputs = new csmVector();
            this.outputs = new csmVector();
            this.particles = new csmVector();
            this.gravity = new CubismVector2(0, 0);
            this.wind = new CubismVector2(0, 0);
        }
        return CubismPhysicsRig;
    }());
    Live2DCubismFramework.CubismPhysicsRig = CubismPhysicsRig;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/physics/cubismphysicsjson.ts":
/*!**************************************************************!*\
  !*** ./src/SDKv4/Framework/src/physics/cubismphysicsjson.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./src/SDKv4/Framework/src/utils/cubismjson.ts");
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "./src/SDKv4/Framework/src/math/cubismvector2.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;
var CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var Position = 'Position';
    var X = 'X';
    var Y = 'Y';
    var Angle = 'Angle';
    var Type = 'Type';
    var Id = 'Id';
    var Meta = 'Meta';
    var EffectiveForces = 'EffectiveForces';
    var TotalInputCount = 'TotalInputCount';
    var TotalOutputCount = 'TotalOutputCount';
    var PhysicsSettingCount = 'PhysicsSettingCount';
    var Gravity = 'Gravity';
    var Wind = 'Wind';
    var VertexCount = 'VertexCount';
    var PhysicsSettings = 'PhysicsSettings';
    var Normalization = 'Normalization';
    var Minimum = 'Minimum';
    var Maximum = 'Maximum';
    var Default = 'Default';
    var Reflect = 'Reflect';
    var Weight = 'Weight';
    var Input = 'Input';
    var Source = 'Source';
    var Output = 'Output';
    var Scale = 'Scale';
    var VertexIndex = 'VertexIndex';
    var Destination = 'Destination';
    var Vertices = 'Vertices';
    var Mobility = 'Mobility';
    var Delay = 'Delay';
    var Radius = 'Radius';
    var Acceleration = 'Acceleration';
    var CubismPhysicsJson = (function () {
        function CubismPhysicsJson(buffer, size) {
            this._json = CubismJson.create(buffer, size);
        }
        CubismPhysicsJson.prototype.release = function () {
            CubismJson.delete(this._json);
        };
        CubismPhysicsJson.prototype.getGravity = function () {
            var ret = new CubismVector2(0, 0);
            ret.x = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Gravity)
                .getValueByString(X)
                .toFloat();
            ret.y = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Gravity)
                .getValueByString(Y)
                .toFloat();
            return ret;
        };
        CubismPhysicsJson.prototype.getWind = function () {
            var ret = new CubismVector2(0, 0);
            ret.x = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Wind)
                .getValueByString(X)
                .toFloat();
            ret.y = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Wind)
                .getValueByString(Y)
                .toFloat();
            return ret;
        };
        CubismPhysicsJson.prototype.getSubRigCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(PhysicsSettingCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getTotalInputCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalInputCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getTotalOutputCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalOutputCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getVertexCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(VertexCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Position)
                .getValueByString(Minimum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Position)
                .getValueByString(Maximum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Position)
                .getValueByString(Default)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Angle)
                .getValueByString(Minimum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Angle)
                .getValueByString(Maximum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Angle)
                .getValueByString(Default)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getVector()
                .getSize();
        };
        CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Weight)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Reflect)
                .toBoolean();
        };
        CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Type)
                .getRawString();
        };
        CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {
            return CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Source)
                .getValueByString(Id)
                .getRawString());
        };
        CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getVector()
                .getSize();
        };
        CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(VertexIndex)
                .toInt();
        };
        CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Scale)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Weight)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {
            return CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Destination)
                .getValueByString(Id)
                .getRawString());
        };
        CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Type)
                .getRawString();
        };
        CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Reflect)
                .toBoolean();
        };
        CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getVector()
                .getSize();
        };
        CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Mobility)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Delay)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Acceleration)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Radius)
                .toInt();
        };
        CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {
            var ret = new CubismVector2(0, 0);
            ret.x = this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Position)
                .getValueByString(X)
                .toFloat();
            ret.y = this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Position)
                .getValueByString(Y)
                .toFloat();
            return ret;
        };
        return CubismPhysicsJson;
    }());
    Live2DCubismFramework.CubismPhysicsJson = CubismPhysicsJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/rendering/cubismrenderer.ts":
/*!*************************************************************!*\
  !*** ./src/SDKv4/Framework/src/rendering/cubismrenderer.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "./src/SDKv4/Framework/src/math/cubismmatrix44.ts");
var CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismRenderer = (function () {
        function CubismRenderer() {
            this._isCulling = false;
            this._isPremultipliedAlpha = false;
            this._anisortopy = 0.0;
            this._model = null;
            this._modelColor = new CubismTextureColor();
            this._mvpMatrix4x4 = new CubismMatrix44();
            this._mvpMatrix4x4.loadIdentity();
        }
        CubismRenderer.create = function () {
            return null;
        };
        CubismRenderer.delete = function (renderer) {
            renderer = null;
        };
        CubismRenderer.prototype.initialize = function (model) {
            this._model = model;
        };
        CubismRenderer.prototype.drawModel = function () {
            if (this.getModel() == null)
                return;
            this.doDrawModel();
        };
        CubismRenderer.prototype.setMvpMatrix = function (matrix44) {
            this._mvpMatrix4x4.setMatrix(matrix44.getArray());
        };
        CubismRenderer.prototype.getMvpMatrix = function () {
            return this._mvpMatrix4x4;
        };
        CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {
            if (red < 0.0) {
                red = 0.0;
            }
            else if (red > 1.0) {
                red = 1.0;
            }
            if (green < 0.0) {
                green = 0.0;
            }
            else if (green > 1.0) {
                green = 1.0;
            }
            if (blue < 0.0) {
                blue = 0.0;
            }
            else if (blue > 1.0) {
                blue = 1.0;
            }
            if (alpha < 0.0) {
                alpha = 0.0;
            }
            else if (alpha > 1.0) {
                alpha = 1.0;
            }
            this._modelColor.R = red;
            this._modelColor.G = green;
            this._modelColor.B = blue;
            this._modelColor.A = alpha;
        };
        CubismRenderer.prototype.getModelColor = function () {
            return JSON.parse(JSON.stringify(this._modelColor));
        };
        CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {
            this._isPremultipliedAlpha = enable;
        };
        CubismRenderer.prototype.isPremultipliedAlpha = function () {
            return this._isPremultipliedAlpha;
        };
        CubismRenderer.prototype.setIsCulling = function (culling) {
            this._isCulling = culling;
        };
        CubismRenderer.prototype.isCulling = function () {
            return this._isCulling;
        };
        CubismRenderer.prototype.setAnisotropy = function (n) {
            this._anisortopy = n;
        };
        CubismRenderer.prototype.getAnisotropy = function () {
            return this._anisortopy;
        };
        CubismRenderer.prototype.getModel = function () {
            return this._model;
        };
        return CubismRenderer;
    }());
    Live2DCubismFramework.CubismRenderer = CubismRenderer;
    var CubismBlendMode;
    (function (CubismBlendMode) {
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Normal"] = 0] = "CubismBlendMode_Normal";
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Additive"] = 1] = "CubismBlendMode_Additive";
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Multiplicative"] = 2] = "CubismBlendMode_Multiplicative";
    })(CubismBlendMode = Live2DCubismFramework.CubismBlendMode || (Live2DCubismFramework.CubismBlendMode = {}));
    var CubismTextureColor = (function () {
        function CubismTextureColor() {
            this.R = 1.0;
            this.G = 1.0;
            this.B = 1.0;
            this.A = 1.0;
        }
        return CubismTextureColor;
    }());
    Live2DCubismFramework.CubismTextureColor = CubismTextureColor;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/rendering/cubismrenderer_webgl.ts":
/*!*******************************************************************!*\
  !*** ./src/SDKv4/Framework/src/rendering/cubismrenderer_webgl.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var csmrectf_1 = __webpack_require__(/*! ../type/csmrectf */ "./src/SDKv4/Framework/src/type/csmrectf.ts");
var cubismrenderer_1 = __webpack_require__(/*! ./cubismrenderer */ "./src/SDKv4/Framework/src/rendering/cubismrenderer.ts");
var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "./src/SDKv4/Framework/src/math/cubismmatrix44.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "./src/SDKv4/Framework/src/type/csmmap.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var Constant = live2dcubismframework_1.Live2DCubismFramework.Constant;
var CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;
var csmRect = csmrectf_1.Live2DCubismFramework.csmRect;
var csmMap = csmmap_1.Live2DCubismFramework.csmMap;
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismRenderer = cubismrenderer_1.Live2DCubismFramework.CubismRenderer;
var CubismBlendMode = cubismrenderer_1.Live2DCubismFramework.CubismBlendMode;
var CubismTextureColor = cubismrenderer_1.Live2DCubismFramework.CubismTextureColor;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var ColorChannelCount = 4;
    var shaderCount = 10;
    var s_instance;
    var s_viewport;
    var s_fbo;
    var CubismClippingManager_WebGL = (function () {
        function CubismClippingManager_WebGL() {
            this._maskRenderTexture = null;
            this._colorBuffer = null;
            this._currentFrameNo = 0;
            this._clippingMaskBufferSize = 256;
            this._clippingContextListForMask = new csmVector();
            this._clippingContextListForDraw = new csmVector();
            this._channelColors = new csmVector();
            this._tmpBoundsOnModel = new csmRect();
            this._tmpMatrix = new CubismMatrix44();
            this._tmpMatrixForMask = new CubismMatrix44();
            this._tmpMatrixForDraw = new CubismMatrix44();
            this._maskTexture = null;
            var tmp = new CubismTextureColor();
            tmp.R = 1.0;
            tmp.G = 0.0;
            tmp.B = 0.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 1.0;
            tmp.B = 0.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 0.0;
            tmp.B = 1.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 0.0;
            tmp.B = 0.0;
            tmp.A = 1.0;
            this._channelColors.pushBack(tmp);
        }
        CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {
            return this._channelColors.at(channelNo);
        };
        CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {
            var ret = 0;
            if (this._maskTexture && this._maskTexture.texture != 0) {
                this._maskTexture.frameNo = this._currentFrameNo;
                ret = this._maskTexture.texture;
            }
            if (ret == 0) {
                var size = this._clippingMaskBufferSize;
                this._colorBuffer = this.gl.createTexture();
                this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);
                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
                this.gl.bindTexture(this.gl.TEXTURE_2D, null);
                ret = this.gl.createFramebuffer();
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);
                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
                this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);
            }
            return ret;
        };
        CubismClippingManager_WebGL.prototype.setGL = function (gl) {
            this.gl = gl;
        };
        CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {
            var clippedDrawTotalMinX = Number.MAX_VALUE;
            var clippedDrawTotalMinY = Number.MAX_VALUE;
            var clippedDrawTotalMaxX = Number.MIN_VALUE;
            var clippedDrawTotalMaxY = Number.MIN_VALUE;
            var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;
            for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {
                var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];
                var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);
                var drawableVertexes = model.getDrawableVertices(drawableIndex);
                var minX = Number.MAX_VALUE;
                var minY = Number.MAX_VALUE;
                var maxX = Number.MIN_VALUE;
                var maxY = Number.MIN_VALUE;
                var loop = drawableVertexCount * Constant.vertexStep;
                for (var pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {
                    var x = drawableVertexes[pi];
                    var y = drawableVertexes[pi + 1];
                    if (x < minX) {
                        minX = x;
                    }
                    if (x > maxX) {
                        maxX = x;
                    }
                    if (y < minY) {
                        minY = y;
                    }
                    if (y > maxY) {
                        maxY = y;
                    }
                }
                if (minX == Number.MAX_VALUE) {
                    continue;
                }
                if (minX < clippedDrawTotalMinX) {
                    clippedDrawTotalMinX = minX;
                }
                if (minY < clippedDrawTotalMinY) {
                    clippedDrawTotalMinY = minY;
                }
                if (maxX > clippedDrawTotalMaxX) {
                    clippedDrawTotalMaxX = maxX;
                }
                if (maxY > clippedDrawTotalMaxY) {
                    clippedDrawTotalMaxY = maxY;
                }
                if (clippedDrawTotalMinX == Number.MAX_VALUE) {
                    clippingContext._allClippedDrawRect.x = 0.0;
                    clippingContext._allClippedDrawRect.y = 0.0;
                    clippingContext._allClippedDrawRect.width = 0.0;
                    clippingContext._allClippedDrawRect.height = 0.0;
                    clippingContext._isUsing = false;
                }
                else {
                    clippingContext._isUsing = true;
                    var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;
                    var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;
                    clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;
                    clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;
                    clippingContext._allClippedDrawRect.width = w;
                    clippingContext._allClippedDrawRect.height = h;
                }
            }
        };
        CubismClippingManager_WebGL.prototype.release = function () {
            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
                if (this._clippingContextListForMask.at(i)) {
                    this._clippingContextListForMask.at(i).release();
                    this._clippingContextListForMask.set(i, void 0);
                }
                this._clippingContextListForMask.set(i, null);
            }
            this._clippingContextListForMask = null;
            for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {
                this._clippingContextListForDraw.set(i, null);
            }
            this._clippingContextListForDraw = null;
            if (this._maskTexture) {
                this.gl.deleteFramebuffer(this._maskTexture.texture);
                this._maskTexture = null;
            }
            for (var i = 0; i < this._channelColors.getSize(); i++) {
                this._channelColors.set(i, null);
            }
            this._channelColors = null;
            this.gl.deleteTexture(this._colorBuffer);
            this._colorBuffer = null;
        };
        CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts) {
            for (var i = 0; i < drawableCount; i++) {
                if (drawableMaskCounts[i] <= 0) {
                    this._clippingContextListForDraw.pushBack(null);
                    continue;
                }
                var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);
                if (clippingContext == null) {
                    clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);
                    this._clippingContextListForMask.pushBack(clippingContext);
                }
                clippingContext.addClippedDrawable(i);
                this._clippingContextListForDraw.pushBack(clippingContext);
            }
        };
        CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {
            this._currentFrameNo++;
            var usingClipCount = 0;
            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                var cc = this._clippingContextListForMask.at(clipIndex);
                this.calcClippedDrawTotalBounds(model, cc);
                if (cc._isUsing) {
                    usingClipCount++;
                }
            }
            if (usingClipCount > 0) {
                this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);
                this._maskRenderTexture = this.getMaskRenderTexture();
                var modelToWorldF = renderer.getMvpMatrix();
                renderer.preDraw();
                this.setupLayoutBounds(usingClipCount);
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);
                this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
                for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                    var clipContext = this._clippingContextListForMask.at(clipIndex);
                    var allClipedDrawRect = clipContext._allClippedDrawRect;
                    var layoutBoundsOnTex01 = clipContext._layoutBounds;
                    var MARGIN = 0.05;
                    this._tmpBoundsOnModel.setRect(allClipedDrawRect);
                    this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);
                    var scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;
                    var scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;
                    {
                        this._tmpMatrix.loadIdentity();
                        {
                            this._tmpMatrix.translateRelative(-1.0, -1.0);
                            this._tmpMatrix.scaleRelative(2.0, 2.0);
                        }
                        {
                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                            this._tmpMatrix.scaleRelative(scaleX, scaleY);
                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                        }
                        this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());
                    }
                    {
                        this._tmpMatrix.loadIdentity();
                        {
                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                            this._tmpMatrix.scaleRelative(scaleX, scaleY);
                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                        }
                        this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());
                    }
                    clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());
                    clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());
                    var clipDrawCount = clipContext._clippingIdCount;
                    for (var i = 0; i < clipDrawCount; i++) {
                        var clipDrawIndex = clipContext._clippingIdList[i];
                        if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {
                            continue;
                        }
                        renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);
                        renderer.setClippingContextBufferForMask(clipContext);
                        renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), CubismBlendMode.CubismBlendMode_Normal, false);
                    }
                }
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
                renderer.setClippingContextBufferForMask(null);
                this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);
            }
        };
        CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {
            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
                var clippingContext = this._clippingContextListForMask.at(i);
                var count = clippingContext._clippingIdCount;
                if (count != drawableMaskCounts) {
                    continue;
                }
                var sameCount = 0;
                for (var j = 0; j < count; j++) {
                    var clipId = clippingContext._clippingIdList[j];
                    for (var k = 0; k < count; k++) {
                        if (drawableMasks[k] == clipId) {
                            sameCount++;
                            break;
                        }
                    }
                }
                if (sameCount == count) {
                    return clippingContext;
                }
            }
            return null;
        };
        CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {
            var div = usingClipCount / ColorChannelCount;
            var mod = usingClipCount % ColorChannelCount;
            div = ~~div;
            mod = ~~mod;
            var curClipIndex = 0;
            for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {
                var layoutCount = div + (channelNo < mod ? 1 : 0);
                if (layoutCount == 0) {
                }
                else if (layoutCount == 1) {
                    var clipContext = this._clippingContextListForMask.at(curClipIndex++);
                    clipContext._layoutChannelNo = channelNo;
                    clipContext._layoutBounds.x = 0.0;
                    clipContext._layoutBounds.y = 0.0;
                    clipContext._layoutBounds.width = 1.0;
                    clipContext._layoutBounds.height = 1.0;
                }
                else if (layoutCount == 2) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        xpos = ~~xpos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = 0.0;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 1.0;
                    }
                }
                else if (layoutCount <= 4) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        var ypos = i / 2;
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = ypos * 0.5;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 0.5;
                    }
                }
                else if (layoutCount <= 9) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 3;
                        var ypos = i / 3;
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos / 3.0;
                        cc._layoutBounds.y = ypos / 3.0;
                        cc._layoutBounds.width = 1.0 / 3.0;
                        cc._layoutBounds.height = 1.0 / 3.0;
                    }
                }
                else {
                    cubismdebug_1.CubismLogError('not supported mask count : {0}', layoutCount);
                }
            }
        };
        CubismClippingManager_WebGL.prototype.getColorBuffer = function () {
            return this._colorBuffer;
        };
        CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {
            return this._clippingContextListForDraw;
        };
        CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {
            this._clippingMaskBufferSize = size;
        };
        CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {
            return this._clippingMaskBufferSize;
        };
        return CubismClippingManager_WebGL;
    }());
    Live2DCubismFramework.CubismClippingManager_WebGL = CubismClippingManager_WebGL;
    var CubismRenderTextureResource = (function () {
        function CubismRenderTextureResource(frameNo, texture) {
            this.frameNo = frameNo;
            this.texture = texture;
        }
        return CubismRenderTextureResource;
    }());
    Live2DCubismFramework.CubismRenderTextureResource = CubismRenderTextureResource;
    var CubismClippingContext = (function () {
        function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {
            this._owner = manager;
            this._clippingIdList = clippingDrawableIndices;
            this._clippingIdCount = clipCount;
            this._allClippedDrawRect = new csmRect();
            this._layoutBounds = new csmRect();
            this._clippedDrawableIndexList = [];
            this._matrixForMask = new CubismMatrix44();
            this._matrixForDraw = new CubismMatrix44();
        }
        CubismClippingContext.prototype.release = function () {
            if (this._layoutBounds != null) {
                this._layoutBounds = null;
            }
            if (this._allClippedDrawRect != null) {
                this._allClippedDrawRect = null;
            }
            if (this._clippedDrawableIndexList != null) {
                this._clippedDrawableIndexList = null;
            }
        };
        CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {
            this._clippedDrawableIndexList.push(drawableIndex);
        };
        CubismClippingContext.prototype.getClippingManager = function () {
            return this._owner;
        };
        CubismClippingContext.prototype.setGl = function (gl) {
            this._owner.setGL(gl);
        };
        return CubismClippingContext;
    }());
    Live2DCubismFramework.CubismClippingContext = CubismClippingContext;
    var CubismShader_WebGL = (function () {
        function CubismShader_WebGL() {
            this._shaderSets = new csmVector();
        }
        CubismShader_WebGL.getInstance = function () {
            if (s_instance == null) {
                s_instance = new CubismShader_WebGL();
                return s_instance;
            }
            return s_instance;
        };
        CubismShader_WebGL.deleteInstance = function () {
            if (s_instance) {
                s_instance.release();
                s_instance = null;
            }
        };
        CubismShader_WebGL.prototype.release = function () {
            this.releaseShaderProgram();
        };
        CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {
            if (!isPremultipliedAlpha) {
                cubismdebug_1.CubismLogError('NoPremultipliedAlpha is not allowed');
            }
            if (this._shaderSets.getSize() == 0) {
                this.generateShaders();
            }
            var SRC_COLOR;
            var DST_COLOR;
            var SRC_ALPHA;
            var DST_ALPHA;
            if (renderer.getClippingContextBufferForMask() != null) {
                var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);
                this.gl.useProgram(shaderSet.shaderProgram);
                this.gl.activeTexture(this.gl.TEXTURE0);
                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
                if (bufferData.vertex == null) {
                    bufferData.vertex = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
                if (bufferData.uv == null) {
                    bufferData.uv = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
                var channelNo = renderer.getClippingContextBufferForMask()
                    ._layoutChannelNo;
                var colorChannel = renderer
                    .getClippingContextBufferForMask()
                    .getClippingManager()
                    .getChannelFlagAsColor(channelNo);
                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());
                var rect = renderer.getClippingContextBufferForMask()
                    ._layoutBounds;
                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);
                SRC_COLOR = this.gl.ZERO;
                DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;
                SRC_ALPHA = this.gl.ZERO;
                DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
            }
            else {
                var masked = renderer.getClippingContextBufferForDraw() != null;
                var offset = masked ? (invertedMask ? 2 : 1) : 0;
                var shaderSet = new CubismShaderSet();
                switch (colorBlendMode) {
                    case CubismBlendMode.CubismBlendMode_Normal:
                    default:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.ONE;
                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                        SRC_ALPHA = this.gl.ONE;
                        DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
                        break;
                    case CubismBlendMode.CubismBlendMode_Additive:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.ONE;
                        DST_COLOR = this.gl.ONE;
                        SRC_ALPHA = this.gl.ZERO;
                        DST_ALPHA = this.gl.ONE;
                        break;
                    case CubismBlendMode.CubismBlendMode_Multiplicative:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.DST_COLOR;
                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                        SRC_ALPHA = this.gl.ZERO;
                        DST_ALPHA = this.gl.ONE;
                        break;
                }
                this.gl.useProgram(shaderSet.shaderProgram);
                if (bufferData.vertex == null) {
                    bufferData.vertex = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
                if (bufferData.uv == null) {
                    bufferData.uv = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
                if (masked) {
                    this.gl.activeTexture(this.gl.TEXTURE1);
                    var tex = renderer
                        .getClippingContextBufferForDraw()
                        .getClippingManager()
                        .getColorBuffer();
                    this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
                    this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);
                    this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());
                    var channelNo = renderer.getClippingContextBufferForDraw()
                        ._layoutChannelNo;
                    var colorChannel = renderer
                        .getClippingContextBufferForDraw()
                        .getClippingManager()
                        .getChannelFlagAsColor(channelNo);
                    this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
                }
                this.gl.activeTexture(this.gl.TEXTURE0);
                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
                this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());
                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);
            }
            if (bufferData.index == null) {
                bufferData.index = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);
            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);
            this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
        };
        CubismShader_WebGL.prototype.releaseShaderProgram = function () {
            for (var i = 0; i < this._shaderSets.getSize(); i++) {
                this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);
                this._shaderSets.at(i).shaderProgram = 0;
                this._shaderSets.set(i, void 0);
                this._shaderSets.set(i, null);
            }
        };
        CubismShader_WebGL.prototype.generateShaders = function () {
            for (var i = 0; i < shaderCount; i++) {
                this._shaderSets.pushBack(new CubismShaderSet());
            }
            this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcSetupMask, Live2DCubismFramework.fragmentShaderSrcsetupMask);
            this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrc, Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha);
            this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcMasked, Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha);
            this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcMasked, Live2DCubismFramework.fragmentShaderSrcMaskInvertedPremultipliedAlpha);
            this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;
            this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;
            this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;
            this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;
            this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;
            this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;
            this._shaderSets.at(0).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');
            this._shaderSets.at(0).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');
            this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');
            this._shaderSets.at(0).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(0).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(0).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');
            this._shaderSets.at(1).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');
            this._shaderSets.at(1).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');
            this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');
            this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');
            this._shaderSets.at(1).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');
            this._shaderSets.at(2).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');
            this._shaderSets.at(2).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');
            this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');
            this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');
            this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');
            this._shaderSets.at(2).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(2).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(2).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');
            this._shaderSets.at(3).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');
            this._shaderSets.at(3).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');
            this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');
            this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');
            this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');
            this._shaderSets.at(3).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(3).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(3).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');
            this._shaderSets.at(4).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');
            this._shaderSets.at(4).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');
            this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');
            this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');
            this._shaderSets.at(4).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');
            this._shaderSets.at(5).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');
            this._shaderSets.at(5).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');
            this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');
            this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');
            this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');
            this._shaderSets.at(5).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(5).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(5).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');
            this._shaderSets.at(6).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');
            this._shaderSets.at(6).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');
            this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');
            this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');
            this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');
            this._shaderSets.at(6).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(6).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(6).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');
            this._shaderSets.at(7).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');
            this._shaderSets.at(7).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');
            this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');
            this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');
            this._shaderSets.at(7).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');
            this._shaderSets.at(8).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');
            this._shaderSets.at(8).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');
            this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');
            this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');
            this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');
            this._shaderSets.at(8).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(8).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(8).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');
            this._shaderSets.at(9).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');
            this._shaderSets.at(9).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');
            this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');
            this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');
            this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');
            this._shaderSets.at(9).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(9).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(9).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');
        };
        CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {
            var shaderProgram = this.gl.createProgram();
            var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);
            if (!vertShader) {
                cubismdebug_1.CubismLogError('Vertex shader compile error!');
                return 0;
            }
            var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);
            if (!fragShader) {
                cubismdebug_1.CubismLogError('Vertex shader compile error!');
                return 0;
            }
            this.gl.attachShader(shaderProgram, vertShader);
            this.gl.attachShader(shaderProgram, fragShader);
            this.gl.linkProgram(shaderProgram);
            var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);
            if (!linkStatus) {
                cubismdebug_1.CubismLogError('Failed to link program: {0}', shaderProgram);
                this.gl.deleteShader(vertShader);
                vertShader = 0;
                this.gl.deleteShader(fragShader);
                fragShader = 0;
                if (shaderProgram) {
                    this.gl.deleteProgram(shaderProgram);
                    shaderProgram = 0;
                }
                return 0;
            }
            this.gl.deleteShader(vertShader);
            this.gl.deleteShader(fragShader);
            return shaderProgram;
        };
        CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {
            var source = shaderSource;
            var shader = this.gl.createShader(shaderType);
            this.gl.shaderSource(shader, source);
            this.gl.compileShader(shader);
            if (!shader) {
                var log = this.gl.getShaderInfoLog(shader);
                cubismdebug_1.CubismLogError('Shader compile log: {0} ', log);
            }
            var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);
            if (!status) {
                this.gl.deleteShader(shader);
                return null;
            }
            return shader;
        };
        CubismShader_WebGL.prototype.setGl = function (gl) {
            this.gl = gl;
        };
        return CubismShader_WebGL;
    }());
    Live2DCubismFramework.CubismShader_WebGL = CubismShader_WebGL;
    var CubismShaderSet = (function () {
        function CubismShaderSet() {
        }
        return CubismShaderSet;
    }());
    Live2DCubismFramework.CubismShaderSet = CubismShaderSet;
    var ShaderNames;
    (function (ShaderNames) {
        ShaderNames[ShaderNames["ShaderNames_SetupMask"] = 0] = "ShaderNames_SetupMask";
        ShaderNames[ShaderNames["ShaderNames_NormalPremultipliedAlpha"] = 1] = "ShaderNames_NormalPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_NormalMaskedPremultipliedAlpha"] = 2] = "ShaderNames_NormalMaskedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_NomralMaskedInvertedPremultipliedAlpha"] = 3] = "ShaderNames_NomralMaskedInvertedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_AddPremultipliedAlpha"] = 4] = "ShaderNames_AddPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlpha"] = 5] = "ShaderNames_AddMaskedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlphaInverted"] = 6] = "ShaderNames_AddMaskedPremultipliedAlphaInverted";
        ShaderNames[ShaderNames["ShaderNames_MultPremultipliedAlpha"] = 7] = "ShaderNames_MultPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlpha"] = 8] = "ShaderNames_MultMaskedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlphaInverted"] = 9] = "ShaderNames_MultMaskedPremultipliedAlphaInverted";
    })(ShaderNames = Live2DCubismFramework.ShaderNames || (Live2DCubismFramework.ShaderNames = {}));
    Live2DCubismFramework.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' +
        'attribute vec2     a_texCoord;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_myPos;' +
        'uniform mat4       u_clipMatrix;' +
        'void main()' +
        '{' +
        '   gl_Position = u_clipMatrix * a_position;' +
        '   v_myPos = u_clipMatrix * a_position;' +
        '   v_texCoord = a_texCoord;' +
        '   v_texCoord.y = 1.0 - v_texCoord.y;' +
        '}';
    Live2DCubismFramework.fragmentShaderSrcsetupMask = 'precision mediump float;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_myPos;' +
        'uniform vec4       u_baseColor;' +
        'uniform vec4       u_channelFlag;' +
        'uniform sampler2D  s_texture0;' +
        'void main()' +
        '{' +
        '   float isInside = ' +
        '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +
        '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +
        '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +
        '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +
        '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +
        '}';
    Live2DCubismFramework.vertexShaderSrc = 'attribute vec4     a_position;' +
        'attribute vec2     a_texCoord;' +
        'varying vec2       v_texCoord;' +
        'uniform mat4       u_matrix;' +
        'void main()' +
        '{' +
        '   gl_Position = u_matrix * a_position;' +
        '   v_texCoord = a_texCoord;' +
        '   v_texCoord.y = 1.0 - v_texCoord.y;' +
        '}';
    Live2DCubismFramework.vertexShaderSrcMasked = 'attribute vec4     a_position;' +
        'attribute vec2     a_texCoord;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_clipPos;' +
        'uniform mat4       u_matrix;' +
        'uniform mat4       u_clipMatrix;' +
        'void main()' +
        '{' +
        '   gl_Position = u_matrix * a_position;' +
        '   v_clipPos = u_clipMatrix * a_position;' +
        '   v_texCoord = a_texCoord;' +
        '   v_texCoord.y = 1.0 - v_texCoord.y;' +
        '}';
    Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' +
        'varying vec2       v_texCoord;' +
        'uniform vec4       u_baseColor;' +
        'uniform sampler2D  s_texture0;' +
        'void main()' +
        '{' +
        '   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +
        '}';
    Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_clipPos;' +
        'uniform vec4       u_baseColor;' +
        'uniform vec4       u_channelFlag;' +
        'uniform sampler2D  s_texture0;' +
        'uniform sampler2D  s_texture1;' +
        'void main()' +
        '{' +
        '   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +
        '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
        '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
        '   col_formask = col_formask * maskVal;' +
        '   gl_FragColor = col_formask;' +
        '}';
    Live2DCubismFramework.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' +
        'varying vec2 v_texCoord;' +
        'varying vec4 v_clipPos;' +
        'uniform sampler2D s_texture0;' +
        'uniform sampler2D s_texture1;' +
        'uniform vec4 u_channelFlag;' +
        'uniform vec4 u_baseColor;' +
        'void main()' +
        '{' +
        'vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;' +
        'vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
        'float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
        'col_formask = col_formask * (1.0 - maskVal);' +
        'gl_FragColor = col_formask;' +
        '}';
    var CubismRenderer_WebGL = (function (_super) {
        __extends(CubismRenderer_WebGL, _super);
        function CubismRenderer_WebGL() {
            var _this = _super.call(this) || this;
            _this._clippingContextBufferForMask = null;
            _this._clippingContextBufferForDraw = null;
            _this._clippingManager = new CubismClippingManager_WebGL();
            _this.firstDraw = true;
            _this._textures = new csmMap();
            _this._sortedDrawableIndexList = new csmVector();
            _this._bufferData = {
                vertex: WebGLBuffer = null,
                uv: WebGLBuffer = null,
                index: WebGLBuffer = null
            };
            _this._textures.prepareCapacity(32, true);
            return _this;
        }
        CubismRenderer_WebGL.prototype.initialize = function (model) {
            if (model.isUsingMasking()) {
                this._clippingManager = new CubismClippingManager_WebGL();
                this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());
            }
            this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);
            _super.prototype.initialize.call(this, model);
        };
        CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {
            this._textures.setValue(modelTextureNo, glTexture);
        };
        CubismRenderer_WebGL.prototype.getBindedTextures = function () {
            return this._textures;
        };
        CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {
            this._clippingManager.release();
            this._clippingManager = void 0;
            this._clippingManager = null;
            this._clippingManager = new CubismClippingManager_WebGL();
            this._clippingManager.setClippingMaskBufferSize(size);
            this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());
        };
        CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {
            return this._clippingManager.getClippingMaskBufferSize();
        };
        CubismRenderer_WebGL.prototype.release = function () {
            this._clippingManager.release();
            this._clippingManager = void 0;
            this._clippingManager = null;
            this.gl.deleteBuffer(this._bufferData.vertex);
            this._bufferData.vertex = null;
            this.gl.deleteBuffer(this._bufferData.uv);
            this._bufferData.uv = null;
            this.gl.deleteBuffer(this._bufferData.index);
            this._bufferData.index = null;
            this._bufferData = null;
            this._textures = null;
        };
        CubismRenderer_WebGL.prototype.doDrawModel = function () {
            if (this._clippingManager != null) {
                this.preDraw();
                this._clippingManager.setupClippingContext(this.getModel(), this);
            }
            this.preDraw();
            var drawableCount = this.getModel().getDrawableCount();
            var renderOrder = this.getModel().getDrawableRenderOrders();
            for (var i = 0; i < drawableCount; ++i) {
                var order = renderOrder[i];
                this._sortedDrawableIndexList.set(order, i);
            }
            for (var i = 0; i < drawableCount; ++i) {
                var drawableIndex = this._sortedDrawableIndexList.at(i);
                if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {
                    continue;
                }
                this.setClippingContextBufferForDraw(this._clippingManager != null
                    ? this._clippingManager
                        .getClippingContextListForDraw()
                        .at(drawableIndex)
                    : null);
                this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));
                this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));
            }
        };
        CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {
            if (this.isCulling()) {
                this.gl.enable(this.gl.CULL_FACE);
            }
            else {
                this.gl.disable(this.gl.CULL_FACE);
            }
            this.gl.frontFace(this.gl.CCW);
            var modelColorRGBA = this.getModelColor();
            if (this.getClippingContextBufferForMask() == null) {
                modelColorRGBA.A *= opacity;
                if (this.isPremultipliedAlpha()) {
                    modelColorRGBA.R *= modelColorRGBA.A;
                    modelColorRGBA.G *= modelColorRGBA.A;
                    modelColorRGBA.B *= modelColorRGBA.A;
                }
            }
            var drawtexture;
            if (this._textures.getValue(textureNo) != null) {
                drawtexture = this._textures.getValue(textureNo);
            }
            else {
                drawtexture = null;
            }
            CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);
            this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);
            this.gl.useProgram(null);
            this.setClippingContextBufferForDraw(null);
            this.setClippingContextBufferForMask(null);
        };
        CubismRenderer_WebGL.doStaticRelease = function () {
            CubismShader_WebGL.deleteInstance();
        };
        CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {
            s_fbo = fbo;
            s_viewport = viewport;
        };
        CubismRenderer_WebGL.prototype.preDraw = function () {
            if (this.firstDraw) {
                this.firstDraw = false;
                this._anisortopy =
                    this.gl.getExtension('EXT_texture_filter_anisotropic') ||
                        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||
                        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');
            }
            this.gl.disable(this.gl.SCISSOR_TEST);
            this.gl.disable(this.gl.STENCIL_TEST);
            this.gl.disable(this.gl.DEPTH_TEST);
            this.gl.frontFace(this.gl.CW);
            this.gl.enable(this.gl.BLEND);
            this.gl.colorMask(true, true, true, true);
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        };
        CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {
            this._clippingContextBufferForMask = clip;
        };
        CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {
            return this._clippingContextBufferForMask;
        };
        CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {
            this._clippingContextBufferForDraw = clip;
        };
        CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {
            return this._clippingContextBufferForDraw;
        };
        CubismRenderer_WebGL.prototype.startUp = function (gl) {
            this.gl = gl;
            this._clippingManager.setGL(gl);
            CubismShader_WebGL.getInstance().setGl(gl);
        };
        return CubismRenderer_WebGL;
    }(CubismRenderer));
    Live2DCubismFramework.CubismRenderer_WebGL = CubismRenderer_WebGL;
    CubismRenderer.staticRelease = function () {
        CubismRenderer_WebGL.doStaticRelease();
    };
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/type/csmmap.ts":
/*!************************************************!*\
  !*** ./src/SDKv4/Framework/src/type/csmmap.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var csmPair = (function () {
        function csmPair(key, value) {
            this.first = key == undefined ? null : key;
            this.second = value == undefined ? null : value;
        }
        return csmPair;
    }());
    Live2DCubismFramework.csmPair = csmPair;
    var csmMap = (function () {
        function csmMap(size) {
            if (size != undefined) {
                if (size < 1) {
                    this._keyValues = [];
                    this._dummyValue = null;
                    this._size = 0;
                }
                else {
                    this._keyValues = new Array(size);
                    this._size = size;
                }
            }
            else {
                this._keyValues = [];
                this._dummyValue = null;
                this._size = 0;
            }
        }
        csmMap.prototype.release = function () {
            this.clear();
        };
        csmMap.prototype.appendKey = function (key) {
            this.prepareCapacity(this._size + 1, false);
            this._keyValues[this._size] = new csmPair(key);
            this._size += 1;
        };
        csmMap.prototype.getValue = function (key) {
            var found = -1;
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    found = i;
                    break;
                }
            }
            if (found >= 0) {
                return this._keyValues[found].second;
            }
            else {
                this.appendKey(key);
                return this._keyValues[this._size - 1].second;
            }
        };
        csmMap.prototype.setValue = function (key, value) {
            var found = -1;
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    found = i;
                    break;
                }
            }
            if (found >= 0) {
                this._keyValues[found].second = value;
            }
            else {
                this.appendKey(key);
                this._keyValues[this._size - 1].second = value;
            }
        };
        csmMap.prototype.isExist = function (key) {
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    return true;
                }
            }
            return false;
        };
        csmMap.prototype.clear = function () {
            this._keyValues = void 0;
            this._keyValues = null;
            this._keyValues = [];
            this._size = 0;
        };
        csmMap.prototype.getSize = function () {
            return this._size;
        };
        csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {
            if (newSize > this._keyValues.length) {
                if (this._keyValues.length == 0) {
                    if (!fitToSize && newSize < csmMap.DefaultSize)
                        newSize = csmMap.DefaultSize;
                    this._keyValues.length = newSize;
                }
                else {
                    if (!fitToSize && newSize < this._keyValues.length * 2)
                        newSize = this._keyValues.length * 2;
                    this._keyValues.length = newSize;
                }
            }
        };
        csmMap.prototype.begin = function () {
            var ite = new iterator(this, 0);
            return ite;
        };
        csmMap.prototype.end = function () {
            var ite = new iterator(this, this._size);
            return ite;
        };
        csmMap.prototype.erase = function (ite) {
            var index = ite._index;
            if (index < 0 || this._size <= index) {
                return ite;
            }
            this._keyValues.splice(index, 1);
            --this._size;
            var ite2 = new iterator(this, index);
            return ite2;
        };
        csmMap.prototype.dumpAsInt = function () {
            for (var i = 0; i < this._size; i++) {
                cubismdebug_1.CubismLogDebug('{0} ,', this._keyValues[i]);
                cubismdebug_1.CubismLogDebug('\n');
            }
        };
        csmMap.DefaultSize = 10;
        return csmMap;
    }());
    Live2DCubismFramework.csmMap = csmMap;
    var iterator = (function () {
        function iterator(v, idx) {
            this._map = v != undefined ? v : new csmMap();
            this._index = idx != undefined ? idx : 0;
        }
        iterator.prototype.set = function (ite) {
            this._index = ite._index;
            this._map = ite._map;
            return this;
        };
        iterator.prototype.preIncrement = function () {
            ++this._index;
            return this;
        };
        iterator.prototype.preDecrement = function () {
            --this._index;
            return this;
        };
        iterator.prototype.increment = function () {
            var iteold = new iterator(this._map, this._index++);
            this._map = iteold._map;
            this._index = iteold._index;
            return this;
        };
        iterator.prototype.decrement = function () {
            var iteold = new iterator(this._map, this._index);
            this._map = iteold._map;
            this._index = iteold._index;
            return this;
        };
        iterator.prototype.ptr = function () {
            return this._map._keyValues[this._index];
        };
        iterator.prototype.notEqual = function (ite) {
            return this._index != ite._index || this._map != ite._map;
        };
        return iterator;
    }());
    Live2DCubismFramework.iterator = iterator;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/type/csmrectf.ts":
/*!**************************************************!*\
  !*** ./src/SDKv4/Framework/src/type/csmrectf.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var csmRect = (function () {
        function csmRect(x, y, w, h) {
            this.x = x;
            this.y = y;
            this.width = w;
            this.height = h;
        }
        csmRect.prototype.getCenterX = function () {
            return this.x + 0.5 * this.width;
        };
        csmRect.prototype.getCenterY = function () {
            return this.y + 0.5 * this.height;
        };
        csmRect.prototype.getRight = function () {
            return this.x + this.width;
        };
        csmRect.prototype.getBottom = function () {
            return this.y + this.height;
        };
        csmRect.prototype.setRect = function (r) {
            this.x = r.x;
            this.y = r.y;
            this.width = r.width;
            this.height = r.height;
        };
        csmRect.prototype.expand = function (w, h) {
            this.x -= w;
            this.y -= h;
            this.width += w * 2.0;
            this.height += h * 2.0;
        };
        return csmRect;
    }());
    Live2DCubismFramework.csmRect = csmRect;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/type/csmstring.ts":
/*!***************************************************!*\
  !*** ./src/SDKv4/Framework/src/type/csmstring.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var csmString = (function () {
        function csmString(s) {
            this.s = s;
        }
        csmString.prototype.append = function (c, length) {
            this.s += length !== undefined ? c.substr(0, length) : c;
            return this;
        };
        csmString.prototype.expansion = function (length, v) {
            for (var i = 0; i < length; i++) {
                this.append(v);
            }
            return this;
        };
        csmString.prototype.getBytes = function () {
            return encodeURIComponent(this.s).replace(/%../g, 'x').length;
        };
        csmString.prototype.getLength = function () {
            return this.s.length;
        };
        csmString.prototype.isLess = function (s) {
            return this.s < s.s;
        };
        csmString.prototype.isGreat = function (s) {
            return this.s > s.s;
        };
        csmString.prototype.isEqual = function (s) {
            return this.s == s;
        };
        csmString.prototype.isEmpty = function () {
            return this.s.length == 0;
        };
        return csmString;
    }());
    Live2DCubismFramework.csmString = csmString;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/type/csmvector.ts":
/*!***************************************************!*\
  !*** ./src/SDKv4/Framework/src/type/csmvector.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var csmVector = (function () {
        function csmVector(initialCapacity) {
            if (initialCapacity === void 0) { initialCapacity = 0; }
            if (initialCapacity < 1) {
                this._ptr = [];
                this._capacity = 0;
                this._size = 0;
            }
            else {
                this._ptr = new Array(initialCapacity);
                this._capacity = initialCapacity;
                this._size = 0;
            }
        }
        csmVector.prototype.at = function (index) {
            return this._ptr[index];
        };
        csmVector.prototype.set = function (index, value) {
            this._ptr[index] = value;
        };
        csmVector.prototype.get = function (offset) {
            if (offset === void 0) { offset = 0; }
            var ret = new Array();
            for (var i = offset; i < this._size; i++) {
                ret.push(this._ptr[i]);
            }
            return ret;
        };
        csmVector.prototype.pushBack = function (value) {
            if (this._size >= this._capacity) {
                this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);
            }
            this._ptr[this._size++] = value;
        };
        csmVector.prototype.clear = function () {
            this._ptr.length = 0;
            this._size = 0;
        };
        csmVector.prototype.getSize = function () {
            return this._size;
        };
        csmVector.prototype.assign = function (newSize, value) {
            var curSize = this._size;
            if (curSize < newSize) {
                this.prepareCapacity(newSize);
            }
            for (var i = 0; i < newSize; i++) {
                this._ptr[i] = value;
            }
            this._size = newSize;
        };
        csmVector.prototype.resize = function (newSize, value) {
            if (value === void 0) { value = null; }
            this.updateSize(newSize, value, true);
        };
        csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {
            if (value === void 0) { value = null; }
            if (callPlacementNew === void 0) { callPlacementNew = true; }
            var curSize = this._size;
            if (curSize < newSize) {
                this.prepareCapacity(newSize);
                if (callPlacementNew) {
                    for (var i = this._size; i < newSize; i++) {
                        if (typeof value == 'function') {
                            this._ptr[i] = JSON.parse(JSON.stringify(new value()));
                        }
                        else {
                            this._ptr[i] = value;
                        }
                    }
                }
                else {
                    for (var i = this._size; i < newSize; i++) {
                        this._ptr[i] = value;
                    }
                }
            }
            else {
                var sub = this._size - newSize;
                this._ptr.splice(this._size - sub, sub);
            }
            this._size = newSize;
        };
        csmVector.prototype.insert = function (position, begin, end) {
            var dstSi = position._index;
            var srcSi = begin._index;
            var srcEi = end._index;
            var addCount = srcEi - srcSi;
            this.prepareCapacity(this._size + addCount);
            var addSize = this._size - dstSi;
            if (addSize > 0) {
                for (var i = 0; i < addSize; i++) {
                    this._ptr.splice(dstSi + i, 0, null);
                }
            }
            for (var i = srcSi; i < srcEi; i++, dstSi++) {
                this._ptr[dstSi] = begin._vector._ptr[i];
            }
            this._size = this._size + addCount;
        };
        csmVector.prototype.remove = function (index) {
            if (index < 0 || this._size <= index) {
                return false;
            }
            this._ptr.splice(index, 1);
            --this._size;
            return true;
        };
        csmVector.prototype.erase = function (ite) {
            var index = ite._index;
            if (index < 0 || this._size <= index) {
                return ite;
            }
            this._ptr.splice(index, 1);
            --this._size;
            var ite2 = new iterator(this, index);
            return ite2;
        };
        csmVector.prototype.prepareCapacity = function (newSize) {
            if (newSize > this._capacity) {
                if (this._capacity == 0) {
                    this._ptr = new Array(newSize);
                    this._capacity = newSize;
                }
                else {
                    this._ptr.length = newSize;
                    this._capacity = newSize;
                }
            }
        };
        csmVector.prototype.begin = function () {
            var ite = this._size == 0 ? this.end() : new iterator(this, 0);
            return ite;
        };
        csmVector.prototype.end = function () {
            var ite = new iterator(this, this._size);
            return ite;
        };
        csmVector.prototype.getOffset = function (offset) {
            var newVector = new csmVector();
            newVector._ptr = this.get(offset);
            newVector._size = this.get(offset).length;
            newVector._capacity = this.get(offset).length;
            return newVector;
        };
        csmVector.s_defaultSize = 10;
        return csmVector;
    }());
    Live2DCubismFramework.csmVector = csmVector;
    var iterator = (function () {
        function iterator(v, index) {
            this._vector = v != undefined ? v : null;
            this._index = index != undefined ? index : 0;
        }
        iterator.prototype.set = function (ite) {
            this._index = ite._index;
            this._vector = ite._vector;
            return this;
        };
        iterator.prototype.preIncrement = function () {
            ++this._index;
            return this;
        };
        iterator.prototype.preDecrement = function () {
            --this._index;
            return this;
        };
        iterator.prototype.increment = function () {
            var iteold = new iterator(this._vector, this._index++);
            this._vector = iteold._vector;
            this._index = iteold._index;
            return this;
        };
        iterator.prototype.decrement = function () {
            var iteold = new iterator(this._vector, this._index--);
            this._vector = iteold._vector;
            this._index = iteold._index;
            return this;
        };
        iterator.prototype.ptr = function () {
            return this._vector._ptr[this._index];
        };
        iterator.prototype.substitution = function (ite) {
            this._index = ite._index;
            this._vector = ite._vector;
            return this;
        };
        iterator.prototype.notEqual = function (ite) {
            return this._index != ite._index || this._vector != ite._vector;
        };
        return iterator;
    }());
    Live2DCubismFramework.iterator = iterator;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/utils/cubismdebug.ts":
/*!******************************************************!*\
  !*** ./src/SDKv4/Framework/src/utils/cubismdebug.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismLogError = exports.CubismLogWarning = exports.CubismLogInfo = exports.CubismLogDebug = exports.CubismLogVerbose = exports.CSM_ASSERT = exports.CubismLogPrintIn = exports.CubismLogPrint = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var cubismframeworkconfig_1 = __webpack_require__(/*! ../cubismframeworkconfig */ "./src/SDKv4/Framework/src/cubismframeworkconfig.ts");
exports.CubismLogPrint = function (level, fmt, args) {
    Live2DCubismFramework.CubismDebug.print(level, '[CSM]' + fmt, args);
};
exports.CubismLogPrintIn = function (level, fmt, args) {
    exports.CubismLogPrint(level, fmt + '\n', args);
};
exports.CSM_ASSERT = function (expr) {
    console.assert(expr);
};
if (cubismframeworkconfig_1.CSM_LOG_LEVEL <= cubismframeworkconfig_1.CSM_LOG_LEVEL_VERBOSE) {
    exports.CubismLogVerbose = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Verbose, '[V]' + fmt, args);
    };
    exports.CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
    };
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_DEBUG) {
    exports.CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
    };
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_INFO) {
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_WARNING) {
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_ERROR) {
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CubismDebug = (function () {
        function CubismDebug() {
        }
        CubismDebug.print = function (logLevel, format, args) {
            if (logLevel < live2dcubismframework_1.Live2DCubismFramework.CubismFramework.getLoggingLevel()) {
                return;
            }
            var logPrint = live2dcubismframework_1.Live2DCubismFramework.CubismFramework.coreLogFunction;
            if (!logPrint)
                return;
            var buffer = format.replace(/\{(\d+)\}/g, function (m, k) {
                return args[k];
            });
            logPrint(buffer);
        };
        CubismDebug.dumpBytes = function (logLevel, data, length) {
            for (var i = 0; i < length; i++) {
                if (i % 16 == 0 && i > 0)
                    this.print(logLevel, '\n');
                else if (i % 8 == 0 && i > 0)
                    this.print(logLevel, '  ');
                this.print(logLevel, '{0} ', [data[i] & 0xff]);
            }
            this.print(logLevel, '\n');
        };
        return CubismDebug;
    }());
    Live2DCubismFramework.CubismDebug = CubismDebug;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/Framework/src/utils/cubismjson.ts":
/*!*****************************************************!*\
  !*** ./src/SDKv4/Framework/src/utils/cubismjson.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = void 0;
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./src/SDKv4/Framework/src/type/csmstring.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "./src/SDKv4/Framework/src/type/csmmap.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ./cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var csmMap = csmmap_1.Live2DCubismFramework.csmMap;
var csmString = csmstring_1.Live2DCubismFramework.csmString;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';
    var CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';
    var Value = (function () {
        function Value() {
        }
        Value.prototype.getRawString = function (defaultValue, indent) {
            return this.getString(defaultValue, indent);
        };
        Value.prototype.toInt = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return defaultValue;
        };
        Value.prototype.toFloat = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return defaultValue;
        };
        Value.prototype.toBoolean = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = false; }
            return defaultValue;
        };
        Value.prototype.getSize = function () {
            return 0;
        };
        Value.prototype.getArray = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return defaultValue;
        };
        Value.prototype.getVector = function (defaultValue) {
            return defaultValue;
        };
        Value.prototype.getMap = function (defaultValue) {
            return defaultValue;
        };
        Value.prototype.getValueByIndex = function (index) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        Value.prototype.getValueByString = function (s) {
            return Value.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        Value.prototype.getKeys = function () {
            return Value.s_dummyKeys;
        };
        Value.prototype.isError = function () {
            return false;
        };
        Value.prototype.isNull = function () {
            return false;
        };
        Value.prototype.isBool = function () {
            return false;
        };
        Value.prototype.isFloat = function () {
            return false;
        };
        Value.prototype.isString = function () {
            return false;
        };
        Value.prototype.isArray = function () {
            return false;
        };
        Value.prototype.isMap = function () {
            return false;
        };
        Value.prototype.equals = function (value) {
            return false;
        };
        Value.prototype.isStatic = function () {
            return false;
        };
        Value.prototype.setErrorNotForClientCall = function (errorStr) {
            return JsonError.errorValue;
        };
        Value.staticInitializeNotForClientCall = function () {
            JsonBoolean.trueValue = new JsonBoolean(true);
            JsonBoolean.falseValue = new JsonBoolean(false);
            JsonError.errorValue = new JsonError('ERROR', true);
            this.nullValue = new JsonNullvalue();
            Value.s_dummyKeys = new csmVector();
        };
        Value.staticReleaseNotForClientCall = function () {
            JsonBoolean.trueValue = null;
            JsonBoolean.falseValue = null;
            JsonError.errorValue = null;
            Value.nullValue = null;
            Value.s_dummyKeys = null;
            JsonBoolean.trueValue = null;
            JsonBoolean.falseValue = null;
            JsonError.errorValue = null;
            Value.nullValue = null;
            Value.s_dummyKeys = null;
        };
        return Value;
    }());
    Live2DCubismFramework.Value = Value;
    var CubismJson = (function () {
        function CubismJson(buffer, length) {
            this._error = null;
            this._lineCount = 0;
            this._root = null;
            if (buffer != undefined) {
                this.parseBytes(buffer, length);
            }
        }
        CubismJson.create = function (buffer, size) {
            var json = new CubismJson();
            var succeeded = json.parseBytes(buffer, size);
            if (!succeeded) {
                CubismJson.delete(json);
                return null;
            }
            else {
                return json;
            }
        };
        CubismJson.delete = function (instance) {
            instance = null;
        };
        CubismJson.prototype.getRoot = function () {
            return this._root;
        };
        CubismJson.prototype.arrayBufferToString = function (buffer) {
            var uint8Array = new Uint8Array(buffer);
            var str = '';
            for (var i = 0, len = uint8Array.length; i < len; ++i) {
                str += '%' + this.pad(uint8Array[i].toString(16));
            }
            str = decodeURIComponent(str);
            return str;
        };
        CubismJson.prototype.pad = function (n) {
            return n.length < 2 ? '0' + n : n;
        };
        CubismJson.prototype.parseBytes = function (buffer, size) {
            var endPos = new Array(1);
            var decodeBuffer = this.arrayBufferToString(buffer);
            this._root = this.parseValue(decodeBuffer, size, 0, endPos);
            if (this._error) {
                var strbuf = '\0';
                strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\n';
                this._root = new JsonString(strbuf);
                cubismdebug_1.CubismLogInfo('{0}', this._root.getRawString());
                return false;
            }
            else if (this._root == null) {
                this._root = new JsonError(new csmString(this._error), false);
                return false;
            }
            return true;
        };
        CubismJson.prototype.getParseError = function () {
            return this._error;
        };
        CubismJson.prototype.checkEndOfFile = function () {
            return this._root.getArray()[1].equals('EOF');
        };
        CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var o = null;
            var i = begin;
            var f;
            for (; i < length; i++) {
                var c = buffer[i];
                switch (c) {
                    case '-':
                    case '.':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9': {
                        var afterString = new Array(1);
                        f = live2dcubismframework_1.strtod(buffer.slice(i), afterString);
                        outEndPos[0] = buffer.indexOf(afterString[0]);
                        return new JsonFloat(f);
                    }
                    case '"':
                        return new JsonString(this.parseString(buffer, length, i + 1, outEndPos));
                    case '[':
                        o = this.parseArray(buffer, length, i + 1, outEndPos);
                        return o;
                    case '{':
                        o = this.parseObject(buffer, length, i + 1, outEndPos);
                        return o;
                    case 'n':
                        if (i + 3 < length) {
                            o = new JsonNullvalue();
                            outEndPos[0] = i + 4;
                        }
                        else {
                            this._error = 'parse null';
                        }
                        return o;
                    case 't':
                        if (i + 3 < length) {
                            o = JsonBoolean.trueValue;
                            outEndPos[0] = i + 4;
                        }
                        else {
                            this._error = 'parse true';
                        }
                        return o;
                    case 'f':
                        if (i + 4 < length) {
                            o = JsonBoolean.falseValue;
                            outEndPos[0] = i + 5;
                        }
                        else {
                            this._error = "illegal ',' position";
                        }
                        return o;
                    case ',':
                        this._error = "illegal ',' position";
                        return null;
                    case ']':
                        outEndPos[0] = i;
                        return null;
                    case '\n':
                        this._lineCount++;
                    case ' ':
                    case '\t':
                    case '\r':
                    default:
                        break;
                }
            }
            this._error = 'illegal end of value';
            return null;
        };
        CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {
            if (this._error)
                return null;
            var i = begin;
            var c, c2;
            var ret = new csmString('');
            var bufStart = begin;
            for (; i < length; i++) {
                c = string[i];
                switch (c) {
                    case '"': {
                        outEndPos[0] = i + 1;
                        ret.append(string.slice(bufStart), i - bufStart);
                        return ret.s;
                    }
                    case '//': {
                        i++;
                        if (i - 1 > bufStart) {
                            ret.append(string.slice(bufStart), i - bufStart);
                        }
                        bufStart = i + 1;
                        if (i < length) {
                            c2 = string[i];
                            switch (c2) {
                                case '\\':
                                    ret.expansion(1, '\\');
                                    break;
                                case '"':
                                    ret.expansion(1, '"');
                                    break;
                                case '/':
                                    ret.expansion(1, '/');
                                    break;
                                case 'b':
                                    ret.expansion(1, '\b');
                                    break;
                                case 'f':
                                    ret.expansion(1, '\f');
                                    break;
                                case 'n':
                                    ret.expansion(1, '\n');
                                    break;
                                case 'r':
                                    ret.expansion(1, '\r');
                                    break;
                                case 't':
                                    ret.expansion(1, '\t');
                                    break;
                                case 'u':
                                    this._error = 'parse string/unicord escape not supported';
                                    break;
                                default:
                                    break;
                            }
                        }
                        else {
                            this._error = 'parse string/escape error';
                        }
                    }
                    default: {
                        break;
                    }
                }
            }
            this._error = 'parse string/illegal end';
            return null;
        };
        CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var ret = new JsonMap();
            var key = '';
            var i = begin;
            var c = '';
            var localRetEndPos2 = Array(1);
            var ok = false;
            for (; i < length; i++) {
                FOR_LOOP: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case '"':
                            key = this.parseString(buffer, length, i + 1, localRetEndPos2);
                            if (this._error) {
                                return null;
                            }
                            i = localRetEndPos2[0];
                            ok = true;
                            break FOR_LOOP;
                        case '}':
                            outEndPos[0] = i + 1;
                            return ret;
                        case ':':
                            this._error = "illegal ':' position";
                            break;
                        case '\n':
                            this._lineCount++;
                        default:
                            break;
                    }
                }
                if (!ok) {
                    this._error = 'key not found';
                    return null;
                }
                ok = false;
                FOR_LOOP2: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ':':
                            ok = true;
                            i++;
                            break FOR_LOOP2;
                        case '}':
                            this._error = "illegal '}' position";
                            break;
                        case '\n':
                            this._lineCount++;
                        default:
                            break;
                    }
                }
                if (!ok) {
                    this._error = "':' not found";
                    return null;
                }
                var value = this.parseValue(buffer, length, i, localRetEndPos2);
                if (this._error) {
                    return null;
                }
                i = localRetEndPos2[0];
                ret.put(key, value);
                FOR_LOOP3: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ',':
                            break FOR_LOOP3;
                        case '}':
                            outEndPos[0] = i + 1;
                            return ret;
                        case '\n':
                            this._lineCount++;
                        default:
                            break;
                    }
                }
            }
            this._error = 'illegal end of perseObject';
            return null;
        };
        CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var ret = new JsonArray();
            var i = begin;
            var c;
            var localRetEndpos2 = new Array(1);
            for (; i < length; i++) {
                var value = this.parseValue(buffer, length, i, localRetEndpos2);
                if (this._error) {
                    return null;
                }
                i = localRetEndpos2[0];
                if (value) {
                    ret.add(value);
                }
                FOR_LOOP: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ',':
                            break FOR_LOOP;
                        case ']':
                            outEndPos[0] = i + 1;
                            return ret;
                        case '\n':
                            ++this._lineCount;
                        default:
                            break;
                    }
                }
            }
            ret = void 0;
            this._error = 'illegal end of parseObject';
            return null;
        };
        return CubismJson;
    }());
    Live2DCubismFramework.CubismJson = CubismJson;
    var JsonFloat = (function (_super) {
        __extends(JsonFloat, _super);
        function JsonFloat(v) {
            var _this = _super.call(this) || this;
            _this._value = v;
            return _this;
        }
        JsonFloat.prototype.isFloat = function () {
            return true;
        };
        JsonFloat.prototype.getString = function (defaultValue, indent) {
            var strbuf = '\0';
            this._value = parseFloat(strbuf);
            this._stringBuffer = strbuf;
            return this._stringBuffer;
        };
        JsonFloat.prototype.toInt = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return parseInt(this._value.toString());
        };
        JsonFloat.prototype.toFloat = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0.0; }
            return this._value;
        };
        JsonFloat.prototype.equals = function (value) {
            if ('number' === typeof value) {
                if (Math.round(value)) {
                    return false;
                }
                else {
                    return value == this._value;
                }
            }
            return false;
        };
        return JsonFloat;
    }(Value));
    Live2DCubismFramework.JsonFloat = JsonFloat;
    var JsonBoolean = (function (_super) {
        __extends(JsonBoolean, _super);
        function JsonBoolean(v) {
            var _this = _super.call(this) || this;
            _this._boolValue = v;
            return _this;
        }
        JsonBoolean.prototype.isBool = function () {
            return true;
        };
        JsonBoolean.prototype.toBoolean = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = false; }
            return this._boolValue;
        };
        JsonBoolean.prototype.getString = function (defaultValue, indent) {
            this._stringBuffer = this._boolValue ? 'true' : 'false';
            return this._stringBuffer;
        };
        JsonBoolean.prototype.equals = function (value) {
            if ('boolean' === typeof value) {
                return value == this._boolValue;
            }
            return false;
        };
        JsonBoolean.prototype.isStatic = function () {
            return true;
        };
        return JsonBoolean;
    }(Value));
    Live2DCubismFramework.JsonBoolean = JsonBoolean;
    var JsonString = (function (_super) {
        __extends(JsonString, _super);
        function JsonString(s) {
            var _this = _super.call(this) || this;
            if ('string' === typeof s) {
                _this._stringBuffer = s;
            }
            if (s instanceof csmString) {
                _this._stringBuffer = s.s;
            }
            return _this;
        }
        JsonString.prototype.isString = function () {
            return true;
        };
        JsonString.prototype.getString = function (defaultValue, indent) {
            return this._stringBuffer;
        };
        JsonString.prototype.equals = function (value) {
            if ('string' === typeof value) {
                return this._stringBuffer == value;
            }
            if (value instanceof csmString) {
                return this._stringBuffer == value.s;
            }
            return false;
        };
        return JsonString;
    }(Value));
    Live2DCubismFramework.JsonString = JsonString;
    var JsonError = (function (_super) {
        __extends(JsonError, _super);
        function JsonError(s, isStatic) {
            var _this = this;
            if ('string' === typeof s) {
                _this = _super.call(this, s) || this;
            }
            else {
                _this = _super.call(this, s) || this;
            }
            _this._isStatic = isStatic;
            return _this;
        }
        JsonError.prototype.isStatic = function () {
            return this._isStatic;
        };
        JsonError.prototype.setErrorNotForClientCall = function (s) {
            this._stringBuffer = s;
            return this;
        };
        JsonError.prototype.isError = function () {
            return true;
        };
        return JsonError;
    }(JsonString));
    Live2DCubismFramework.JsonError = JsonError;
    var JsonNullvalue = (function (_super) {
        __extends(JsonNullvalue, _super);
        function JsonNullvalue() {
            var _this = _super.call(this) || this;
            _this._stringBuffer = 'NullValue';
            return _this;
        }
        JsonNullvalue.prototype.isNull = function () {
            return true;
        };
        JsonNullvalue.prototype.getString = function (defaultValue, indent) {
            return this._stringBuffer;
        };
        JsonNullvalue.prototype.isStatic = function () {
            return true;
        };
        return JsonNullvalue;
    }(Value));
    Live2DCubismFramework.JsonNullvalue = JsonNullvalue;
    var JsonArray = (function (_super) {
        __extends(JsonArray, _super);
        function JsonArray() {
            var _this = _super.call(this) || this;
            _this._array = new csmVector();
            return _this;
        }
        JsonArray.prototype.release = function () {
            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {
                var v = ite.ptr();
                if (v && !v.isStatic()) {
                    v = void 0;
                    v = null;
                }
            }
        };
        JsonArray.prototype.isArray = function () {
            return true;
        };
        JsonArray.prototype.getValueByIndex = function (index) {
            if (index < 0 || this._array.getSize() <= index) {
                return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);
            }
            var v = this._array.at(index);
            if (v == null) {
                return Value.nullValue;
            }
            return v;
        };
        JsonArray.prototype.getValueByString = function (s) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        JsonArray.prototype.getString = function (defaultValue, indent) {
            var stringBuffer = indent + '[\n';
            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {
                var v = ite.ptr();
                this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\n';
            }
            this._stringBuffer = stringBuffer + indent + ']\n';
            return this._stringBuffer;
        };
        JsonArray.prototype.add = function (v) {
            this._array.pushBack(v);
        };
        JsonArray.prototype.getVector = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return this._array;
        };
        JsonArray.prototype.getSize = function () {
            return this._array.getSize();
        };
        return JsonArray;
    }(Value));
    Live2DCubismFramework.JsonArray = JsonArray;
    var JsonMap = (function (_super) {
        __extends(JsonMap, _super);
        function JsonMap() {
            var _this = _super.call(this) || this;
            _this._map = new csmMap();
            return _this;
        }
        JsonMap.prototype.release = function () {
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var v = ite.ptr().second;
                if (v && !v.isStatic()) {
                    v = void 0;
                    v = null;
                }
                ite.preIncrement();
            }
        };
        JsonMap.prototype.isMap = function () {
            return true;
        };
        JsonMap.prototype.getValueByString = function (s) {
            if (s instanceof csmString) {
                var ret = this._map.getValue(s.s);
                if (ret == null) {
                    return Value.nullValue;
                }
                return ret;
            }
            for (var iter = this._map.begin(); iter.notEqual(this._map.end()); iter.preIncrement()) {
                if (iter.ptr().first == s) {
                    if (iter.ptr().second == null) {
                        return Value.nullValue;
                    }
                    return iter.ptr().second;
                }
            }
            return Value.nullValue;
        };
        JsonMap.prototype.getValueByIndex = function (index) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        JsonMap.prototype.getString = function (defaultValue, indent) {
            this._stringBuffer = indent + '{\n';
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var key = ite.ptr().first;
                var v = ite.ptr().second;
                this._stringBuffer +=
                    indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \n';
                ite.preIncrement();
            }
            this._stringBuffer += indent + '}\n';
            return this._stringBuffer;
        };
        JsonMap.prototype.getMap = function (defaultValue) {
            return this._map;
        };
        JsonMap.prototype.put = function (key, v) {
            this._map.setValue(key, v);
        };
        JsonMap.prototype.getKeys = function () {
            if (!this._keys) {
                this._keys = new csmVector();
                var ite = this._map.begin();
                while (ite.notEqual(this._map.end())) {
                    var key = ite.ptr().first;
                    this._keys.pushBack(key);
                    ite.preIncrement();
                }
            }
            return this._keys;
        };
        JsonMap.prototype.getSize = function () {
            return this._keys.getSize();
        };
        return JsonMap;
    }(Value));
    Live2DCubismFramework.JsonMap = JsonMap;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./src/SDKv4/lappdefine.ts":
/*!*********************************!*\
  !*** ./src/SDKv4/lappdefine.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setPreLoadMotion = exports.defineDebug = exports.defineModelPath = exports.setCaptureCanvas = exports.captureCanvas = exports.preLoadMotion = exports.modelJsonName = exports.modelPath = exports.RenderTargetHeight = exports.RenderTargetWidth = exports.CubismLoggingLevel = exports.DebugTouchLogEnable = exports.DebugLogEnable = exports.PriorityForce = exports.PriorityNormal = exports.PriorityIdle = exports.PriorityNone = exports.HitAreaNameBody = exports.HitAreaNameHead = exports.MotionGroupTapHead = exports.MotionGroupTapBody = exports.MotionGroupIdle = exports.ViewLogicalMaxTop = exports.ViewLogicalMaxBottom = exports.ViewLogicalMaxRight = exports.ViewLogicalMaxLeft = exports.ViewLogicalRight = exports.ViewLogicalLeft = exports.ViewMinScale = exports.ViewMaxScale = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
exports.ViewMaxScale = 2.0;
exports.ViewMinScale = 0.8;
exports.ViewLogicalLeft = -1.0;
exports.ViewLogicalRight = 1.0;
exports.ViewLogicalMaxLeft = -2.0;
exports.ViewLogicalMaxRight = 2.0;
exports.ViewLogicalMaxBottom = -2.0;
exports.ViewLogicalMaxTop = 2.0;
exports.MotionGroupIdle = 'Idle';
exports.MotionGroupTapBody = 'TapBody';
exports.MotionGroupTapHead = 'TapHead';
exports.HitAreaNameHead = 'Head';
exports.HitAreaNameBody = 'Body';
exports.PriorityNone = 0;
exports.PriorityIdle = 1;
exports.PriorityNormal = 2;
exports.PriorityForce = 3;
exports.CubismLoggingLevel = live2dcubismframework_1.LogLevel.LogLevel_Verbose;
exports.RenderTargetWidth = 1900;
exports.RenderTargetHeight = 1000;
exports.setCaptureCanvas = function (captureCanvas) {
    this.captureCanvas = captureCanvas;
};
exports.defineModelPath = function (modelPath, modelJsonName) {
    this.modelPath = modelPath;
    this.modelJsonName = modelJsonName;
};
exports.defineDebug = function (debug, debugMouse) {
    this.DebugLogEnable = debug;
    this.DebugTouchLogEnable = debugMouse;
};
exports.setPreLoadMotion = function (preLoadMotion) {
    this.preLoadMotion = preLoadMotion;
};


/***/ }),

/***/ "./src/SDKv4/lappdelegate.ts":
/*!***********************************!*\
  !*** ./src/SDKv4/lappdelegate.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppDelegate = exports.frameBuffer = exports.gl = exports.s_instance = exports.canvas = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var Csm_CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var lappview_1 = __webpack_require__(/*! ./lappview */ "./src/SDKv4/lappview.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/SDKv4/lapppal.ts");
var lapptexturemanager_1 = __webpack_require__(/*! ./lapptexturemanager */ "./src/SDKv4/lapptexturemanager.ts");
var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/SDKv4/lapplive2dmanager.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/SDKv4/lappdefine.ts"));
exports.canvas = null;
exports.s_instance = null;
exports.gl = null;
exports.frameBuffer = null;
var LAppDelegate = (function () {
    function LAppDelegate() {
        this._captured = false;
        this._mouseX = 0.0;
        this._mouseY = 0.0;
        this._isEnd = false;
        this._cubismOption = new live2dcubismframework_1.Option();
        this._view = new lappview_1.LAppView();
        this._textureManager = new lapptexturemanager_1.LAppTextureManager();
    }
    LAppDelegate.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppDelegate();
        }
        return exports.s_instance;
    };
    LAppDelegate.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance.release();
        }
        exports.s_instance = null;
    };
    LAppDelegate.prototype.initialize = function (canvasId) {
        exports.canvas = document.getElementById(canvasId);
        exports.gl = exports.canvas.getContext('webgl') || exports.canvas.getContext('experimental-webgl');
        if (!exports.gl) {
            console.error('Cannot initialize WebGL. This browser does not support.');
            exports.gl = null;
            document.body.innerHTML =
                'This browser does not support the <code>&lt;canvas&gt;</code> element.';
            return false;
        }
        if (!exports.frameBuffer) {
            exports.frameBuffer = exports.gl.getParameter(exports.gl.FRAMEBUFFER_BINDING);
        }
        exports.gl.enable(exports.gl.BLEND);
        exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
        var supportTouch = 'ontouchend' in exports.canvas;
        if (supportTouch) {
            window.ontouchstart = onTouchBegan;
            window.ontouchmove = onTouchMoved;
            window.ontouchend = onTouchEnded;
            window.ontouchcancel = onTouchCancel;
        }
        else {
            exports.canvas.onmousedown = onClickBegan;
            window.onmousemove = onMouseMoved;
            window.onmouseout = onMouseLeave;
            exports.canvas.onmouseup = onClickEnded;
        }
        this._view.initialize();
        this.initializeCubism();
        return true;
    };
    LAppDelegate.prototype.release = function () {
        window.ontouchstart = undefined;
        window.ontouchmove = undefined;
        window.ontouchend = undefined;
        window.ontouchcancel = undefined;
        exports.canvas.onmousedown = undefined;
        window.onmousemove = undefined;
        window.onmouseout = undefined;
        exports.canvas.onmouseup = undefined;
        this._textureManager.release();
        this._textureManager = null;
        this._view.release();
        this._view = null;
        lapplive2dmanager_1.LAppLive2DManager.releaseInstance();
        Csm_CubismFramework.dispose();
    };
    LAppDelegate.prototype.run = function () {
        var _this = this;
        var loop = function () {
            if (exports.s_instance == null) {
                return;
            }
            lapppal_1.LAppPal.updateTime();
            exports.gl.clearColor(0.0, 0.0, 0.0, 0.0);
            exports.gl.enable(exports.gl.DEPTH_TEST);
            exports.gl.depthFunc(exports.gl.LEQUAL);
            exports.gl.clear(exports.gl.COLOR_BUFFER_BIT | exports.gl.DEPTH_BUFFER_BIT);
            exports.gl.clearDepth(1.0);
            exports.gl.enable(exports.gl.BLEND);
            exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
            _this._view.render();
            if (LAppDefine.captureCanvas) {
                LAppDefine.setCaptureCanvas(false);
                exports.canvas.toBlob(window.downloadCap);
            }
            requestAnimationFrame(loop);
        };
        loop();
    };
    LAppDelegate.prototype.createShader = function () {
        var vertexShaderId = exports.gl.createShader(exports.gl.VERTEX_SHADER);
        if (vertexShaderId == null) {
            lapppal_1.LAppPal.printMessage('failed to create vertexShader');
            return null;
        }
        var vertexShader = 'precision mediump float;' +
            'attribute vec3 position;' +
            'attribute vec2 uv;' +
            'varying vec2 vuv;' +
            'void main(void)' +
            '{' +
            '   gl_Position = vec4(position, 1.0);' +
            '   vuv = uv;' +
            '}';
        exports.gl.shaderSource(vertexShaderId, vertexShader);
        exports.gl.compileShader(vertexShaderId);
        var fragmentShaderId = exports.gl.createShader(exports.gl.FRAGMENT_SHADER);
        if (fragmentShaderId == null) {
            lapppal_1.LAppPal.printMessage('failed to create fragmentShader');
            return null;
        }
        var fragmentShader = 'precision mediump float;' +
            'varying vec2 vuv;' +
            'uniform sampler2D texture;' +
            'void main(void)' +
            '{' +
            '   gl_FragColor = texture2D(texture, vuv);' +
            '}';
        exports.gl.shaderSource(fragmentShaderId, fragmentShader);
        exports.gl.compileShader(fragmentShaderId);
        var programId = exports.gl.createProgram();
        exports.gl.attachShader(programId, vertexShaderId);
        exports.gl.attachShader(programId, fragmentShaderId);
        exports.gl.deleteShader(vertexShaderId);
        exports.gl.deleteShader(fragmentShaderId);
        exports.gl.linkProgram(programId);
        exports.gl.useProgram(programId);
        return programId;
    };
    LAppDelegate.prototype.getView = function () {
        return this._view;
    };
    LAppDelegate.prototype.getTextureManager = function () {
        return this._textureManager;
    };
    LAppDelegate.prototype.initializeCubism = function () {
        this._cubismOption.logFunction = lapppal_1.LAppPal.printMessage;
        this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;
        Csm_CubismFramework.startUp(this._cubismOption);
        Csm_CubismFramework.initialize();
        lapplive2dmanager_1.LAppLive2DManager.getInstance();
        lapppal_1.LAppPal.updateTime();
        this._view.initializeSprite();
    };
    return LAppDelegate;
}());
exports.LAppDelegate = LAppDelegate;
function onClickBegan(e) {
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    LAppDelegate.getInstance()._captured = true;
    var posX = e.pageX;
    var posY = e.pageY;
    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);
}
function onMouseMoved(e) {
    if (!LAppDelegate.getInstance()._view ||
        !LAppDelegate.getInstance()._view._programId) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = exports.canvas.getBoundingClientRect();
    var posX = e.clientX - rect.left;
    var posY = e.clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
}
function onMouseLeave(e) {
    if (e.clientY <= 0 || e.clientX <= 0 || (e.clientX >= window.innerWidth - 6 || e.clientY >= window.innerHeight - 6)) {
        LAppDefine.DebugLogEnable && lapppal_1.LAppPal.printMessage('[Live2Dv4] onMouseLeave');
        if (!LAppDelegate.getInstance()._view ||
            !LAppDelegate.getInstance()._view._programId) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.onDrag(0.0, 0.0);
    }
}
function onClickEnded(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view ||
        !LAppDelegate.getInstance()._view._programId) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.clientX - rect.left;
    var posY = e.clientY - rect.top;
    if (LAppDefine.DebugLogEnable) {
        lapppal_1.LAppPal.printMessage("[Live2Dv4] onClickEnded:\n       rect left: " + rect.left.toFixed(2) + " rect top: " + rect.top.toFixed(2) + "\n       clientX: " + e.clientX.toFixed(2) + " clientY: " + e.clientY.toFixed(2));
    }
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}
function onTouchBegan(e) {
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    LAppDelegate.getInstance()._captured = true;
    var rect = exports.canvas.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
}
function onTouchMoved(e) {
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = exports.canvas.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
}
function onTouchEnded(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
    live2DManager.onDrag(0.0, 0.0);
    var rect = exports.canvas.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}
function onTouchCancel(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
    live2DManager.onDrag(0.0, 0.0);
    var rect = exports.canvas.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}


/***/ }),

/***/ "./src/SDKv4/lapplive2dmanager.ts":
/*!****************************************!*\
  !*** ./src/SDKv4/lapplive2dmanager.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppLive2DManager = exports.s_instance = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "./src/SDKv4/Framework/src/math/cubismmatrix44.ts");
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;
var lappmodel_1 = __webpack_require__(/*! ./lappmodel */ "./src/SDKv4/lappmodel.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/SDKv4/lapppal.ts");
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/SDKv4/lappdelegate.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/SDKv4/lappdefine.ts"));
exports.s_instance = null;
var LAppLive2DManager = (function () {
    function LAppLive2DManager() {
        this._finishedMotion = function (self) {
            LAppDefine.DebugLogEnable && lapppal_1.LAppPal.printMessage('[Live2Dv4] Motion Finished');
        };
        this._viewMatrix = new Csm_CubismMatrix44();
        this._models = new Csm_csmVector();
        this.changeScene(LAppDefine.modelPath, LAppDefine.modelJsonName);
    }
    LAppLive2DManager.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppLive2DManager();
        }
        return exports.s_instance;
    };
    LAppLive2DManager.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance = void 0;
        }
        exports.s_instance = null;
    };
    LAppLive2DManager.prototype.getModel = function (no) {
        if (no < this._models.getSize()) {
            return this._models.at(no);
        }
        return null;
    };
    LAppLive2DManager.prototype.releaseAllModel = function () {
        for (var i = 0; i < this._models.getSize(); i++) {
            this._models.at(i).release();
            this._models.set(i, null);
        }
        this._models.clear();
    };
    LAppLive2DManager.prototype.onDrag = function (x, y) {
        for (var i = 0; i < this._models.getSize(); i++) {
            var model = this.getModel(i);
            if (model) {
                model.setDragging(x, y);
            }
        }
    };
    LAppLive2DManager.prototype.onTap = function (x, y) {
        if (LAppDefine.DebugLogEnable) {
            lapppal_1.LAppPal.printMessage("[Live2Dv4] tap point: {x: " + x.toFixed(2) + " y: " + y.toFixed(2) + "}");
        }
        for (var i = 0; i < this._models.getSize(); i++) {
            var hitArea = this._models.at(i).getHitAreaName(x, y);
            if (hitArea) {
                if (LAppDefine.DebugLogEnable)
                    lapppal_1.LAppPal.printMessage("[Live2Dv4] hit area: [" + hitArea + "]");
                this._models
                    .at(i)
                    .startRandomMotion("Tap" + hitArea, LAppDefine.PriorityNormal, this._finishedMotion);
            }
        }
    };
    LAppLive2DManager.prototype.onUpdate = function () {
        var projection = new Csm_CubismMatrix44();
        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
        projection.scale(1.0, width / height);
        if (this._viewMatrix != null) {
            projection.multiplyByMatrix(this._viewMatrix);
        }
        var saveProjection = projection.clone();
        var modelCount = this._models.getSize();
        for (var i = 0; i < modelCount; ++i) {
            var model = this.getModel(i);
            projection = saveProjection.clone();
            model.update();
            model.draw(projection);
        }
    };
    LAppLive2DManager.prototype.changeScene = function (modelPath, modelJsonName) {
        if (LAppDefine.DebugLogEnable) {
            lapppal_1.LAppPal.printMessage("[Live2Dv4] load model: " + modelJsonName);
        }
        this.releaseAllModel();
        this._models.pushBack(new lappmodel_1.LAppModel(LAppDefine.DebugLogEnable));
        this._models.at(0).loadAssets(modelPath, modelJsonName);
    };
    return LAppLive2DManager;
}());
exports.LAppLive2DManager = LAppLive2DManager;


/***/ }),

/***/ "./src/SDKv4/lappmodel.ts":
/*!********************************!*\
  !*** ./src/SDKv4/lappmodel.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppModel = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "./src/SDKv4/Framework/src/live2dcubismframework.ts");
var cubismusermodel_1 = __webpack_require__(/*! @framework/model/cubismusermodel */ "./src/SDKv4/Framework/src/model/cubismusermodel.ts");
var cubismmodelsettingjson_1 = __webpack_require__(/*! @framework/cubismmodelsettingjson */ "./src/SDKv4/Framework/src/cubismmodelsettingjson.ts");
var cubismdefaultparameterid_1 = __webpack_require__(/*! @framework/cubismdefaultparameterid */ "./src/SDKv4/Framework/src/cubismdefaultparameterid.ts");
var acubismmotion_1 = __webpack_require__(/*! @framework/motion/acubismmotion */ "./src/SDKv4/Framework/src/motion/acubismmotion.ts");
var cubismeyeblink_1 = __webpack_require__(/*! @framework/effect/cubismeyeblink */ "./src/SDKv4/Framework/src/effect/cubismeyeblink.ts");
var cubismbreath_1 = __webpack_require__(/*! @framework/effect/cubismbreath */ "./src/SDKv4/Framework/src/effect/cubismbreath.ts");
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var csmmap_1 = __webpack_require__(/*! @framework/type/csmmap */ "./src/SDKv4/Framework/src/type/csmmap.ts");
var cubismmotionqueuemanager_1 = __webpack_require__(/*! @framework/motion/cubismmotionqueuemanager */ "./src/SDKv4/Framework/src/motion/cubismmotionqueuemanager.ts");
var cubismdebug_1 = __webpack_require__(/*! @framework/utils/cubismdebug */ "./src/SDKv4/Framework/src/utils/cubismdebug.ts");
var InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager_1.Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;
var csmMap = csmmap_1.Live2DCubismFramework.csmMap;
var csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var CubismBreath = cubismbreath_1.Live2DCubismFramework.CubismBreath;
var BreathParameterData = cubismbreath_1.Live2DCubismFramework.BreathParameterData;
var CubismEyeBlink = cubismeyeblink_1.Live2DCubismFramework.CubismEyeBlink;
var ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;
var CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;
var CubismUserModel = cubismusermodel_1.Live2DCubismFramework.CubismUserModel;
var CubismModelSettingJson = cubismmodelsettingjson_1.Live2DCubismFramework.CubismModelSettingJson;
var CubismDefaultParameterId = cubismdefaultparameterid_1.Live2DCubismFramework;
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/SDKv4/lapppal.ts");
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/SDKv4/lappdelegate.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/SDKv4/lappdefine.ts"));
__webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js");
var LoadStep;
(function (LoadStep) {
    LoadStep[LoadStep["LoadAssets"] = 0] = "LoadAssets";
    LoadStep[LoadStep["LoadModel"] = 1] = "LoadModel";
    LoadStep[LoadStep["WaitLoadModel"] = 2] = "WaitLoadModel";
    LoadStep[LoadStep["LoadExpression"] = 3] = "LoadExpression";
    LoadStep[LoadStep["WaitLoadExpression"] = 4] = "WaitLoadExpression";
    LoadStep[LoadStep["LoadPhysics"] = 5] = "LoadPhysics";
    LoadStep[LoadStep["WaitLoadPhysics"] = 6] = "WaitLoadPhysics";
    LoadStep[LoadStep["LoadPose"] = 7] = "LoadPose";
    LoadStep[LoadStep["WaitLoadPose"] = 8] = "WaitLoadPose";
    LoadStep[LoadStep["SetupEyeBlink"] = 9] = "SetupEyeBlink";
    LoadStep[LoadStep["SetupBreath"] = 10] = "SetupBreath";
    LoadStep[LoadStep["LoadUserData"] = 11] = "LoadUserData";
    LoadStep[LoadStep["WaitLoadUserData"] = 12] = "WaitLoadUserData";
    LoadStep[LoadStep["SetupEyeBlinkIds"] = 13] = "SetupEyeBlinkIds";
    LoadStep[LoadStep["SetupLipSyncIds"] = 14] = "SetupLipSyncIds";
    LoadStep[LoadStep["SetupLayout"] = 15] = "SetupLayout";
    LoadStep[LoadStep["LoadMotion"] = 16] = "LoadMotion";
    LoadStep[LoadStep["WaitLoadMotion"] = 17] = "WaitLoadMotion";
    LoadStep[LoadStep["CompleteInitialize"] = 18] = "CompleteInitialize";
    LoadStep[LoadStep["CompleteSetupModel"] = 19] = "CompleteSetupModel";
    LoadStep[LoadStep["LoadTexture"] = 20] = "LoadTexture";
    LoadStep[LoadStep["WaitLoadTexture"] = 21] = "WaitLoadTexture";
    LoadStep[LoadStep["CompleteSetup"] = 22] = "CompleteSetup";
})(LoadStep || (LoadStep = {}));
var LAppModel = (function (_super) {
    __extends(LAppModel, _super);
    function LAppModel(debugMode) {
        var _this = _super.call(this, debugMode) || this;
        _this._modelSetting = null;
        _this._modelHomeDir = null;
        _this._userTimeSeconds = 0.0;
        _this._eyeBlinkIds = new csmVector();
        _this._lipSyncIds = new csmVector();
        _this._motions = new csmMap();
        _this._expressions = new csmMap();
        _this._hitArea = new csmVector();
        _this._userArea = new csmVector();
        _this._idParamAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX);
        _this._idParamAngleY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY);
        _this._idParamAngleZ = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ);
        _this._idParamEyeBallX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX);
        _this._idParamEyeBallY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY);
        _this._idParamBodyAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX);
        _this._state = LoadStep.LoadAssets;
        _this._expressionCount = 0;
        _this._textureCount = 0;
        _this._motionCount = 0;
        _this._allMotionCount = 0;
        return _this;
    }
    LAppModel.prototype.loadAssets = function (dir, fileName) {
        var _this = this;
        this._modelHomeDir = dir;
        fetch(this._modelHomeDir + "/" + fileName)
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (arrayBuffer) {
            var setting = new CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);
            _this._state = LoadStep.LoadModel;
            _this.setupModel(setting);
        });
    };
    LAppModel.prototype.setupModel = function (setting) {
        var _this = this;
        this._updating = true;
        this._initialized = false;
        this._modelSetting = setting;
        if (this._modelSetting.getModelFileName() != '') {
            var modelFileName = this._modelSetting.getModelFileName();
            fetch(this._modelHomeDir + "/" + modelFileName)
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                _this.loadModel(arrayBuffer);
                _this._state = LoadStep.LoadExpression;
                loadCubismExpression();
            });
            this._state = LoadStep.WaitLoadModel;
        }
        else {
            lapppal_1.LAppPal.printMessage('Model data does not exist.');
        }
        var loadCubismExpression = function () {
            if (_this._modelSetting.getExpressionCount() > 0) {
                var count_1 = _this._modelSetting.getExpressionCount();
                var _loop_1 = function (i) {
                    var expressionName = _this._modelSetting.getExpressionName(i);
                    var expressionFileName = _this._modelSetting.getExpressionFileName(i);
                    fetch(_this._modelHomeDir + "/" + expressionFileName)
                        .then(function (response) { return response.arrayBuffer(); })
                        .then(function (arrayBuffer) {
                        var motion = _this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);
                        if (_this._expressions.getValue(expressionName) != null) {
                            ACubismMotion.delete(_this._expressions.getValue(expressionName));
                            _this._expressions.setValue(expressionName, null);
                        }
                        _this._expressions.setValue(expressionName, motion);
                        _this._expressionCount++;
                        if (_this._expressionCount >= count_1) {
                            _this._state = LoadStep.LoadPhysics;
                            loadCubismPhysics();
                        }
                    });
                };
                for (var i = 0; i < count_1; i++) {
                    _loop_1(i);
                }
                _this._state = LoadStep.WaitLoadExpression;
            }
            else {
                _this._state = LoadStep.LoadPhysics;
                loadCubismPhysics();
            }
        };
        var loadCubismPhysics = function () {
            if (_this._modelSetting.getPhysicsFileName() != '') {
                var physicsFileName = _this._modelSetting.getPhysicsFileName();
                fetch(_this._modelHomeDir + "/" + physicsFileName)
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.LoadPose;
                    loadCubismPose();
                });
                _this._state = LoadStep.WaitLoadPhysics;
            }
            else {
                _this._state = LoadStep.LoadPose;
                loadCubismPose();
            }
        };
        var loadCubismPose = function () {
            if (_this._modelSetting.getPoseFileName() != '') {
                var poseFileName = _this._modelSetting.getPoseFileName();
                fetch(_this._modelHomeDir + "/" + poseFileName)
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadPose(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.SetupEyeBlink;
                    setupEyeBlink();
                });
                _this._state = LoadStep.WaitLoadPose;
            }
            else {
                _this._state = LoadStep.SetupEyeBlink;
                setupEyeBlink();
            }
        };
        var setupEyeBlink = function () {
            if (_this._modelSetting.getEyeBlinkParameterCount() > 0) {
                _this._eyeBlink = CubismEyeBlink.create(_this._modelSetting);
                _this._state = LoadStep.SetupBreath;
            }
            setupBreath();
        };
        var setupBreath = function () {
            _this._breath = CubismBreath.create();
            var breathParameters = new csmVector();
            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));
            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));
            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));
            breathParameters.pushBack(new BreathParameterData(_this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));
            breathParameters.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath), 0.0, 0.5, 3.2345, 0.5));
            _this._breath.setParameters(breathParameters);
            _this._state = LoadStep.LoadUserData;
            loadUserData();
        };
        var loadUserData = function () {
            if (_this._modelSetting.getUserDataFile() != '') {
                var userDataFile = _this._modelSetting.getUserDataFile();
                fetch(_this._modelHomeDir + "/" + userDataFile)
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadUserData(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.SetupEyeBlinkIds;
                    setupEyeBlinkIds();
                });
                _this._state = LoadStep.WaitLoadUserData;
            }
            else {
                _this._state = LoadStep.SetupEyeBlinkIds;
                setupEyeBlinkIds();
            }
        };
        var setupEyeBlinkIds = function () {
            var eyeBlinkIdCount = _this._modelSetting.getEyeBlinkParameterCount();
            for (var i = 0; i < eyeBlinkIdCount; ++i) {
                _this._eyeBlinkIds.pushBack(_this._modelSetting.getEyeBlinkParameterId(i));
            }
            _this._state = LoadStep.SetupLipSyncIds;
            setupLipSyncIds();
        };
        var setupLipSyncIds = function () {
            var lipSyncIdCount = _this._modelSetting.getLipSyncParameterCount();
            for (var i = 0; i < lipSyncIdCount; ++i) {
                _this._lipSyncIds.pushBack(_this._modelSetting.getLipSyncParameterId(i));
            }
            _this._state = LoadStep.SetupLayout;
            setupLayout();
        };
        var setupLayout = function () {
            var layout = new csmMap();
            _this._modelSetting.getLayoutMap(layout);
            _this._modelMatrix.setupFromLayout(layout);
            _this._state = LoadStep.LoadMotion;
            loadCubismMotion();
        };
        var loadCubismMotion = function () {
            _this._state = LoadStep.WaitLoadMotion;
            _this._model.saveParameters();
            _this._allMotionCount = 0;
            _this._motionCount = 0;
            var group = [];
            var motionGroupCount = _this._modelSetting.getMotionGroupCount();
            for (var i = 0; i < motionGroupCount; i++) {
                group[i] = _this._modelSetting.getMotionGroupName(i);
                _this._allMotionCount += _this._modelSetting.getMotionCount(group[i]);
            }
            if (LAppDefine.preLoadMotion) {
                LAppDefine.DebugLogEnable && lapppal_1.LAppPal.printMessage('perload motion');
                for (var i = 0; i < motionGroupCount; i++) {
                    _this.preLoadMotionGroup(group[i]);
                }
            }
            else {
                _this._state = LoadStep.LoadTexture;
                _this._motionManager.stopAllMotions();
                _this._updating = false;
                _this._initialized = true;
                _this.createRenderer();
                _this.setupTextures();
                _this.getRenderer().startUp(lappdelegate_1.gl);
                _this.startRandomMotion("Start", LAppDefine.PriorityNormal, function () {
                    LAppDefine.DebugLogEnable && lapppal_1.LAppPal.printMessage('[Live2Dv4] Start Motion Finished');
                });
            }
        };
    };
    LAppModel.prototype.setupTextures = function () {
        var _this = this;
        var usePremultiply = true;
        if (this._state == LoadStep.LoadTexture) {
            var textureCount_1 = this._modelSetting.getTextureCount();
            var _loop_2 = function (modelTextureNumber) {
                if (this_1._modelSetting.getTextureFileName(modelTextureNumber) == '') {
                    console.log('getTextureFileName null');
                    return "continue";
                }
                var texturePath = this_1._modelSetting.getTextureFileName(modelTextureNumber);
                texturePath = this_1._modelHomeDir + "/" + texturePath;
                var onLoad = function (textureInfo) {
                    _this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);
                    _this._textureCount++;
                    if (_this._textureCount >= textureCount_1) {
                        _this._state = LoadStep.CompleteSetup;
                    }
                };
                lappdelegate_1.LAppDelegate.getInstance()
                    .getTextureManager()
                    .createTextureFromPngFile(texturePath, usePremultiply, onLoad);
                this_1.getRenderer().setIsPremultipliedAlpha(usePremultiply);
            };
            var this_1 = this;
            for (var modelTextureNumber = 0; modelTextureNumber < textureCount_1; modelTextureNumber++) {
                _loop_2(modelTextureNumber);
            }
            this._state = LoadStep.WaitLoadTexture;
        }
    };
    LAppModel.prototype.reloadRenderer = function () {
        this.deleteRenderer();
        this.createRenderer();
        this.setupTextures();
    };
    LAppModel.prototype.update = function () {
        if (this._state != LoadStep.CompleteSetup)
            return;
        var deltaTimeSeconds = lapppal_1.LAppPal.getDeltaTime();
        this._userTimeSeconds += deltaTimeSeconds;
        this._dragManager.update(deltaTimeSeconds);
        this._dragX = this._dragManager.getX();
        this._dragY = this._dragManager.getY();
        var motionUpdated = false;
        this._model.loadParameters();
        if (this._motionManager.isFinished()) {
            this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);
        }
        else {
            motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds);
        }
        this._model.saveParameters();
        if (!motionUpdated) {
            if (this._eyeBlink != null) {
                this._eyeBlink.updateParameters(this._model, deltaTimeSeconds);
            }
        }
        if (this._expressionManager != null) {
            this._expressionManager.updateMotion(this._model, deltaTimeSeconds);
        }
        this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30);
        this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);
        this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);
        this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10);
        this._model.addParameterValueById(this._idParamEyeBallX, this._dragX);
        this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);
        if (this._breath != null) {
            this._breath.updateParameters(this._model, deltaTimeSeconds);
        }
        if (this._physics != null) {
            this._physics.evaluate(this._model, deltaTimeSeconds);
        }
        if (this._lipsync) {
            var value = 0;
            for (var i = 0; i < this._lipSyncIds.getSize(); ++i) {
                this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);
            }
        }
        if (this._pose != null) {
            this._pose.updateParameters(this._model, deltaTimeSeconds);
        }
        this._model.update();
    };
    LAppModel.prototype.startMotion = function (group, no, priority, onFinishedMotionHandler) {
        var _this = this;
        if (priority == LAppDefine.PriorityForce) {
            this._motionManager.setReservePriority(priority);
        }
        else if (!this._motionManager.reserveMotion(priority)) {
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage('[Live2Dv4] FAIL start motion.');
            }
            return InvalidMotionQueueEntryHandleValue;
        }
        var motionFileName = this._modelSetting.getMotionFileName(group, no);
        var motionSoundFileName = this._modelSetting.getMotionSoundFileName(group, no);
        var motionSoundDelay = this._modelSetting.getMotionSoundDelay(group, no);
        this.playMotionSound(this._modelHomeDir + "/" + motionSoundFileName, motionSoundDelay);
        var name = group + "_" + no;
        var motion = this._motions.getValue(name);
        var autoDelete = false;
        if (motion == null) {
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[Live2Dv4] load motion: " + motionFileName + " => [" + name + "]");
            }
            fetch(this._modelHomeDir + "/" + motionFileName)
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                motion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);
                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, no);
                if (fadeTime >= 0.0) {
                    motion.setFadeInTime(fadeTime);
                }
                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, no);
                if (fadeTime >= 0.0) {
                    motion.setFadeOutTime(fadeTime);
                }
                motion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                autoDelete = false;
                _this._motions.setValue(name, motion);
                return _this._motionManager.startMotionPriority(motion, autoDelete, priority);
            });
        }
        else {
            motion.setFinishedMotionHandler(onFinishedMotionHandler);
        }
        if (this._debugMode) {
            lapppal_1.LAppPal.printMessage("[Live2Dv4] Motion Start: " + group + "_" + no);
        }
        return this._motionManager.startMotionPriority(motion, autoDelete, priority);
    };
    LAppModel.prototype.playMotionSound = function (soundFileName, soundDelay) {
        var _this = this;
        if (/(\.mp3|\.aac|\.m4a|\.opus|\.ogg|\.caf|\.wav|\.webm|\.flac|\.mp4)$/i.test(soundFileName)) {
            var audioMotion_1 = new Audio();
            audioMotion_1.src = soundFileName;
            audioMotion_1.autoplay = true;
            setTimeout(function () {
                audioMotion_1
                    .play()
                    .then(function () { return _this._debugMode && console.log("[Live2Dv4] play sound: " + soundFileName + " delay: " + soundDelay); })
                    .catch(function (e) { return _this._debugMode && console.error("[Live2Dv4] FAILED play sound: " + soundFileName + " " + e); });
            }, soundDelay);
        }
    };
    LAppModel.prototype.startRandomMotion = function (group, priority, onFinishedMotionHandler) {
        if (this._modelSetting.getMotionCount(group) == 0) {
            return InvalidMotionQueueEntryHandleValue;
        }
        var no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));
        return this.startMotion(group, no, priority, onFinishedMotionHandler);
    };
    LAppModel.prototype.setExpression = function (expressionId) {
        var motion = this._expressions.getValue(expressionId);
        if (this._debugMode) {
            lapppal_1.LAppPal.printMessage("[Live2Dv4] expression: [" + expressionId + "]");
        }
        if (motion != null) {
            this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);
        }
        else {
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[Live2Dv4] expression[" + expressionId + "] is null");
            }
        }
    };
    LAppModel.prototype.setRandomExpression = function () {
        if (this._expressions.getSize() == 0) {
            return;
        }
        var no = Math.floor(Math.random() * this._expressions.getSize());
        for (var i = 0; i < this._expressions.getSize(); i++) {
            if (i == no) {
                var name_1 = this._expressions._keyValues[i].first;
                this.setExpression(name_1);
                return;
            }
        }
    };
    LAppModel.prototype.motionEventFired = function (eventValue) {
        cubismdebug_1.CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);
    };
    LAppModel.prototype.hitTest = function (hitArenaName, x, y) {
        if (this._opacity < 1) {
            return false;
        }
        var count = this._modelSetting.getHitAreasCount();
        for (var i = 0; i < count; i++) {
            if (this._modelSetting.getHitAreaName(i) == hitArenaName) {
                var drawId = this._modelSetting.getHitAreaId(i);
                return this.isHit(drawId, x, y);
            }
        }
        return false;
    };
    LAppModel.prototype.getHitAreaName = function (x, y) {
        if (this._opacity < 1) {
            return undefined;
        }
        var count = this._modelSetting.getHitAreasCount();
        for (var i = 0; i < count; i++) {
            var drawId = this._modelSetting.getHitAreaId(i);
            if (this.isHit(drawId, x, y)) {
                return this._modelSetting.getHitAreaName(i);
            }
        }
        return undefined;
    };
    LAppModel.prototype.preLoadMotionGroup = function (group) {
        var _this = this;
        var _loop_3 = function (i) {
            var motionFileName = this_2._modelSetting.getMotionFileName(group, i);
            var name_2 = group + "_" + i;
            if (this_2._debugMode) {
                lapppal_1.LAppPal.printMessage("[Live2Dv4] load motion: " + motionFileName + " => [" + name_2 + "]");
            }
            fetch(this_2._modelHomeDir + "/" + motionFileName)
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                var tmpMotion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name_2);
                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, i);
                if (fadeTime >= 0.0) {
                    tmpMotion.setFadeInTime(fadeTime);
                }
                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, i);
                if (fadeTime >= 0.0) {
                    tmpMotion.setFadeOutTime(fadeTime);
                }
                tmpMotion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                if (_this._motions.getValue(name_2) != null) {
                    ACubismMotion.delete(_this._motions.getValue(name_2));
                }
                _this._motions.setValue(name_2, tmpMotion);
                _this._motionCount++;
                if (_this._motionCount >= _this._allMotionCount) {
                    _this._state = LoadStep.LoadTexture;
                    _this._motionManager.stopAllMotions();
                    _this._updating = false;
                    _this._initialized = true;
                    _this.createRenderer();
                    _this.setupTextures();
                    _this.getRenderer().startUp(lappdelegate_1.gl);
                    _this.startRandomMotion("Start", LAppDefine.PriorityNormal, function () {
                        LAppDefine.DebugLogEnable && lapppal_1.LAppPal.printMessage('[Live2Dv4] Start Motion Finished');
                    });
                }
            });
        };
        var this_2 = this;
        for (var i = 0; i < this._modelSetting.getMotionCount(group); i++) {
            _loop_3(i);
        }
    };
    LAppModel.prototype.releaseMotions = function () {
        this._motions.clear();
    };
    LAppModel.prototype.releaseExpressions = function () {
        this._expressions.clear();
    };
    LAppModel.prototype.doDraw = function () {
        if (this._model == null)
            return;
        var viewport = [0, 0, lappdelegate_1.canvas.width, lappdelegate_1.canvas.height];
        this.getRenderer().setRenderState(lappdelegate_1.frameBuffer, viewport);
        this.getRenderer().drawModel();
    };
    LAppModel.prototype.draw = function (matrix) {
        if (this._model == null) {
            return;
        }
        if (this._state == LoadStep.CompleteSetup) {
            matrix.multiplyByMatrix(this._modelMatrix);
            this.getRenderer().setMvpMatrix(matrix);
            this.doDraw();
        }
    };
    return LAppModel;
}(CubismUserModel));
exports.LAppModel = LAppModel;


/***/ }),

/***/ "./src/SDKv4/lapppal.ts":
/*!******************************!*\
  !*** ./src/SDKv4/lapppal.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppPal = void 0;
var LAppPal = (function () {
    function LAppPal() {
    }
    LAppPal.loadFileAsBytes = function (filePath, callback) {
        fetch(filePath)
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (arrayBuffer) { return callback(arrayBuffer, arrayBuffer.byteLength); });
    };
    LAppPal.getDeltaTime = function () {
        return this.s_deltaTime;
    };
    LAppPal.updateTime = function () {
        this.s_currentFrame = Date.now();
        this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;
        this.s_lastFrame = this.s_currentFrame;
    };
    LAppPal.printMessage = function (message) {
        console.log(message.indexOf('[Live2Dv4]') > -1 ? message : "[Live2Dv4] " + message);
    };
    LAppPal.lastUpdate = Date.now();
    LAppPal.s_currentFrame = 0.0;
    LAppPal.s_lastFrame = 0.0;
    LAppPal.s_deltaTime = 0.0;
    return LAppPal;
}());
exports.LAppPal = LAppPal;


/***/ }),

/***/ "./src/SDKv4/lapptexturemanager.ts":
/*!*****************************************!*\
  !*** ./src/SDKv4/lapptexturemanager.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextureInfo = exports.LAppTextureManager = void 0;
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "./src/SDKv4/Framework/src/type/csmvector.ts");
var Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/SDKv4/lappdelegate.ts");
var LAppTextureManager = (function () {
    function LAppTextureManager() {
        this._textures = new Csm_csmVector();
    }
    LAppTextureManager.prototype.release = function () {
        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
            lappdelegate_1.gl.deleteTexture(ite.ptr().id);
        }
        this._textures = null;
    };
    LAppTextureManager.prototype.createTextureFromPngFile = function (fileName, usePremultiply, callback) {
        var _this = this;
        var _loop_1 = function (ite) {
            if (ite.ptr().fileName == fileName &&
                ite.ptr().usePremultply == usePremultiply) {
                if (window.webpReady === true)
                    fileName = fileName.concat(".webp");
                var triedOrigin_1 = false;
                ite.ptr().img = new Image();
                ite.ptr().img.crossOrigin = "anonymous";
                ite.ptr().img.onload = function () { return callback(ite.ptr()); };
                ite.ptr().img.src = fileName;
                ite.ptr().img.onerror = function () {
                    if (window.webpReady === true && triedOrigin_1 === false) {
                        console.error("Failed to load WebP image: " + ite.ptr().img.src + " Load origin file instead.");
                        triedOrigin_1 = true;
                        ite.ptr().img.src = fileName.replace(/\.webp$/, "");
                    }
                    else {
                        console.error("Failed to load image: " + ite.ptr().img.src);
                    }
                };
                return { value: void 0 };
            }
        };
        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
            var state_1 = _loop_1(ite);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        if (window.webpReady === true)
            fileName = fileName.concat(".webp");
        var triedOrigin = false;
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.onload = function () {
            var tex = lappdelegate_1.gl.createTexture();
            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, tex);
            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MIN_FILTER, lappdelegate_1.gl.LINEAR_MIPMAP_LINEAR);
            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MAG_FILTER, lappdelegate_1.gl.LINEAR);
            if (usePremultiply) {
                lappdelegate_1.gl.pixelStorei(lappdelegate_1.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
            }
            lappdelegate_1.gl.texImage2D(lappdelegate_1.gl.TEXTURE_2D, 0, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.UNSIGNED_BYTE, img);
            lappdelegate_1.gl.generateMipmap(lappdelegate_1.gl.TEXTURE_2D);
            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, null);
            var textureInfo = new TextureInfo();
            if (textureInfo != null) {
                textureInfo.fileName = fileName;
                textureInfo.width = img.width;
                textureInfo.height = img.height;
                textureInfo.id = tex;
                textureInfo.img = img;
                textureInfo.usePremultply = usePremultiply;
                _this._textures.pushBack(textureInfo);
            }
            callback(textureInfo);
        };
        img.onerror = function () {
            if (window.webpReady === true && triedOrigin === false) {
                console.error("Failed to load WebP image: " + img.src + " Load origin file instead.");
                triedOrigin = true;
                img.src = fileName.replace(/\.webp$/, "");
            }
            else {
                console.error("Failed to load image: " + img.src);
            }
        };
        img.src = fileName;
    };
    LAppTextureManager.prototype.releaseTextures = function () {
        for (var i = 0; i < this._textures.getSize(); i++) {
            this._textures.set(i, null);
        }
        this._textures.clear();
    };
    LAppTextureManager.prototype.releaseTextureByTexture = function (texture) {
        for (var i = 0; i < this._textures.getSize(); i++) {
            if (this._textures.at(i).id != texture) {
                continue;
            }
            this._textures.set(i, null);
            this._textures.remove(i);
            break;
        }
    };
    LAppTextureManager.prototype.releaseTextureByFilePath = function (fileName) {
        for (var i = 0; i < this._textures.getSize(); i++) {
            if (this._textures.at(i).fileName == fileName) {
                this._textures.set(i, null);
                this._textures.remove(i);
                break;
            }
        }
    };
    return LAppTextureManager;
}());
exports.LAppTextureManager = LAppTextureManager;
var TextureInfo = (function () {
    function TextureInfo() {
        this.id = null;
        this.width = 0;
        this.height = 0;
    }
    return TextureInfo;
}());
exports.TextureInfo = TextureInfo;


/***/ }),

/***/ "./src/SDKv4/lappview.ts":
/*!*******************************!*\
  !*** ./src/SDKv4/lappview.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppView = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "./src/SDKv4/Framework/src/math/cubismmatrix44.ts");
var cubismviewmatrix_1 = __webpack_require__(/*! @framework/math/cubismviewmatrix */ "./src/SDKv4/Framework/src/math/cubismviewmatrix.ts");
var Csm_CubismViewMatrix = cubismviewmatrix_1.Live2DCubismFramework.CubismViewMatrix;
var Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;
var touchmanager_1 = __webpack_require__(/*! ./touchmanager */ "./src/SDKv4/touchmanager.ts");
var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/SDKv4/lapplive2dmanager.ts");
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/SDKv4/lappdelegate.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/SDKv4/lapppal.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/SDKv4/lappdefine.ts"));
var LAppView = (function () {
    function LAppView() {
        this._programId = null;
        this._touchManager = new touchmanager_1.TouchManager();
        this._deviceToScreen = new Csm_CubismMatrix44();
        this._viewMatrix = new Csm_CubismViewMatrix();
    }
    LAppView.prototype.initialize = function () {
        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
        var ratio = height / width;
        var left = LAppDefine.ViewLogicalLeft;
        var right = LAppDefine.ViewLogicalRight;
        var bottom = -ratio;
        var top = ratio;
        this._viewMatrix.setScreenRect(left, right, bottom, top);
        var screenW = Math.abs(left - right);
        this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);
        this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);
        this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale);
        this._viewMatrix.setMinScale(LAppDefine.ViewMinScale);
        this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);
    };
    LAppView.prototype.release = function () {
        this._viewMatrix = null;
        this._touchManager = null;
        this._deviceToScreen = null;
        lappdelegate_1.gl.deleteProgram(this._programId);
        this._programId = null;
    };
    LAppView.prototype.render = function () {
        lappdelegate_1.gl.useProgram(this._programId);
        lappdelegate_1.gl.flush();
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.onUpdate();
    };
    LAppView.prototype.initializeSprite = function () {
        var width = lappdelegate_1.canvas.width;
        var height = lappdelegate_1.canvas.height;
        var textureManager = lappdelegate_1.LAppDelegate.getInstance().getTextureManager();
        if (this._programId == null) {
            this._programId = lappdelegate_1.LAppDelegate.getInstance().createShader();
        }
    };
    LAppView.prototype.onTouchesBegan = function (pointX, pointY) {
        this._touchManager.touchesBegan(pointX, pointY);
    };
    LAppView.prototype.onTouchesMoved = function (pointX, pointY) {
        var viewX = this.transformViewX(pointX);
        var viewY = this.transformViewY(pointY);
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        LAppDefine.DebugLogEnable &&
            LAppDefine.DebugTouchLogEnable &&
            console.log("[Live2Dv4] pointX: " + pointX + " pointY: " + pointY + "\n          viewX: " + viewX + " viewY: " + viewY);
        live2DManager.onDrag(viewX, viewY);
    };
    LAppView.prototype.onTouchesEnded = function (pointX, pointY) {
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        {
            if (LAppDefine.DebugLogEnable) {
                lapppal_1.LAppPal.printMessage("[Live2Dv4] touchesEnded x: " + pointX + " y: " + pointY);
            }
            var x = this._deviceToScreen.transformX(pointX);
            var y = this._deviceToScreen.transformY(pointY);
            live2DManager.onTap(x, y);
        }
    };
    LAppView.prototype.transformViewX = function (deviceX) {
        var screenX = this._deviceToScreen.transformX(deviceX);
        return this._viewMatrix.invertTransformX(screenX);
    };
    LAppView.prototype.transformViewY = function (deviceY) {
        var screenY = this._deviceToScreen.transformY(deviceY);
        return this._viewMatrix.invertTransformY(screenY);
    };
    LAppView.prototype.transformScreenX = function (deviceX) {
        return this._deviceToScreen.transformX(deviceX);
    };
    LAppView.prototype.transformScreenY = function (deviceY) {
        return this._deviceToScreen.transformY(deviceY);
    };
    return LAppView;
}());
exports.LAppView = LAppView;


/***/ }),

/***/ "./src/SDKv4/main.ts":
/*!***************************!*\
  !*** ./src/SDKv4/main.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/SDKv4/lappdelegate.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/SDKv4/lappdefine.ts"));
var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/SDKv4/lapplive2dmanager.ts");
Promise.resolve().then(function () { return __importStar(__webpack_require__(/*! !!raw-loader!./Core/live2dcubismcore.min.js */ "./node_modules/raw-loader/dist/cjs.js!./src/SDKv4/Core/live2dcubismcore.min.js")); }).then(function (rawModule) { return eval.call(null, rawModule.default); });
window.live2dv4 = window.live2dv4 || {};
window.live2dv4.load = function (canvasId, modelPath, modelJsonName) {
    LAppDefine.defineDebug(window.live2dv4.debug ? true : false, window.live2dv4.debugMousemove ? true : false);
    LAppDefine.defineModelPath(modelPath, modelJsonName);
    if (lappdelegate_1.LAppDelegate.getInstance().initialize(canvasId) == false) {
        return;
    }
    lappdelegate_1.LAppDelegate.getInstance().run();
};
window.live2dv4.change = function (modelPath, modelJsonName) {
    lapplive2dmanager_1.LAppLive2DManager.getInstance().changeScene(modelPath, modelJsonName);
};
window.live2dv4.release = function () {
    lappdelegate_1.LAppDelegate.releaseInstance();
};
window.live2dv4.CaptureCanvas = function () {
    LAppDefine.setCaptureCanvas(true);
};
window.live2dv4.setPreLoadMotion = function (preLoadMotion) {
    LAppDefine.setPreLoadMotion(preLoadMotion);
};
window.onbeforeunload = function () { return lappdelegate_1.LAppDelegate.releaseInstance(); };


/***/ }),

/***/ "./src/SDKv4/touchmanager.ts":
/*!***********************************!*\
  !*** ./src/SDKv4/touchmanager.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TouchManager = void 0;
var TouchManager = (function () {
    function TouchManager() {
        this._startX = 0.0;
        this._startY = 0.0;
        this._lastX = 0.0;
        this._lastY = 0.0;
        this._lastX1 = 0.0;
        this._lastY1 = 0.0;
        this._lastX2 = 0.0;
        this._lastY2 = 0.0;
        this._lastTouchDistance = 0.0;
        this._deltaX = 0.0;
        this._deltaY = 0.0;
        this._scale = 1.0;
        this._touchSingle = false;
        this._flipAvailable = false;
    }
    TouchManager.prototype.getCenterX = function () {
        return this._lastX;
    };
    TouchManager.prototype.getCenterY = function () {
        return this._lastY;
    };
    TouchManager.prototype.getDeltaX = function () {
        return this._deltaX;
    };
    TouchManager.prototype.getDeltaY = function () {
        return this._deltaY;
    };
    TouchManager.prototype.getStartX = function () {
        return this._startX;
    };
    TouchManager.prototype.getStartY = function () {
        return this._startY;
    };
    TouchManager.prototype.getScale = function () {
        return this._scale;
    };
    TouchManager.prototype.getX = function () {
        return this._lastX;
    };
    TouchManager.prototype.getY = function () {
        return this._lastY;
    };
    TouchManager.prototype.getX1 = function () {
        return this._lastX1;
    };
    TouchManager.prototype.getY1 = function () {
        return this._lastY1;
    };
    TouchManager.prototype.getX2 = function () {
        return this._lastX2;
    };
    TouchManager.prototype.getY2 = function () {
        return this._lastY2;
    };
    TouchManager.prototype.isSingleTouch = function () {
        return this._touchSingle;
    };
    TouchManager.prototype.isFlickAvailable = function () {
        return this._flipAvailable;
    };
    TouchManager.prototype.disableFlick = function () {
        this._flipAvailable = false;
    };
    TouchManager.prototype.touchesBegan = function (deviceX, deviceY) {
        this._startX = deviceX;
        this._startY = deviceY;
        this._lastTouchDistance = -1.0;
        this._flipAvailable = true;
        this._touchSingle = true;
    };
    TouchManager.prototype.touchesMoved = function (deviceX, deviceY) {
        this._lastX = deviceX;
        this._lastY = deviceY;
        this._lastTouchDistance = -1.0;
        this._touchSingle = true;
    };
    TouchManager.prototype.getFlickDistance = function () {
        return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);
    };
    TouchManager.prototype.calculateDistance = function (x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    };
    TouchManager.prototype.calculateMovingAmount = function (v1, v2) {
        if (v1 > 0.0 != v2 > 0.0) {
            return 0.0;
        }
        var sign = v1 > 0.0 ? 1.0 : -1.0;
        var absoluteValue1 = Math.abs(v1);
        var absoluteValue2 = Math.abs(v2);
        return (sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2));
    };
    return TouchManager;
}());
exports.TouchManager = TouchManager;


/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Headers": () => (/* binding */ Headers),
/* harmony export */   "Request": () => (/* binding */ Request),
/* harmony export */   "Response": () => (/* binding */ Response),
/* harmony export */   "DOMException": () => (/* binding */ DOMException),
/* harmony export */   "fetch": () => (/* binding */ fetch)
/* harmony export */ });
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof self !== 'undefined' && self) ||
  (typeof global !== 'undefined' && global)

var support = {
  searchParams: 'URLSearchParams' in global,
  iterable: 'Symbol' in global && 'iterator' in Symbol,
  blob:
    'FileReader' in global &&
    'Blob' in global &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in global,
  arrayBuffer: 'ArrayBuffer' in global
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsText(blob)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    this.bodyUsed = this.bodyUsed
    this._bodyInit = body
    if (!body) {
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this)
        if (isConsumed) {
          return isConsumed
        }
        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }

  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)

  if (this.method === 'GET' || this.method === 'HEAD') {
    if (options.cache === 'no-store' || options.cache === 'no-cache') {
      // Search for a '_' parameter in the query string
      var reParamSearch = /([?&])_=[^&]*/
      if (reParamSearch.test(this.url)) {
        // If it already exists then set the value with the current time
        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())
      } else {
        // Otherwise add a new '_' parameter to the end with the current time
        var reQueryString = /\?/
        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()
      }
    }
  }
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
    var parts = line.split(':')
    var key = parts.shift().trim()
    if (key) {
      var value = parts.join(':').trim()
      headers.append(key, value)
    }
  })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = 'statusText' in options ? options.statusText : ''
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''})
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = global.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      setTimeout(function() {
        resolve(new Response(body, options))
      }, 0)
    }

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }, 0)
    }

    function fixUrl(url) {
      try {
        return url === '' && global.location.href ? global.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob'
      } else if (
        support.arrayBuffer &&
        request.headers.get('Content-Type') &&
        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
      ) {
        xhr.responseType = 'arraybuffer'
      }
    }

    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))
      })
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })
    }

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!global.fetch) {
  global.fetch = fetch
  global.Headers = Headers
  global.Request = Request
  global.Response = Response
}


/***/ }),

/***/ "./src/SDKv2/LAppDefineV2.js":
/*!***********************************!*\
  !*** ./src/SDKv2/LAppDefineV2.js ***!
  \***********************************/
/***/ ((module) => {

var LAppDefineV2 = {
    
    
    DEBUG_LOG : false,
    DEBUG_MOUSE_LOG : false,
    DEBUG_DRAW_HIT_AREA : false,
    DEBUG_DRAW_ALPHA_MODEL : false, 

    VIEW_MAX_SCALE : 2,
    VIEW_MIN_SCALE : 0.8,

    VIEW_LOGICAL_LEFT : -1,
    VIEW_LOGICAL_RIGHT : 1,

    VIEW_LOGICAL_MAX_LEFT : -2,
    VIEW_LOGICAL_MAX_RIGHT : 2,
    VIEW_LOGICAL_MAX_BOTTOM : -2,
    VIEW_LOGICAL_MAX_TOP : 2,

    PRIORITY_NONE : 0,
    PRIORITY_IDLE : 1,
    PRIORITY_SLEEPY : 2,
    PRIORITY_NORMAL : 3,
    PRIORITY_FORCE : 4,

    MOTION_GROUP_IDLE : "idle", 
    MOTION_GROUP_SLEEPY : "sleepy",
    MOTION_GROUP_TAP_FACE : "tap_face",
    MOTION_GROUP_FLICK_HEAD : "flick_head",
    MOTION_GROUP_TAP_BODY : "tap_body",
    MOTION_GROUP_TAP_BREAST : "tap_breast",
    MOTION_GROUP_TAP_BELLY : "tap_belly",
    MOTION_GROUP_TAP_LEG : "tap_leg",
    MOTION_GROUP_PINCH_IN : "pinch_in",
    MOTION_GROUP_PINCH_OUT : "pinch_out", 
    MOTION_GROUP_SHAKE : "shake", 

    HIT_AREA_HEAD : "head",
    HIT_AREA_BODY : "body",
    HIT_AREA_FACE : "face",
    HIT_AREA_BREAST : "breast",
    HIT_AREA_BELLY : "belly",
    HIT_AREA_LEG : "leg",

    HIT_AREA_CUSTOM_HEAD : "head",
    HIT_AREA_CUSTOM_BODY : "body",
};

module.exports = LAppDefineV2;

/***/ }),

/***/ "./src/SDKv2/LAppLive2DManagerV2.js":
/*!******************************************!*\
  !*** ./src/SDKv2/LAppLive2DManagerV2.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LAppLive2DManagerV2)
/* harmony export */ });
/* harmony import */ var _lib_Live2DFramework_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/Live2DFramework.js */ "./src/SDKv2/lib/Live2DFramework.js");
/* harmony import */ var _lib_Live2DFramework_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_Live2DFramework_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PlatformManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PlatformManager */ "./src/SDKv2/PlatformManager.js");
/* harmony import */ var _LAppModelV2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LAppModelV2 */ "./src/SDKv2/LAppModelV2.js");
/* harmony import */ var _LAppDefineV2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LAppDefineV2 */ "./src/SDKv2/LAppDefineV2.js");
/* harmony import */ var _LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3__);





function LAppLive2DManagerV2() {
    // console.log("--> LAppLive2DManager()");


    this.models = [];


    this.count = -1;
    this.reloadFlg = false;

    Live2D.init();
    _lib_Live2DFramework_js__WEBPACK_IMPORTED_MODULE_0__.Live2DFramework.setPlatformManager(new _PlatformManager__WEBPACK_IMPORTED_MODULE_1__.default);

}

LAppLive2DManagerV2.prototype.createModel = function () {


    var model = new _LAppModelV2__WEBPACK_IMPORTED_MODULE_2__.default();
    this.models.push(model);

    return model;
}


LAppLive2DManagerV2.prototype.changeModel = function (gl, modelurl) {
    // console.log("--> LAppLive2DManager.update(gl)");

    if (this.reloadFlg) {

        this.reloadFlg = false;

        var thisRef = this;
        this.releaseModel(0, gl);
        this.createModel();
        this.models[0].load(gl, modelurl);
    }
};


LAppLive2DManagerV2.prototype.getModel = function (no) {
    // console.log("--> LAppLive2DManager.getModel(" + no + ")");

    if (no >= this.models.length) return null;

    return this.models[no];
};


LAppLive2DManagerV2.prototype.releaseModel = function (no, gl) {
    // console.log("--> LAppLive2DManager.releaseModel(" + no + ")");

    if (this.models.length <= no) return;

    this.models[no].release(gl);

    delete this.models[no];
    this.models.splice(no, 1);
};


LAppLive2DManagerV2.prototype.numModels = function () {
    return this.models.length;
};


LAppLive2DManagerV2.prototype.setDrag = function (x, y) {
    for (var i = 0; i < this.models.length; i++) {
        this.models[i].setDrag(x, y);
    }
}


LAppLive2DManagerV2.prototype.maxScaleEvent = function () {
    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG))
        console.log("[Live2Dv2] Max scale event.");
    for (var i = 0; i < this.models.length; i++) {
        this.models[i].startRandomMotion((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_PINCH_IN),
            (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().PRIORITY_NORMAL));
    }
}


LAppLive2DManagerV2.prototype.minScaleEvent = function () {
    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG))
        console.log("[Live2Dv2] Min scale event.");
    for (var i = 0; i < this.models.length; i++) {
        this.models[i].startRandomMotion((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_PINCH_OUT),
            (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().PRIORITY_NORMAL));
    }
}


LAppLive2DManagerV2.prototype.tapEvent = function (x, y) {

    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG))
        console.log("[Live2Dv2] tapEvent view x:" + x + " y:" + y);

    const hitTestArea = {
        'head': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_HEAD),
        'body': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_BODY),
        'face': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_FACE),
        'breast': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_BREAST),
        'belly': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_BELLY),
        'leg': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_LEG),
    }

    const hitTestAreaCustom = {
        'head': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_CUSTOM_HEAD),
        'body': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().HIT_AREA_CUSTOM_BODY),
    }

    const motionGroup = {
        'idle': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_IDLE),
        'head': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_FLICK_HEAD),
        'face': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_TAP_FACE),
        'body': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_TAP_BODY),
        'breast': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_TAP_BREAST),
        'belly': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_TAP_BELLY),
        'leg': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_TAP_LEG),
        'sleepy': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_SLEEPY),
        'shake': (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().MOTION_GROUP_SHAKE),
    }

    // 点击面部切换表情
    for (let i = 0; i < this.models.length; i++) {
            if (this.models[i].hitTest(hitTestArea['face'], x, y)) {
                (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG) && console.log(`[Live2Dv2] Tap face.`);
                this.models[i].setRandomExpression();
            }
    }

    for (let i = 0; i < this.models.length; i++) {
        let tapMotionStarted = false;
        for (let prop in hitTestArea) {
            if (this.models[i].hitTest(hitTestArea[prop], x, y)) {
                (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG) && console.log(`[Live2Dv2] Tap ${prop}.`);
                this.models[i].startRandomMotion(motionGroup[prop], (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().PRIORITY_NORMAL));
                tapMotionStarted = true;
            }
        }
        if (!tapMotionStarted)
            for (let prop in hitTestAreaCustom) {
                if (this.models[i].hitTestCustom(hitTestAreaCustom[prop], x, y)) {
                    (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG) && console.log(`[Live2Dv2] Tap Custom ${prop}.`);
                    this.models[i].startRandomMotion(motionGroup[prop], (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().PRIORITY_NORMAL));
                }
            }
    }
    return true;
};

/***/ }),

/***/ "./src/SDKv2/LAppModelV2.js":
/*!**********************************!*\
  !*** ./src/SDKv2/LAppModelV2.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LAppModelV2)
/* harmony export */ });
/* harmony import */ var _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/Live2DFramework */ "./src/SDKv2/lib/Live2DFramework.js");
/* harmony import */ var _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lib_ModelSettingJson__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/ModelSettingJson */ "./src/SDKv2/lib/ModelSettingJson.js");
/* harmony import */ var _LAppDefineV2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LAppDefineV2 */ "./src/SDKv2/LAppDefineV2.js");
/* harmony import */ var _LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/MatrixStack */ "./src/SDKv2/lib/MatrixStack.js");
/* harmony import */ var _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_lib_MatrixStack__WEBPACK_IMPORTED_MODULE_3__);





//============================================================
//============================================================
//  class LAppModel     extends L2DBaseModel         
//============================================================
//============================================================
function LAppModelV2() {
    //L2DBaseModel.apply(this, arguments);
    _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_0__.L2DBaseModel.prototype.constructor.call(this);

    this.modelHomeDir = "";
    this.modelSetting = null;
    this.tmpMatrix = [];
}

LAppModelV2.prototype = new _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_0__.L2DBaseModel();


LAppModelV2.prototype.load = function (gl, modelSettingPath, callback) {
    this.setUpdating(true);
    this.setInitialized(false);

    this.modelHomeDir = modelSettingPath.substring(0, modelSettingPath.lastIndexOf("/") + 1);

    this.modelSetting = new _lib_ModelSettingJson__WEBPACK_IMPORTED_MODULE_1__.default();

    var thisRef = this;

    this.modelSetting.loadModelSetting(modelSettingPath, function () {

        var path = thisRef.modelHomeDir + thisRef.modelSetting.getModelFile();
        thisRef.loadModelData(path, function (model) {

            for (var i = 0; i < thisRef.modelSetting.getTextureNum(); i++) {

                if (/^https?:\/\/|^\/\//i.test(thisRef.modelSetting.getTextureFile(i))) {
                    var texPaths = thisRef.modelSetting.getTextureFile(i);
                } else {
                    var texPaths = thisRef.modelHomeDir +
                        thisRef.modelSetting.getTextureFile(i);
                }
                thisRef.loadTexture(i, texPaths, function () {

                    if (thisRef.isTexLoaded) {

                        if (thisRef.modelSetting.getExpressionNum() > 0) {

                            thisRef.expressions = {};

                            for (var j = 0; j < thisRef.modelSetting.getExpressionNum(); j++) {
                                var expName = thisRef.modelSetting.getExpressionName(j);
                                var expFilePath = thisRef.modelHomeDir +
                                    thisRef.modelSetting.getExpressionFile(j);

                                thisRef.loadExpression(expName, expFilePath);
                            }
                        } else {
                            thisRef.expressionManager = null;
                            thisRef.expressions = {};
                        }


                        if (thisRef.eyeBlink == null) {
                            //thisRef.eyeBlink = new L2DEyeBlink();
                        }


                        if (thisRef.modelSetting.getPhysicsFile() != null) {
                            thisRef.loadPhysics(thisRef.modelHomeDir +
                                thisRef.modelSetting.getPhysicsFile());
                        } else {
                            thisRef.physics = null;
                        }


                        if (thisRef.modelSetting.getPoseFile() != null) {
                            thisRef.loadPose(
                                thisRef.modelHomeDir +
                                thisRef.modelSetting.getPoseFile(),
                                function () {
                                    thisRef.pose.updateParam(thisRef.live2DModel);
                                }
                            );
                        } else {
                            thisRef.pose = null;
                        }


                        if (thisRef.modelSetting.getLayout() != null) {
                            var layout = thisRef.modelSetting.getLayout();
                            if (layout["width"] != null)
                                thisRef.modelMatrix.setWidth(layout["width"]);
                            if (layout["height"] != null)
                                thisRef.modelMatrix.setHeight(layout["height"]);

                            if (layout["x"] != null)
                                thisRef.modelMatrix.setX(layout["x"]);
                            if (layout["y"] != null)
                                thisRef.modelMatrix.setY(layout["y"]);
                            if (layout["center_x"] != null)
                                thisRef.modelMatrix.centerX(layout["center_x"]);
                            if (layout["center_y"] != null)
                                thisRef.modelMatrix.centerY(layout["center_y"]);
                            if (layout["top"] != null)
                                thisRef.modelMatrix.top(layout["top"]);
                            if (layout["bottom"] != null)
                                thisRef.modelMatrix.bottom(layout["bottom"]);
                            if (layout["left"] != null)
                                thisRef.modelMatrix.left(layout["left"]);
                            if (layout["right"] != null)
                                thisRef.modelMatrix.right(layout["right"]);
                        }

                        if (thisRef.modelSetting.getHitAreasCustom() != null) {
                            var hit_areas_custom = thisRef.modelSetting.getHitAreasCustom();
                            if (hit_areas_custom["head_x"] != null)
                                (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_head_x) = hit_areas_custom["head_x"];
                            if (hit_areas_custom["head_y"] != null)
                                (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_head_y) = hit_areas_custom["head_y"];
                            if (hit_areas_custom["body_x"] != null)
                                (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_body_x) = hit_areas_custom["body_x"];
                            if (hit_areas_custom["body_y"] != null)
                                (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_body_y) = hit_areas_custom["body_y"];
                        } else {
                            (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_head_x) = undefined;
                            (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_head_y) = undefined;
                            (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_body_x) = undefined;
                            (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_body_y) = undefined;
                        }

                        for (var j = 0; j < thisRef.modelSetting.getInitParamNum(); j++) {

                            thisRef.live2DModel.setParamFloat(
                                thisRef.modelSetting.getInitParamID(j),
                                thisRef.modelSetting.getInitParamValue(j)
                            );
                        }

                        for (var j = 0; j < thisRef.modelSetting.getInitPartsVisibleNum(); j++) {

                            thisRef.live2DModel.setPartsOpacity(
                                thisRef.modelSetting.getInitPartsVisibleID(j),
                                thisRef.modelSetting.getInitPartsVisibleValue(j)
                            );
                        }


                        thisRef.live2DModel.saveParam();
                        // thisRef.live2DModel.setGL(gl);


                        thisRef.preloadMotionGroup((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().MOTION_GROUP_IDLE));
                        thisRef.preloadMotionGroup((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().MOTION_GROUP_SLEEPY));
                        thisRef.mainMotionManager.stopAllMotions();

                        thisRef.setUpdating(false);
                        thisRef.setInitialized(true);

                        if (typeof callback == "function") callback();

                    }
                });
            }
        });
    });
};


LAppModelV2.prototype.release = function (gl) {
    // this.live2DModel.deleteTextures();
    var pm = _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_0__.Live2DFramework.getPlatformManager();

    gl.deleteTexture(pm.texture);
}


LAppModelV2.prototype.preloadMotionGroup = function (name) {
    var thisRef = this;

    for (var i = 0; i < this.modelSetting.getMotionNum(name); i++) {
        var file = this.modelSetting.getMotionFile(name, i);
        this.loadMotion(file, this.modelHomeDir + file, function (motion) {
            motion.setFadeIn(thisRef.modelSetting.getMotionFadeIn(name, i));
            motion.setFadeOut(thisRef.modelSetting.getMotionFadeOut(name, i));
        });

    }
}

LAppModelV2.hasSleepyMotion = true;
LAppModelV2.prototype.update = function () {
    // console.log("--> LAppModel.update()");

    if (this.live2DModel == null) {
        if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().DEBUG_LOG)) console.error("Failed to update.");

        return;
    }

    var timeMSec = UtSystem.getUserTimeMSec() - this.startTimeMSec;
    var timeSec = timeMSec / 1000.0;
    var t = timeSec * 2 * Math.PI;


    if (this.mainMotionManager.isFinished()) {
        var Sleepy = sessionStorage.getItem('Sleepy');
        if (Sleepy === '1' && this.hasSleepyMotion) {
            this.hasSleepyMotion = this.startRandomMotion((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().MOTION_GROUP_SLEEPY), (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().PRIORITY_SLEEPY));
        } else {
            this.startRandomMotion((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().MOTION_GROUP_IDLE), (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().PRIORITY_IDLE));
        }
    }

    //-----------------------------------------------------------------		


    this.live2DModel.loadParam();


    var update = this.mainMotionManager.updateParam(this.live2DModel);
    if (!update) {

        if (this.eyeBlink != null) {
            this.eyeBlink.updateParam(this.live2DModel);
        }
    }


    this.live2DModel.saveParam();

    //-----------------------------------------------------------------		


    if (this.expressionManager != null &&
        this.expressions != null &&
        !this.expressionManager.isFinished()) {
        this.expressionManager.updateParam(this.live2DModel);
    }


    this.live2DModel.addToParamFloat("PARAM_ANGLE_X", this.dragX * 30, 1);
    this.live2DModel.addToParamFloat("PARAM_ANGLE_Y", this.dragY * 30, 1);
    this.live2DModel.addToParamFloat("PARAM_ANGLE_Z", (this.dragX * this.dragY) * -30, 1);


    this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X", this.dragX * 10, 1);


    this.live2DModel.addToParamFloat("PARAM_EYE_BALL_X", this.dragX, 1);
    this.live2DModel.addToParamFloat("PARAM_EYE_BALL_Y", this.dragY, 1);


    this.live2DModel.addToParamFloat("PARAM_ANGLE_X",
        Number((15 * Math.sin(t / 6.5345))), 0.5);
    this.live2DModel.addToParamFloat("PARAM_ANGLE_Y",
        Number((8 * Math.sin(t / 3.5345))), 0.5);
    this.live2DModel.addToParamFloat("PARAM_ANGLE_Z",
        Number((10 * Math.sin(t / 5.5345))), 0.5);
    this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X",
        Number((4 * Math.sin(t / 15.5345))), 0.5);
    this.live2DModel.setParamFloat("PARAM_BREATH",
        Number((0.5 + 0.5 * Math.sin(t / 3.2345))), 1);


    if (this.physics != null) {
        this.physics.updateParam(this.live2DModel);
    }


    if (this.lipSync == null) {
        this.live2DModel.setParamFloat("PARAM_MOUTH_OPEN_Y",
            this.lipSyncValue);
    }


    if (this.pose != null) {
        this.pose.updateParam(this.live2DModel);
    }

    this.live2DModel.update();
};


LAppModelV2.prototype.setRandomExpression = function () {
    var tmp = [];
    for (var name in this.expressions) {
        tmp.push(name);
    }
    if (tmp.length !== 0) {
        var no = parseInt(Math.random() * tmp.length);
        this.setExpression(tmp[no]);
    }
}


LAppModelV2.prototype.startRandomMotion = function (name, priority) {

    var max = this.modelSetting.getMotionNum(name);
    var no = parseInt(Math.random() * max);
    return this.startMotion(name, no, priority);
}


LAppModelV2.prototype.startMotion = function (name, no, priority) {
    ;(_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().DEBUG_LOG) && console.log(`[Live2Dv2] startMotion: ${name} No: ${no} Priority: ${priority}`);

    var motionName = this.modelSetting.getMotionFile(name, no);
    const motionExpression = this.modelSetting.getMotionExpression(name, no);

    if (motionName == null || motionName === "") {
        if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().DEBUG_LOG))
            console.error("[Live2Dv2] Motion undefined.");
        return 'motion undefined';
    }

    if (priority === (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().PRIORITY_FORCE)) {
        this.mainMotionManager.setReservePriority(priority);
    } else if (!this.mainMotionManager.reserveMotion(priority)) {
        if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().DEBUG_LOG))
            console.log("[Live2Dv2] Motion is running.")
        return;
    }

    var thisRef = this;
    var motion;

    if (this.motions[name] == null) {
        this.loadMotion(null, this.modelHomeDir + motionName, function (mtn) {
            motion = mtn;
            thisRef.setFadeInFadeOut(name, no, priority, motion);
        });
    } else {
        motion = this.motions[name];
        thisRef.setFadeInFadeOut(name, no, priority, motion);
    }
    if (motionExpression != null) {
        this.setExpression(motionExpression);
    }
}


LAppModelV2.prototype.setFadeInFadeOut = function (name, no, priority, motion) {
    var motionName = this.modelSetting.getMotionFile(name, no);

    motion.setFadeIn(this.modelSetting.getMotionFadeIn(name, no));
    motion.setFadeOut(this.modelSetting.getMotionFadeOut(name, no));


    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().DEBUG_LOG))
        console.log("[Live2Dv2] Start motion : " + motionName);

    if (this.modelSetting.getMotionSound(name, no) == null) {
        this.mainMotionManager.startMotionPrio(motion, priority);
    } else {
        var soundName = this.modelSetting.getMotionSound(name, no);
        // var player = new Sound(this.modelHomeDir + soundName);

        var snd = document.createElement("audio");
        snd.src = this.modelHomeDir + soundName;

        if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().DEBUG_LOG))
            console.log("[Live2Dv2] Start sound : " + soundName);

        snd.play();
        this.mainMotionManager.startMotionPrio(motion, priority);
    }
}


LAppModelV2.prototype.setExpression = function (name) {
    var motion = this.expressions[name];

    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().DEBUG_LOG))
        console.log("[Live2Dv2] Expression : " + name);

    this.expressionManager.startMotion(motion, false);
}


LAppModelV2.prototype.draw = function (gl) {
    //console.log("--> LAppModel.draw()");

    // if(this.live2DModel == null) return;


    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_3___default().push();

    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_3___default().multMatrix(this.modelMatrix.getArray());

    this.tmpMatrix = _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_3___default().getMatrix()
    this.live2DModel.setMatrix(this.tmpMatrix);
    this.live2DModel.draw();

    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_3___default().pop();

};


LAppModelV2.prototype.hitTest = function (id, testX, testY) {
    var len = this.modelSetting.getHitAreaNum();
    for (var i = 0; i < len; i++) {
        if (id == this.modelSetting.getHitAreaName(i)) {
            var drawID = this.modelSetting.getHitAreaID(i);
            return this.hitTestSimple(drawID, testX, testY);
        }
    }

    return false;
}


LAppModelV2.prototype.hitTestCustom = function (type, testX, testY) {
    if (type == 'head') {
        return this.hitTestSimpleCustom((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_head_x), (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_head_y), testX, testY);
    } else if (type == 'body') {
        return this.hitTestSimpleCustom((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_body_x), (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_2___default().hit_areas_custom_body_y), testX, testY);
    } else {
        return false;
    }
}

/***/ }),

/***/ "./src/SDKv2/PlatformManager.js":
/*!**************************************!*\
  !*** ./src/SDKv2/PlatformManager.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlatformManager)
/* harmony export */ });
/* harmony import */ var _webglcontext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webglcontext */ "./src/SDKv2/webglcontext.js");
/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */


//============================================================
//============================================================
//  class PlatformManager     extend IPlatformManager
//============================================================
//============================================================
function PlatformManager() {

}

//============================================================
//    PlatformManager # loadBytes()
//============================================================
PlatformManager.prototype.loadBytes = function (path/*String*/, callback) {
    var request = new XMLHttpRequest();
    request.open("GET", path, true);
    request.responseType = "arraybuffer";
    request.onload = function () {
        switch (request.status) {
            case 200:
                callback(request.response);
                break;
            default:
                console.error("Failed to load (" + request.status + ") : " + path);
                break;
        }
    }
    request.send(null);
    //return request;
}

//============================================================
//    PlatformManager # loadString()
//============================================================
PlatformManager.prototype.loadString = function (path/*String*/) {

    this.loadBytes(path, function (buf) {
        return buf;
    });

}

//============================================================
//    PlatformManager # loadLive2DModel()
//============================================================
PlatformManager.prototype.loadLive2DModel = function (path/*String*/, callback) {
    var model = null;

    // load moc
    this.loadBytes(path, function (buf) {
        model = Live2DModelWebGL.loadModel(buf);
        callback(model);
    });

}

//============================================================
//    PlatformManager # loadTexture()
//============================================================
PlatformManager.prototype.loadTexture = function (model/*ALive2DModel*/, no/*int*/, path/*String*/, callback) {
    if (window.webpReady === true)
        path = path.concat(".webp");
    let triedOrigin = false;

    // load textures
    var loadedImage = new Image();
    loadedImage.crossOrigin = 'Anonymous';
    loadedImage.src = path;
    var thisRef = this;
    loadedImage.onload = function () {
        // create texture
        var gl = (0,_webglcontext__WEBPACK_IMPORTED_MODULE_0__.getContext)();
        var texture = gl.createTexture();
        if (!texture) {
            console.error("Failed to generate gl texture name.");
            return -1;
        }

        if (model.isPremultipliedAlpha() == false) {
            // 乗算済アルファテクスチャ以外の場合
            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
        }
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,
            gl.UNSIGNED_BYTE, loadedImage);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
        gl.generateMipmap(gl.TEXTURE_2D);


        model.setTexture(no, texture);

        // テクスチャオブジェクトを解放
        texture = null;

        if (typeof callback == "function") callback();
    };

    loadedImage.onerror = function () {
        if (window.webpReady === true && triedOrigin === false) {
            console.error("Failed to load WebP image: " + loadedImage.src + " Load origin file instead.");
            triedOrigin = true;
            loadedImage.src = path.replace(/\.webp$/, "");
        } else {
            console.error("Failed to load image: " + loadedImage.src);
        }
    }
}


//============================================================
//    PlatformManager # parseFromBytes(buf)

//============================================================
PlatformManager.prototype.jsonParseFromBytes = function (buf) {

    var jsonStr;


    var bomCode = new Uint8Array(buf, 0, 3);
    if (bomCode[0] == 239 && bomCode[1] == 187 && bomCode[2] == 191) {
        jsonStr = String.fromCharCode.apply(null, new Uint8Array(buf, 3));
    } else {
        jsonStr = String.fromCharCode.apply(null, new Uint8Array(buf));
    }

    var jsonObj = JSON.parse(jsonStr);

    return jsonObj;
};


//============================================================
//    PlatformManager # log()
//============================================================
PlatformManager.prototype.log = function (txt/*String*/) {
    //console.log(txt);
}

function getWebGLContext(canvas) {
    var NAMES = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
    for (var i = 0; i < NAMES.length; i++) {
        try {
            var ctx = canvas.getContext(NAMES[i], {premultipliedAlpha: true});
            if (ctx) return ctx;
        } catch (e) {
        }
    }
    return null;
};

/***/ }),

/***/ "./src/SDKv2/lib/Live2DFramework.js":
/*!******************************************!*\
  !*** ./src/SDKv2/lib/Live2DFramework.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Konata Modified
 * fix: error when model.json not contain custom hitArea.
 * 2020-08-16
 */

/**
 * EYHN 基于 live2d 官方 Live2DFramework.js 修改
 *
 * Copyright © 2016 - 2017 EYHN
 */
//============================================================
//============================================================
//  class L2DBaseModel         
//============================================================
//============================================================
function L2DBaseModel() {
    this.live2DModel = null; // ALive2DModel
    this.modelMatrix = null; // L2DModelMatrix
    this.eyeBlink = null; // L2DEyeBlink
    this.physics = null; // L2DPhysics
    this.pose = null; // L2DPose
    this.debugMode = false;
    this.initialized = false;
    this.updating = false;
    this.alpha = 1;
    this.accAlpha = 0;
    this.lipSync = false;
    this.lipSyncValue = 0;
    this.accelX = 0;
    this.accelY = 0;
    this.accelZ = 0;
    this.dragX = 0;
    this.dragY = 0;
    this.startTimeMSec = null;
    this.mainMotionManager = new L2DMotionManager(); //L2DMotionManager
    this.expressionManager = new L2DMotionManager(); //L2DMotionManager
    this.motions = {};
    this.expressions = {};

    this.isTexLoaded = false;
}

var texCounter = 0;

//============================================================
//    L2DBaseModel # getModelMatrix()
//============================================================
L2DBaseModel.prototype.getModelMatrix = function () {
    return this.modelMatrix;
}

//============================================================
//    L2DBaseModel # setAlpha()
//============================================================
L2DBaseModel.prototype.setAlpha = function (a/*float*/) {
    if (a > 0.999) a = 1;
    if (a < 0.001) a = 0;
    this.alpha = a;
}

//============================================================
//    L2DBaseModel # getAlpha()
//============================================================
L2DBaseModel.prototype.getAlpha = function () {
    return this.alpha;
}

//============================================================
//    L2DBaseModel # isInitialized()
//============================================================
L2DBaseModel.prototype.isInitialized = function () {
    return this.initialized;
}

//============================================================
//    L2DBaseModel # setInitialized()
//============================================================
L2DBaseModel.prototype.setInitialized = function (v/*boolean*/) {
    this.initialized = v;
}

//============================================================
//    L2DBaseModel # isUpdating()
//============================================================
L2DBaseModel.prototype.isUpdating = function () {
    return this.updating;
}

//============================================================
//    L2DBaseModel # setUpdating()
//============================================================
L2DBaseModel.prototype.setUpdating = function (v/*boolean*/) {
    this.updating = v;
}

//============================================================
//    L2DBaseModel # getLive2DModel()
//============================================================
L2DBaseModel.prototype.getLive2DModel = function () {
    return this.live2DModel;
}

//============================================================
//    L2DBaseModel # setLipSync()
//============================================================
L2DBaseModel.prototype.setLipSync = function (v/*boolean*/) {
    this.lipSync = v;
}

//============================================================
//    L2DBaseModel # setLipSyncValue()
//============================================================
L2DBaseModel.prototype.setLipSyncValue = function (v/*float*/) {
    this.lipSyncValue = v;
}

//============================================================
//    L2DBaseModel # setAccel()
//============================================================
L2DBaseModel.prototype.setAccel = function (x/*float*/, y/*float*/, z/*float*/) {
    this.accelX = x;
    this.accelY = y;
    this.accelZ = z;
}

//============================================================
//    L2DBaseModel # setDrag()
//============================================================
L2DBaseModel.prototype.setDrag = function (x/*float*/, y/*float*/) {
    this.dragX = x;
    this.dragY = y;
}

//============================================================
//    L2DBaseModel # getMainMotionManager()
//============================================================
L2DBaseModel.prototype.getMainMotionManager = function () {
    return this.mainMotionManager;
}

//============================================================
//    L2DBaseModel # getExpressionManager()
//============================================================
L2DBaseModel.prototype.getExpressionManager = function () {
    return this.expressionManager;
}

//============================================================
//    L2DBaseModel # loadModelData()
//============================================================
L2DBaseModel.prototype.loadModelData = function (path/*String*/, callback) {
    /*
    if( this.live2DModel != null ) {
        this.live2DModel.deleteTextures();
    }
    */
    var pm = Live2DFramework.getPlatformManager(); //IPlatformManager
    if (this.debugMode) pm.log("Load model : " + path);

    var thisRef = this;
    pm.loadLive2DModel(path, function (l2dModel) {
        thisRef.live2DModel = l2dModel;
        thisRef.live2DModel.saveParam();

        var _err = Live2D.getError();

        if (_err != 0) {
            console.error("Error : Failed to loadModelData().");
            return;
        }

        thisRef.modelMatrix = new L2DModelMatrix(
            thisRef.live2DModel.getCanvasWidth(),
            thisRef.live2DModel.getCanvasHeight()); //L2DModelMatrix
        thisRef.modelMatrix.setWidth(2);
        thisRef.modelMatrix.setCenterPosition(0, 0);

        callback(thisRef.live2DModel);
    });
}


//============================================================
//    L2DBaseModel # loadTexture()
//============================================================
L2DBaseModel.prototype.loadTexture = function (no/*int*/, path/*String*/, callback) {
    texCounter++;

    var pm = Live2DFramework.getPlatformManager(); //IPlatformManager

    if (this.debugMode) pm.log("Load Texture : " + path);

    var thisRef = this;
    pm.loadTexture(this.live2DModel, no, path, function () {
        texCounter--;
        if (texCounter == 0) thisRef.isTexLoaded = true;
        if (typeof callback == "function") callback();
    });

}

//============================================================
//    L2DBaseModel # loadMotion()
//============================================================
L2DBaseModel.prototype.loadMotion = function (name/*String*/, path /*String*/, callback) {
    var pm = Live2DFramework.getPlatformManager(); //IPlatformManager

    if (this.debugMode) pm.log("Load Motion : " + path);

    var motion = null; //Live2DMotion

    var thisRef = this;
    pm.loadBytes(path, function (buf) {
        motion = Live2DMotion.loadMotion(buf);
        if (name != null) {
            thisRef.motions[name] = motion;
        }
        callback(motion);
    });

}

//============================================================
//    L2DBaseModel # loadExpression()
//============================================================
L2DBaseModel.prototype.loadExpression = function (name/*String*/, path /*String*/, callback) {
    var pm = Live2DFramework.getPlatformManager(); //IPlatformManager

    if (this.debugMode) pm.log("Load Expression : " + path);

    var thisRef = this;
    pm.loadBytes(path, function (buf) {
        if (name != null) {
            thisRef.expressions[name] = L2DExpressionMotion.loadJson(buf);
        }
        if (typeof callback == "function") callback();
    });
}

//============================================================
//    L2DBaseModel # loadPose()
//============================================================
L2DBaseModel.prototype.loadPose = function (path /*String*/, callback) {
    var pm = Live2DFramework.getPlatformManager(); //IPlatformManager
    if (this.debugMode) pm.log("Load Pose : " + path);
    var thisRef = this;
    try {
        pm.loadBytes(path, function (buf) {
            thisRef.pose = L2DPose.load(buf);
            if (typeof callback == "function") callback();
        });
    } catch (e) {
        console.warn(e);
    }
}

//============================================================
//    L2DBaseModel # loadPhysics()
//============================================================
L2DBaseModel.prototype.loadPhysics = function (path/*String*/) {
    var pm = Live2DFramework.getPlatformManager(); //IPlatformManager
    if (this.debugMode) pm.log("Load Physics : " + path);
    var thisRef = this;
    try {
        pm.loadBytes(path, function (buf) {
            thisRef.physics = L2DPhysics.load(buf);
        });
    } catch (e) {
        console.warn(e);
    }
}

//============================================================
//    L2DBaseModel # hitTestSimple()
//============================================================
L2DBaseModel.prototype.hitTestSimple = function (drawID, testX, testY) {

    if (this.live2DModel === null) return !1;

    var drawIndex = this.live2DModel.getDrawDataIndex(drawID);
    if (drawIndex < 0) return false;

    var points = this.live2DModel.getTransformedPoints(drawIndex);
    var left = this.live2DModel.getCanvasWidth();
    var right = 0;
    var top = this.live2DModel.getCanvasHeight();
    var bottom = 0;

    for (var j = 0; j < points.length; j = j + 2) {
        var x = points[j];
        var y = points[j + 1];

        if (x < left) left = x;
        if (x > right) right = x;
        if (y < top) top = y;
        if (y > bottom) bottom = y;
    }
    var tx = this.modelMatrix.invertTransformX(testX);
    var ty = this.modelMatrix.invertTransformY(testY);

    return (left <= tx && tx <= right && top <= ty && ty <= bottom);
}

//============================================================
//    L2DBaseModel # hitTestSimpleCustom()
//============================================================
L2DBaseModel.prototype.hitTestSimpleCustom = function (x, y, testX, testY) {

    if (this.live2DModel === null) return !1;

    if (x && y && testX >= x[0] && testX <= y[0])
        if (testY <= x[1] && testY >= y[1])
            return true;
    return false;
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DExpressionMotion  extends     AMotion
//============================================================
//============================================================
function L2DExpressionMotion() {
    AMotion.prototype.constructor.call(this);
    this.paramList = new Array(); //ArrayList<L2DExpressionParam>
}

L2DExpressionMotion.prototype = new AMotion(); // L2DExpressionMotion extends AMotion

//============================================================
L2DExpressionMotion.EXPRESSION_DEFAULT = "DEFAULT";
L2DExpressionMotion.TYPE_SET = 0;
L2DExpressionMotion.TYPE_ADD = 1;
L2DExpressionMotion.TYPE_MULT = 2;

//============================================================
//    static L2DExpressionMotion.loadJson()
//============================================================
L2DExpressionMotion.loadJson = function (buf) {
    var ret = new L2DExpressionMotion();

    var pm = Live2DFramework.getPlatformManager();
    var json = pm.jsonParseFromBytes(buf);

    ret.setFadeIn(parseInt(json.fade_in) > 0 ? parseInt(json.fade_in) : 1000);
    ret.setFadeOut(parseInt(json.fade_out) > 0 ? parseInt(json.fade_out) : 1000);

    if (json.params == null) {
        return ret;
    }

    var params = json.params;
    var paramNum = params.length;
    ret.paramList = []; //ArrayList<L2DExpressionParam>
    for (var i = 0; i < paramNum; i++) {
        var param = params[i];
        var paramID = param.id.toString();
        var value = parseFloat(param.val);
        var calcTypeInt = L2DExpressionMotion.TYPE_ADD;
        var calc = param.calc != null ? param.calc.toString() : "add";
        if (calc === "add") {
            calcTypeInt = L2DExpressionMotion.TYPE_ADD;
        } else if (calc === "mult") {
            calcTypeInt = L2DExpressionMotion.TYPE_MULT;
        } else if (calc === "set") {
            calcTypeInt = L2DExpressionMotion.TYPE_SET;
        } else {
            calcTypeInt = L2DExpressionMotion.TYPE_ADD;
        }
        if (calcTypeInt == L2DExpressionMotion.TYPE_ADD) {
            var defaultValue = param.def == null ? 0 : parseFloat(param.def);
            value = value - defaultValue;
        } else if (calcTypeInt == L2DExpressionMotion.TYPE_MULT) {
            var defaultValue = param.def == null ? 1 : parseFloat(param.def);
            if (defaultValue == 0) defaultValue = 1;
            value = value / defaultValue;
        }

        var item = new L2DExpressionParam();
        item.id = paramID;
        item.type = calcTypeInt;
        item.value = value;

        ret.paramList.push(item);
    }

    return ret;
}


//============================================================
//    L2DExpressionMotion # updateParamExe()
//============================================================
L2DExpressionMotion.prototype.updateParamExe = function (model /*ALive2DModel*/, timeMSec/*long*/, weight /*float*/, motionQueueEnt /*MotionQueueEnt*/) {
    for (var i = this.paramList.length - 1; i >= 0; --i) {
        var param = this.paramList[i]; //L2DExpressionParam
        // if (!param || !param.type) continue;
        if (param.type == L2DExpressionMotion.TYPE_ADD) {
            model.addToParamFloat(param.id, param.value, weight);
        } else if (param.type == L2DExpressionMotion.TYPE_MULT) {
            model.multParamFloat(param.id, param.value, weight);
        } else if (param.type == L2DExpressionMotion.TYPE_SET) {
            model.setParamFloat(param.id, param.value, weight);
        }
    }
}

//============================================================
//============================================================
//  class L2DExpressionParam   
//============================================================
//============================================================
function L2DExpressionParam() {
    this.id = "";
    this.type = -1;
    this.value = null;
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DEyeBlink          
//============================================================
//============================================================
function L2DEyeBlink() {
    this.nextBlinkTime = null /* TODO NOT INIT */; // 
    this.stateStartTime = null /* TODO NOT INIT */; // 
    this.blinkIntervalMsec = null /* TODO NOT INIT */; // 
    this.eyeState = EYE_STATE.STATE_FIRST;
    this.blinkIntervalMsec = 4000;
    this.closingMotionMsec = 100;
    this.closedMotionMsec = 50;
    this.openingMotionMsec = 150;
    this.closeIfZero = true;
    this.eyeID_L = "PARAM_EYE_L_OPEN";
    this.eyeID_R = "PARAM_EYE_R_OPEN";
}

//============================================================
//    L2DEyeBlink # calcNextBlink()
//============================================================
L2DEyeBlink.prototype.calcNextBlink = function () {
    var time /*long*/ = UtSystem.getUserTimeMSec();
    var r /*Number*/ = Math.random();
    return  /*(long)*/ (time + r * (2 * this.blinkIntervalMsec - 1));
}

//============================================================
//    L2DEyeBlink # setInterval()
//============================================================
L2DEyeBlink.prototype.setInterval = function (blinkIntervalMsec /*int*/) {
    this.blinkIntervalMsec = blinkIntervalMsec;
}

//============================================================
//    L2DEyeBlink # setEyeMotion()
//============================================================
L2DEyeBlink.prototype.setEyeMotion = function (closingMotionMsec/*int*/, closedMotionMsec/*int*/, openingMotionMsec/*int*/) {
    this.closingMotionMsec = closingMotionMsec;
    this.closedMotionMsec = closedMotionMsec;
    this.openingMotionMsec = openingMotionMsec;
}

//============================================================
//    L2DEyeBlink # updateParam()
//============================================================
L2DEyeBlink.prototype.updateParam = function (model/*ALive2DModel*/) {
    var time /*:long*/ = UtSystem.getUserTimeMSec();
    var eyeParamValue /*:Number*/;
    var t /*:Number*/ = 0;
    switch (this.eyeState) {
        case EYE_STATE.STATE_CLOSING:
            t = (time - this.stateStartTime) / this.closingMotionMsec;
            if (t >= 1) {
                t = 1;
                this.eyeState = EYE_STATE.STATE_CLOSED;
                this.stateStartTime = time;
            }
            eyeParamValue = 1 - t;
            break;
        case EYE_STATE.STATE_CLOSED:
            t = (time - this.stateStartTime) / this.closedMotionMsec;
            if (t >= 1) {
                this.eyeState = EYE_STATE.STATE_OPENING;
                this.stateStartTime = time;
            }
            eyeParamValue = 0;
            break;
        case EYE_STATE.STATE_OPENING:
            t = (time - this.stateStartTime) / this.openingMotionMsec;
            if (t >= 1) {
                t = 1;
                this.eyeState = EYE_STATE.STATE_INTERVAL;
                this.nextBlinkTime = this.calcNextBlink();
            }
            eyeParamValue = t;
            break;
        case EYE_STATE.STATE_INTERVAL:
            if (this.nextBlinkTime < time) {
                this.eyeState = EYE_STATE.STATE_CLOSING;
                this.stateStartTime = time;
            }
            eyeParamValue = 1;
            break;
        case EYE_STATE.STATE_FIRST:
        default:
            this.eyeState = EYE_STATE.STATE_INTERVAL;
            this.nextBlinkTime = this.calcNextBlink();
            eyeParamValue = 1;
            break;
    }
    if (!this.closeIfZero) eyeParamValue = -eyeParamValue;
    model.setParamFloat(this.eyeID_L, eyeParamValue);
    model.setParamFloat(this.eyeID_R, eyeParamValue);
}

//== enum EYE_STATE ==
var EYE_STATE = function () {
};

EYE_STATE.STATE_FIRST = "STATE_FIRST"
EYE_STATE.STATE_INTERVAL = "STATE_INTERVAL"
EYE_STATE.STATE_CLOSING = "STATE_CLOSING"
EYE_STATE.STATE_CLOSED = "STATE_CLOSED"
EYE_STATE.STATE_OPENING = "STATE_OPENING"

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DMatrix44          
//============================================================
//============================================================
function L2DMatrix44() {
    this.tr = new Float32Array(16); // 
    this.identity();
}

//============================================================
//    static L2DMatrix44.mul()
//============================================================
L2DMatrix44.mul = function (a/*float[]*/, b/*float[]*/, dst/*float[]*/) {
    var c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var n = 4;
    var i, j, k;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            for (k = 0; k < n; k++) {
                c[i + j * 4] += a[i + k * 4] * b[k + j * 4];
            }
        }
    }
    for (i = 0; i < 16; i++) {
        dst[i] = c[i];
    }
}

//============================================================
//    L2DMatrix44 # identity()
//============================================================
L2DMatrix44.prototype.identity = function () {
    for (var i/*:int*/ = 0; i < 16; i++)
        this.tr[i] = ((i % 5) == 0) ? 1 : 0;
}

//============================================================
//    L2DMatrix44 # getArray()
//============================================================
L2DMatrix44.prototype.getArray = function () {
    return this.tr;
}

//============================================================
//    L2DMatrix44 # getCopyMatrix()
//============================================================
L2DMatrix44.prototype.getCopyMatrix = function () {
    return new Float32Array(this.tr); // this.tr.clone();
}

//============================================================
//    L2DMatrix44 # setMatrix()
//============================================================
L2DMatrix44.prototype.setMatrix = function (tr/*float[]*/) {
    if (this.tr == null || this.tr.length != this.tr.length) return;
    for (var i/*:int*/ = 0; i < 16; i++) this.tr[i] = tr[i];
}

//============================================================
//    L2DMatrix44 # getScaleX()
//============================================================
L2DMatrix44.prototype.getScaleX = function () {
    return this.tr[0];
}

//============================================================
//    L2DMatrix44 # getScaleY()
//============================================================
L2DMatrix44.prototype.getScaleY = function () {
    return this.tr[5];
}

//============================================================
//    L2DMatrix44 # transformX()
//============================================================
L2DMatrix44.prototype.transformX = function (src/*float*/) {
    return this.tr[0] * src + this.tr[12];
}

//============================================================
//    L2DMatrix44 # transformY()
//============================================================
L2DMatrix44.prototype.transformY = function (src/*float*/) {
    return this.tr[5] * src + this.tr[13];
}

//============================================================
//    L2DMatrix44 # invertTransformX()
//============================================================
L2DMatrix44.prototype.invertTransformX = function (src/*float*/) {
    return (src - this.tr[12]) / this.tr[0];
}

//============================================================
//    L2DMatrix44 # invertTransformY()
//============================================================
L2DMatrix44.prototype.invertTransformY = function (src/*float*/) {
    return (src - this.tr[13]) / this.tr[5];
}

//============================================================
//    L2DMatrix44 # multTranslate()
//============================================================
L2DMatrix44.prototype.multTranslate = function (shiftX/*float*/, shiftY/*float*/) {
    var tr1 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, shiftX, shiftY, 0, 1];
    L2DMatrix44.mul(tr1, this.tr, this.tr);
}

//============================================================
//    L2DMatrix44 # translate()
//============================================================
L2DMatrix44.prototype.translate = function (x/*float*/, y/*float*/) {
    this.tr[12] = x;
    this.tr[13] = y;
}

//============================================================
//    L2DMatrix44 # translateX()
//============================================================
L2DMatrix44.prototype.translateX = function (x/*float*/) {
    this.tr[12] = x;
}

//============================================================
//    L2DMatrix44 # translateY()
//============================================================
L2DMatrix44.prototype.translateY = function (y/*float*/) {
    this.tr[13] = y;
}

//============================================================
//    L2DMatrix44 # multScale()
//============================================================
L2DMatrix44.prototype.multScale = function (scaleX/*float*/, scaleY/*float*/) {
    var tr1 = [scaleX, 0, 0, 0, 0, scaleY, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    L2DMatrix44.mul(tr1, this.tr, this.tr);
}

//============================================================
//    L2DMatrix44 # scale()
//============================================================
L2DMatrix44.prototype.scale = function (scaleX/*float*/, scaleY/*float*/) {
    this.tr[0] = scaleX;
    this.tr[5] = scaleY;
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DModelMatrix       extends     L2DMatrix44
//============================================================
//============================================================
function L2DModelMatrix(w/*float*/, h/*float*/) {
    L2DMatrix44.prototype.constructor.call(this);
    this.width = w;
    this.height = h;
}

//L2DModelMatrix extends L2DMatrix44
L2DModelMatrix.prototype = new L2DMatrix44();

//============================================================
//    L2DModelMatrix # setPosition()
//============================================================
L2DModelMatrix.prototype.setPosition = function (x/*float*/, y/*float*/) {
    this.translate(x, y);
}

//============================================================
//    L2DModelMatrix # setCenterPosition()
//============================================================
L2DModelMatrix.prototype.setCenterPosition = function (x/*float*/, y/*float*/) {
    var w = this.width * this.getScaleX();
    var h = this.height * this.getScaleY();
    this.translate(x - w / 2, y - h / 2);
}

//============================================================
//    L2DModelMatrix # top()
//============================================================
L2DModelMatrix.prototype.top = function (y/*float*/) {
    this.setY(y);
}

//============================================================
//    L2DModelMatrix # bottom()
//============================================================
L2DModelMatrix.prototype.bottom = function (y/*float*/) {
    var h = this.height * this.getScaleY();
    this.translateY(y - h);
}

//============================================================
//    L2DModelMatrix # left()
//============================================================
L2DModelMatrix.prototype.left = function (x/*float*/) {
    this.setX(x);
}

//============================================================
//    L2DModelMatrix # right()
//============================================================
L2DModelMatrix.prototype.right = function (x/*float*/) {
    var w = this.width * this.getScaleX();
    this.translateX(x - w);
}

//============================================================
//    L2DModelMatrix # centerX()
//============================================================
L2DModelMatrix.prototype.centerX = function (x/*float*/) {
    var w = this.width * this.getScaleX();
    this.translateX(x - w / 2);
}

//============================================================
//    L2DModelMatrix # centerY()
//============================================================
L2DModelMatrix.prototype.centerY = function (y/*float*/) {
    var h = this.height * this.getScaleY();
    this.translateY(y - h / 2);
}

//============================================================
//    L2DModelMatrix # setX()
//============================================================
L2DModelMatrix.prototype.setX = function (x/*float*/) {
    this.translateX(x);
}

//============================================================
//    L2DModelMatrix # setY()
//============================================================
L2DModelMatrix.prototype.setY = function (y/*float*/) {
    this.translateY(y);
}

//============================================================
//    L2DModelMatrix # setHeight()
//============================================================
L2DModelMatrix.prototype.setHeight = function (h/*float*/) {
    var scaleX = h / this.height;
    var scaleY = -scaleX;
    this.scale(scaleX, scaleY);
}

//============================================================
//    L2DModelMatrix # setWidth()
//============================================================
L2DModelMatrix.prototype.setWidth = function (w/*float*/) {
    var scaleX = w / this.width;
    var scaleY = -scaleX;
    this.scale(scaleX, scaleY);
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DMotionManager     extends     MotionQueueManager
//============================================================
//============================================================
function L2DMotionManager() {
    MotionQueueManager.prototype.constructor.call(this);
    this.currentPriority = null;
    this.reservePriority = null;

    this.super = MotionQueueManager.prototype;
}


L2DMotionManager.prototype = new MotionQueueManager();

//============================================================
//    L2DMotionManager # getCurrentPriority()
//============================================================
L2DMotionManager.prototype.getCurrentPriority = function () {
    return this.currentPriority;
}

//============================================================
//    L2DMotionManager # getReservePriority()
//============================================================
L2DMotionManager.prototype.getReservePriority = function () {
    return this.reservePriority;
}

//============================================================
//    L2DMotionManager # reserveMotion()
//============================================================
L2DMotionManager.prototype.reserveMotion = function (priority/*int*/) {
    if (this.reservePriority >= priority) {
        return false;
    }
    if (this.currentPriority >= priority) {
        return false;
    }

    this.reservePriority = priority;

    return true;
}

//============================================================
//    L2DMotionManager # setReservePriority()
//============================================================
L2DMotionManager.prototype.setReservePriority = function (val/*int*/) {
    this.reservePriority = val;
}

//============================================================
//    L2DMotionManager # updateParam()
//============================================================
L2DMotionManager.prototype.updateParam = function (model/*ALive2DModel*/) {
    var updated = MotionQueueManager.prototype.updateParam.call(this, model);

    if (this.isFinished()) {
        this.currentPriority = 0;
    }

    return updated;
}

//============================================================
//    L2DMotionManager # startMotionPrio()
//============================================================
L2DMotionManager.prototype.startMotionPrio = function (motion/*AMotion*/, priority/*int*/) {
    if (priority == this.reservePriority) {
        this.reservePriority = 0;
    }
    this.currentPriority = priority;
    return this.startMotion(motion, false);
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DPhysics           
//============================================================
//============================================================
function L2DPhysics() {
    this.physicsList = new Array(); //ArrayList<PhysicsHair>
    this.startTimeMSec = UtSystem.getUserTimeMSec();
}

//============================================================
//    static L2DPhysics.load()
//============================================================
L2DPhysics.load = function (buf /*byte[]*/) {
    var ret = new L2DPhysics(); //L2DPhysicsL2DPhysics
    var pm = Live2DFramework.getPlatformManager();
    var json = pm.jsonParseFromBytes(buf);
    var params = json.physics_hair;
    var paramNum = params.length;
    for (var i = 0; i < paramNum; i++) {
        var param = params[i]; //Value
        var physics = new PhysicsHair(); //PhysicsHairPhysicsHair
        var setup = param.setup; //Value
        var length = parseFloat(setup.length);
        var resist = parseFloat(setup.regist);
        var mass = parseFloat(setup.mass);
        physics.setup(length, resist, mass);
        var srcList = param.src; //Value
        var srcNum = srcList.length;
        for (var j = 0; j < srcNum; j++) {
            var src = srcList[j]; //Value
            var id = src.id; //String
            var type = PhysicsHair.Src.SRC_TO_X;
            var typeStr = src.ptype; //String
            if (typeStr === "x") {
                type = PhysicsHair.Src.SRC_TO_X;
            } else if (typeStr === "y") {
                type = PhysicsHair.Src.SRC_TO_Y;
            } else if (typeStr === "angle") {
                type = PhysicsHair.Src.SRC_TO_G_ANGLE;
            } else {
                UtDebug.error("live2d", "Invalid parameter:PhysicsHair.Src");
            }
            var scale = parseFloat(src.scale);
            var weight = parseFloat(src.weight);
            physics.addSrcParam(type, id, scale, weight);
        }
        var targetList = param.targets; //Value
        var targetNum = targetList.length;
        for (var j = 0; j < targetNum; j++) {
            var target = targetList[j]; //Value
            var id = target.id; //String
            var type = PhysicsHair.Target.TARGET_FROM_ANGLE;
            var typeStr = target.ptype; //String
            if (typeStr === "angle") {
                type = PhysicsHair.Target.TARGET_FROM_ANGLE;
            } else if (typeStr === "angle_v") {
                type = PhysicsHair.Target.TARGET_FROM_ANGLE_V;
            } else {
                UtDebug.error("live2d", "Invalid parameter:PhysicsHair.Target");
            }
            var scale = parseFloat(target.scale);
            var weight = parseFloat(target.weight);
            physics.addTargetParam(type, id, scale, weight);
        }
        ret.physicsList.push(physics);
    }
    return ret;
}

//============================================================
//    L2DPhysics # updateParam()
//============================================================
L2DPhysics.prototype.updateParam = function (model/*ALive2DModel*/) {
    var timeMSec = UtSystem.getUserTimeMSec() - this.startTimeMSec;
    for (var i = 0; i < this.physicsList.length; i++) {
        this.physicsList[i].update(model, timeMSec);
    }
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DPose              
//============================================================
//============================================================
function L2DPose() {
    this.lastTime = 0;
    this.lastModel = null; //ALive2DModel
    this.partsGroups = new Array(); //ArrayList<L2DPartsParam[]>
}


//============================================================
//    static L2DPose.load()
//============================================================
L2DPose.load = function (buf/*byte[]*/) {
    var ret = new L2DPose(); //L2DPose
    var pm = Live2DFramework.getPlatformManager();
    var json = pm.jsonParseFromBytes(buf);
    var poseListInfo = json.parts_visible; //Value
    var poseNum = poseListInfo.length;
    for (var i_pose = 0; i_pose < poseNum; i_pose++) {
        var poseInfo = poseListInfo[i_pose]; //Value
        var idListInfo = poseInfo.group; //Value
        var idNum = idListInfo.length;
        var partsGroup/*L2DPartsParam*/ = new Array();
        for (var i_group = 0; i_group < idNum; i_group++) {
            var partsInfo = idListInfo[i_group]; //Value
            var parts = new L2DPartsParam(partsInfo.id); //L2DPartsParamL2DPartsParam
            partsGroup[i_group] = parts;
            if (partsInfo.link == null) continue;
            var linkListInfo = partsInfo.link; //Value
            var linkNum = linkListInfo.length;
            parts.link = new Array(); //ArrayList<L2DPartsParam>
            for (var i_link = 0; i_link < linkNum; i_link++) {
                var linkParts = new L2DPartsParam(linkListInfo[i_link]); //L2DPartsParamL2DPartsParam
                parts.link.push(linkParts);
            }
        }
        ret.partsGroups.push(partsGroup);
    }

    return ret;
}

//============================================================
//    L2DPose # updateParam()
//============================================================
L2DPose.prototype.updateParam = function (model/*ALive2DModel*/) {
    if (model == null) return;

    if (!(model == this.lastModel)) {
        this.initParam(model);
    }
    this.lastModel = model;

    var curTime = UtSystem.getUserTimeMSec();
    var deltaTimeSec = ((this.lastTime == 0) ? 0 : (curTime - this.lastTime) / 1000.0);
    this.lastTime = curTime;
    if (deltaTimeSec < 0) deltaTimeSec = 0;
    for (var i = 0; i < this.partsGroups.length; i++) {
        this.normalizePartsOpacityGroup(model, this.partsGroups[i], deltaTimeSec);
        this.copyOpacityOtherParts(model, this.partsGroups[i]);
    }
}

//============================================================
//    L2DPose # initParam()
//============================================================
L2DPose.prototype.initParam = function (model/*ALive2DModel*/) {
    if (model == null) return;
    for (var i = 0; i < this.partsGroups.length; i++) {
        var partsGroup = this.partsGroups[i]; //L2DPartsParam
        for (var j = 0; j < partsGroup.length; j++) {
            partsGroup[j].initIndex(model);
            var partsIndex = partsGroup[j].partsIndex;
            var paramIndex = partsGroup[j].paramIndex;
            if (partsIndex < 0) continue;
            var v/*:Boolean*/ = (model.getParamFloat(paramIndex) != 0);
            model.setPartsOpacity(partsIndex, (v ? 1.0 : 0.0));
            model.setParamFloat(paramIndex, (v ? 1.0 : 0.0));
            if (partsGroup[j].link == null) continue;
            for (var k = 0; k < partsGroup[j].link.length; k++) {
                partsGroup[j].link[k].initIndex(model);
            }
        }
    }
}

//============================================================
//    L2DPose # normalizePartsOpacityGroup()
//============================================================
L2DPose.prototype.normalizePartsOpacityGroup = function (model/*ALive2DModel*/, partsGroup/*L2DPartsParam[]*/, deltaTimeSec/*float*/) {
    var visibleParts = -1;
    var visibleOpacity = 1.0;
    var CLEAR_TIME_SEC = 0.5;
    var phi = 0.5;
    var maxBackOpacity = 0.15;
    for (var i = 0; i < partsGroup.length; i++) {
        var partsIndex = partsGroup[i].partsIndex;
        var paramIndex = partsGroup[i].paramIndex;
        if (partsIndex < 0) continue;
        if (model.getParamFloat(paramIndex) != 0) {
            if (visibleParts >= 0) {
                break;
            }
            visibleParts = i;
            visibleOpacity = model.getPartsOpacity(partsIndex);
            visibleOpacity += deltaTimeSec / CLEAR_TIME_SEC;
            if (visibleOpacity > 1) {
                visibleOpacity = 1;
            }
        }
    }
    if (visibleParts < 0) {
        visibleParts = 0;
        visibleOpacity = 1;
    }
    for (var i = 0; i < partsGroup.length; i++) {
        var partsIndex = partsGroup[i].partsIndex;
        if (partsIndex < 0) continue;
        if (visibleParts == i) {
            model.setPartsOpacity(partsIndex, visibleOpacity);
        } else {
            var opacity = model.getPartsOpacity(partsIndex);
            var a1;
            if (visibleOpacity < phi) {
                a1 = visibleOpacity * (phi - 1) / phi + 1;
            } else {
                a1 = (1 - visibleOpacity) * phi / (1 - phi);
            }
            var backOp = (1 - a1) * (1 - visibleOpacity);
            if (backOp > maxBackOpacity) {
                a1 = 1 - maxBackOpacity / (1 - visibleOpacity);
            }
            if (opacity > a1) {
                opacity = a1;
            }
            model.setPartsOpacity(partsIndex, opacity);
        }
    }
}

//============================================================
//    L2DPose # copyOpacityOtherParts()
//============================================================
L2DPose.prototype.copyOpacityOtherParts = function (model/*ALive2DModel*/, partsGroup/*L2DPartsParam[]*/) {
    for (var i_group = 0; i_group < partsGroup.length; i_group++) {
        var partsParam = partsGroup[i_group]; //L2DPartsParam
        if (partsParam.link == null) continue;
        if (partsParam.partsIndex < 0) continue;
        var opacity = model.getPartsOpacity(partsParam.partsIndex);
        for (var i_link = 0; i_link < partsParam.link.length; i_link++) {
            var linkParts = partsParam.link[i_link]; //L2DPartsParam
            if (linkParts.partsIndex < 0) continue;
            model.setPartsOpacity(linkParts.partsIndex, opacity);
        }
    }
}

//============================================================
//============================================================
//  class L2DPartsParam        
//============================================================
//============================================================
function L2DPartsParam(id/*String*/) {
    this.paramIndex = -1;
    this.partsIndex = -1;
    this.link = null; // ArrayList<L2DPartsParam>
    this.id = id;
}

//============================================================
//    L2DPartsParam # initIndex()
//============================================================
L2DPartsParam.prototype.initIndex = function (model/*ALive2DModel*/) {
    this.paramIndex = model.getParamIndex("VISIBLE:" + this.id);
    this.partsIndex = model.getPartsDataIndex(PartsDataID.getID(this.id));
    model.setParamFloat(this.paramIndex, 1);
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DTargetPoint       
//============================================================
//============================================================
function L2DTargetPoint() {
    this.EPSILON = 0.01; // 変化の最小値（この値以下は無視される）
    this.faceTargetX = 0;
    this.faceTargetY = 0;
    this.faceX = 0;
    this.faceY = 0;
    this.faceVX = 0;
    this.faceVY = 0;
    this.lastTimeSec = 0;
}

//============================================================
L2DTargetPoint.FRAME_RATE = 30;

//============================================================
//    L2DTargetPoint # set()
//============================================================
L2DTargetPoint.prototype.setPoint = function (x/*float*/, y/*float*/) {
    this.faceTargetX = x;
    this.faceTargetY = y;
}

//============================================================
//    L2DTargetPoint # getX()
//============================================================
L2DTargetPoint.prototype.getX = function () {
    return this.faceX;
}

//============================================================
//    L2DTargetPoint # getY()
//============================================================
L2DTargetPoint.prototype.getY = function () {
    return this.faceY;
}

//============================================================
//    L2DTargetPoint # update()
//============================================================
L2DTargetPoint.prototype.update = function () {
    var TIME_TO_MAX_SPEED = 0.15;
    var FACE_PARAM_MAX_V = 40.0 / 7.5;
    var MAX_V = FACE_PARAM_MAX_V / L2DTargetPoint.FRAME_RATE;
    if (this.lastTimeSec == 0) {
        this.lastTimeSec = UtSystem.getUserTimeMSec();
        return;
    }
    var curTimeSec = UtSystem.getUserTimeMSec();
    var deltaTimeWeight = (curTimeSec - this.lastTimeSec) * L2DTargetPoint.FRAME_RATE / 1000.0;
    this.lastTimeSec = curTimeSec;
    var FRAME_TO_MAX_SPEED = TIME_TO_MAX_SPEED * L2DTargetPoint.FRAME_RATE;
    var MAX_A = deltaTimeWeight * MAX_V / FRAME_TO_MAX_SPEED;
    var dx = (this.faceTargetX - this.faceX);
    var dy = (this.faceTargetY - this.faceY);
    // if(dx == 0 && dy == 0) return;
    if (Math.abs(dx) <= this.EPSILON && Math.abs(dy) <= this.EPSILON) return;
    var d = Math.sqrt(dx * dx + dy * dy);
    var vx = MAX_V * dx / d;
    var vy = MAX_V * dy / d;
    var ax = vx - this.faceVX;
    var ay = vy - this.faceVY;
    var a = Math.sqrt(ax * ax + ay * ay);
    if (a < -MAX_A || a > MAX_A) {
        ax *= MAX_A / a;
        ay *= MAX_A / a;
        a = MAX_A;
    }
    this.faceVX += ax;
    this.faceVY += ay;
    {
        var max_v = 0.5 * (Math.sqrt(MAX_A * MAX_A + 16 * MAX_A * d - 8 * MAX_A * d) - MAX_A);
        var cur_v = Math.sqrt(this.faceVX * this.faceVX + this.faceVY * this.faceVY);
        if (cur_v > max_v) {
            this.faceVX *= max_v / cur_v;
            this.faceVY *= max_v / cur_v;
        }
    }
    this.faceX += this.faceVX;
    this.faceY += this.faceVY;
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class L2DViewMatrix        extends     L2DMatrix44
//============================================================
//============================================================
function L2DViewMatrix() {
    L2DMatrix44.prototype.constructor.call(this);
    this.screenLeft = null;
    this.screenRight = null;
    this.screenTop = null;
    this.screenBottom = null;
    this.maxLeft = null;
    this.maxRight = null;
    this.maxTop = null;
    this.maxBottom = null;
    this.max = Number.MAX_VALUE;
    this.min = 0;
}

L2DViewMatrix.prototype = new L2DMatrix44(); //L2DViewMatrix extends L2DMatrix44

//============================================================
//    L2DViewMatrix # getMaxScale()
//============================================================
L2DViewMatrix.prototype.getMaxScale = function () {
    return this.max;
}

//============================================================
//    L2DViewMatrix # getMinScale()
//============================================================
L2DViewMatrix.prototype.getMinScale = function () {
    return this.min;
}

//============================================================
//    L2DViewMatrix # setMaxScale()
//============================================================
L2DViewMatrix.prototype.setMaxScale = function (v/*float*/) {
    this.max = v;
}

//============================================================
//    L2DViewMatrix # setMinScale()
//============================================================
L2DViewMatrix.prototype.setMinScale = function (v/*float*/) {
    this.min = v;
}

//============================================================
//    L2DViewMatrix # isMaxScale()
//============================================================
L2DViewMatrix.prototype.isMaxScale = function () {
    return this.getScaleX() == this.max;
}

//============================================================
//    L2DViewMatrix # isMinScale()
//============================================================
L2DViewMatrix.prototype.isMinScale = function () {
    return this.getScaleX() == this.min;
}

//============================================================
//    L2DViewMatrix # adjustTranslate()
//============================================================
L2DViewMatrix.prototype.adjustTranslate = function (shiftX/*float*/, shiftY/*float*/) {
    if (this.tr[0] * this.maxLeft + (this.tr[12] + shiftX) > this.screenLeft)
        shiftX = this.screenLeft - this.tr[0] * this.maxLeft - this.tr[12];
    if (this.tr[0] * this.maxRight + (this.tr[12] + shiftX) < this.screenRight)
        shiftX = this.screenRight - this.tr[0] * this.maxRight - this.tr[12];
    if (this.tr[5] * this.maxTop + (this.tr[13] + shiftY) < this.screenTop)
        shiftY = this.screenTop - this.tr[5] * this.maxTop - this.tr[13];
    if (this.tr[5] * this.maxBottom + (this.tr[13] + shiftY) > this.screenBottom)
        shiftY = this.screenBottom - this.tr[5] * this.maxBottom - this.tr[13];

    var tr1 = [1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        shiftX, shiftY, 0, 1];
    L2DMatrix44.mul(tr1, this.tr, this.tr);
}

//============================================================
//    L2DViewMatrix # adjustScale()
//============================================================
L2DViewMatrix.prototype.adjustScale = function (cx/*float*/, cy/*float*/, scale/*float*/) {
    var targetScale = scale * this.tr[0];
    if (targetScale < this.min) {
        if (this.tr[0] > 0) scale = this.min / this.tr[0];
    } else if (targetScale > this.max) {
        if (this.tr[0] > 0) scale = this.max / this.tr[0];
    }
    var tr1 = [1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        cx, cy, 0, 1];
    var tr2 = [scale, 0, 0, 0,
        0, scale, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1];
    var tr3 = [1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        -cx, -cy, 0, 1];
    L2DMatrix44.mul(tr3, this.tr, this.tr);
    L2DMatrix44.mul(tr2, this.tr, this.tr);
    L2DMatrix44.mul(tr1, this.tr, this.tr);
}

//============================================================
//    L2DViewMatrix # setScreenRect()
//============================================================
L2DViewMatrix.prototype.setScreenRect = function (left/*float*/, right/*float*/, bottom/*float*/, top/*float*/) {
    this.screenLeft = left;
    this.screenRight = right;
    this.screenTop = top;
    this.screenBottom = bottom;
}

//============================================================
//    L2DViewMatrix # setMaxScreenRect()
//============================================================
L2DViewMatrix.prototype.setMaxScreenRect = function (left/*float*/, right/*float*/, bottom/*float*/, top/*float*/) {
    this.maxLeft = left;
    this.maxRight = right;
    this.maxTop = top;
    this.maxBottom = bottom;
}

//============================================================
//    L2DViewMatrix # getScreenLeft()
//============================================================
L2DViewMatrix.prototype.getScreenLeft = function () {
    return this.screenLeft;
}

//============================================================
//    L2DViewMatrix # getScreenRight()
//============================================================
L2DViewMatrix.prototype.getScreenRight = function () {
    return this.screenRight;
}

//============================================================
//    L2DViewMatrix # getScreenBottom()
//============================================================
L2DViewMatrix.prototype.getScreenBottom = function () {
    return this.screenBottom;
}

//============================================================
//    L2DViewMatrix # getScreenTop()
//============================================================
L2DViewMatrix.prototype.getScreenTop = function () {
    return this.screenTop;
}

//============================================================
//    L2DViewMatrix # getMaxLeft()
//============================================================
L2DViewMatrix.prototype.getMaxLeft = function () {
    return this.maxLeft;
}

//============================================================
//    L2DViewMatrix # getMaxRight()
//============================================================
L2DViewMatrix.prototype.getMaxRight = function () {
    return this.maxRight;
}

//============================================================
//    L2DViewMatrix # getMaxBottom()
//============================================================
L2DViewMatrix.prototype.getMaxBottom = function () {
    return this.maxBottom;
}

//============================================================
//    L2DViewMatrix # getMaxTop()
//============================================================
L2DViewMatrix.prototype.getMaxTop = function () {
    return this.maxTop;
}

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */

//============================================================
//============================================================
//  class Live2DFramework      
//============================================================
//============================================================
function Live2DFramework() {
}

//============================================================
Live2DFramework.platformManager = null;

//============================================================
//    static Live2DFramework.getPlatformManager()
//============================================================
Live2DFramework.getPlatformManager = function () {
    return Live2DFramework.platformManager;
}

//============================================================
//    static Live2DFramework.setPlatformManager()
//============================================================
Live2DFramework.setPlatformManager = function (platformManager /*IPlatformManager*/) {
    Live2DFramework.platformManager = platformManager;
}

module.exports = {
    L2DTargetPoint: L2DTargetPoint,
    Live2DFramework: Live2DFramework,
    L2DViewMatrix: L2DViewMatrix,
    L2DPose: L2DPose,
    L2DPartsParam: L2DPartsParam,
    L2DPhysics: L2DPhysics,
    L2DMotionManager: L2DMotionManager,
    L2DModelMatrix: L2DModelMatrix,
    L2DMatrix44: L2DMatrix44,
    EYE_STATE: EYE_STATE,
    L2DEyeBlink: L2DEyeBlink,
    L2DExpressionParam: L2DExpressionParam,
    L2DExpressionMotion: L2DExpressionMotion,
    L2DBaseModel: L2DBaseModel
}

/***/ }),

/***/ "./src/SDKv2/lib/MatrixStack.js":
/*!**************************************!*\
  !*** ./src/SDKv2/lib/MatrixStack.js ***!
  \**************************************/
/***/ ((module) => {

/**
 *
 *  You can modify and use this source freely
 *  only for the development of application related Live2D.
 *
 *  (c) Live2D Inc. All rights reserved.
 */
/**
 * EYHN 修改
 * 
 * Copyright © 2016 - 2017 EYHN
 */

function MatrixStack() {}


MatrixStack.matrixStack = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];


MatrixStack.depth = 0;


MatrixStack.currentMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];


MatrixStack.tmp = new Array(16);



MatrixStack.reset = function()
{
    this.depth = 0;
}



MatrixStack.loadIdentity = function()
{
    for (var i = 0; i < 16; i++)
    {
        this.currentMatrix[i] = (i % 5 == 0) ? 1 : 0;
    }
}



MatrixStack.push = function()
{    
    var offset = this.depth * 16;
    var nextOffset = (this.depth + 1) * 16;
    
    if (this.matrixStack.length < nextOffset + 16)
    {
        this.matrixStack.length = nextOffset + 16;
    }

    for (var i = 0; i < 16; i++)
    {
        this.matrixStack[nextOffset + i] = this.currentMatrix[i];
    }

    this.depth++;
}



MatrixStack.pop = function()
{
    this.depth--;
    if (this.depth < 0)
    {
        myError("Invalid matrix stack.");
        this.depth = 0;
    }

    var offset = this.depth * 16;
    for (var i = 0; i < 16; i++)
    {
        this.currentMatrix[i] = this.matrixStack[offset + i];
    }
}



MatrixStack.getMatrix = function()
{
    return this.currentMatrix;
}



MatrixStack.multMatrix = function(matNew)
{
    var i, j, k;

    for (i = 0; i < 16; i++)
    {
        this.tmp[i] = 0;
    }

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            for (k = 0; k < 4; k++)
            {
                this.tmp[i + j * 4] += this.currentMatrix[i + k * 4] * matNew[k + j * 4];
            }
        }
    }
    for (i = 0; i < 16; i++)
    {
        this.currentMatrix[i] = this.tmp[i];
    }
}

module.exports = MatrixStack;

/***/ }),

/***/ "./src/SDKv2/lib/ModelSettingJson.js":
/*!*******************************************!*\
  !*** ./src/SDKv2/lib/ModelSettingJson.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ModelSettingJson)
/* harmony export */ });
/* harmony import */ var _Live2DFramework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Live2DFramework */ "./src/SDKv2/lib/Live2DFramework.js");
/* harmony import */ var _Live2DFramework__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Live2DFramework__WEBPACK_IMPORTED_MODULE_0__);


function ModelSettingJson()
{    
    this.NAME = "name";
    this.ID = "id";
    this.MODEL = "model";
    this.TEXTURES = "textures";
    this.HIT_AREAS = "hit_areas";
    this.PHYSICS = "physics";
    this.POSE = "pose";
    this.EXPRESSIONS = "expressions";
    this.MOTION_GROUPS = "motions";
    this.SOUND = "sound";
    this.FADE_IN = "fade_in";
    this.FADE_OUT = "fade_out";
    this.LAYOUT = "layout";
    this.HIT_AREAS_CUSTOM = "hit_areas_custom";
    this.INIT_PARAM = "init_param";
    this.INIT_PARTS_VISIBLE = "init_parts_visible";
    this.VALUE = "val";
    this.FILE = "file";
    this.MOTION_EXPRESSION = "expression";

    this.json = {};
}


ModelSettingJson.prototype.loadModelSetting = function(path, callback)
{    
    var thisRef = this;
    var pm = _Live2DFramework__WEBPACK_IMPORTED_MODULE_0__.Live2DFramework.getPlatformManager();
    pm.loadBytes(path, function(buf) {
        var str = String.fromCharCode.apply(null,new Uint8Array(buf));
        thisRef.json = JSON.parse(str);
        callback();
    });
};


ModelSettingJson.prototype.getTextureFile = function(n)
{    
    if (this.json[this.TEXTURES] == null || this.json[this.TEXTURES][n] == null)
        return null;
    
    return this.json[this.TEXTURES][n];
}


ModelSettingJson.prototype.getModelFile = function()
{        
    return this.json[this.MODEL];
};


ModelSettingJson.prototype.getTextureNum = function()
{    
    if (this.json[this.TEXTURES] == null) return 0;
    
    return this.json[this.TEXTURES].length;
}


ModelSettingJson.prototype.getHitAreaNum = function()
{
    if (this.json[this.HIT_AREAS] == null)
        return 0;

    return this.json[this.HIT_AREAS].length;
}


ModelSettingJson.prototype.getHitAreaID = function(n)
{
    if (this.json[this.HIT_AREAS] == null ||
        this.json[this.HIT_AREAS][n] == null)
        return null;

    return this.json[this.HIT_AREAS][n][this.ID];
}


ModelSettingJson.prototype.getHitAreaName = function(n)
{
    if (this.json[this.HIT_AREAS] == null || 
        this.json[this.HIT_AREAS][n] == null)
        return null;

    return this.json[this.HIT_AREAS][n][this.NAME];
}


ModelSettingJson.prototype.getPhysicsFile = function()
{
    return this.json[this.PHYSICS];
}


ModelSettingJson.prototype.getPoseFile = function()
{
    return this.json[this.POSE];
}


ModelSettingJson.prototype.getExpressionNum = function()
{
    return (this.json[this.EXPRESSIONS] == null) ? 0 : this.json[this.EXPRESSIONS].length;
}


ModelSettingJson.prototype.getExpressionFile = function(n)
{
    if (this.json[this.EXPRESSIONS] == null)
        return null;
    return this.json[this.EXPRESSIONS][n][this.FILE];
}


ModelSettingJson.prototype.getExpressionName = function(n)
{
    if (this.json[this.EXPRESSIONS] == null)
        return null;
    return this.json[this.EXPRESSIONS][n][this.NAME];
}


ModelSettingJson.prototype.getLayout = function()
{
    return this.json[this.LAYOUT];
}


ModelSettingJson.prototype.getHitAreasCustom = function()
{
    return this.json[this.HIT_AREAS_CUSTOM];
}


ModelSettingJson.prototype.getInitParamNum = function()
{
    return (this.json[this.INIT_PARAM] == null) ? 0 : this.json[this.INIT_PARAM].length;
}


ModelSettingJson.prototype.getMotionNum = function(name)
{
    if (this.json[this.MOTION_GROUPS] == null || 
        this.json[this.MOTION_GROUPS][name] == null)
        return 0;
    
    return this.json[this.MOTION_GROUPS][name].length;
}


ModelSettingJson.prototype.getMotionFile = function(name, n)
{
    if (this.json[this.MOTION_GROUPS] == null || 
        this.json[this.MOTION_GROUPS][name] == null || 
        this.json[this.MOTION_GROUPS][name][n] == null)
        return null;

    return this.json[this.MOTION_GROUPS][name][n][this.FILE];
}


ModelSettingJson.prototype.getMotionSound = function(name, n)
{
    if (this.json[this.MOTION_GROUPS] == null || 
        this.json[this.MOTION_GROUPS][name] == null || 
        this.json[this.MOTION_GROUPS][name][n] == null || 
        this.json[this.MOTION_GROUPS][name][n][this.SOUND] == null)
        return null;

    return this.json[this.MOTION_GROUPS][name][n][this.SOUND];
}

ModelSettingJson.prototype.getMotionExpression = function(name, n)
{
    if (this.json[this.MOTION_GROUPS] == null ||
        this.json[this.MOTION_GROUPS][name] == null ||
        this.json[this.MOTION_GROUPS][name][n] == null ||
        this.json[this.MOTION_GROUPS][name][n][this.MOTION_EXPRESSION] == null)
        return null;

    return this.json[this.MOTION_GROUPS][name][n][this.MOTION_EXPRESSION];
}


ModelSettingJson.prototype.getMotionFadeIn = function(name, n)
{
    if (this.json[this.MOTION_GROUPS] == null || 
        this.json[this.MOTION_GROUPS][name] == null || 
        this.json[this.MOTION_GROUPS][name][n] == null || 
        this.json[this.MOTION_GROUPS][name][n][this.FADE_IN] == null)
        return 1000;

    return this.json[this.MOTION_GROUPS][name][n][this.FADE_IN];
}


ModelSettingJson.prototype.getMotionFadeOut = function(name, n)
{
    if (this.json[this.MOTION_GROUPS] == null || 
        this.json[this.MOTION_GROUPS][name] == null || 
        this.json[this.MOTION_GROUPS][name][n] == null || 
        this.json[this.MOTION_GROUPS][name][n][this.FADE_OUT] == null)
        return 1000;
    
    return this.json[this.MOTION_GROUPS][name][n][this.FADE_OUT];
}


ModelSettingJson.prototype.getInitParamID = function(n)
{
    if (this.json[this.INIT_PARAM] == null || 
        this.json[this.INIT_PARAM][n] == null)
        return null;
    
    return this.json[this.INIT_PARAM][n][this.ID];
}


ModelSettingJson.prototype.getInitParamValue = function(n)
{
    if (this.json[this.INIT_PARAM] == null || this.json[this.INIT_PARAM][n] == null)
        return NaN;
    
    return this.json[this.INIT_PARAM][n][this.VALUE];
}


ModelSettingJson.prototype.getInitPartsVisibleNum = function()
{
    return (this.json[this.INIT_PARTS_VISIBLE] == null) ? 0 : this.json[this.INIT_PARTS_VISIBLE].length;
}


ModelSettingJson.prototype.getInitPartsVisibleID = function(n)
{
    if (this.json[this.INIT_PARTS_VISIBLE] == null || this.json[this.INIT_PARTS_VISIBLE][n] == null)
        return null;
    return this.json[this.INIT_PARTS_VISIBLE][n][this.ID];
}


ModelSettingJson.prototype.getInitPartsVisibleValue = function(n)
{
    if (this.json[this.INIT_PARTS_VISIBLE] == null || this.json[this.INIT_PARTS_VISIBLE][n] == null)
        return NaN;
    
    return this.json[this.INIT_PARTS_VISIBLE][n][this.VALUE];
}

/***/ }),

/***/ "./src/SDKv2/lib/coreV2.min.js":
/*!*************************************!*\
  !*** ./src/SDKv2/lib/coreV2.min.js ***!
  \*************************************/
/***/ (() => {


(function(){var j=true;function aa(){if(j){return;}this._$MT=null;this._$5S=null;this._$NP=0;aa._$42++;this._$5S=new y(this);}aa._$0s=1;aa._$4s=2;aa._$42=0;aa._$62=function(aQ,aU){try{if(aU instanceof ArrayBuffer){aU=new DataView(aU);}if(!(aU instanceof DataView)){throw new J("_$SS#loadModel(b) / b _$x be DataView or ArrayBuffer");}var aS=new K(aU);var aM=aS._$ST();var aK=aS._$ST();var aJ=aS._$ST();var aN;if(aM==109&&aK==111&&aJ==99){aN=aS._$ST();}else{throw new J("_$gi _$C _$li , _$Q0 _$P0.");}aS._$gr(aN);if(aN>ay._$T7){aQ._$NP|=aa._$4s;var aR=ay._$T7;var aI="_$gi _$C _$li , _$n0 _$_ version _$li ( SDK : "+aR+" < _$f0 : "+aN+" )@_$SS#loadModel()\n";throw new J(aI);}var aL=aS._$nP();if(aN>=ay._$s7){var aH=aS._$9T();var aT=aS._$9T();if(aH!=-30584||aT!=-30584){aQ._$NP|=aa._$0s;throw new J("_$gi _$C _$li , _$0 _$6 _$Ui.");}}aQ._$KS(aL);var aP=aQ.getModelContext();aP.setDrawParam(aQ.getDrawParam());aP.init();}catch(aO){q._$Rb(aO);}};aa.prototype._$KS=function(aH){this._$MT=aH;};aa.prototype.getModelImpl=function(){if(this._$MT==null){this._$MT=new w();this._$MT._$zP();}return this._$MT;};aa.prototype.getCanvasWidth=function(){if(this._$MT==null){return 0;}return this._$MT.getCanvasWidth();};aa.prototype.getCanvasHeight=function(){if(this._$MT==null){return 0;}return this._$MT.getCanvasHeight();};aa.prototype.getParamFloat=function(aH){if(typeof aH!="number"){aH=this._$5S.getParamIndex(z.getID(aH));}return this._$5S.getParamFloat(aH);};aa.prototype.setParamFloat=function(aH,aJ,aI){if(typeof aH!="number"){aH=this._$5S.getParamIndex(z.getID(aH));}if(arguments.length<3){aI=1;}this._$5S.setParamFloat(aH,this._$5S.getParamFloat(aH)*(1-aI)+aJ*aI);};aa.prototype.addToParamFloat=function(aH,aJ,aI){if(typeof aH!="number"){aH=this._$5S.getParamIndex(z.getID(aH));}if(arguments.length<3){aI=1;}this._$5S.setParamFloat(aH,this._$5S.getParamFloat(aH)+aJ*aI);};aa.prototype.multParamFloat=function(aH,aJ,aI){if(typeof aH!="number"){aH=this._$5S.getParamIndex(z.getID(aH));}if(arguments.length<3){aI=1;}this._$5S.setParamFloat(aH,this._$5S.getParamFloat(aH)*(1+(aJ-1)*aI));};aa.prototype.getParamIndex=function(aH){return this._$5S.getParamIndex(z.getID(aH));};aa.prototype.loadParam=function(){this._$5S.loadParam();};aa.prototype.saveParam=function(){this._$5S.saveParam();};aa.prototype.init=function(){this._$5S.init();};aa.prototype.update=function(){this._$5S.update();};aa.prototype._$Rs=function(){q._$li("_$60 _$PT _$Rs()");return -1;};aa.prototype._$Ds=function(aH){q._$li("_$60 _$PT _$SS#_$Ds() \n");};aa.prototype._$K2=function(){};aa.prototype.draw=function(){};aa.prototype.getModelContext=function(){return this._$5S;};aa.prototype._$s2=function(){return this._$NP;};aa.prototype._$P7=function(aK,aR,aH,a0){var aU=-1;var aY=0;var aM=this;var aJ=0.5;var aI=0.15;var aX=true;if(aH==0){for(var aV=0;aV<aK.length;aV++){var aP=aK[aV];var aO=aR[aV];var aS=(aM.getParamFloat(aP)!=0);aM.setPartsOpacity(aO,(aS?1:0));}return;}else{if(aK.length==1){var aP=aK[0];var aT=(aM.getParamFloat(aP)!=0);var aO=aR[0];var aQ=aM.getPartsOpacity(aO);var aW=aH/a0;if(aT){aQ+=aW;if(aQ>1){aQ=1;}}else{aQ-=aW;if(aQ<0){aQ=0;}}aM.setPartsOpacity(aO,aQ);}else{for(var aV=0;aV<aK.length;aV++){var aP=aK[aV];var aS=(aM.getParamFloat(aP)!=0);if(aS){if(aU>=0){break;}aU=aV;var aO=aR[aV];aY=aM.getPartsOpacity(aO);aY+=aH/a0;if(aY>1){aY=1;}}}if(aU<0){console.log("No _$wi _$q0/ _$U default[%s]",aK[0]);aU=0;aY=1;aM.loadParam();aM.setParamFloat(aK[aU],aY);aM.saveParam();}for(var aV=0;aV<aK.length;aV++){var aO=aR[aV];if(aU==aV){aM.setPartsOpacity(aO,aY);}else{var aL=aM.getPartsOpacity(aO);var aZ;if(aY<aJ){aZ=aY*(aJ-1)/aJ+1;}else{aZ=(1-aY)*aJ/(1-aJ);}if(aX){var aN=(1-aZ)*(1-aY);if(aN>aI){aZ=1-aI/(1-aY);}}if(aL>aZ){aL=aZ;}aM.setPartsOpacity(aO,aL);}}}}};aa.prototype.setPartsOpacity=function(aI,aH){if(typeof aI!="number"){aI=this._$5S.getPartsDataIndex(i.getID(aI));}this._$5S.setPartsOpacity(aI,aH);};aa.prototype.getPartsDataIndex=function(aH){if(!(aH instanceof i)){aH=i.getID(aH);}return this._$5S.getPartsDataIndex(aH);};aa.prototype.getPartsOpacity=function(aH){if(typeof aH!="number"){aH=this._$5S.getPartsDataIndex(i.getID(aH));}if(aH<0){return 0;}return this._$5S.getPartsOpacity(aH);};aa.prototype.getDrawParam=function(){};aa.prototype.getDrawDataIndex=function(aH){return this._$5S.getDrawDataIndex(Z.getID(aH));};aa.prototype.getDrawData=function(aH){return this._$5S.getDrawData(aH);};aa.prototype.getTransformedPoints=function(aH){var aI=this._$5S._$C2(aH);if(aI instanceof ag){return(aI).getTransformedPoints();}return null;};aa.prototype.getIndexArray=function(aI){if(aI<0||aI>=this._$5S._$aS.length){return null;}var aH=this._$5S._$aS[aI];if(aH!=null&&aH.getType()==a._$wb){if(aH instanceof b){return aH.getIndexArray();}}return null;};function W(aJ){if(j){return;}this.clipContextList=new Array();this.glcontext=aJ.gl;this.dp_webgl=aJ;this.curFrameNo=0;this.firstError_clipInNotUpdate=true;this.colorBuffer=0;this.isInitGLFBFunc=false;this.tmpBoundsOnModel=new av();if(Q.glContext.length>Q.frameBuffers.length){this.curFrameNo=this.getMaskRenderTexture();}else{}this.tmpModelToViewMatrix=new ac();this.tmpMatrix2=new ac();this.tmpMatrixForMask=new ac();this.tmpMatrixForDraw=new ac();this.CHANNEL_COLORS=new Array();var aI=new o();aI=new o();aI.r=0;aI.g=0;aI.b=0;aI.a=1;this.CHANNEL_COLORS.push(aI);aI=new o();aI.r=1;aI.g=0;aI.b=0;aI.a=0;this.CHANNEL_COLORS.push(aI);aI=new o();aI.r=0;aI.g=1;aI.b=0;aI.a=0;this.CHANNEL_COLORS.push(aI);aI=new o();aI.r=0;aI.g=0;aI.b=1;aI.a=0;this.CHANNEL_COLORS.push(aI);for(var aH=0;aH<this.CHANNEL_COLORS.length;aH++){this.dp_webgl.setChannelFlagAsColor(aH,this.CHANNEL_COLORS[aH]);}}W.CHANNEL_COUNT=4;W.RENDER_TEXTURE_USE_MIPMAP=false;W.NOT_USED_FRAME=-100;W.prototype._$L7=function(){if(this.tmpModelToViewMatrix){this.tmpModelToViewMatrix=null;}if(this.tmpMatrix2){this.tmpMatrix2=null;}if(this.tmpMatrixForMask){this.tmpMatrixForMask=null;}if(this.tmpMatrixForDraw){this.tmpMatrixForDraw=null;}if(this.tmpBoundsOnModel){this.tmpBoundsOnModel=null;}if(this.CHANNEL_COLORS){for(var aH=this.CHANNEL_COLORS.length-1;aH>=0;--aH){this.CHANNEL_COLORS.splice(aH,1);}this.CHANNEL_COLORS=[];}this.releaseShader();};W.prototype.releaseShader=function(){var aI=Q.frameBuffers.length;for(var aH=0;aH<aI;aH++){this.gl.deleteFramebuffer(Q.frameBuffers[aH].framebuffer);}Q.frameBuffers=[];Q.glContext=[];};W.prototype.init=function(aO,aN,aL){for(var aM=0;aM<aN.length;aM++){var aH=aN[aM].getClipIDList();if(aH==null){continue;}var aJ=this.findSameClip(aH);if(aJ==null){aJ=new U(this,aO,aH);this.clipContextList.push(aJ);}var aI=aN[aM].getDrawDataID();var aK=aO.getDrawDataIndex(aI);aJ.addClippedDrawData(aI,aK);var aP=aL[aM];aP.clipBufPre_clipContext=aJ;}};W.prototype.getMaskRenderTexture=function(){var aH=null;aH=this.dp_webgl.createFramebuffer();Q.frameBuffers[this.dp_webgl.glno]=aH;return this.dp_webgl.glno;};W.prototype.setupClip=function(a1,aQ){var aK=0;for(var aO=0;aO<this.clipContextList.length;aO++){var aP=this.clipContextList[aO];this.calcClippedDrawTotalBounds(a1,aP);if(aP.isUsing){aK++;}}if(aK>0){var aM=aQ.gl.getParameter(aQ.gl.FRAMEBUFFER_BINDING);var aW=new Array(4);aW[0]=0;aW[1]=0;aW[2]=aQ.gl.canvas.width;aW[3]=aQ.gl.canvas.height;aQ.gl.viewport(0,0,Q.clippingMaskBufferSize,Q.clippingMaskBufferSize);this.setupLayoutBounds(aK);aQ.gl.bindFramebuffer(aQ.gl.FRAMEBUFFER,Q.frameBuffers[this.curFrameNo].framebuffer);aQ.gl.clearColor(0,0,0,0);aQ.gl.clear(aQ.gl.COLOR_BUFFER_BIT);for(var aO=0;aO<this.clipContextList.length;aO++){var aP=this.clipContextList[aO];var aT=aP.allClippedDrawRect;var aN=aP.layoutChannelNo;var aV=aP.layoutBounds;var aJ=0.05;this.tmpBoundsOnModel._$jL(aT);this.tmpBoundsOnModel.expand(aT.width*aJ,aT.height*aJ);var aZ=aV.width/this.tmpBoundsOnModel.width;var aY=aV.height/this.tmpBoundsOnModel.height;this.tmpMatrix2.identity();this.tmpMatrix2.translate(-1,-1,0);this.tmpMatrix2.scale(2,2,1);this.tmpMatrix2.translate(aV.x,aV.y,0);this.tmpMatrix2.scale(aZ,aY,1);this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0);this.tmpMatrixForMask.setMatrix(this.tmpMatrix2.m);this.tmpMatrix2.identity();this.tmpMatrix2.translate(aV.x,aV.y,0);this.tmpMatrix2.scale(aZ,aY,1);this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0);this.tmpMatrixForDraw.setMatrix(this.tmpMatrix2.m);var aH=this.tmpMatrixForMask.getArray();for(var aX=0;aX<16;aX++){aP.matrixForMask[aX]=aH[aX];}var a0=this.tmpMatrixForDraw.getArray();for(var aX=0;aX<16;aX++){aP.matrixForDraw[aX]=a0[aX];}var aS=aP.clippingMaskDrawIndexList.length;for(var aU=0;aU<aS;aU++){var aR=aP.clippingMaskDrawIndexList[aU];var aI=a1.getDrawData(aR);var aL=a1._$C2(aR);aQ.setClipBufPre_clipContextForMask(aP);aI.draw(aQ,a1,aL);}}aQ.gl.bindFramebuffer(aQ.gl.FRAMEBUFFER,aM);aQ.setClipBufPre_clipContextForMask(null);aQ.gl.viewport(aW[0],aW[1],aW[2],aW[3]);}};W.prototype.getColorBuffer=function(){return this.colorBuffer;};W.prototype.findSameClip=function(aK){for(var aN=0;aN<this.clipContextList.length;aN++){var aO=this.clipContextList[aN];var aH=aO.clipIDList.length;if(aH!=aK.length){continue;}var aI=0;for(var aM=0;aM<aH;aM++){var aL=aO.clipIDList[aM];for(var aJ=0;aJ<aH;aJ++){if(aK[aJ]==aL){aI++;break;}}}if(aI==aH){return aO;}}return null;};W.prototype.calcClippedDrawTotalBounds=function(a6,aV){var aU=a6._$Ri.getModelImpl().getCanvasWidth();var a5=a6._$Ri.getModelImpl().getCanvasHeight();var aJ=aU>a5?aU:a5;var aT=aJ;var aR=aJ;var aS=0;var aP=0;var aL=aV.clippedDrawContextList.length;for(var aM=0;aM<aL;aM++){var aW=aV.clippedDrawContextList[aM];var aN=aW.drawDataIndex;var aK=a6._$C2(aN);if(aK._$yo()){var aX=aK.getTransformedPoints();var a4=aX.length;var aI=[];var aH=[];var aO=0;for(var a3=aw._$i2;a3<a4;a3+=aw._$No){aI[aO]=aX[a3];aH[aO]=aX[a3+1];aO++;}var a2=Math.min.apply(null,aI);var a1=Math.min.apply(null,aH);var a0=Math.max.apply(null,aI);var aZ=Math.max.apply(null,aH);if(a2<aT){aT=a2;}if(a1<aR){aR=a1;}if(a0>aS){aS=a0;}if(aZ>aP){aP=aZ;}}}if(aT==aJ){aV.allClippedDrawRect.x=0;aV.allClippedDrawRect.y=0;aV.allClippedDrawRect.width=0;aV.allClippedDrawRect.height=0;aV.isUsing=false;}else{var aQ=aS-aT;var aY=aP-aR;aV.allClippedDrawRect.x=aT;aV.allClippedDrawRect.y=aR;aV.allClippedDrawRect.width=aQ;aV.allClippedDrawRect.height=aY;aV.isUsing=true;}};W.prototype.setupLayoutBounds=function(aQ){var aI=aQ/W.CHANNEL_COUNT;var aP=aQ%W.CHANNEL_COUNT;aI=~~aI;aP=~~aP;var aH=0;for(var aJ=0;aJ<W.CHANNEL_COUNT;aJ++){var aM=aI+(aJ<aP?1:0);if(aM==0){}else{if(aM==1){var aL=this.clipContextList[aH++];aL.layoutChannelNo=aJ;aL.layoutBounds.x=0;aL.layoutBounds.y=0;aL.layoutBounds.width=1;aL.layoutBounds.height=1;}else{if(aM==2){for(var aO=0;aO<aM;aO++){var aN=aO%2;var aK=0;aN=~~aN;var aL=this.clipContextList[aH++];aL.layoutChannelNo=aJ;aL.layoutBounds.x=aN*0.5;aL.layoutBounds.y=0;aL.layoutBounds.width=0.5;aL.layoutBounds.height=1;}}else{if(aM<=4){for(var aO=0;aO<aM;aO++){var aN=aO%2;var aK=aO/2;aN=~~aN;aK=~~aK;var aL=this.clipContextList[aH++];aL.layoutChannelNo=aJ;aL.layoutBounds.x=aN*0.5;aL.layoutBounds.y=aK*0.5;aL.layoutBounds.width=0.5;aL.layoutBounds.height=0.5;}}else{if(aM<=9){for(var aO=0;aO<aM;aO++){var aN=aO%3;var aK=aO/3;aN=~~aN;aK=~~aK;var aL=this.clipContextList[aH++];aL.layoutChannelNo=aJ;aL.layoutBounds.x=aN/3;aL.layoutBounds.y=aK/3;aL.layoutBounds.width=1/3;aL.layoutBounds.height=1/3;}}else{q._$li("_$6 _$0P mask count : %d",aM);}}}}}}};function U(aH,aK,aI){this.clipIDList=new Array();this.clipIDList=aI;this.clippingMaskDrawIndexList=new Array();for(var aJ=0;aJ<aI.length;aJ++){this.clippingMaskDrawIndexList.push(aK.getDrawDataIndex(aI[aJ]));}this.clippedDrawContextList=new Array();this.isUsing=true;this.layoutChannelNo=0;this.layoutBounds=new av();this.allClippedDrawRect=new av();this.matrixForMask=new Float32Array(16);this.matrixForDraw=new Float32Array(16);this.owner=aH;}U.prototype.addClippedDrawData=function(aJ,aI){var aH=new R(aJ,aI);this.clippedDrawContextList.push(aH);};function R(aI,aH){this._$gP=aI;this.drawDataIndex=aH;}function I(){if(j){return;}this.color=null;}function ah(){if(j){return;}this._$dP=null;this._$eo=null;this._$V0=null;this._$dP=1000;this._$eo=1000;this._$V0=1;this._$a0();}ah._$JT=function(aP,aN,aO){var aQ=aP/aN;var a1=aO/aN;var aU=a1;var aZ=1/3;var aR=2/3;var a0=1-(1-a1)*(1-a1);var a2=1-(1-aU)*(1-aU);var aM=0;var aL=((1-a1)*aZ)*a0+(aU*aR+(1-aU)*aZ)*(1-a0);var aK=(aU+(1-aU)*aR)*a2+(a1*aZ+(1-a1)*aR)*(1-a2);var aJ=1;var aY=aJ-3*aK+3*aL-aM;var aX=3*aK-6*aL+3*aM;var aW=3*aL-3*aM;var aV=aM;if(aQ<=0){return 0;}else{if(aQ>=1){return 1;}}var aS=aQ;var aI=aS*aS;var aH=aS*aI;var aT=aY*aH+aX*aI+aW*aS+aV;return aT;};ah.prototype._$a0=function(){};ah.prototype.setFadeIn=function(aH){this._$dP=aH;};ah.prototype.setFadeOut=function(aH){this._$eo=aH;};ah.prototype._$pT=function(aH){this._$V0=aH;};ah.prototype.getFadeOut=function(){return this._$eo;};ah.prototype._$4T=function(){return this._$eo;};ah.prototype._$mT=function(){return this._$V0;};ah.prototype.getDurationMSec=function(){return -1;};ah.prototype.getLoopDurationMSec=function(){return -1;};ah.prototype.updateParam=function(aJ,aN){if(!aN._$AT||aN._$9L){return;}var aL=P.getUserTimeMSec();if(aN._$z2<0){aN._$z2=aL;aN._$bs=aL;var aM=this.getDurationMSec();if(aN._$Do<0){aN._$Do=(aM<=0)?-1:aN._$z2+aM;}}var aI=this._$V0;var aH=(this._$dP==0)?1:A._$r2(((aL-aN._$bs)/(this._$dP)));var aK=(this._$eo==0||aN._$Do<0)?1:A._$r2(((aN._$Do-aL)/(this._$eo)));aI=aI*aH*aK;if(!((0<=aI&&aI<=1))){console.log("### assert!! ### ");}this.updateParamExe(aJ,aL,aI,aN);if(aN._$Do>0&&aN._$Do<aL){aN._$9L=true;}};ah.prototype.updateParamExe=function(aH,aI,aJ,aK){};function q(){}q._$8s=0;q._$fT=new Object();q.start=function(aI){var aH=q._$fT[aI];if(aH==null){aH=new af();aH._$r=aI;q._$fT[aI]=aH;}aH._$0S=P.getSystemTimeMSec();};q.dump=function(aJ){var aH=q._$fT[aJ];if(aH!=null){var aI=P.getSystemTimeMSec();var aK=aI-aH._$0S;console.log(aJ+" : "+aK+"ms");return aK;}else{return -1;}};q.end=function(aJ){var aH=q._$fT[aJ];if(aH!=null){var aI=P.getSystemTimeMSec();return aI-aH._$0S;}else{return -1;}};q._$li=function(aI,aH){console.log("_$li : "+aI+"\n",aH);};q._$Ji=function(aI,aH){console.log(aI,aH);};q._$dL=function(aI,aH){console.log(aI,aH);console.log("\n");};q._$KL=function(aJ,aI){for(var aH=0;aH<aI;aH++){if(aH%16==0&&aH>0){console.log("\n");}else{if(aH%8==0&&aH>0){console.log("  ");}}console.log("%02X ",(aJ[aH]&255));}console.log("\n");};q._$nr=function(aL,aI,aK){console.log("%s\n",aL);var aH=aI.length;for(var aJ=0;aJ<aH;++aJ){console.log("%5d",aI[aJ]);console.log("%s\n",aK);console.log(",");}console.log("\n");};q._$Rb=function(aH){console.log("dump exception : "+aH);console.log("stack :: "+aH.stack);};function af(){this._$r=null;this._$0S=null;}function F(){if(j){return;}this.x=null;this.y=null;this.width=null;this.height=null;}F.prototype._$8P=function(){return 0.5*(this.x+this.x+this.width);};F.prototype._$6P=function(){return 0.5*(this.y+this.y+this.height);};F.prototype._$EL=function(){return this.x+this.width;};F.prototype._$5T=function(){return this.y+this.height;};F.prototype._$jL=function(aI,aK,aJ,aH){this.x=aI;this.y=aK;this.width=aJ;this.height=aH;};F.prototype._$jL=function(aH){this.x=aH.x;this.y=aH.y;this.width=aH.width;this.height=aH.height;};function i(aH){if(j){return;}ak.prototype.constructor.call(this,aH);}i.prototype=new ak();i._$tP=new Object();i._$27=function(){i._$tP.clear();};i.getID=function(aH){var aI=i._$tP[aH];if(aI==null){aI=new i(aH);i._$tP[aH]=aI;}return aI;};i.prototype._$3s=function(){return new i();};function S(){}function z(aH){if(j){return;}ak.prototype.constructor.call(this,aH);}z.prototype=new ak();z._$tP=new Object();z._$27=function(){z._$tP.clear();};z.getID=function(aH){var aI=z._$tP[aH];if(aI==null){aI=new z(aH);z._$tP[aH]=aI;}return aI;};z.prototype._$3s=function(){return new z();};function w(){if(j){return;}this._$vo=null;this._$F2=null;this._$ao=400;this._$1S=400;w._$42++;}w._$42=0;w.prototype._$zP=function(){if(this._$vo==null){this._$vo=new an();}if(this._$F2==null){this._$F2=new Array();}};w.prototype.getCanvasWidth=function(){return this._$ao;};w.prototype.getCanvasHeight=function(){return this._$1S;};w.prototype._$F0=function(aH){this._$vo=aH._$nP();this._$F2=aH._$nP();this._$ao=aH._$6L();this._$1S=aH._$6L();};w.prototype._$6S=function(aH){this._$F2.push(aH);};w.prototype._$Xr=function(){return this._$F2;};w.prototype._$E2=function(){return this._$vo;};function u(){if(j){return;}this.p1=new N();this.p2=new N();this._$Fo=0;this._$Db=0;this._$L2=0;this._$M2=0;this._$ks=0;this._$9b=0;this._$iP=0;this._$iT=0;this._$lL=new Array();this._$qP=new Array();this.setup(0.3,0.5,0.1);}u.prototype.setup=function(aJ,aI,aH){this._$ks=this._$Yb();this.p2._$xT();if(arguments.length==3){this._$Fo=aJ;this._$L2=aI;this.p1._$p=aH;this.p2._$p=aH;this.p2.y=aJ;this.setup();}};u.prototype.getPhysicsPoint1=function(){return this.p1;};u.prototype.getPhysicsPoint2=function(){return this.p2;};u.prototype._$qr=function(){return this._$Db;};u.prototype._$pr=function(aH){this._$Db=aH;};u.prototype._$5r=function(){return this._$M2;};u.prototype._$Cs=function(){return this._$9b;};u.prototype._$Yb=function(){return(-180*(Math.atan2(this.p1.x-this.p2.x,-(this.p1.y-this.p2.y)))/Math.PI);};u.prototype.addSrcParam=function(aJ,aH,aL,aI){var aK=new h(aJ,aH,aL,aI);this._$lL.push(aK);};u.prototype.addTargetParam=function(aJ,aH,aK,aI){var aL=new aF(aJ,aH,aK,aI);this._$qP.push(aL);};u.prototype.update=function(aI,aL){if(this._$iP==0){this._$iP=this._$iT=aL;this._$Fo=(Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y)));return;}var aK=(aL-this._$iT)/1000;if(aK!=0){for(var aJ=this._$lL.length-1;aJ>=0;--aJ){var aM=this._$lL[aJ];aM._$oP(aI,this);}this._$oo(aI,aK);this._$M2=this._$Yb();this._$9b=(this._$M2-this._$ks)/aK;this._$ks=this._$M2;}for(var aJ=this._$qP.length-1;aJ>=0;--aJ){var aH=this._$qP[aJ];aH._$YS(aI,this);}this._$iT=aL;};u.prototype._$oo=function(aN,aI){if(aI<0.033){aI=0.033;}var aU=1/aI;this.p1.vx=(this.p1.x-this.p1._$s0)*aU;this.p1.vy=(this.p1.y-this.p1._$70)*aU;this.p1.ax=(this.p1.vx-this.p1._$7L)*aU;this.p1.ay=(this.p1.vy-this.p1._$HL)*aU;this.p1.fx=this.p1.ax*this.p1._$p;this.p1.fy=this.p1.ay*this.p1._$p;this.p1._$xT();var aM=-(Math.atan2((this.p1.y-this.p2.y),this.p1.x-this.p2.x));var aL;var aV;var aR=Math.cos(aM);var aH=Math.sin(aM);var aW=9.8*this.p2._$p;var aQ=(this._$Db*aC._$bS);var aP=(aW*Math.cos(aM-aQ));aL=(aP*aH);aV=(aP*aR);var aK=(-this.p1.fx*aH*aH);var aT=(-this.p1.fy*aH*aR);var aJ=((-this.p2.vx*this._$L2));var aS=((-this.p2.vy*this._$L2));this.p2.fx=((aL+aK+aJ));this.p2.fy=((aV+aT+aS));this.p2.ax=this.p2.fx/this.p2._$p;this.p2.ay=this.p2.fy/this.p2._$p;this.p2.vx+=this.p2.ax*aI;this.p2.vy+=this.p2.ay*aI;this.p2.x+=this.p2.vx*aI;this.p2.y+=this.p2.vy*aI;var aO=(Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y)));this.p2.x=this.p1.x+this._$Fo*(this.p2.x-this.p1.x)/aO;this.p2.y=this.p1.y+this._$Fo*(this.p2.y-this.p1.y)/aO;this.p2.vx=(this.p2.x-this.p2._$s0)*aU;this.p2.vy=(this.p2.y-this.p2._$70)*aU;this.p2._$xT();};function N(){this._$p=1;this.x=0;this.y=0;this.vx=0;this.vy=0;this.ax=0;this.ay=0;this.fx=0;this.fy=0;this._$s0=0;this._$70=0;this._$7L=0;this._$HL=0;}N.prototype._$xT=function(){this._$s0=this.x;this._$70=this.y;this._$7L=this.vx;this._$HL=this.vy;};function at(aJ,aI,aH){this._$wL=null;this.scale=null;this._$V0=null;this._$wL=aJ;this.scale=aI;this._$V0=aH;}at.prototype._$oP=function(aI,aH){};function h(aJ,aK,aI,aH){at.prototype.constructor.call(this,aK,aI,aH);this._$tL=null;this._$tL=aJ;}h.prototype=new at();h.prototype._$oP=function(aJ,aH){var aK=this.scale*aJ.getParamFloat(this._$wL);var aL=aH.getPhysicsPoint1();switch(this._$tL){default:case u.Src.SRC_TO_X:aL.x=aL.x+(aK-aL.x)*this._$V0;break;case u.Src.SRC_TO_Y:aL.y=aL.y+(aK-aL.y)*this._$V0;break;case u.Src.SRC_TO_G_ANGLE:var aI=aH._$qr();aI=aI+(aK-aI)*this._$V0;aH._$pr(aI);break;}};function d(aJ,aI,aH){this._$wL=null;this.scale=null;this._$V0=null;this._$wL=aJ;this.scale=aI;this._$V0=aH;}d.prototype._$YS=function(aI,aH){};function aF(aI,aK,aJ,aH){d.prototype.constructor.call(this,aK,aJ,aH);this._$YP=null;this._$YP=aI;}aF.prototype=new d();aF.prototype._$YS=function(aI,aH){switch(this._$YP){default:case u.Target.TARGET_FROM_ANGLE:aI.setParamFloat(this._$wL,this.scale*aH._$5r(),this._$V0);break;case u.Target.TARGET_FROM_ANGLE_V:aI.setParamFloat(this._$wL,this.scale*aH._$Cs(),this._$V0);break;}};u.Src=function(){};u.Src.SRC_TO_X="SRC_TO_X";u.Src.SRC_TO_Y="SRC_TO_Y";u.Src.SRC_TO_G_ANGLE="SRC_TO_G_ANGLE";u.Target=function(){};u.Target.TARGET_FROM_ANGLE="TARGET_FROM_ANGLE";u.Target.TARGET_FROM_ANGLE_V="TARGET_FROM_ANGLE_V";function X(){if(j){return;}this._$fL=0;this._$gL=0;this._$B0=1;this._$z0=1;this._$qT=0;this.reflectX=false;this.reflectY=false;}X.prototype.init=function(aH){this._$fL=aH._$fL;this._$gL=aH._$gL;this._$B0=aH._$B0;this._$z0=aH._$z0;this._$qT=aH._$qT;this.reflectX=aH.reflectX;this.reflectY=aH.reflectY;};X.prototype._$F0=function(aH){this._$fL=aH._$_T();this._$gL=aH._$_T();this._$B0=aH._$_T();this._$z0=aH._$_T();this._$qT=aH._$_T();if(aH.getFormatVersion()>=ay.LIVE2D_FORMAT_VERSION_V2_10_SDK2){this.reflectX=aH._$po();this.reflectY=aH._$po();}};X.prototype._$e=function(){};var ad=function(){};ad._$ni=function(aL,aJ,aR,aQ,aK,aI,aH,aS,aN){var aM=(aH*aI-aS*aK);if(aM==0){return null;}else{var aO=((aL-aR)*aI-(aJ-aQ)*aK)/aM;var aP;if(aK!=0){aP=(aL-aR-aO*aH)/aK;}else{aP=(aJ-aQ-aO*aS)/aI;}if(isNaN(aP)){aP=(aL-aR-aO*aH)/aK;if(isNaN(aP)){aP=(aJ-aQ-aO*aS)/aI;}if(isNaN(aP)){console.log("a is NaN @UtVector#_$ni() ");console.log("v1x : "+aK);console.log("v1x != 0 ? "+(aK!=0));}}if(aN==null){return new Array(aP,aO);}else{aN[0]=aP;aN[1]=aO;return aN;}}};function av(){if(j){return;}this.x=null;this.y=null;this.width=null;this.height=null;}av.prototype._$8P=function(){return this.x+0.5*this.width;};av.prototype._$6P=function(){return this.y+0.5*this.height;};av.prototype._$EL=function(){return this.x+this.width;};av.prototype._$5T=function(){return this.y+this.height;};av.prototype._$jL=function(aI,aK,aJ,aH){this.x=aI;this.y=aK;this.width=aJ;this.height=aH;};av.prototype._$jL=function(aH){this.x=aH.x;this.y=aH.y;this.width=aH.width;this.height=aH.height;};av.prototype.contains=function(aH,aI){return this.x<=this.x&&this.y<=this.y&&(this.x<=this.x+this.width)&&(this.y<=this.y+this.height);};av.prototype.expand=function(aH,aI){this.x-=aH;this.y-=aI;this.width+=aH*2;this.height+=aI*2;};function aG(){}aG._$Z2=function(bb,bo,bp,a2){var a1=bo._$Q2(bb,bp);var a3=bb._$vs();var ba=bb._$Tr();bo._$zr(a3,ba,a1);if(a1<=0){return a2[a3[0]];}else{if(a1==1){var bj=a2[a3[0]];var bi=a2[a3[1]];var a9=ba[0];return(bj+(bi-bj)*a9)|0;}else{if(a1==2){var bj=a2[a3[0]];var bi=a2[a3[1]];var a0=a2[a3[2]];var aZ=a2[a3[3]];var a9=ba[0];var a8=ba[1];var br=(bj+(bi-bj)*a9)|0;var bq=(a0+(aZ-a0)*a9)|0;return(br+(bq-br)*a8)|0;}else{if(a1==3){var aP=a2[a3[0]];var aO=a2[a3[1]];var bn=a2[a3[2]];var bm=a2[a3[3]];var aK=a2[a3[4]];var aJ=a2[a3[5]];var bg=a2[a3[6]];var bf=a2[a3[7]];var a9=ba[0];var a8=ba[1];var a6=ba[2];var bj=(aP+(aO-aP)*a9)|0;var bi=(bn+(bm-bn)*a9)|0;var a0=(aK+(aJ-aK)*a9)|0;var aZ=(bg+(bf-bg)*a9)|0;var br=(bj+(bi-bj)*a8)|0;var bq=(a0+(aZ-a0)*a8)|0;return(br+(bq-br)*a6)|0;}else{if(a1==4){var aT=a2[a3[0]];var aS=a2[a3[1]];var bu=a2[a3[2]];var bt=a2[a3[3]];var aN=a2[a3[4]];var aM=a2[a3[5]];var bl=a2[a3[6]];var bk=a2[a3[7]];var be=a2[a3[8]];var bc=a2[a3[9]];var aX=a2[a3[10]];var aW=a2[a3[11]];var a7=a2[a3[12]];var a5=a2[a3[13]];var aR=a2[a3[14]];var aQ=a2[a3[15]];var a9=ba[0];var a8=ba[1];var a6=ba[2];var a4=ba[3];var aP=(aT+(aS-aT)*a9)|0;var aO=(bu+(bt-bu)*a9)|0;var bn=(aN+(aM-aN)*a9)|0;var bm=(bl+(bk-bl)*a9)|0;var aK=(be+(bc-be)*a9)|0;var aJ=(aX+(aW-aX)*a9)|0;var bg=(a7+(a5-a7)*a9)|0;var bf=(aR+(aQ-aR)*a9)|0;var bj=(aP+(aO-aP)*a8)|0;var bi=(bn+(bm-bn)*a8)|0;var a0=(aK+(aJ-aK)*a8)|0;var aZ=(bg+(bf-bg)*a8)|0;var br=(bj+(bi-bj)*a6)|0;var bq=(a0+(aZ-a0)*a6)|0;return(br+(bq-br)*a4)|0;}else{var aV=1<<a1;var aY=new Float32Array(aV);for(var bh=0;bh<aV;bh++){var aI=bh;var aH=1;for(var aL=0;aL<a1;aL++){aH*=(aI%2==0)?(1-ba[aL]):ba[aL];aI/=2;}aY[bh]=aH;}var bs=new Float32Array(aV);for(var aU=0;aU<aV;aU++){bs[aU]=a2[a3[aU]];}var bd=0;for(var aU=0;aU<aV;aU++){bd+=aY[aU]*bs[aU];}return(bd+0.5)|0;}}}}}};aG._$br=function(ba,bo,bp,bg){var a1=bo._$Q2(ba,bp);var a2=ba._$vs();var a9=ba._$Tr();bo._$zr(a2,a9,a1);if(a1<=0){return bg[a2[0]];}else{if(a1==1){var bj=bg[a2[0]];var bi=bg[a2[1]];var a8=a9[0];return bj+(bi-bj)*a8;}else{if(a1==2){var bj=bg[a2[0]];var bi=bg[a2[1]];var a0=bg[a2[2]];var aZ=bg[a2[3]];var a8=a9[0];var a7=a9[1];return(1-a7)*(bj+(bi-bj)*a8)+a7*(a0+(aZ-a0)*a8);}else{if(a1==3){var aP=bg[a2[0]];var aO=bg[a2[1]];var bn=bg[a2[2]];var bm=bg[a2[3]];var aK=bg[a2[4]];var aJ=bg[a2[5]];var bf=bg[a2[6]];var be=bg[a2[7]];var a8=a9[0];var a7=a9[1];var a5=a9[2];return(1-a5)*((1-a7)*(aP+(aO-aP)*a8)+a7*(bn+(bm-bn)*a8))+a5*((1-a7)*(aK+(aJ-aK)*a8)+a7*(bf+(be-bf)*a8));}else{if(a1==4){var aT=bg[a2[0]];var aS=bg[a2[1]];var bs=bg[a2[2]];var br=bg[a2[3]];var aN=bg[a2[4]];var aM=bg[a2[5]];var bl=bg[a2[6]];var bk=bg[a2[7]];var bd=bg[a2[8]];var bb=bg[a2[9]];var aX=bg[a2[10]];var aW=bg[a2[11]];var a6=bg[a2[12]];var a4=bg[a2[13]];var aR=bg[a2[14]];var aQ=bg[a2[15]];var a8=a9[0];var a7=a9[1];var a5=a9[2];var a3=a9[3];return(1-a3)*((1-a5)*((1-a7)*(aT+(aS-aT)*a8)+a7*(bs+(br-bs)*a8))+a5*((1-a7)*(aN+(aM-aN)*a8)+a7*(bl+(bk-bl)*a8)))+a3*((1-a5)*((1-a7)*(bd+(bb-bd)*a8)+a7*(aX+(aW-aX)*a8))+a5*((1-a7)*(a6+(a4-a6)*a8)+a7*(aR+(aQ-aR)*a8)));}else{var aV=1<<a1;var aY=new Float32Array(aV);for(var bh=0;bh<aV;bh++){var aI=bh;var aH=1;for(var aL=0;aL<a1;aL++){aH*=(aI%2==0)?(1-a9[aL]):a9[aL];aI/=2;}aY[bh]=aH;}var bq=new Float32Array(aV);for(var aU=0;aU<aV;aU++){bq[aU]=bg[a2[aU]];}var bc=0;for(var aU=0;aU<aV;aU++){bc+=aY[aU]*bq[aU];}return bc;}}}}}};aG._$Vr=function(bV,bW,a5,aI,bC,a3,bX,bH){var aN=bW._$Q2(bV,a5);var bw=bV._$vs();var a2=bV._$Tr();bW._$zr(bw,a2,aN);var aJ=aI*2;var aQ=bX;if(aN<=0){var bI=bw[0];var bq=bC[bI];if(bH==2&&bX==0){P._$jT(bq,0,a3,0,aJ);}else{for(var bt=0;bt<aJ;){a3[aQ]=bq[bt++];a3[aQ+1]=bq[bt++];aQ+=bH;}}}else{if(aN==1){var bq=bC[bw[0]];var bp=bC[bw[1]];var b3=a2[0];var bT=1-b3;for(var bt=0;bt<aJ;){a3[aQ]=bq[bt]*bT+bp[bt]*b3;++bt;a3[aQ+1]=bq[bt]*bT+bp[bt]*b3;++bt;aQ+=bH;}}else{if(aN==2){var bq=bC[bw[0]];var bp=bC[bw[1]];var aZ=bC[bw[2]];var aY=bC[bw[3]];var b3=a2[0];var b1=a2[1];var bT=1-b3;var bP=1-b1;var b2=bP*bT;var b0=bP*b3;var bM=b1*bT;var bL=b1*b3;for(var bt=0;bt<aJ;){a3[aQ]=b2*bq[bt]+b0*bp[bt]+bM*aZ[bt]+bL*aY[bt];++bt;a3[aQ+1]=b2*bq[bt]+b0*bp[bt]+bM*aZ[bt]+bL*aY[bt];++bt;aQ+=bH;}}else{if(aN==3){var ba=bC[bw[0]];var a9=bC[bw[1]];var aP=bC[bw[2]];var aO=bC[bw[3]];var a6=bC[bw[4]];var a4=bC[bw[5]];var aL=bC[bw[6]];var aK=bC[bw[7]];var b3=a2[0];var b1=a2[1];var bZ=a2[2];var bT=1-b3;var bP=1-b1;var bN=1-bZ;var b8=bN*bP*bT;var b7=bN*bP*b3;var bU=bN*b1*bT;var bS=bN*b1*b3;var b6=bZ*bP*bT;var b5=bZ*bP*b3;var bQ=bZ*b1*bT;var bO=bZ*b1*b3;for(var bt=0;bt<aJ;){a3[aQ]=b8*ba[bt]+b7*a9[bt]+bU*aP[bt]+bS*aO[bt]+b6*a6[bt]+b5*a4[bt]+bQ*aL[bt]+bO*aK[bt];++bt;a3[aQ+1]=b8*ba[bt]+b7*a9[bt]+bU*aP[bt]+bS*aO[bt]+b6*a6[bt]+b5*a4[bt]+bQ*aL[bt]+bO*aK[bt];++bt;aQ+=bH;}}else{if(aN==4){var bD=bC[bw[0]];var bB=bC[bw[1]];var bo=bC[bw[2]];var bm=bC[bw[3]];var by=bC[bw[4]];var bx=bC[bw[5]];var be=bC[bw[6]];var bd=bC[bw[7]];var bG=bC[bw[8]];var bE=bC[bw[9]];var bv=bC[bw[10]];var bu=bC[bw[11]];var bA=bC[bw[12]];var bz=bC[bw[13]];var bn=bC[bw[14]];var bl=bC[bw[15]];var b3=a2[0];var b1=a2[1];var bZ=a2[2];var bY=a2[3];var bT=1-b3;var bP=1-b1;var bN=1-bZ;var bK=1-bY;var bk=bK*bN*bP*bT;var bi=bK*bN*bP*b3;var aW=bK*bN*b1*bT;var aV=bK*bN*b1*b3;var bc=bK*bZ*bP*bT;var bb=bK*bZ*bP*b3;var aS=bK*bZ*b1*bT;var aR=bK*bZ*b1*b3;var bs=bY*bN*bP*bT;var br=bY*bN*bP*b3;var a1=bY*bN*b1*bT;var a0=bY*bN*b1*b3;var bh=bY*bZ*bP*bT;var bf=bY*bZ*bP*b3;var aU=bY*bZ*b1*bT;var aT=bY*bZ*b1*b3;for(var bt=0;bt<aJ;){a3[aQ]=bk*bD[bt]+bi*bB[bt]+aW*bo[bt]+aV*bm[bt]+bc*by[bt]+bb*bx[bt]+aS*be[bt]+aR*bd[bt]+bs*bG[bt]+br*bE[bt]+a1*bv[bt]+a0*bu[bt]+bh*bA[bt]+bf*bz[bt]+aU*bn[bt]+aT*bl[bt];++bt;a3[aQ+1]=bk*bD[bt]+bi*bB[bt]+aW*bo[bt]+aV*bm[bt]+bc*by[bt]+bb*bx[bt]+aS*be[bt]+aR*bd[bt]+bs*bG[bt]+br*bE[bt]+a1*bv[bt]+a0*bu[bt]+bh*bA[bt]+bf*bz[bt]+aU*bn[bt]+aT*bl[bt];++bt;aQ+=bH;}}else{var b4=1<<aN;var bJ=new Float32Array(b4);for(var bj=0;bj<b4;bj++){var aH=bj;var aM=1;for(var bF=0;bF<aN;bF++){aM*=(aH%2==0)?(1-a2[bF]):a2[bF];aH/=2;}bJ[bj]=aM;}var bg=new Float32Array(b4);for(var aX=0;aX<b4;aX++){bg[aX]=bC[bw[aX]];}for(var bt=0;bt<aJ;){var a8=0,a7=0;var bR=bt+1;for(var aX=0;aX<b4;aX++){a8+=bJ[aX]*bg[aX][bt];a7+=bJ[aX]*bg[aX][bR];}bt+=2;a3[aQ]=a8;a3[aQ+1]=a7;aQ+=bH;}}}}}}};function e(){if(j){return;}this.x=null;this.y=null;}e.prototype._$HT=function(aH,aI){this.x=aH;this.y=aI;};e.prototype._$HT=function(aH){this.x=aH.x;this.y=aH.y;};function ae(){if(j){return;}this._$gP=null;this._$dr=null;this._$GS=null;this._$qb=null;this._$Lb=null;this._$mS=null;this.clipID=null;this.clipIDList=new Array();}ae._$ur=-2;ae._$ES=500;ae._$wb=2;ae._$8S=3;ae._$52=ae._$ES;ae._$R2=ae._$ES;ae._$or=function(){return ae._$52;};ae._$Pr=function(){return ae._$R2;};ae.prototype.convertClipIDForV2_11=function(aI){var aH=[];if(aI==null){return null;}if(aI.length==0){return null;}if(!/,/.test(aI)){aH.push(aI.id);return aH;}aH=aI.id.split(",");return aH;};ae.prototype._$F0=function(aH){this._$gP=aH._$nP();this._$dr=aH._$nP();this._$GS=aH._$nP();this._$qb=aH._$6L();this._$Lb=aH._$cS();this._$mS=aH._$Tb();if(aH.getFormatVersion()>=ay._$T7){this.clipID=aH._$nP();this.clipIDList=this.convertClipIDForV2_11(this.clipID);}else{this.clipIDList=[];}this._$MS(this._$Lb);};ae.prototype.getClipIDList=function(){return this.clipIDList;};ae.prototype.init=function(aH){};ae.prototype._$Nr=function(aH,aI){aI._$IS[0]=false;aI._$Us=aG._$Z2(aH,this._$GS,aI._$IS,this._$Lb);if(Q._$Zs){}else{if(aI._$IS[0]){return;}}aI._$7s=aG._$br(aH,this._$GS,aI._$IS,this._$mS);};ae.prototype._$2b=function(aH,aI){};ae.prototype.getDrawDataID=function(){return this._$gP;};ae.prototype._$j2=function(aH){this._$gP=aH;};ae.prototype.getOpacity=function(aH,aI){return aI._$7s;};ae.prototype._$zS=function(aH,aI){return aI._$Us;};ae.prototype._$MS=function(aJ){for(var aI=aJ.length-1;aI>=0;--aI){var aH=aJ[aI];if(aH<ae._$52){ae._$52=aH;}else{if(aH>ae._$R2){ae._$R2=aH;}}}};ae.prototype.getTargetBaseDataID=function(){return this._$dr;};ae.prototype._$gs=function(aH){this._$dr=aH;};ae.prototype._$32=function(){return(this._$dr!=null&&(this._$dr!=n._$2o()));};ae.prototype.preDraw=function(aJ,aH,aI){};ae.prototype.draw=function(aJ,aH,aI){};ae.prototype.getType=function(){};ae.prototype._$B2=function(aI,aH,aJ){};function ax(){if(j){return;}this._$Eb=ax._$ps;this._$lT=1;this._$C0=1;this._$tT=1;this._$WL=1;this.culling=false;this.matrix4x4=new Float32Array(16);this.premultipliedAlpha=false;this.anisotropy=0;this.clippingProcess=ax.CLIPPING_PROCESS_NONE;this.clipBufPre_clipContextMask=null;this.clipBufPre_clipContextDraw=null;this.CHANNEL_COLORS=new Array();}ax._$ps=32;ax.CLIPPING_PROCESS_NONE=0;ax.CLIPPING_PROCESS_OVERWRITE_ALPHA=1;ax.CLIPPING_PROCESS_MULTIPLY_ALPHA=2;ax.CLIPPING_PROCESS_DRAW=3;ax.CLIPPING_PROCESS_CLEAR_ALPHA=4;ax.prototype.setChannelFlagAsColor=function(aH,aI){this.CHANNEL_COLORS[aH]=aI;};ax.prototype.getChannelFlagAsColor=function(aH){return this.CHANNEL_COLORS[aH];};ax.prototype._$ZT=function(){};ax.prototype._$Uo=function(aM,aK,aJ,aL,aN,aI,aH){};ax.prototype._$Rs=function(){return -1;};ax.prototype._$Ds=function(aH){};ax.prototype.setBaseColor=function(aK,aJ,aI,aH){if(aK<0){aK=0;}else{if(aK>1){aK=1;}}if(aJ<0){aJ=0;}else{if(aJ>1){aJ=1;}}if(aI<0){aI=0;}else{if(aI>1){aI=1;}}if(aH<0){aH=0;}else{if(aH>1){aH=1;}}this._$lT=aK;this._$C0=aJ;this._$tT=aI;this._$WL=aH;};ax.prototype._$WP=function(aH){this.culling=aH;};ax.prototype.setMatrix=function(aH){for(var aI=0;aI<16;aI++){this.matrix4x4[aI]=aH[aI];}};ax.prototype._$IT=function(){return this.matrix4x4;};ax.prototype.setPremultipliedAlpha=function(aH){this.premultipliedAlpha=aH;};ax.prototype.isPremultipliedAlpha=function(){return this.premultipliedAlpha;};ax.prototype.setAnisotropy=function(aH){this.anisotropy=aH;};ax.prototype.getAnisotropy=function(){return this.anisotropy;};ax.prototype.getClippingProcess=function(){return this.clippingProcess;};ax.prototype.setClippingProcess=function(aH){this.clippingProcess=aH;};ax.prototype.setClipBufPre_clipContextForMask=function(aH){this.clipBufPre_clipContextMask=aH;};ax.prototype.getClipBufPre_clipContextMask=function(){return this.clipBufPre_clipContextMask;};ax.prototype.setClipBufPre_clipContextForDraw=function(aH){this.clipBufPre_clipContextDraw=aH;};ax.prototype.getClipBufPre_clipContextDraw=function(){return this.clipBufPre_clipContextDraw;};function o(){if(j){return;}this.a=1;this.r=1;this.g=1;this.b=1;this.scale=1;this._$ho=1;this.blendMode=Q.L2D_COLOR_BLEND_MODE_MULT;}function c(){if(j){return;}this._$kP=null;this._$dr=null;this._$Ai=true;this._$mS=null;}c._$ur=-2;c._$c2=1;c._$_b=2;c.prototype._$F0=function(aH){this._$kP=aH._$nP();this._$dr=aH._$nP();};c.prototype.readV2_opacity=function(aH){if(aH.getFormatVersion()>=ay.LIVE2D_FORMAT_VERSION_V2_10_SDK2){this._$mS=aH._$Tb();}};c.prototype.init=function(aH){};c.prototype._$Nr=function(aI,aH){};c.prototype.interpolateOpacity=function(aJ,aK,aI,aH){if(this._$mS==null){aI.setInterpolatedOpacity(1);}else{aI.setInterpolatedOpacity(aG._$br(aJ,aK,aH,this._$mS));}};c.prototype._$2b=function(aI,aH){};c.prototype._$nb=function(aL,aK,aM,aH,aI,aJ,aN){};c.prototype.getType=function(){};c.prototype._$gs=function(aH){this._$dr=aH;};c.prototype._$a2=function(aH){this._$kP=aH;};c.prototype.getTargetBaseDataID=function(){return this._$dr;};c.prototype.getBaseDataID=function(){return this._$kP;};c.prototype._$32=function(){return(this._$dr!=null&&(this._$dr!=n._$2o()));};function P(){}P._$W2=0;P._$CS=P._$W2;P._$Mo=function(){return true;};P._$XP=function(aI){try{var aJ=getTimeMSec();while(getTimeMSec()-aJ<aI){}}catch(aH){aH._$Rb();}};P.getUserTimeMSec=function(){return(P._$CS==P._$W2)?P.getSystemTimeMSec():P._$CS;};P.setUserTimeMSec=function(aH){P._$CS=aH;};P.updateUserTimeMSec=function(){return(P._$CS=P.getSystemTimeMSec());};P.getTimeMSec=function(){return new Date().getTime();};P.getSystemTimeMSec=function(){return new Date().getTime();};P._$Q=function(aH){};P._$jT=function(aM,aJ,aI,aL,aH){for(var aK=0;aK<aH;aK++){aI[aL+aK]=aM[aJ+aK];}};function aA(){if(j){return;}this._$VP=0;this._$wL=null;this._$GP=null;this._$8o=aA._$ds;this._$2r=-1;this._$O2=0;this._$ri=0;}aA._$ds=-2;aA.prototype._$F0=function(aH){this._$wL=aH._$nP();this._$VP=aH._$6L();this._$GP=aH._$nP();};aA.prototype.getParamIndex=function(aH){if(this._$2r!=aH){this._$8o=aA._$ds;}return this._$8o;};aA.prototype._$Pb=function(aI,aH){this._$8o=aI;this._$2r=aH;};aA.prototype.getParamID=function(){return this._$wL;};aA.prototype._$yP=function(aH){this._$wL=aH;};aA.prototype._$N2=function(){return this._$VP;};aA.prototype._$d2=function(){return this._$GP;};aA.prototype._$t2=function(aI,aH){this._$VP=aI;this._$GP=aH;};aA.prototype._$Lr=function(){return this._$O2;};aA.prototype._$wr=function(aH){this._$O2=aH;};aA.prototype._$SL=function(){return this._$ri;};aA.prototype._$AL=function(aH){this._$ri=aH;};function G(){}G.startsWith=function(aJ,aL,aK){var aH=aL+aK.length;if(aH>=aJ.length){return false;}for(var aI=aL;aI<aH;aI++){if(G.getChar(aJ,aI)!=aK.charAt(aI-aL)){return false;}}return true;};G.getChar=function(aI,aH){return String.fromCharCode(aI.getUint8(aH));};G.createString=function(aM,aL,aJ){var aH=new ArrayBuffer(aJ*2);var aK=new Uint16Array(aH);for(var aI=0;aI<aJ;aI++){aK[aI]=aM.getUint8(aL+aI);}return String.fromCharCode.apply(null,aK);};G._$LS=function(aP,aM,aR,aK){if(aP instanceof ArrayBuffer){aP=new DataView(aP);}var aL=aR;var aJ=false;var aQ=false;var aS=0;var aO=G.getChar(aP,aL);if(aO=="-"){aJ=true;aL++;}var aN=false;for(;aL<aM;aL++){aO=G.getChar(aP,aL);switch(aO){case"0":aS=aS*10;break;case"1":aS=aS*10+1;break;case"2":aS=aS*10+2;break;case"3":aS=aS*10+3;break;case"4":aS=aS*10+4;break;case"5":aS=aS*10+5;break;case"6":aS=aS*10+6;break;case"7":aS=aS*10+7;break;case"8":aS=aS*10+8;break;case"9":aS=aS*10+9;break;case".":aQ=true;aL++;aN=true;break;default:aN=true;break;}if(aN){break;}}if(aQ){var aI=0.1;var aH=false;for(;aL<aM;aL++){aO=G.getChar(aP,aL);switch(aO){case"0":break;case"1":aS+=aI*1;break;case"2":aS+=aI*2;break;case"3":aS+=aI*3;break;case"4":aS+=aI*4;break;case"5":aS+=aI*5;break;case"6":aS+=aI*6;break;case"7":aS+=aI*7;break;case"8":aS+=aI*8;break;case"9":aS+=aI*9;break;default:aH=true;break;}aI*=0.1;if(aH){break;}}}if(aJ){aS=-aS;}aK[0]=aL;return aS;};function g(){if(j){return;}this._$Ob=null;}g.prototype._$zP=function(){this._$Ob=new Array();};g.prototype._$F0=function(aH){this._$Ob=aH._$nP();};g.prototype._$Ur=function(aK){if(aK._$WS()){return true;}var aH=aK._$v2();for(var aJ=this._$Ob.length-1;aJ>=0;--aJ){var aI=this._$Ob[aJ].getParamIndex(aH);if(aI==aA._$ds){aI=aK.getParamIndex(this._$Ob[aJ].getParamID());}if(aK._$Xb(aI)){return true;}}return false;};g.prototype._$Q2=function(aL,aV){var aX=this._$Ob.length;var aJ=aL._$v2();var aN=0;var aI;var aQ;for(var aK=0;aK<aX;aK++){var aH=this._$Ob[aK];aI=aH.getParamIndex(aJ);if(aI==aA._$ds){aI=aL.getParamIndex(aH.getParamID());aH._$Pb(aI,aJ);}if(aI<0){throw new Exception("err 23242 : "+aH.getParamID());}var aU=aI<0?0:aL.getParamFloat(aI);aQ=aH._$N2();var aM=aH._$d2();var aP=-1;var aT=0;var aS;var aR;if(aQ<1){}else{if(aQ==1){aS=aM[0];if(aS-aw._$J<aU&&aU<aS+aw._$J){aP=0;aT=0;}else{aP=0;aV[0]=true;}}else{aS=aM[0];if(aU<aS-aw._$J){aP=0;aV[0]=true;}else{if(aU<aS+aw._$J){aP=0;}else{var aW=false;for(var aO=1;aO<aQ;++aO){aR=aM[aO];if(aU<aR+aw._$J){if(aR-aw._$J<aU){aP=aO;}else{aP=aO-1;aT=(aU-aS)/(aR-aS);aN++;}aW=true;break;}aS=aR;}if(!aW){aP=aQ-1;aT=0;aV[0]=true;}}}}}aH._$wr(aP);aH._$AL(aT);}return aN;};g.prototype._$zr=function(aN,aT,aP){var aR=1<<aP;if(aR+1>aw._$Qb){console.log("err 23245\n");}var aS=this._$Ob.length;var aK=1;var aH=1;var aJ=0;for(var aQ=0;aQ<aR;++aQ){aN[aQ]=0;}for(var aL=0;aL<aS;++aL){var aI=this._$Ob[aL];if(aI._$SL()==0){var aO=aI._$Lr()*aK;if(aO<0&&Q._$3T){throw new Exception("err 23246");}for(var aQ=0;aQ<aR;++aQ){aN[aQ]+=aO;}}else{var aO=aK*aI._$Lr();var aM=aK*(aI._$Lr()+1);for(var aQ=0;aQ<aR;++aQ){aN[aQ]+=((aQ/aH|0)%2==0)?aO:aM;}aT[aJ++]=aI._$SL();aH*=2;}aK*=aI._$N2();}aN[aR]=65535;aT[aJ]=-1;};g.prototype._$h2=function(aJ,aH,aK){var aM=new Float32Array(aH);for(var aL=0;aL<aH;++aL){aM[aL]=aK[aL];}var aI=new aA();aI._$yP(aJ);aI._$t2(aH,aM);this._$Ob.push(aI);};g.prototype._$J2=function(aO){var aN=aO;var aM=this._$Ob.length;for(var aK=0;aK<aM;++aK){var aI=this._$Ob[aK];var aH=aI._$N2();var aJ=aN%aI._$N2();var aL=aI._$d2()[aJ];console.log("%s[%d]=%7.2f / ",aI.getParamID(),aJ,aL);aN/=aH;}console.log("\n");};g.prototype.getParamCount=function(){return this._$Ob.length;};g.prototype._$zs=function(){return this._$Ob;};function ac(){this.m=new Float32Array(16);this.identity();}ac.prototype.identity=function(){for(var aH=0;aH<16;aH++){this.m[aH]=((aH%5)==0)?1:0;}};ac.prototype.getArray=function(){return this.m;};ac.prototype.getCopyMatrix=function(){return new Float32Array(this.m);};ac.prototype.setMatrix=function(aI){if(aI==null||aI.length!=16){return;}for(var aH=0;aH<16;aH++){this.m[aH]=aI[aH];}};ac.prototype.mult=function(aH,aJ,aI){if(aJ==null){return null;}if(this==aJ){this.mult_safe(this.m,aH.m,aJ.m,aI);}else{this.mult_fast(this.m,aH.m,aJ.m,aI);}return aJ;};ac.prototype.mult_safe=function(aI,aH,aM,aJ){if(aI==aM){var aL=new Array(16);this.mult_fast(aI,aH,aL,aJ);for(var aK=15;aK>=0;--aK){aM[aK]=aL[aK];}}else{this.mult_fast(aI,aH,aM,aJ);}};ac.prototype.mult_fast=function(aI,aH,aK,aJ){if(aJ){aK[0]=aI[0]*aH[0]+aI[4]*aH[1]+aI[8]*aH[2];aK[4]=aI[0]*aH[4]+aI[4]*aH[5]+aI[8]*aH[6];aK[8]=aI[0]*aH[8]+aI[4]*aH[9]+aI[8]*aH[10];aK[12]=aI[0]*aH[12]+aI[4]*aH[13]+aI[8]*aH[14]+aI[12];aK[1]=aI[1]*aH[0]+aI[5]*aH[1]+aI[9]*aH[2];aK[5]=aI[1]*aH[4]+aI[5]*aH[5]+aI[9]*aH[6];aK[9]=aI[1]*aH[8]+aI[5]*aH[9]+aI[9]*aH[10];aK[13]=aI[1]*aH[12]+aI[5]*aH[13]+aI[9]*aH[14]+aI[13];aK[2]=aI[2]*aH[0]+aI[6]*aH[1]+aI[10]*aH[2];aK[6]=aI[2]*aH[4]+aI[6]*aH[5]+aI[10]*aH[6];aK[10]=aI[2]*aH[8]+aI[6]*aH[9]+aI[10]*aH[10];aK[14]=aI[2]*aH[12]+aI[6]*aH[13]+aI[10]*aH[14]+aI[14];aK[3]=aK[7]=aK[11]=0;aK[15]=1;}else{aK[0]=aI[0]*aH[0]+aI[4]*aH[1]+aI[8]*aH[2]+aI[12]*aH[3];aK[4]=aI[0]*aH[4]+aI[4]*aH[5]+aI[8]*aH[6]+aI[12]*aH[7];aK[8]=aI[0]*aH[8]+aI[4]*aH[9]+aI[8]*aH[10]+aI[12]*aH[11];aK[12]=aI[0]*aH[12]+aI[4]*aH[13]+aI[8]*aH[14]+aI[12]*aH[15];aK[1]=aI[1]*aH[0]+aI[5]*aH[1]+aI[9]*aH[2]+aI[13]*aH[3];aK[5]=aI[1]*aH[4]+aI[5]*aH[5]+aI[9]*aH[6]+aI[13]*aH[7];aK[9]=aI[1]*aH[8]+aI[5]*aH[9]+aI[9]*aH[10]+aI[13]*aH[11];aK[13]=aI[1]*aH[12]+aI[5]*aH[13]+aI[9]*aH[14]+aI[13]*aH[15];aK[2]=aI[2]*aH[0]+aI[6]*aH[1]+aI[10]*aH[2]+aI[14]*aH[3];aK[6]=aI[2]*aH[4]+aI[6]*aH[5]+aI[10]*aH[6]+aI[14]*aH[7];aK[10]=aI[2]*aH[8]+aI[6]*aH[9]+aI[10]*aH[10]+aI[14]*aH[11];aK[14]=aI[2]*aH[12]+aI[6]*aH[13]+aI[10]*aH[14]+aI[14]*aH[15];aK[3]=aI[3]*aH[0]+aI[7]*aH[1]+aI[11]*aH[2]+aI[15]*aH[3];aK[7]=aI[3]*aH[4]+aI[7]*aH[5]+aI[11]*aH[6]+aI[15]*aH[7];aK[11]=aI[3]*aH[8]+aI[7]*aH[9]+aI[11]*aH[10]+aI[15]*aH[11];aK[15]=aI[3]*aH[12]+aI[7]*aH[13]+aI[11]*aH[14]+aI[15]*aH[15];}};ac.prototype.translate=function(aH,aJ,aI){this.m[12]=this.m[0]*aH+this.m[4]*aJ+this.m[8]*aI+this.m[12];this.m[13]=this.m[1]*aH+this.m[5]*aJ+this.m[9]*aI+this.m[13];this.m[14]=this.m[2]*aH+this.m[6]*aJ+this.m[10]*aI+this.m[14];this.m[15]=this.m[3]*aH+this.m[7]*aJ+this.m[11]*aI+this.m[15];};ac.prototype.scale=function(aJ,aI,aH){this.m[0]*=aJ;this.m[4]*=aI;this.m[8]*=aH;this.m[1]*=aJ;this.m[5]*=aI;this.m[9]*=aH;this.m[2]*=aJ;this.m[6]*=aI;this.m[10]*=aH;this.m[3]*=aJ;this.m[7]*=aI;this.m[11]*=aH;};ac.prototype.rotateX=function(aH){var aK=aC.fcos(aH);var aJ=aC._$9(aH);var aI=this.m[4];this.m[4]=aI*aK+this.m[8]*aJ;this.m[8]=aI*-aJ+this.m[8]*aK;aI=this.m[5];this.m[5]=aI*aK+this.m[9]*aJ;this.m[9]=aI*-aJ+this.m[9]*aK;aI=this.m[6];this.m[6]=aI*aK+this.m[10]*aJ;this.m[10]=aI*-aJ+this.m[10]*aK;aI=this.m[7];this.m[7]=aI*aK+this.m[11]*aJ;this.m[11]=aI*-aJ+this.m[11]*aK;};ac.prototype.rotateY=function(aH){var aK=aC.fcos(aH);var aJ=aC._$9(aH);var aI=this.m[0];this.m[0]=aI*aK+this.m[8]*-aJ;this.m[8]=aI*aJ+this.m[8]*aK;aI=this.m[1];this.m[1]=aI*aK+this.m[9]*-aJ;this.m[9]=aI*aJ+this.m[9]*aK;aI=m[2];this.m[2]=aI*aK+this.m[10]*-aJ;this.m[10]=aI*aJ+this.m[10]*aK;aI=m[3];this.m[3]=aI*aK+this.m[11]*-aJ;this.m[11]=aI*aJ+this.m[11]*aK;};ac.prototype.rotateZ=function(aH){var aK=aC.fcos(aH);var aJ=aC._$9(aH);var aI=this.m[0];this.m[0]=aI*aK+this.m[4]*aJ;this.m[4]=aI*-aJ+this.m[4]*aK;aI=this.m[1];this.m[1]=aI*aK+this.m[5]*aJ;this.m[5]=aI*-aJ+this.m[5]*aK;aI=this.m[2];this.m[2]=aI*aK+this.m[6]*aJ;this.m[6]=aI*-aJ+this.m[6]*aK;aI=this.m[3];this.m[3]=aI*aK+this.m[7]*aJ;this.m[7]=aI*-aJ+this.m[7]*aK;};function Z(aH){if(j){return;}ak.prototype.constructor.call(this,aH);}Z.prototype=new ak();Z._$tP=new Object();Z._$27=function(){Z._$tP.clear();};Z.getID=function(aH){var aI=Z._$tP[aH];if(aI==null){aI=new Z(aH);Z._$tP[aH]=aI;}return aI;};Z.prototype._$3s=function(){return new Z();};function aD(){if(j){return;}this._$7=1;this._$f=0;this._$H=0;this._$g=1;this._$k=0;this._$w=0;this._$hi=STATE_IDENTITY;this._$Z=_$pS;}aD._$kS=-1;aD._$pS=0;aD._$hb=1;aD.STATE_IDENTITY=0;aD._$gb=1;aD._$fo=2;aD._$go=4;aD.prototype.transform=function(aK,aI,aH){var aT,aS,aR,aM,aL,aJ;var aQ=0;var aN=0;switch(this._$hi){default:return;case (aD._$go|aD._$fo|aD._$gb):aT=this._$7;aS=this._$H;aR=this._$k;aM=this._$f;aL=this._$g;aJ=this._$w;while(--aH>=0){var aP=aK[aQ++];var aO=aK[aQ++];aI[aN++]=(aT*aP+aS*aO+aR);aI[aN++]=(aM*aP+aL*aO+aJ);}return;case (aD._$go|aD._$fo):aT=this._$7;aS=this._$H;aM=this._$f;aL=this._$g;while(--aH>=0){var aP=aK[aQ++];var aO=aK[aQ++];aI[aN++]=(aT*aP+aS*aO);aI[aN++]=(aM*aP+aL*aO);}return;case (aD._$go|aD._$gb):aS=this._$H;aR=this._$k;aM=this._$f;aJ=this._$w;while(--aH>=0){var aP=aK[aQ++];aI[aN++]=(aS*aK[aQ++]+aR);aI[aN++]=(aM*aP+aJ);}return;case (aD._$go):aS=this._$H;aM=this._$f;while(--aH>=0){var aP=aK[aQ++];aI[aN++]=(aS*aK[aQ++]);aI[aN++]=(aM*aP);}return;case (aD._$fo|aD._$gb):aT=this._$7;aR=this._$k;aL=this._$g;aJ=this._$w;while(--aH>=0){aI[aN++]=(aT*aK[aQ++]+aR);aI[aN++]=(aL*aK[aQ++]+aJ);}return;case (aD._$fo):aT=this._$7;aL=this._$g;while(--aH>=0){aI[aN++]=(aT*aK[aQ++]);aI[aN++]=(aL*aK[aQ++]);}return;case (aD._$gb):aR=this._$k;aJ=this._$w;while(--aH>=0){aI[aN++]=(aK[aQ++]+aR);aI[aN++]=(aK[aQ++]+aJ);}return;case (aD.STATE_IDENTITY):if(aK!=aI||aQ!=aN){P._$jT(aK,aQ,aI,aN,aH*2);}return;}};aD.prototype.update=function(){if(this._$H==0&&this._$f==0){if(this._$7==1&&this._$g==1){if(this._$k==0&&this._$w==0){this._$hi=aD.STATE_IDENTITY;this._$Z=aD._$pS;}else{this._$hi=aD._$gb;this._$Z=aD._$hb;}}else{if(this._$k==0&&this._$w==0){this._$hi=aD._$fo;this._$Z=aD._$kS;}else{this._$hi=(aD._$fo|aD._$gb);this._$Z=aD._$kS;}}}else{if(this._$7==0&&this._$g==0){if(this._$k==0&&this._$w==0){this._$hi=aD._$go;this._$Z=aD._$kS;}else{this._$hi=(aD._$go|aD._$gb);this._$Z=aD._$kS;}}else{if(this._$k==0&&this._$w==0){this._$hi=(aD._$go|aD._$fo);this._$Z=aD._$kS;}else{this._$hi=(aD._$go|aD._$fo|aD._$gb);this._$Z=aD._$kS;}}}};aD.prototype._$RT=function(aK){this._$IT(aK);var aJ=aK[0];var aH=aK[2];var aN=aK[1];var aM=aK[3];var aI=Math.sqrt(aJ*aJ+aN*aN);var aL=aJ*aM-aH*aN;if(aI==0){if(Q._$so){console.log("affine._$RT() / rt==0");}}else{aK[0]=aI;aK[1]=aL/aI;aK[2]=(aN*aM+aJ*aH)/aL;aK[3]=Math.atan2(aN,aJ);}};aD.prototype._$ho=function(aN,aM,aI,aH){var aL=new Float32Array(6);var aK=new Float32Array(6);aN._$RT(aL);aM._$RT(aK);var aJ=new Float32Array(6);aJ[0]=aL[0]+(aK[0]-aL[0])*aI;aJ[1]=aL[1]+(aK[1]-aL[1])*aI;aJ[2]=aL[2]+(aK[2]-aL[2])*aI;aJ[3]=aL[3]+(aK[3]-aL[3])*aI;aJ[4]=aL[4]+(aK[4]-aL[4])*aI;aJ[5]=aL[5]+(aK[5]-aL[5])*aI;aH._$CT(aJ);};aD.prototype._$CT=function(aJ){var aI=Math.cos(aJ[3]);var aH=Math.sin(aJ[3]);this._$7=aJ[0]*aI;this._$f=aJ[0]*aH;this._$H=aJ[1]*(aJ[2]*aI-aH);this._$g=aJ[1]*(aJ[2]*aH+aI);this._$k=aJ[4];this._$w=aJ[5];this.update();};aD.prototype._$IT=function(aH){aH[0]=this._$7;aH[1]=this._$f;aH[2]=this._$H;aH[3]=this._$g;aH[4]=this._$k;aH[5]=this._$w;};function Y(){if(j){return;}ah.prototype.constructor.call(this);this.motions=new Array();this._$7r=null;this._$7r=Y._$Co++;this._$D0=30;this._$yT=0;this._$E=true;this.loopFadeIn=true;this._$AS=-1;_$a0();}Y.prototype=new ah();Y._$cs="VISIBLE:";Y._$ar="LAYOUT:";Y._$Co=0;Y._$D2=[];Y._$1T=1;Y.loadMotion=function(aR){var aM=new Y();var aI=[0];var aP=aR.length;aM._$yT=0;for(var aJ=0;aJ<aP;++aJ){var aQ=(aR[aJ]&255);if(aQ=="\n"||aQ=="\r"){continue;}if(aQ=="#"){for(;aJ<aP;++aJ){if(aR[aJ]=="\n"||aR[aJ]=="\r"){break;}}continue;}if(aQ=="$"){var aT=aJ;var aK=-1;for(;aJ<aP;++aJ){aQ=(aR[aJ]&255);if(aQ=="\r"||aQ=="\n"){break;}if(aQ=="="){aK=aJ;break;}}var aO=false;if(aK>=0){if(aK==aT+4&&aR[aT+1]=="f"&&aR[aT+2]=="p"&&aR[aT+3]=="s"){aO=true;}for(aJ=aK+1;aJ<aP;++aJ){aQ=(aR[aJ]&255);if(aQ=="\r"||aQ=="\n"){break;}if(aQ==","||aQ==" "||aQ=="\t"){continue;}var aL=G._$LS(aR,aP,aJ,aI);if(aI[0]>0){if(aO&&5<aL&&aL<121){aM._$D0=aL;}}aJ=aI[0];}}for(;aJ<aP;++aJ){if(aR[aJ]=="\n"||aR[aJ]=="\r"){break;}}continue;}if(("a"<=aQ&&aQ<="z")||("A"<=aQ&&aQ<="Z")||aQ=="_"){var aT=aJ;var aK=-1;for(;aJ<aP;++aJ){aQ=(aR[aJ]&255);if(aQ=="\r"||aQ=="\n"){break;}if(aQ=="="){aK=aJ;break;}}if(aK>=0){var aN=new t();if(G.startsWith(aR,aT,Y._$cs)){aN._$RP=t._$hs;aN._$4P=new String(aR,aT,aK-aT);}else{if(G.startsWith(aR,aT,Y._$ar)){aN._$4P=new String(aR,aT+7,aK-aT-7);if(G.startsWith(aR,aT+7,"ANCHOR_X")){aN._$RP=t._$xs;}else{if(G.startsWith(aR,aT+7,"ANCHOR_Y")){aN._$RP=t._$us;}else{if(G.startsWith(aR,aT+7,"SCALE_X")){aN._$RP=t._$qs;}else{if(G.startsWith(aR,aT+7,"SCALE_Y")){aN._$RP=t._$Ys;}else{if(G.startsWith(aR,aT+7,"X")){aN._$RP=t._$ws;}else{if(G.startsWith(aR,aT+7,"Y")){aN._$RP=t._$Ns;}}}}}}}else{aN._$RP=t._$Fr;aN._$4P=new String(aR,aT,aK-aT);}}aM.motions.push(aN);var aS=0;Y._$D2.clear();for(aJ=aK+1;aJ<aP;++aJ){aQ=(aR[aJ]&255);if(aQ=="\r"||aQ=="\n"){break;}if(aQ==","||aQ==" "||aQ=="\t"){continue;}var aL=G._$LS(aR,aP,aJ,aI);if(aI[0]>0){Y._$D2.push(aL);aS++;var aH=aI[0];if(aH<aJ){console.log("_$n0 _$hi . @Live2DMotion loadMotion()\n");break;}aJ=aH;}}aN._$I0=Y._$D2._$BL();if(aS>aM._$yT){aM._$yT=aS;}}}}aM._$AS=((1000*aM._$yT)/aM._$D0)|0;return aM;};Y.prototype.getDurationMSec=function(){return this._$AS;};Y.prototype.dump=function(){for(var aJ=0;aJ<this.motions.length;aJ++){var aH=this.motions[aJ];console.log("_$wL[%s] [%d]. ",aH._$4P,aH._$I0.length);for(var aI=0;aI<aH._$I0.length&&aI<10;aI++){console.log("%5.2f ,",aH._$I0[aI]);}console.log("\n");}};Y.prototype.updateParamExe=function(aH,aL,aO,aX){var aM=aL-aX._$z2;var aV=aM*this._$D0/1000;var aJ=aV|0;var aP=aV-aJ;for(var aU=0;aU<this.motions.length;aU++){var aS=this.motions[aU];var aK=aS._$I0.length;var aQ=aS._$4P;if(aS._$RP==t._$hs){var aT=aS._$I0[(aJ>=aK?aK-1:aJ)];aH.setParamFloat(aQ,aT);}else{if(t._$ws<=aS._$RP&&aS._$RP<=t._$Ys){}else{var aR=aH.getParamFloat(aQ);var aY=aS._$I0[(aJ>=aK?aK-1:aJ)];var aW=aS._$I0[(aJ+1>=aK?aK-1:aJ+1)];var aI=aY+(aW-aY)*aP;var aN=aR+(aI-aR)*aO;aH.setParamFloat(aQ,aN);}}}if(aJ>=this._$yT){if(this._$E){aX._$z2=aL;if(this.loopFadeIn){aX._$bs=aL;}}else{aX._$9L=true;}}};Y.prototype._$r0=function(){return this._$E;};Y.prototype._$aL=function(aH){this._$E=aH;};Y.prototype.isLoopFadeIn=function(){return this.loopFadeIn;};Y.prototype.setLoopFadeIn=function(aH){this.loopFadeIn=aH;};function aE(){this._$P=new Float32Array(100);this.size=0;}aE.prototype.clear=function(){this.size=0;};aE.prototype.add=function(aI){if(this._$P.length<=this.size){var aH=new Float32Array(this.size*2);P._$jT(this._$P,0,aH,0,this.size);this._$P=aH;}this._$P[this.size++]=aI;};aE.prototype._$BL=function(){var aH=new Float32Array(this.size);P._$jT(this._$P,0,aH,0,this.size);return aH;};function t(){this._$4P=null;this._$I0=null;this._$RP=null;}t._$Fr=0;t._$hs=1;t._$ws=100;t._$Ns=101;t._$xs=102;t._$us=103;t._$qs=104;t._$Ys=105;function aw(){}aw._$Ms=1;aw._$Qs=2;aw._$i2=0;aw._$No=2;aw._$do=aw._$Ms;aw._$Ls=true;aw._$1r=5;aw._$Qb=65;aw._$J=0.0001;aw._$FT=0.001;aw._$Ss=3;function ay(){}ay._$o7=6;ay._$S7=7;ay._$s7=8;ay._$77=9;ay.LIVE2D_FORMAT_VERSION_V2_10_SDK2=10;ay.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1=11;ay._$T7=ay.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1;ay._$Is=-2004318072;ay._$h0=0;ay._$4L=23;ay._$7P=33;ay._$uT=function(aH){console.log("_$bo :: _$6 _$mo _$E0 : %d\n",aH);};ay._$9o=function(aH){if(aH<40){ay._$uT(aH);return null;}else{if(aH<50){ay._$uT(aH);return null;}else{if(aH<60){ay._$uT(aH);return null;}else{if(aH<100){switch(aH){case 65:return new E();case 66:return new g();case 67:return new aA();case 68:return new ab();case 69:return new X();case 70:return new b();default:ay._$uT(aH);return null;}}else{if(aH<150){switch(aH){case 131:return new f();case 133:return new s();case 136:return new w();case 137:return new an();case 142:return new aq();}}}}}}ay._$uT(aH);return null;};function y(aH){if(j){return;}this._$QT=true;this._$co=-1;this._$qo=0;this._$pb=new Array(y._$is);this._$_2=new Float32Array(y._$is);this._$vr=new Float32Array(y._$is);this._$Rr=new Float32Array(y._$is);this._$Or=new Float32Array(y._$is);this._$fs=new Float32Array(y._$is);this._$Js=new Array(y._$is);this._$3S=new Array();this._$aS=new Array();this._$Bo=null;this._$F2=new Array();this._$db=new Array();this._$8b=new Array();this._$Hr=new Array();this._$Ws=null;this._$Vs=null;this._$Er=null;this._$Es=new Int16Array(aw._$Qb);this._$ZP=new Float32Array(aw._$1r*2);this._$Ri=aH;this._$b0=y._$HP++;this.clipManager=null;this.dp_webgl=null;}y._$HP=0;y._$_0=true;y._$V2=-1;y._$W0=-1;y._$jr=false;y._$ZS=true;y._$tr=(-1000000);y._$lr=(1000000);y._$is=32;y._$e=false;y.prototype.getDrawDataIndex=function(aI){for(var aH=this._$aS.length-1;aH>=0;--aH){if(this._$aS[aH]!=null&&this._$aS[aH].getDrawDataID()==aI){return aH;}}return -1;};y.prototype.getDrawData=function(aH){if(aH instanceof Z){if(this._$Bo==null){this._$Bo=new Object();var aJ=this._$aS.length;for(var aI=0;aI<aJ;aI++){var aL=this._$aS[aI];var aK=aL.getDrawDataID();if(aK==null){continue;}this._$Bo[aK]=aL;}}return this._$Bo[id];}else{if(aH<this._$aS.length){return this._$aS[aH];}else{return null;}}};y.prototype.release=function(){this._$3S.clear();this._$aS.clear();this._$F2.clear();if(this._$Bo!=null){this._$Bo.clear();}this._$db.clear();this._$8b.clear();this._$Hr.clear();};y.prototype.init=function(){this._$co++;if(this._$F2.length>0){this.release();}var aO=this._$Ri.getModelImpl();var aT=aO._$Xr();var aS=aT.length;var aH=new Array();var a3=new Array();for(var aV=0;aV<aS;++aV){var a4=aT[aV];this._$F2.push(a4);this._$Hr.push(a4.init(this));var aK=a4.getBaseData();var aR=aK.length;for(var aU=0;aU<aR;++aU){aH.push(aK[aU]);}for(var aU=0;aU<aR;++aU){var aM=aK[aU].init(this);aM._$l2(aV);a3.push(aM);}var a1=a4.getDrawData();var aP=a1.length;for(var aU=0;aU<aP;++aU){var aZ=a1[aU];var a0=aZ.init(this);a0._$IP=aV;this._$aS.push(aZ);this._$8b.push(a0);}}var aY=aH.length;var aN=n._$2o();while(true){var aX=false;for(var aV=0;aV<aY;++aV){var aL=aH[aV];if(aL==null){continue;}var a2=aL.getTargetBaseDataID();if(a2==null||a2==aN||this.getBaseDataIndex(a2)>=0){this._$3S.push(aL);this._$db.push(a3[aV]);aH[aV]=null;aX=true;}}if(!aX){break;}}var aI=aO._$E2();if(aI!=null){var aJ=aI._$1s();if(aJ!=null){var aW=aJ.length;for(var aV=0;aV<aW;++aV){var aQ=aJ[aV];if(aQ==null){continue;}this._$02(aQ.getParamID(),aQ.getDefaultValue(),aQ.getMinValue(),aQ.getMaxValue());}}}this.clipManager=new W(this.dp_webgl);this.clipManager.init(this,this._$aS,this._$8b);this._$QT=true;};y.prototype.update=function(){if(y._$e){q.start("_$zL");}var aK=this._$_2.length;for(var aW=0;aW<aK;aW++){if(this._$_2[aW]!=this._$vr[aW]){this._$Js[aW]=y._$ZS;this._$vr[aW]=this._$_2[aW];}}var aX=false;var aQ=this._$3S.length;var aN=this._$aS.length;var aS=a._$or();var aZ=a._$Pr();var aU=aZ-aS+1;if(this._$Ws==null||this._$Ws.length<aU){this._$Ws=new Int16Array(aU);this._$Vs=new Int16Array(aU);}for(var aW=0;aW<aU;aW++){this._$Ws[aW]=y._$V2;this._$Vs[aW]=y._$V2;}if(this._$Er==null||this._$Er.length<aN){this._$Er=new Int16Array(aN);}for(var aW=0;aW<aN;aW++){this._$Er[aW]=y._$W0;}if(y._$e){q.dump("_$zL");}if(y._$e){q.start("_$UL");}var aL=null;for(var aV=0;aV<aQ;++aV){var aJ=this._$3S[aV];var aH=this._$db[aV];try{aJ._$Nr(this,aH);aJ._$2b(this,aH);}catch(aY){if(aL==null){aL=aY;}}}if(aL!=null){if(y._$_0){q._$Rb(aL);}}if(y._$e){q.dump("_$UL");}if(y._$e){q.start("_$DL");}var aR=null;for(var aO=0;aO<aN;++aO){var aM=this._$aS[aO];var aI=this._$8b[aO];try{aM._$Nr(this,aI);if(aI._$u2()){continue;}aM._$2b(this,aI);var aT=Math.floor(aM._$zS(this,aI)-aS);var aP;try{aP=this._$Vs[aT];}catch(aY){console.log("_$li :: %s / %s 				@@_$fS\n",aY.toString(),aM.getDrawDataID().toString());aT=Math.floor(aM._$zS(this,aI)-aS);continue;}if(aP==y._$V2){this._$Ws[aT]=aO;}else{this._$Er[aP]=aO;}this._$Vs[aT]=aO;}catch(aY){if(aR==null){aR=aY;Q._$sT(Q._$H7);}}}if(aR!=null){if(y._$_0){q._$Rb(aR);}}if(y._$e){q.dump("_$DL");}if(y._$e){q.start("_$eL");}for(var aW=this._$Js.length-1;aW>=0;aW--){this._$Js[aW]=y._$jr;}this._$QT=false;if(y._$e){q.dump("_$eL");}return aX;};y.prototype.preDraw=function(aH){if(this.clipManager!=null){aH._$ZT();this.clipManager.setupClip(this,aH);}};y.prototype.draw=function(aM){if(this._$Ws==null){q._$li("call _$Ri.update() before _$Ri.draw() ");return;}var aP=this._$Ws.length;aM._$ZT();for(var aK=0;aK<aP;++aK){var aN=this._$Ws[aK];if(aN==y._$V2){continue;}do{var aH=this._$aS[aN];var aI=this._$8b[aN];if(aI._$yo()){var aJ=aI._$IP;var aL=this._$Hr[aJ];aI._$VS=aL.getPartsOpacity();aH.draw(aM,this,aI);}var aO=this._$Er[aN];if(aO<=aN||aO==y._$W0){break;}aN=aO;}while(true);}};y.prototype.getParamIndex=function(aH){for(var aI=this._$pb.length-1;aI>=0;--aI){if(this._$pb[aI]==aH){return aI;}}return this._$02(aH,0,y._$tr,y._$lr);};y.prototype._$BS=function(aH){return this.getBaseDataIndex(aH);};y.prototype.getBaseDataIndex=function(aH){for(var aI=this._$3S.length-1;aI>=0;--aI){if(this._$3S[aI]!=null&&this._$3S[aI].getBaseDataID()==aH){return aI;}}return -1;};y.prototype._$UT=function(aJ,aH){var aI=new Float32Array(aH);P._$jT(aJ,0,aI,0,aJ.length);return aI;};y.prototype._$02=function(aN,aM,aL,aH){if(this._$qo>=this._$pb.length){var aK=this._$pb.length;var aJ=new Array(aK*2);P._$jT(this._$pb,0,aJ,0,aK);this._$pb=aJ;this._$_2=this._$UT(this._$_2,aK*2);this._$vr=this._$UT(this._$vr,aK*2);this._$Rr=this._$UT(this._$Rr,aK*2);this._$Or=this._$UT(this._$Or,aK*2);var aI=new Array();P._$jT(this._$Js,0,aI,0,aK);this._$Js=aI;}this._$pb[this._$qo]=aN;this._$_2[this._$qo]=aM;this._$vr[this._$qo]=aM;this._$Rr[this._$qo]=aL;this._$Or[this._$qo]=aH;this._$Js[this._$qo]=y._$ZS;return this._$qo++;};y.prototype._$Zo=function(aI,aH){this._$3S[aI]=aH;};y.prototype.setParamFloat=function(aH,aI){if(aI<this._$Rr[aH]){aI=this._$Rr[aH];}if(aI>this._$Or[aH]){aI=this._$Or[aH];}this._$_2[aH]=aI;};y.prototype.loadParam=function(){var aH=this._$_2.length;if(aH>this._$fs.length){aH=this._$fs.length;}P._$jT(this._$fs,0,this._$_2,0,aH);};y.prototype.saveParam=function(){var aH=this._$_2.length;if(aH>this._$fs.length){this._$fs=new Float32Array(aH);}P._$jT(this._$_2,0,this._$fs,0,aH);};y.prototype._$v2=function(){return this._$co;};y.prototype._$WS=function(){return this._$QT;};y.prototype._$Xb=function(aH){return this._$Js[aH]==y._$ZS;};y.prototype._$vs=function(){return this._$Es;};y.prototype._$Tr=function(){return this._$ZP;};y.prototype.getBaseData=function(aH){return this._$3S[aH];};y.prototype.getParamFloat=function(aH){return this._$_2[aH];};y.prototype.getParamMax=function(aH){return this._$Or[aH];};y.prototype.getParamMin=function(aH){return this._$Rr[aH];};y.prototype.setPartsOpacity=function(aJ,aH){var aI=this._$Hr[aJ];aI.setPartsOpacity(aH);};y.prototype.getPartsOpacity=function(aI){var aH=this._$Hr[aI];return aH.getPartsOpacity();};y.prototype.getPartsDataIndex=function(aI){for(var aH=this._$F2.length-1;aH>=0;--aH){if(this._$F2[aH]!=null&&this._$F2[aH]._$p2()==aI){return aH;}}return -1;};y.prototype._$q2=function(aH){return this._$db[aH];};y.prototype._$C2=function(aH){return this._$8b[aH];};y.prototype._$Bb=function(aH){return this._$Hr[aH];};y.prototype._$5s=function(aO,aK){var aJ=this._$Ws.length;var aN=aO;for(var aL=0;aL<aJ;++aL){var aI=this._$Ws[aL];if(aI==y._$V2){continue;}do{var aM=this._$8b[aI];if(aM._$yo()){aM._$GT()._$B2(this,aM,aN);aN+=aK;}var aH=this._$Er[aI];if(aH<=aI||aH==y._$W0){break;}aI=aH;}while(true);}};y.prototype.setDrawParam=function(aH){this.dp_webgl=aH;};y.prototype.getDrawParam=function(){return this.dp_webgl;};function ap(){}ap._$0T=function(aH){return ap._$0T(new _$5(aH));};ap._$0T=function(aJ){if(!aJ.exists()){throw new _$ls(aJ._$3b());}var aH=aJ.length();var aI=new Int8Array(aH);var aM=new _$Xs(new _$kb(aJ),8192);var aK;var aL=0;while((aK=aM.read(aI,aL,aH-aL))>0){aL+=aK;}return aI;};ap._$C=function(aJ){var aI=null;var aL=null;try{aI=(aJ instanceof Array)?aJ:new _$Xs(aJ,8192);aL=new _$js();var aM=1000;var aK;var aH=new Int8Array(aM);while((aK=aI.read(aH))>0){aL.write(aH,0,aK);}return aL._$TS();}finally{if(aJ!=null){aJ.close();}if(aL!=null){aL.flush();aL.close();}}};function ar(){if(j){return;}this._$12=null;this._$bb=null;this._$_L=null;this._$jo=null;this._$iL=null;this._$0L=null;this._$Br=null;this._$Dr=null;this._$Cb=null;this._$mr=null;this._$_L=az.STATE_FIRST;this._$Br=4000;this._$Dr=100;this._$Cb=50;this._$mr=150;this._$jo=true;this._$iL="PARAM_EYE_L_OPEN";this._$0L="PARAM_EYE_R_OPEN";}ar.prototype._$T2=function(){var aI=P.getUserTimeMSec();var aH=Math._$10();return(aI+aH*(2*this._$Br-1));};ar.prototype._$uo=function(aH){this._$Br=aH;};ar.prototype._$QS=function(aI,aH,aJ){this._$Dr=aI;this._$Cb=aH;this._$mr=aJ;};ar.prototype._$7T=function(aI){var aK=P.getUserTimeMSec();var aH;var aJ=0;switch(this._$_L){case STATE_CLOSING:aJ=(aK-this._$bb)/this._$Dr;if(aJ>=1){aJ=1;this._$_L=az.STATE_CLOSED;this._$bb=aK;}aH=1-aJ;break;case STATE_CLOSED:aJ=(aK-this._$bb)/this._$Cb;if(aJ>=1){this._$_L=az.STATE_OPENING;this._$bb=aK;}aH=0;break;case STATE_OPENING:aJ=(aK-this._$bb)/this._$mr;if(aJ>=1){aJ=1;this._$_L=az.STATE_INTERVAL;this._$12=this._$T2();}aH=aJ;break;case STATE_INTERVAL:if(this._$12<aK){this._$_L=az.STATE_CLOSING;this._$bb=aK;}aH=1;break;case STATE_FIRST:default:this._$_L=az.STATE_INTERVAL;this._$12=this._$T2();aH=1;break;}if(!this._$jo){aH=-aH;}aI.setParamFloat(this._$iL,aH);aI.setParamFloat(this._$0L,aH);};var az=function(){};az.STATE_FIRST="STATE_FIRST";az.STATE_INTERVAL="STATE_INTERVAL";az.STATE_CLOSING="STATE_CLOSING";az.STATE_CLOSED="STATE_CLOSED";az.STATE_OPENING="STATE_OPENING";function x(){if(j){return;}ax.prototype.constructor.call(this);this._$sb=new Int32Array(x._$As);this._$U2=new Array();this.transform=null;this.gl=null;if(x._$NT==null){x._$NT=x._$9r(256);x._$vS=x._$9r(256);x._$no=x._$vb(256);}}x.prototype=new ax();x._$As=32;x._$Gr=false;x._$NT=null;x._$vS=null;x._$no=null;x._$9r=function(aH){var aI=new Float32Array(aH);return aI;};x._$vb=function(aH){var aI=new Int16Array(aH);return aI;};x._$cr=function(aI,aH){if(aI==null||aI._$yL()<aH.length){aI=x._$9r(aH.length*2);aI.put(aH);aI._$oT(0);}else{aI.clear();aI.put(aH);aI._$oT(0);}return aI;};x._$mb=function(aI,aH){if(aI==null||aI._$yL()<aH.length){aI=x._$vb(aH.length*2);aI.put(aH);aI._$oT(0);}else{aI.clear();aI.put(aH);aI._$oT(0);}return aI;};x._$Hs=function(){return x._$Gr;};x._$as=function(aH){x._$Gr=aH;};x.prototype.setGL=function(aH){this.gl=aH;};x.prototype.setTransform=function(aH){this.transform=aH;};x.prototype._$ZT=function(){};x.prototype._$Uo=function(aO,aH,aP,aI,aQ,aM,aK,aJ){if(aM<0.01){return;}var aL=this._$U2[aO];var aN=aM>0.9?Q.EXPAND_W:0;this.gl.drawElements(aL,aP,aI,aQ,aM,aN,this.transform,aJ);};x.prototype._$Rs=function(){throw new Error("_$Rs");};x.prototype._$Ds=function(aH){throw new Error("_$Ds");};x.prototype._$K2=function(){for(var aH=0;aH<this._$sb.length;aH++){var aI=this._$sb[aH];if(aI!=0){this.gl._$Sr(1,this._$sb,aH);this._$sb[aH]=0;}}};x.prototype.setTexture=function(aI,aH){if(this._$sb.length<aI+1){this._$nS(aI);}this._$sb[aI]=aH;};x.prototype.setTexture=function(aH,aI){if(this._$sb.length<aH+1){this._$nS(aH);}this._$U2[aH]=aI;};x.prototype._$nS=function(aH){var aK=Math.max(this._$sb.length*2,aH+1+10);var aI=new Int32Array(aK);P._$jT(this._$sb,0,aI,0,this._$sb.length);this._$sb=aI;var aJ=new Array();P._$jT(this._$U2,0,aJ,0,this._$U2.length);this._$U2=aJ;};function ab(){if(j){return;}c.prototype.constructor.call(this);this._$GS=null;this._$Y0=null;}ab.prototype=new c();ab._$Xo=new Float32Array(2);ab._$io=new Float32Array(2);ab._$0o=new Float32Array(2);ab._$Lo=new Float32Array(2);ab._$To=new Float32Array(2);ab._$Po=new Float32Array(2);ab._$gT=new Array();ab.prototype._$zP=function(){this._$GS=new g();this._$GS._$zP();this._$Y0=new Array();};ab.prototype.getType=function(){return c._$c2;};ab.prototype._$F0=function(aH){c.prototype._$F0.call(this,aH);this._$GS=aH._$nP();this._$Y0=aH._$nP();c.prototype.readV2_opacity.call(this,aH);};ab.prototype.init=function(aH){var aI=new al(this);aI._$Yr=new X();if(this._$32()){aI._$Wr=new X();}return aI;};ab.prototype._$Nr=function(bf,bx){if(!((this==bx._$GT()))){console.log("### assert!! ### ");}var bm=bx;if(!this._$GS._$Ur(bf)){return;}var bw=ab._$gT;bw[0]=false;var a2=this._$GS._$Q2(bf,bw);bx._$Ib(bw[0]);this.interpolateOpacity(bf,this._$GS,bx,bw);var a3=bf._$vs();var ba=bf._$Tr();this._$GS._$zr(a3,ba,a2);if(a2<=0){var bn=this._$Y0[a3[0]];bm._$Yr.init(bn);}else{if(a2==1){var bn=this._$Y0[a3[0]];var bl=this._$Y0[a3[1]];var a9=ba[0];bm._$Yr._$fL=bn._$fL+(bl._$fL-bn._$fL)*a9;bm._$Yr._$gL=bn._$gL+(bl._$gL-bn._$gL)*a9;bm._$Yr._$B0=bn._$B0+(bl._$B0-bn._$B0)*a9;bm._$Yr._$z0=bn._$z0+(bl._$z0-bn._$z0)*a9;bm._$Yr._$qT=bn._$qT+(bl._$qT-bn._$qT)*a9;}else{if(a2==2){var bn=this._$Y0[a3[0]];var bl=this._$Y0[a3[1]];var a1=this._$Y0[a3[2]];var a0=this._$Y0[a3[3]];var a9=ba[0];var a8=ba[1];var bC=bn._$fL+(bl._$fL-bn._$fL)*a9;var bB=a1._$fL+(a0._$fL-a1._$fL)*a9;bm._$Yr._$fL=bC+(bB-bC)*a8;bC=bn._$gL+(bl._$gL-bn._$gL)*a9;bB=a1._$gL+(a0._$gL-a1._$gL)*a9;bm._$Yr._$gL=bC+(bB-bC)*a8;bC=bn._$B0+(bl._$B0-bn._$B0)*a9;bB=a1._$B0+(a0._$B0-a1._$B0)*a9;bm._$Yr._$B0=bC+(bB-bC)*a8;bC=bn._$z0+(bl._$z0-bn._$z0)*a9;bB=a1._$z0+(a0._$z0-a1._$z0)*a9;bm._$Yr._$z0=bC+(bB-bC)*a8;bC=bn._$qT+(bl._$qT-bn._$qT)*a9;bB=a1._$qT+(a0._$qT-a1._$qT)*a9;bm._$Yr._$qT=bC+(bB-bC)*a8;}else{if(a2==3){var aP=this._$Y0[a3[0]];var aO=this._$Y0[a3[1]];var bu=this._$Y0[a3[2]];var bs=this._$Y0[a3[3]];var aK=this._$Y0[a3[4]];var aJ=this._$Y0[a3[5]];var bj=this._$Y0[a3[6]];var bi=this._$Y0[a3[7]];var a9=ba[0];var a8=ba[1];var a6=ba[2];var bC=aP._$fL+(aO._$fL-aP._$fL)*a9;var bB=bu._$fL+(bs._$fL-bu._$fL)*a9;var bz=aK._$fL+(aJ._$fL-aK._$fL)*a9;var by=bj._$fL+(bi._$fL-bj._$fL)*a9;bm._$Yr._$fL=(1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8);bC=aP._$gL+(aO._$gL-aP._$gL)*a9;bB=bu._$gL+(bs._$gL-bu._$gL)*a9;bz=aK._$gL+(aJ._$gL-aK._$gL)*a9;by=bj._$gL+(bi._$gL-bj._$gL)*a9;bm._$Yr._$gL=(1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8);bC=aP._$B0+(aO._$B0-aP._$B0)*a9;bB=bu._$B0+(bs._$B0-bu._$B0)*a9;bz=aK._$B0+(aJ._$B0-aK._$B0)*a9;by=bj._$B0+(bi._$B0-bj._$B0)*a9;bm._$Yr._$B0=(1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8);bC=aP._$z0+(aO._$z0-aP._$z0)*a9;bB=bu._$z0+(bs._$z0-bu._$z0)*a9;bz=aK._$z0+(aJ._$z0-aK._$z0)*a9;by=bj._$z0+(bi._$z0-bj._$z0)*a9;bm._$Yr._$z0=(1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8);bC=aP._$qT+(aO._$qT-aP._$qT)*a9;bB=bu._$qT+(bs._$qT-bu._$qT)*a9;bz=aK._$qT+(aJ._$qT-aK._$qT)*a9;by=bj._$qT+(bi._$qT-bj._$qT)*a9;bm._$Yr._$qT=(1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8);}else{if(a2==4){var aT=this._$Y0[a3[0]];var aS=this._$Y0[a3[1]];var bE=this._$Y0[a3[2]];var bD=this._$Y0[a3[3]];var aN=this._$Y0[a3[4]];var aM=this._$Y0[a3[5]];var bp=this._$Y0[a3[6]];var bo=this._$Y0[a3[7]];var bh=this._$Y0[a3[8]];var bg=this._$Y0[a3[9]];var aY=this._$Y0[a3[10]];var aW=this._$Y0[a3[11]];var a7=this._$Y0[a3[12]];var a5=this._$Y0[a3[13]];var aR=this._$Y0[a3[14]];var aQ=this._$Y0[a3[15]];var a9=ba[0];var a8=ba[1];var a6=ba[2];var a4=ba[3];var bC=aT._$fL+(aS._$fL-aT._$fL)*a9;var bB=bE._$fL+(bD._$fL-bE._$fL)*a9;var bz=aN._$fL+(aM._$fL-aN._$fL)*a9;var by=bp._$fL+(bo._$fL-bp._$fL)*a9;var bv=bh._$fL+(bg._$fL-bh._$fL)*a9;var bt=aY._$fL+(aW._$fL-aY._$fL)*a9;var br=a7._$fL+(a5._$fL-a7._$fL)*a9;var bq=aR._$fL+(aQ._$fL-aR._$fL)*a9;bm._$Yr._$fL=(1-a4)*((1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8))+a4*((1-a6)*(bv+(bt-bv)*a8)+a6*(br+(bq-br)*a8));bC=aT._$gL+(aS._$gL-aT._$gL)*a9;bB=bE._$gL+(bD._$gL-bE._$gL)*a9;bz=aN._$gL+(aM._$gL-aN._$gL)*a9;by=bp._$gL+(bo._$gL-bp._$gL)*a9;bv=bh._$gL+(bg._$gL-bh._$gL)*a9;bt=aY._$gL+(aW._$gL-aY._$gL)*a9;br=a7._$gL+(a5._$gL-a7._$gL)*a9;bq=aR._$gL+(aQ._$gL-aR._$gL)*a9;bm._$Yr._$gL=(1-a4)*((1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8))+a4*((1-a6)*(bv+(bt-bv)*a8)+a6*(br+(bq-br)*a8));bC=aT._$B0+(aS._$B0-aT._$B0)*a9;bB=bE._$B0+(bD._$B0-bE._$B0)*a9;bz=aN._$B0+(aM._$B0-aN._$B0)*a9;by=bp._$B0+(bo._$B0-bp._$B0)*a9;bv=bh._$B0+(bg._$B0-bh._$B0)*a9;bt=aY._$B0+(aW._$B0-aY._$B0)*a9;br=a7._$B0+(a5._$B0-a7._$B0)*a9;bq=aR._$B0+(aQ._$B0-aR._$B0)*a9;bm._$Yr._$B0=(1-a4)*((1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8))+a4*((1-a6)*(bv+(bt-bv)*a8)+a6*(br+(bq-br)*a8));bC=aT._$z0+(aS._$z0-aT._$z0)*a9;bB=bE._$z0+(bD._$z0-bE._$z0)*a9;bz=aN._$z0+(aM._$z0-aN._$z0)*a9;by=bp._$z0+(bo._$z0-bp._$z0)*a9;bv=bh._$z0+(bg._$z0-bh._$z0)*a9;bt=aY._$z0+(aW._$z0-aY._$z0)*a9;br=a7._$z0+(a5._$z0-a7._$z0)*a9;bq=aR._$z0+(aQ._$z0-aR._$z0)*a9;bm._$Yr._$z0=(1-a4)*((1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8))+a4*((1-a6)*(bv+(bt-bv)*a8)+a6*(br+(bq-br)*a8));bC=aT._$qT+(aS._$qT-aT._$qT)*a9;bB=bE._$qT+(bD._$qT-bE._$qT)*a9;bz=aN._$qT+(aM._$qT-aN._$qT)*a9;by=bp._$qT+(bo._$qT-bp._$qT)*a9;bv=bh._$qT+(bg._$qT-bh._$qT)*a9;bt=aY._$qT+(aW._$qT-aY._$qT)*a9;br=a7._$qT+(a5._$qT-a7._$qT)*a9;bq=aR._$qT+(aQ._$qT-aR._$qT)*a9;bm._$Yr._$qT=(1-a4)*((1-a6)*(bC+(bB-bC)*a8)+a6*(bz+(by-bz)*a8))+a4*((1-a6)*(bv+(bt-bv)*a8)+a6*(br+(bq-br)*a8));}else{var aV=Math.pow(2,a2)|0;var aZ=new Float32Array(aV);for(var bk=0;bk<aV;bk++){var aI=bk;var aH=1;for(var aL=0;aL<a2;aL++){aH*=(aI%2==0)?(1-ba[aL]):ba[aL];aI/=2;}aZ[bk]=aH;}var bA=new Array();for(var aU=0;aU<aV;aU++){bA[aU]=this._$Y0[a3[aU]];}var be=0,bc=0,bd=0,bb=0,aX=0;for(var aU=0;aU<aV;aU++){be+=aZ[aU]*bA[aU]._$fL;bc+=aZ[aU]*bA[aU]._$gL;bd+=aZ[aU]*bA[aU]._$B0;bb+=aZ[aU]*bA[aU]._$z0;aX+=aZ[aU]*bA[aU]._$qT;}bm._$Yr._$fL=be;bm._$Yr._$gL=bc;bm._$Yr._$B0=bd;bm._$Yr._$z0=bb;bm._$Yr._$qT=aX;}}}}}var bn=this._$Y0[a3[0]];bm._$Yr.reflectX=bn.reflectX;bm._$Yr.reflectY=bn.reflectY;};ab.prototype._$2b=function(aM,aH){if(!((this==aH._$GT()))){console.log("### assert!! ### ");}var aR=aH;aR._$hS(true);if(!this._$32()){aR.setTotalScale_notForClient(aR._$Yr._$B0);aR.setTotalOpacity(aR.getInterpolatedOpacity());}else{var aT=this.getTargetBaseDataID();if(aR._$8r==c._$ur){aR._$8r=aM.getBaseDataIndex(aT);}if(aR._$8r<0){if(Q._$so){q._$li("_$L _$0P _$G :: %s",aT);}aR._$hS(false);}else{var aI=aM.getBaseData(aR._$8r);if(aI!=null){var aL=aM._$q2(aR._$8r);var aS=ab._$Xo;aS[0]=aR._$Yr._$fL;aS[1]=aR._$Yr._$gL;var aJ=ab._$io;aJ[0]=0;aJ[1]=-0.1;var aO=aL._$GT().getType();if(aO==c._$c2){aJ[1]=-10;}else{aJ[1]=-0.1;}var aQ=ab._$0o;this._$Jr(aM,aI,aL,aS,aJ,aQ);var aP=aC._$92(aJ,aQ);aI._$nb(aM,aL,aS,aS,1,0,2);aR._$Wr._$fL=aS[0];aR._$Wr._$gL=aS[1];aR._$Wr._$B0=aR._$Yr._$B0;aR._$Wr._$z0=aR._$Yr._$z0;aR._$Wr._$qT=aR._$Yr._$qT-aP*aC._$NS;var aK=aL.getTotalScale();aR.setTotalScale_notForClient(aK*aR._$Wr._$B0);var aN=aL.getTotalOpacity();aR.setTotalOpacity(aN*aR.getInterpolatedOpacity());aR._$Wr.reflectX=aR._$Yr.reflectX;aR._$Wr.reflectY=aR._$Yr.reflectY;aR._$hS(aL._$yo());}else{aR._$hS(false);}}}};ab.prototype._$nb=function(aJ,aR,aL,a4,aT,aO,a2){if(!((this==aR._$GT()))){console.log("### assert!! ### ");}var aH=aR;var aU=aH._$Wr!=null?aH._$Wr:aH._$Yr;var a0=Math.sin(aC._$bS*aU._$qT);var aP=Math.cos(aC._$bS*aU._$qT);var a3=aH.getTotalScale();var aW=aU.reflectX?-1:1;var aV=aU.reflectY?-1:1;var aS=aP*a3*aW;var aQ=-a0*a3*aV;var a1=a0*a3*aW;var aZ=aP*a3*aV;var aY=aU._$fL;var aX=aU._$gL;var aN,aM;var aI=aT*a2;for(var aK=aO;aK<aI;aK+=a2){aN=aL[aK];aM=aL[aK+1];a4[aK]=aS*aN+aQ*aM+aY;a4[aK+1]=a1*aN+aZ*aM+aX;}};ab.prototype._$Jr=function(aP,aK,aI,aR,aQ,aH){if(!((aK==aI._$GT()))){console.log("### assert!! ### ");}var aO=ab._$Lo;ab._$Lo[0]=aR[0];ab._$Lo[1]=aR[1];aK._$nb(aP,aI,aO,aO,1,0,2);var aL=ab._$To;var aS=ab._$Po;var aN=10;var aJ=1;for(var aM=0;aM<aN;aM++){aS[0]=aR[0]+aJ*aQ[0];aS[1]=aR[1]+aJ*aQ[1];aK._$nb(aP,aI,aS,aL,1,0,2);aL[0]-=aO[0];aL[1]-=aO[1];if(aL[0]!=0||aL[1]!=0){aH[0]=aL[0];aH[1]=aL[1];return;}aS[0]=aR[0]-aJ*aQ[0];aS[1]=aR[1]-aJ*aQ[1];aK._$nb(aP,aI,aS,aL,1,0,2);aL[0]-=aO[0];aL[1]-=aO[1];if(aL[0]!=0||aL[1]!=0){aL[0]=-aL[0];aL[0]=-aL[0];aH[0]=aL[0];aH[1]=aL[1];return;}aJ*=0.1;}if(Q._$so){console.log("_$L0 to transform _$SP\n");}};function al(aH){B.prototype.constructor.call(this,aH);this._$8r=c._$ur;this._$Yr=null;this._$Wr=null;}al.prototype=new B();function a(){if(j){return;}ae.prototype.constructor.call(this);this._$gP=null;this._$dr=null;this._$GS=null;this._$qb=null;this._$Lb=null;this._$mS=null;}a.prototype=new ae();a._$ur=-2;a._$ES=500;a._$wb=2;a._$8S=3;a._$os=4;a._$52=a._$ES;a._$R2=a._$ES;a._$Sb=function(aJ){for(var aI=aJ.length-1;aI>=0;--aI){var aH=aJ[aI];if(aH<a._$52){a._$52=aH;}else{if(aH>a._$R2){a._$R2=aH;}}}};a._$or=function(){return a._$52;};a._$Pr=function(){return a._$R2;};a.prototype._$F0=function(aH){this._$gP=aH._$nP();this._$dr=aH._$nP();this._$GS=aH._$nP();this._$qb=aH._$6L();this._$Lb=aH._$cS();this._$mS=aH._$Tb();if(aH.getFormatVersion()>=ay._$T7){this.clipID=aH._$nP();this.clipIDList=this.convertClipIDForV2_11(this.clipID);}else{this.clipIDList=null;}a._$Sb(this._$Lb);};a.prototype.getClipIDList=function(){return this.clipIDList;};a.prototype._$Nr=function(aI,aH){aH._$IS[0]=false;aH._$Us=aG._$Z2(aI,this._$GS,aH._$IS,this._$Lb);if(Q._$Zs){}else{if(aH._$IS[0]){return;}}aH._$7s=aG._$br(aI,this._$GS,aH._$IS,this._$mS);};a.prototype._$2b=function(aH){};a.prototype.getDrawDataID=function(){return this._$gP;};a.prototype._$j2=function(aH){this._$gP=aH;};a.prototype.getOpacity=function(aH,aI){return aI._$7s;};a.prototype._$zS=function(aH,aI){return aI._$Us;};a.prototype.getTargetBaseDataID=function(){return this._$dr;};a.prototype._$gs=function(aH){this._$dr=aH;};a.prototype._$32=function(){return(this._$dr!=null&&(this._$dr!=n._$2o()));};a.prototype.getType=function(){};function aq(){if(j){return;}this._$NL=null;this._$3S=null;this._$aS=null;aq._$42++;}aq._$42=0;aq.prototype._$1b=function(){return this._$3S;};aq.prototype.getDrawDataList=function(){return this._$aS;};aq.prototype._$F0=function(aH){this._$NL=aH._$nP();this._$aS=aH._$nP();this._$3S=aH._$nP();};aq.prototype._$kr=function(aH){aH._$Zo(this._$3S);aH._$xo(this._$aS);this._$3S=null;this._$aS=null;};function v(){if(j){return;}aa.prototype.constructor.call(this);this._$zo=new x();}v.prototype=new aa();v.loadModel=function(aI){var aH=new v();aa._$62(aH,aI);return aH;};v.loadModel=function(aI){var aH=new v();aa._$62(aH,aI);return aH;};v._$to=function(){var aH=new v();return aH;};v._$er=function(aM){var aJ=new _$5("../_$_r/_$t0/_$Ri/_$_P._$d");if(aJ.exists()==false){throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+aJ._$PL());}var aH=["../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1"];var aK=v.loadModel(aJ._$3b());for(var aI=0;aI<aH.length;aI++){var aL=new _$5(aH[aI]);if(aL.exists()==false){throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+aL._$PL());}aK.setTexture(aI,_$nL._$_o(aM,aL._$3b()));}return aK;};v.prototype.setGL=function(aH){this._$zo.setGL(aH);};v.prototype.setTransform=function(aH){this._$zo.setTransform(aH);};v.prototype.draw=function(){this._$5S.draw(this._$zo);};v.prototype._$K2=function(){this._$zo._$K2();};v.prototype.setTexture=function(aI,aH){if(this._$zo==null){q._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!");}this._$zo.setTexture(aI,aH);};v.prototype.setTexture=function(aI,aH){if(this._$zo==null){q._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!");}this._$zo.setTexture(aI,aH);};v.prototype._$Rs=function(){return this._$zo._$Rs();};v.prototype._$Ds=function(aH){this._$zo._$Ds(aH);};v.prototype.getDrawParam=function(){return this._$zo;};function ao(){if(j){return;}ah.prototype.constructor.call(this);this.motions=new Array();this._$o2=null;this._$7r=ao._$Co++;this._$D0=30;this._$yT=0;this._$E=false;this.loopFadeIn=true;this._$rr=-1;this._$eP=0;}ao.prototype=new ah();ao._$cs="VISIBLE:";ao._$ar="LAYOUT:";ao.MTN_PREFIX_FADEIN="FADEIN:";ao.MTN_PREFIX_FADEOUT="FADEOUT:";ao._$Co=0;ao._$1T=1;ao.loadMotion=function(aJ){var aI=ap._$C(aJ);var aH=ao.loadMotion(aI);return aH;};function p(aI,aH){return String.fromCharCode(aI.getUint8(aH));}ao.loadMotion=function(aT){if(aT instanceof ArrayBuffer){aT=new DataView(aT);}var aN=new ao();var aI=[0];var aQ=aT.byteLength;aN._$yT=0;for(var aJ=0;aJ<aQ;++aJ){var aS=p(aT,aJ);var aL=aS.charCodeAt(0);if(aS=="\n"||aS=="\r"){continue;}if(aS=="#"){for(;aJ<aQ;++aJ){if(p(aT,aJ)=="\n"||p(aT,aJ)=="\r"){break;}}continue;}if(aS=="$"){var aV=aJ;var aK=-1;for(;aJ<aQ;++aJ){aS=p(aT,aJ);if(aS=="\r"||aS=="\n"){break;}if(aS=="="){aK=aJ;break;}}var aP=false;if(aK>=0){if(aK==aV+4&&p(aT,aV+1)=="f"&&p(aT,aV+2)=="p"&&p(aT,aV+3)=="s"){aP=true;}for(aJ=aK+1;aJ<aQ;++aJ){aS=p(aT,aJ);if(aS=="\r"||aS=="\n"){break;}if(aS==","||aS==" "||aS=="\t"){continue;}var aM=G._$LS(aT,aQ,aJ,aI);if(aI[0]>0){if(aP&&5<aM&&aM<121){aN._$D0=aM;}}aJ=aI[0];}}for(;aJ<aQ;++aJ){if(p(aT,aJ)=="\n"||p(aT,aJ)=="\r"){break;}}continue;}if((97<=aL&&aL<=122)||(65<=aL&&aL<=90)||aS=="_"){var aV=aJ;var aK=-1;for(;aJ<aQ;++aJ){aS=p(aT,aJ);if(aS=="\r"||aS=="\n"){break;}if(aS=="="){aK=aJ;break;}}if(aK>=0){var aO=new t();if(G.startsWith(aT,aV,ao._$cs)){aO._$RP=t._$hs;aO._$4P=G.createString(aT,aV,aK-aV);}else{if(G.startsWith(aT,aV,ao._$ar)){aO._$4P=G.createString(aT,aV+7,aK-aV-7);if(G.startsWith(aT,aV+7,"ANCHOR_X")){aO._$RP=t._$xs;}else{if(G.startsWith(aT,aV+7,"ANCHOR_Y")){aO._$RP=t._$us;}else{if(G.startsWith(aT,aV+7,"SCALE_X")){aO._$RP=t._$qs;}else{if(G.startsWith(aT,aV+7,"SCALE_Y")){aO._$RP=t._$Ys;}else{if(G.startsWith(aT,aV+7,"X")){aO._$RP=t._$ws;}else{if(G.startsWith(aT,aV+7,"Y")){aO._$RP=t._$Ns;}}}}}}}else{aO._$RP=t._$Fr;aO._$4P=G.createString(aT,aV,aK-aV);}}aN.motions.push(aO);var aU=0;var aR=[];for(aJ=aK+1;aJ<aQ;++aJ){aS=p(aT,aJ);if(aS=="\r"||aS=="\n"){break;}if(aS==","||aS==" "||aS=="\t"){continue;}var aM=G._$LS(aT,aQ,aJ,aI);if(aI[0]>0){aR.push(aM);aU++;var aH=aI[0];if(aH<aJ){console.log("_$n0 _$hi . @Live2DMotion loadMotion()\n");break;}aJ=aH-1;}}aO._$I0=new Float32Array(aR);if(aU>aN._$yT){aN._$yT=aU;}}}}aN._$rr=((1000*aN._$yT)/aN._$D0)|0;return aN;};ao.prototype.getDurationMSec=function(){return this._$E?-1:this._$rr;};ao.prototype.getLoopDurationMSec=function(){return this._$rr;};ao.prototype.dump=function(){for(var aJ=0;aJ<this.motions.length;aJ++){var aH=this.motions[aJ];console.log("_$wL[%s] [%d]. ",aH._$4P,aH._$I0.length);for(var aI=0;aI<aH._$I0.length&&aI<10;aI++){console.log("%5.2f ,",aH._$I0[aI]);}console.log("\n");}};ao.prototype.updateParamExe=function(aJ,aN,aQ,a3){var aO=aN-a3._$z2;var a0=aO*this._$D0/1000;var aK=a0|0;var aR=a0-aK;for(var aZ=0;aZ<this.motions.length;aZ++){var aV=this.motions[aZ];var aL=aV._$I0.length;var aT=aV._$4P;if(aV._$RP==t._$hs){var aX=aV._$I0[(aK>=aL?aL-1:aK)];aJ.setParamFloat(aT,aX);}else{if(t._$ws<=aV._$RP&&aV._$RP<=t._$Ys){}else{var aH=aJ.getParamIndex(aT);var a4=aJ.getModelContext();var aY=a4.getParamMax(aH);var aW=a4.getParamMin(aH);var aM=0.4;var aS=aM*(aY-aW);var aU=a4.getParamFloat(aH);var a2=aV._$I0[(aK>=aL?aL-1:aK)];var a1=aV._$I0[(aK+1>=aL?aL-1:aK+1)];var aI;if((a2<a1&&a1-a2>aS)||(a2>a1&&a2-a1>aS)){aI=a2;}else{aI=a2+(a1-a2)*aR;}var aP=aU+(aI-aU)*aQ;aJ.setParamFloat(aT,aP);}}}if(aK>=this._$yT){if(this._$E){a3._$z2=aN;if(this.loopFadeIn){a3._$bs=aN;}}else{a3._$9L=true;}}this._$eP=aQ;};ao.prototype._$r0=function(){return this._$E;};ao.prototype._$aL=function(aH){this._$E=aH;};ao.prototype._$S0=function(){return this._$D0;};ao.prototype._$U0=function(aH){this._$D0=aH;};ao.prototype.isLoopFadeIn=function(){return this.loopFadeIn;};ao.prototype.setLoopFadeIn=function(aH){this.loopFadeIn=aH;};function aE(){this._$P=new Float32Array(100);this.size=0;}aE.prototype.clear=function(){this.size=0;};aE.prototype.add=function(aI){if(this._$P.length<=this.size){var aH=new Float32Array(this.size*2);P._$jT(this._$P,0,aH,0,this.size);this._$P=aH;}this._$P[this.size++]=aI;};aE.prototype._$BL=function(){var aH=new Float32Array(this.size);P._$jT(this._$P,0,aH,0,this.size);return aH;};function t(){this._$4P=null;this._$I0=null;this._$RP=null;}t._$Fr=0;t._$hs=1;t._$ws=100;t._$Ns=101;t._$xs=102;t._$us=103;t._$qs=104;t._$Ys=105;function E(){if(j){return;}c.prototype.constructor.call(this);this._$o=0;this._$A=0;this._$GS=null;this._$Eo=null;}E.prototype=new c();E._$gT=new Array();E.prototype._$zP=function(){this._$GS=new g();this._$GS._$zP();};E.prototype._$F0=function(aH){c.prototype._$F0.call(this,aH);this._$A=aH._$6L();this._$o=aH._$6L();this._$GS=aH._$nP();this._$Eo=aH._$nP();c.prototype.readV2_opacity.call(this,aH);};E.prototype.init=function(aH){var aI=new H(this);var aJ=(this._$o+1)*(this._$A+1);if(aI._$Cr!=null){aI._$Cr=null;}aI._$Cr=new Float32Array(aJ*2);if(aI._$hr!=null){aI._$hr=null;}if(this._$32()){aI._$hr=new Float32Array(aJ*2);}else{aI._$hr=null;}return aI;};E.prototype._$Nr=function(aJ,aI){var aK=aI;if(!this._$GS._$Ur(aJ)){return;}var aL=this._$VT();var aH=E._$gT;aH[0]=false;aG._$Vr(aJ,this._$GS,aH,aL,this._$Eo,aK._$Cr,0,2);aI._$Ib(aH[0]);this.interpolateOpacity(aJ,this._$GS,aI,aH);};E.prototype._$2b=function(aK,aJ){var aL=aJ;aL._$hS(true);if(!this._$32()){aL.setTotalOpacity(aL.getInterpolatedOpacity());}else{var aH=this.getTargetBaseDataID();if(aL._$8r==c._$ur){aL._$8r=aK.getBaseDataIndex(aH);}if(aL._$8r<0){if(Q._$so){q._$li("_$L _$0P _$G :: %s",aH);}aL._$hS(false);}else{var aN=aK.getBaseData(aL._$8r);var aI=aK._$q2(aL._$8r);if(aN!=null&&aI._$yo()){var aM=aI.getTotalScale();aL.setTotalScale_notForClient(aM);var aO=aI.getTotalOpacity();aL.setTotalOpacity(aO*aL.getInterpolatedOpacity());aN._$nb(aK,aI,aL._$Cr,aL._$hr,this._$VT(),0,2);aL._$hS(true);}else{aL._$hS(false);}}}};E.prototype._$nb=function(aL,aI,aH,aM,aO,aK,aJ){if(true){var aN=aI;var aP=(aN._$hr!=null)?aN._$hr:aN._$Cr;E.transformPoints_sdk2(aH,aM,aO,aK,aJ,aP,this._$o,this._$A);}else{}};E.transformPoints_sdk2=function(a0,bc,a5,aP,aI,aR,aQ,aU){var aW=a5*aI;var aV;var bn,bm;var aT=0;var aS=0;var bl=0;var bk=0;var bf=0;var be=0;var aZ=false;for(var ba=aP;ba<aW;ba+=aI){var bd,a7,a4,aX;a4=a0[ba];aX=a0[ba+1];bd=a4*aQ;a7=aX*aU;if(bd<0||a7<0||aQ<=bd||aU<=a7){var a1=aQ+1;if(!aZ){aZ=true;aT=0.25*(aR[((0)+(0)*a1)*2]+aR[((aQ)+(0)*a1)*2]+aR[((0)+(aU)*a1)*2]+aR[((aQ)+(aU)*a1)*2]);aS=0.25*(aR[((0)+(0)*a1)*2+1]+aR[((aQ)+(0)*a1)*2+1]+aR[((0)+(aU)*a1)*2+1]+aR[((aQ)+(aU)*a1)*2+1]);var aM=aR[((aQ)+(aU)*a1)*2]-aR[((0)+(0)*a1)*2];var aL=aR[((aQ)+(aU)*a1)*2+1]-aR[((0)+(0)*a1)*2+1];var bh=aR[((aQ)+(0)*a1)*2]-aR[((0)+(aU)*a1)*2];var bg=aR[((aQ)+(0)*a1)*2+1]-aR[((0)+(aU)*a1)*2+1];bl=(aM+bh)*0.5;bk=(aL+bg)*0.5;bf=(aM-bh)*0.5;be=(aL-bg)*0.5;if(bl==0&&bk==0){}if(bf==0&&be==0){}aT-=0.5*(bl+bf);aS-=0.5*(bk+be);}if((-2<a4&&a4<3)&&(-2<aX&&aX<3)){if(a4<=0){if(aX<=0){var a3=aR[((0)+(0)*a1)*2];var a2=aR[((0)+(0)*a1)*2+1];var a8=aT-2*bl;var a6=aS-2*bk;var aK=aT-2*bf;var aJ=aS-2*be;var aO=aT-2*bl-2*bf;var aN=aS-2*bk-2*be;var bj=0.5*(a4-(-2));var bi=0.5*(aX-(-2));if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}else{if(aX>=1){var aK=aR[((0)+(aU)*a1)*2];var aJ=aR[((0)+(aU)*a1)*2+1];var aO=aT-2*bl+1*bf;var aN=aS-2*bk+1*be;var a3=aT+3*bf;var a2=aS+3*be;var a8=aT-2*bl+3*bf;var a6=aS-2*bk+3*be;var bj=0.5*(a4-(-2));var bi=0.5*(aX-(1));if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}else{var aH=(a7|0);if(aH==aU){aH=aU-1;}var bj=0.5*(a4-(-2));var bi=a7-aH;var bb=aH/aU;var a9=(aH+1)/aU;var aK=aR[((0)+(aH)*a1)*2];var aJ=aR[((0)+(aH)*a1)*2+1];var a3=aR[((0)+(aH+1)*a1)*2];var a2=aR[((0)+(aH+1)*a1)*2+1];var aO=aT-2*bl+bb*bf;var aN=aS-2*bk+bb*be;var a8=aT-2*bl+a9*bf;var a6=aS-2*bk+a9*be;if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}}}else{if(1<=a4){if(aX<=0){var a8=aR[((aQ)+(0)*a1)*2];var a6=aR[((aQ)+(0)*a1)*2+1];var a3=aT+3*bl;var a2=aS+3*bk;var aO=aT+1*bl-2*bf;var aN=aS+1*bk-2*be;var aK=aT+3*bl-2*bf;var aJ=aS+3*bk-2*be;var bj=0.5*(a4-(1));var bi=0.5*(aX-(-2));if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}else{if(aX>=1){var aO=aR[((aQ)+(aU)*a1)*2];var aN=aR[((aQ)+(aU)*a1)*2+1];var aK=aT+3*bl+1*bf;var aJ=aS+3*bk+1*be;var a8=aT+1*bl+3*bf;var a6=aS+1*bk+3*be;var a3=aT+3*bl+3*bf;var a2=aS+3*bk+3*be;var bj=0.5*(a4-(1));var bi=0.5*(aX-(1));if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}else{var aH=(a7|0);if(aH==aU){aH=aU-1;}var bj=0.5*(a4-(1));var bi=a7-aH;var bb=aH/aU;var a9=(aH+1)/aU;var aO=aR[((aQ)+(aH)*a1)*2];var aN=aR[((aQ)+(aH)*a1)*2+1];var a8=aR[((aQ)+(aH+1)*a1)*2];var a6=aR[((aQ)+(aH+1)*a1)*2+1];var aK=aT+3*bl+bb*bf;var aJ=aS+3*bk+bb*be;var a3=aT+3*bl+a9*bf;var a2=aS+3*bk+a9*be;if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}}}else{if(aX<=0){var aY=(bd|0);if(aY==aQ){aY=aQ-1;}var bj=bd-aY;var bi=0.5*(aX-(-2));var bp=aY/aQ;var bo=(aY+1)/aQ;var a8=aR[((aY)+(0)*a1)*2];var a6=aR[((aY)+(0)*a1)*2+1];var a3=aR[((aY+1)+(0)*a1)*2];var a2=aR[((aY+1)+(0)*a1)*2+1];var aO=aT+bp*bl-2*bf;var aN=aS+bp*bk-2*be;var aK=aT+bo*bl-2*bf;var aJ=aS+bo*bk-2*be;if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}else{if(aX>=1){var aY=(bd|0);if(aY==aQ){aY=aQ-1;}var bj=bd-aY;var bi=0.5*(aX-(1));var bp=aY/aQ;var bo=(aY+1)/aQ;var aO=aR[((aY)+(aU)*a1)*2];var aN=aR[((aY)+(aU)*a1)*2+1];var aK=aR[((aY+1)+(aU)*a1)*2];var aJ=aR[((aY+1)+(aU)*a1)*2+1];var a8=aT+bp*bl+3*bf;var a6=aS+bp*bk+3*be;var a3=aT+bo*bl+3*bf;var a2=aS+bo*bk+3*be;if(bj+bi<=1){bc[ba]=aO+(aK-aO)*bj+(a8-aO)*bi;bc[ba+1]=aN+(aJ-aN)*bj+(a6-aN)*bi;}else{bc[ba]=a3+(a8-a3)*(1-bj)+(aK-a3)*(1-bi);bc[ba+1]=a2+(a6-a2)*(1-bj)+(aJ-a2)*(1-bi);}}else{System.err.printf("_$li calc : %.4f , %.4f					@@BDBoxGrid\n",a4,aX);}}}}}else{bc[ba]=aT+a4*bl+aX*bf;bc[ba+1]=aS+a4*bk+aX*be;}}else{bn=bd-(bd|0);bm=a7-(a7|0);aV=2*((bd|0)+((a7|0))*(aQ+1));if(bn+bm<1){bc[ba]=aR[aV]*(1-bn-bm)+aR[aV+2]*bn+aR[aV+2*(aQ+1)]*bm;bc[ba+1]=aR[aV+1]*(1-bn-bm)+aR[aV+3]*bn+aR[aV+2*(aQ+1)+1]*bm;}else{bc[ba]=aR[aV+2*(aQ+1)+2]*(bn-1+bm)+aR[aV+2*(aQ+1)]*(1-bn)+aR[aV+2]*(1-bm);bc[ba+1]=aR[aV+2*(aQ+1)+3]*(bn-1+bm)+aR[aV+2*(aQ+1)+1]*(1-bn)+aR[aV+3]*(1-bm);}}}};E.prototype.transformPoints_sdk1=function(aJ,aR,aL,a0,aU,aP,aZ){var aH=aR;var aO,aN;var aM=this._$o;var aQ=this._$A;var aI=aU*aZ;var aS,aY;var aV;var aX,aW;var aT=(aH._$hr!=null)?aH._$hr:aH._$Cr;for(var aK=aP;aK<aI;aK+=aZ){if(Q._$ts){aO=aL[aK];aN=aL[aK+1];if(aO<0){aO=0;}else{if(aO>1){aO=1;}}if(aN<0){aN=0;}else{if(aN>1){aN=1;}}aO*=aM;aN*=aQ;aS=(aO|0);aY=(aN|0);if(aS>aM-1){aS=aM-1;}if(aY>aQ-1){aY=aQ-1;}aX=aO-aS;aW=aN-aY;aV=2*(aS+aY*(aM+1));}else{aO=aL[aK]*aM;aN=aL[aK+1]*aQ;aX=aO-(aO|0);aW=aN-(aN|0);aV=2*((aO|0)+(aN|0)*(aM+1));}if(aX+aW<1){a0[aK]=aT[aV]*(1-aX-aW)+aT[aV+2]*aX+aT[aV+2*(aM+1)]*aW;a0[aK+1]=aT[aV+1]*(1-aX-aW)+aT[aV+3]*aX+aT[aV+2*(aM+1)+1]*aW;}else{a0[aK]=aT[aV+2*(aM+1)+2]*(aX-1+aW)+aT[aV+2*(aM+1)]*(1-aX)+aT[aV+2]*(1-aW);a0[aK+1]=aT[aV+2*(aM+1)+3]*(aX-1+aW)+aT[aV+2*(aM+1)+1]*(1-aX)+aT[aV+3]*(1-aW);}}};E.prototype._$VT=function(){return(this._$o+1)*(this._$A+1);};E.prototype.getType=function(){return c._$_b;};function H(aH){B.prototype.constructor.call(this,aH);this._$8r=c._$ur;this._$Cr=null;this._$hr=null;}H.prototype=new B();function s(){if(j){return;}this.visible=true;this._$g0=false;this._$NL=null;this._$3S=null;this._$aS=null;s._$42++;}s._$42=0;s.prototype._$zP=function(){this._$3S=new Array();this._$aS=new Array();};s.prototype._$F0=function(aH){this._$g0=aH._$8L();this.visible=aH._$8L();this._$NL=aH._$nP();this._$3S=aH._$nP();this._$aS=aH._$nP();};s.prototype.init=function(aI){var aH=new aj(this);aH.setPartsOpacity(this.isVisible()?1:0);return aH;};s.prototype._$6o=function(aH){if(this._$3S==null){throw new Error("_$3S _$6 _$Wo@_$6o");}this._$3S.push(aH);};s.prototype._$3o=function(aH){if(this._$aS==null){throw new Error("_$aS _$6 _$Wo@_$3o");}this._$aS.push(aH);};s.prototype._$Zo=function(aH){this._$3S=aH;};s.prototype._$xo=function(aH){this._$aS=aH;};s.prototype.isVisible=function(){return this.visible;};s.prototype._$uL=function(){return this._$g0;};s.prototype._$KP=function(aH){this.visible=aH;};s.prototype._$ET=function(aH){this._$g0=aH;};s.prototype.getBaseData=function(){return this._$3S;};s.prototype.getDrawData=function(){return this._$aS;};s.prototype._$p2=function(){return this._$NL;};s.prototype._$ob=function(aH){this._$NL=aH;};s.prototype.getPartsID=function(){return this._$NL;};s.prototype._$MP=function(aH){this._$NL=aH;};function aj(aH){this._$VS=null;this._$e0=null;this._$e0=aH;}aj.prototype=new S();aj.prototype.getPartsOpacity=function(){return this._$VS;};aj.prototype.setPartsOpacity=function(aH){this._$VS=aH;};function ak(aH){if(j){return;}this.id=aH;}ak._$L7=function(){z._$27();n._$27();Z._$27();i._$27();};ak.prototype.toString=function(){return this.id;};function D(){}D.prototype._$F0=function(aH){};function an(){if(j){return;}this._$4S=null;}an.prototype._$1s=function(){return this._$4S;};an.prototype._$zP=function(){this._$4S=new Array();};an.prototype._$F0=function(aH){this._$4S=aH._$nP();};an.prototype._$Ks=function(aH){this._$4S.push(aH);};function au(aH,aI){this.canvas=aH;this.context=aI;this.viewport=new Array(0,0,aH.width,aH.height);this._$6r=1;this._$xP=0;this._$3r=1;this._$uP=0;this._$Qo=-1;this.cacheImages={};}au.tr=new am();au._$50=new am();au._$Ti=new Array(0,0);au._$Pi=new Array(0,0);au._$B=new Array(0,0);au.prototype._$lP=function(aI,aK,aJ,aH){this.viewport=new Array(aI,aK,aJ,aH);};au.prototype._$bL=function(){this.context.save();var aH=this.viewport;if(aH!=null){this.context.beginPath();this.context._$Li(aH[0],aH[1],aH[2],aH[3]);this.context.clip();}};au.prototype._$ei=function(){this.context.restore();};au.prototype.drawElements=function(bc,bm,aX,aJ,bA,aM,bl,bz){try{if(bA!=this._$Qo){this._$Qo=bA;this.context.globalAlpha=bA;}var a2=bm.length;var aP=bc.width;var a5=bc.height;var bE=this.context;var a7=this._$xP;var a6=this._$uP;var a1=this._$6r;var aZ=this._$3r;var bD=au.tr;var aI=au._$Ti;var aH=au._$Pi;var bu=au._$B;for(var by=0;by<a2;by+=3){bE.save();var aW=bm[by];var aV=bm[by+1];var aT=bm[by+2];var aL=a7+a1*aX[aW*2];var aK=a6+aZ*aX[aW*2+1];var br=a7+a1*aX[aV*2];var bp=a6+aZ*aX[aV*2+1];var bh=a7+a1*aX[aT*2];var bf=a6+aZ*aX[aT*2+1];if(bl){bl._$PS(aL,aK,bu);aL=bu[0];aK=bu[1];bl._$PS(br,bp,bu);br=bu[0];bp=bu[1];bl._$PS(bh,bf,bu);bh=bu[0];bf=bu[1];}var aS=aP*aJ[aW*2];var aQ=a5-a5*aJ[aW*2+1];var bx=aP*aJ[aV*2];var bw=a5-a5*aJ[aV*2+1];var bk=aP*aJ[aT*2];var bj=a5-a5*aJ[aT*2+1];var a3=Math.atan2(bw-aQ,bx-aS);var a0=Math.atan2(bp-aK,br-aL);var aO=br-aL;var aN=bp-aK;var bi=Math.sqrt(aO*aO+aN*aN);var aU=bx-aS;var aR=bw-aQ;var bt=Math.sqrt(aU*aU+aR*aR);var bv=bi/bt;ad._$ni(bk,bj,aS,aQ,(bx-aS),(bw-aQ),-(bw-aQ),(bx-aS),aI);ad._$ni(bh,bf,aL,aK,(br-aL),(bp-aK),-(bp-aK),(br-aL),aH);var aY=(aH[0]-aI[0])/aI[1];var bs=Math.min(aS,bx,bk);var bg=Math.max(aS,bx,bk);var bq=Math.min(aQ,bw,bj);var be=Math.max(aQ,bw,bj);var bo=Math.floor(bs);var bb=Math.floor(bq);var a4=Math.ceil(bg);var bC=Math.ceil(be);bD.identity();bD.translate(aL,aK);bD.rotate(a0);bD.scale(1,aH[1]/aI[1]);bD.shear(aY,0);bD.scale(bv,bv);bD.rotate(-a3);bD.translate(-aS,-aQ);bD.setContext(bE);var a8=true;var a9=1.2;if(!aM){aM=a8?a9:0;}if(Q.IGNORE_EXPAND){aM=0;}if(Q.USE_CACHED_POLYGON_IMAGE){var bd=bz._$e0;bd.gl_cacheImage=bd.gl_cacheImage||{};if(!bd.gl_cacheImage[by]){var bn=au.createCanvas(a4-bo,bC-bb);Q.DEBUG_DATA.LDGL_CANVAS_MB=Q.DEBUG_DATA.LDGL_CANVAS_MB||0;Q.DEBUG_DATA.LDGL_CANVAS_MB+=(a4-bo)*(bC-bb)*4;var ba=bn.getContext("2d");ba.translate(-bo,-bb);au.clip(ba,bD,aM,bi,aS,aQ,bx,bw,bk,bj,aL,aK,br,bp,bh,bf);ba.drawImage(bc,0,0);bd.gl_cacheImage[by]={cacheCanvas:bn,cacheContext:ba};}bE.drawImage(bd.gl_cacheImage[by]["cacheCanvas"],bo,bb);}else{if(!Q.IGNORE_CLIP){au.clip(bE,bD,aM,bi,aS,aQ,bx,bw,bk,bj,aL,aK,br,bp,bh,bf);}if(Q.USE_ADJUST_TRANSLATION){bs=0;bg=aP;bq=0;be=a5;}bE.drawImage(bc,bs,bq,bg-bs,be-bq,bs,bq,bg-bs,be-bq);}bE.restore();}}catch(bB){q._$Rb(bB);}};au.clip=function(aK,aJ,aV,aI,aM,aL,aU,aT,aQ,aP,aO,aN,aH,aW,aS,aR){if(aV>0.02){au.expandClip(aK,aJ,aV,aI,aO,aN,aH,aW,aS,aR);}else{au.clipWithTransform(aK,null,aM,aL,aU,aT,aQ,aP);}};au.expandClip=function(aV,bg,aK,a3,aJ,aI,be,ba,aZ,aX){var aP=be-aJ;var aO=ba-aI;var bi=aZ-aJ;var bh=aX-aI;var bj=aP*bh-aO*bi>0?aK:-aK;var aL=-aO;var aH=aP;var bc=aZ-be;var a8=aX-ba;var a7=-a8;var a6=bc;var aQ=Math.sqrt(bc*bc+a8*a8);var bf=-bh;var bb=bi;var a2=Math.sqrt(bi*bi+bh*bh);var bd=aJ-bj*aL/a3;var a9=aI-bj*aH/a3;var aY=be-bj*aL/a3;var aW=ba-bj*aH/a3;var a5=be-bj*a7/aQ;var a4=ba-bj*a6/aQ;var aS=aZ-bj*a7/aQ;var aR=aX-bj*a6/aQ;var aN=aJ+bj*bf/a2;var aM=aI+bj*bb/a2;var a1=aZ+bj*bf/a2;var a0=aX+bj*bb/a2;var aU=au._$50;var aT=bg._$P2(aU);if(aT==null){return false;}au.clipWithTransform(aV,aU,bd,a9,aY,aW,a5,a4,aS,aR,a1,a0,aN,aM);return true;};au.clipWithTransform=function(aH,aI,aS,aN,aQ,aK,aP,aJ){if(arguments.length<(1+3*2)){q._$li("err : @LDGL.clip()");return;}if(!(arguments[1] instanceof am)){q._$li("err : a[0] is _$6 LDTransform @LDGL.clip()");return;}var aM=au._$B;var aO=aI;var aR=arguments;aH.beginPath();if(aO){aO._$PS(aR[2],aR[3],aM);aH.moveTo(aM[0],aM[1]);for(var aL=4;aL<aR.length;aL+=2){aO._$PS(aR[aL],aR[aL+1],aM);aH.lineTo(aM[0],aM[1]);}}else{aH.moveTo(aR[2],aR[3]);for(var aL=4;aL<aR.length;aL+=2){aH.lineTo(aR[aL],aR[aL+1]);}}aH.clip();};au.createCanvas=function(aH,aJ){var aI=document.createElement("canvas");aI.setAttribute("width",aH);aI.setAttribute("height",aJ);if(!aI){q._$li("err : "+aI);}return aI;};au.dumpValues=function(){var aI="";for(var aH=0;aH<arguments.length;aH++){aI+="["+aH+"]= "+arguments[aH].toFixed(3)+" , ";}console.log(aI);};function f(){if(j){return;}this._$TT=null;this._$LT=null;this._$FS=null;this._$wL=null;}f.prototype._$F0=function(aH){this._$TT=aH._$_T();this._$LT=aH._$_T();this._$FS=aH._$_T();this._$wL=aH._$nP();};f.prototype.getMinValue=function(){return this._$TT;};f.prototype.getMaxValue=function(){return this._$LT;};f.prototype.getDefaultValue=function(){return this._$FS;};f.prototype.getParamID=function(){return this._$wL;};function B(aH){if(j){return;}this._$e0=null;this._$IP=null;this._$JS=false;this._$AT=true;this._$e0=aH;this.totalScale=1;this._$7s=1;this.totalOpacity=1;}B.prototype._$yo=function(){return this._$AT&&!this._$JS;};B.prototype._$hS=function(aH){this._$AT=aH;};B.prototype._$GT=function(){return this._$e0;};B.prototype._$l2=function(aH){this._$IP=aH;};B.prototype.getPartsIndex=function(){return this._$IP;};B.prototype._$x2=function(){return this._$JS;};B.prototype._$Ib=function(aH){this._$JS=aH;};B.prototype.getTotalScale=function(){return this.totalScale;};B.prototype.setTotalScale_notForClient=function(aH){this.totalScale=aH;};B.prototype.getInterpolatedOpacity=function(){return this._$7s;};B.prototype.setInterpolatedOpacity=function(aH){this._$7s=aH;};B.prototype.getTotalOpacity=function(aH){return this.totalOpacity;};B.prototype.setTotalOpacity=function(aH){this.totalOpacity=aH;};function Q(){}Q._$2s="2.1.00_1";Q._$Kr=201001000;Q._$sP=true;Q._$so=true;Q._$cb=false;Q._$3T=true;Q._$Ts=true;Q._$fb=true;Q._$ts=true;Q.L2D_DEFORMER_EXTEND=true;Q._$Wb=false;Q._$yr=false;Q._$Zs=false;Q.L2D_NO_ERROR=0;Q._$i7=1000;Q._$9s=1001;Q._$es=1100;Q._$r7=2000;Q._$07=2001;Q._$b7=2002;Q._$H7=4000;Q.L2D_COLOR_BLEND_MODE_MULT=0;Q.L2D_COLOR_BLEND_MODE_ADD=1;Q.L2D_COLOR_BLEND_MODE_INTERPOLATE=2;Q._$6b=true;Q._$cT=0;Q.clippingMaskBufferSize=256;Q.glContext=new Array();Q.frameBuffers=new Array();Q.fTexture=new Array();Q.IGNORE_CLIP=false;Q.IGNORE_EXPAND=false;Q.EXPAND_W=2;Q.USE_ADJUST_TRANSLATION=true;Q.USE_CANVAS_TRANSFORM=true;Q.USE_CACHED_POLYGON_IMAGE=false;Q.DEBUG_DATA={};Q.PROFILE_IOS_SPEED={PROFILE_NAME:"iOS Speed",USE_ADJUST_TRANSLATION:true,USE_CACHED_POLYGON_IMAGE:true,EXPAND_W:4};Q.PROFILE_IOS_QUALITY={PROFILE_NAME:"iOS HiQ",USE_ADJUST_TRANSLATION:true,USE_CACHED_POLYGON_IMAGE:false,EXPAND_W:2};Q.PROFILE_IOS_DEFAULT=Q.PROFILE_IOS_QUALITY;Q.PROFILE_ANDROID={PROFILE_NAME:"Android",USE_ADJUST_TRANSLATION:false,USE_CACHED_POLYGON_IMAGE:false,EXPAND_W:2};Q.PROFILE_DESKTOP={PROFILE_NAME:"Desktop",USE_ADJUST_TRANSLATION:false,USE_CACHED_POLYGON_IMAGE:false,EXPAND_W:2};Q.initProfile=function(){if(r.isIOS()){Q.setupProfile(Q.PROFILE_IOS_DEFAULT);}else{if(r.isAndroid()){Q.setupProfile(Q.PROFILE_ANDROID);}else{Q.setupProfile(Q.PROFILE_DESKTOP);}}};Q.setupProfile=function(aI,aJ){if(typeof aI=="number"){switch(aI){case 9901:aI=Q.PROFILE_IOS_SPEED;break;case 9902:aI=Q.PROFILE_IOS_QUALITY;break;case 9903:aI=Q.PROFILE_IOS_DEFAULT;break;case 9904:aI=Q.PROFILE_ANDROID;break;case 9905:aI=Q.PROFILE_DESKTOP;break;default:alert("profile _$6 _$Ui : "+aI);break;}}if(arguments.length<2){aJ=true;}if(aJ){console.log("profile : "+aI.PROFILE_NAME);}for(var aH in aI){Q[aH]=aI[aH];if(aJ){console.log("  ["+aH+"] = "+aI[aH]);}}};Q.init=function(){if(Q._$6b){console.log("Live2D %s",Q._$2s);Q._$6b=false;var aH=false;aH=true;Q.initProfile();}};Q.getVersionStr=function(){return Q._$2s;};Q.getVersionNo=function(){return Q._$Kr;};Q._$sT=function(aH){Q._$cT=aH;};Q.getError=function(){var aH=Q._$cT;Q._$cT=0;return aH;};Q.dispose=function(){Q.glContext=[];Q.frameBuffers=[];Q.fTexture=[];};Q.setGL=function(aJ,aI){var aH=aI||0;Q.glContext[aH]=aJ;};Q.getGL=function(aH){return Q.glContext[aH];};Q.setClippingMaskBufferSize=function(aH){Q.clippingMaskBufferSize=aH;};Q.getClippingMaskBufferSize=function(){return Q.clippingMaskBufferSize;};Q.deleteBuffer=function(aI){var aH=Q.getGL(aI);aH.deleteFramebuffer(Q.frameBuffers[aI].framebuffer);delete Q.frameBuffers[aI];delete Q.glContext[aI];};function A(){}A._$r2=function(aH){if(aH<0){return 0;}else{if(aH>1){return 1;}}return(0.5-0.5*Math.cos(aH*aC.PI_F));};function J(aH){if(j){return;}this._$ib=aH;}J._$fr=-1;J.prototype.toString=function(){return this._$ib;};function b(){if(j){return;}a.prototype.constructor.call(this);this._$LP=-1;this._$d0=0;this._$Yo=0;this._$JP=null;this._$5P=null;this._$BP=null;this._$Eo=null;this._$Qi=null;this._$6s=b._$ms;this.culling=true;this.gl_cacheImage=null;this.instanceNo=b._$42++;}b.prototype=new a();b._$42=0;b._$Os=30;b._$ms=0;b._$ns=1;b._$_s=2;b._$gT=new Array();b.prototype._$_S=function(aH){this._$LP=aH;};b.prototype.getTextureNo=function(){return this._$LP;};b.prototype._$ZL=function(){return this._$Qi;};b.prototype._$H2=function(){return this._$JP;};b.prototype.getNumPoints=function(){return this._$d0;};b.prototype.getType=function(){return a._$wb;};b.prototype._$B2=function(aL,aH,aO){var aM=aH;var aN=(aM._$hr!=null)?aM._$hr:aM._$Cr;var aK=aw._$do;switch(aK){default:case aw._$Ms:throw new Error("_$L _$ro ");case aw._$Qs:for(var aJ=this._$d0-1;aJ>=0;--aJ){var aI=aJ*aw._$No;aN[aI+4]=aO;}break;}};b.prototype._$zP=function(){this._$GS=new g();this._$GS._$zP();};b.prototype._$F0=function(aK){a.prototype._$F0.call(this,aK);this._$LP=aK._$6L();this._$d0=aK._$6L();this._$Yo=aK._$6L();var aH=aK._$nP();this._$BP=new Int16Array(this._$Yo*3);for(var aJ=this._$Yo*3-1;aJ>=0;--aJ){this._$BP[aJ]=aH[aJ];}this._$Eo=aK._$nP();this._$Qi=aK._$nP();if(aK.getFormatVersion()>=ay._$s7){this._$JP=aK._$6L();if(this._$JP!=0){if((this._$JP&1)!=0){var aI=aK._$6L();if(this._$5P==null){this._$5P=new Object();}this._$5P._$Hb=parseInt(aI);}if((this._$JP&b._$Os)!=0){this._$6s=(this._$JP&b._$Os)>>1;}else{this._$6s=b._$ms;}if((this._$JP&32)!=0){this.culling=false;}}}else{this._$JP=0;}};b.prototype.init=function(aL){var aN=new ag(this);var aI=this._$d0*aw._$No;var aH=this._$32();if(aN._$Cr!=null){aN._$Cr=null;}aN._$Cr=new Float32Array(aI);if(aN._$hr!=null){aN._$hr=null;}aN._$hr=aH?new Float32Array(aI):null;var aM=aw._$do;switch(aM){default:case aw._$Ms:if(aw._$Ls){for(var aJ=this._$d0-1;aJ>=0;--aJ){var aO=aJ<<1;this._$Qi[aO+1]=1-this._$Qi[aO+1];}}break;case aw._$Qs:for(var aJ=this._$d0-1;aJ>=0;--aJ){var aO=aJ<<1;var aK=aJ*aw._$No;var aQ=this._$Qi[aO];var aP=this._$Qi[aO+1];aN._$Cr[aK]=aQ;aN._$Cr[aK+1]=aP;aN._$Cr[aK+4]=0;if(aH){aN._$hr[aK]=aQ;aN._$hr[aK+1]=aP;aN._$hr[aK+4]=0;}}break;}return aN;};b.prototype._$Nr=function(aJ,aH){var aK=aH;if(!((this==aK._$GT()))){console.log("### assert!! ### ");}if(!this._$GS._$Ur(aJ)){return;}a.prototype._$Nr.call(this,aJ,aK);if(aK._$IS[0]){return;}var aI=b._$gT;aI[0]=false;aG._$Vr(aJ,this._$GS,aI,this._$d0,this._$Eo,aK._$Cr,aw._$i2,aw._$No);};b.prototype._$2b=function(aK,aI){try{if(!((this==aI._$GT()))){console.log("### assert!! ### ");}var aL=false;if(aI._$IS[0]){aL=true;}var aM=aI;if(!aL){a.prototype._$2b.call(this,aK);if(this._$32()){var aH=this.getTargetBaseDataID();if(aM._$8r==a._$ur){aM._$8r=aK.getBaseDataIndex(aH);}if(aM._$8r<0){if(Q._$so){q._$li("_$L _$0P _$G :: %s",aH);}}else{var aO=aK.getBaseData(aM._$8r);var aJ=aK._$q2(aM._$8r);if(aO!=null&&!aJ._$x2()){aO._$nb(aK,aJ,aM._$Cr,aM._$hr,this._$d0,aw._$i2,aw._$No);aM._$AT=true;}else{aM._$AT=false;}aM.baseOpacity=aJ.getTotalOpacity();}}}}catch(aN){throw aN;}};b.prototype.draw=function(aN,aK,aI){if(!((this==aI._$GT()))){console.log("### assert!! ### ");}if(aI._$IS[0]){return;}var aL=aI;var aJ=this._$LP;if(aJ<0){aJ=1;}var aH=this.getOpacity(aK,aL)*aI._$VS*aI.baseOpacity;var aM=(aL._$hr!=null)?aL._$hr:aL._$Cr;aN.setClipBufPre_clipContextForDraw(aI.clipBufPre_clipContext);aN._$WP(this.culling);aN._$Uo(aJ,3*this._$Yo,this._$BP,aM,this._$Qi,aH,this._$6s,aL);};b.prototype.dump=function(){console.log("  _$yi( %d ) , _$d0( %d ) , _$Yo( %d ) \n",this._$LP,this._$d0,this._$Yo);console.log("  _$Oi _$di = { ");for(var aJ=0;aJ<this._$BP.length;aJ++){console.log("%5d ,",this._$BP[aJ]);}console.log("\n  _$5i _$30");for(var aJ=0;aJ<this._$Eo.length;aJ++){console.log("\n    _$30[%d] = ",aJ);var aH=this._$Eo[aJ];for(var aI=0;aI<aH.length;aI++){console.log("%6.2f, ",aH[aI]);}}console.log("\n");};b.prototype._$72=function(aH){if(this._$5P==null){return null;}return this._$5P[aH];};b.prototype.getIndexArray=function(){return this._$BP;};function ag(aH){aB.prototype.constructor.call(this,aH);this._$8r=a._$ur;this._$Cr=null;this._$hr=null;}ag.prototype=new aB();ag.prototype.getTransformedPoints=function(){return(this._$hr!=null)?this._$hr:this._$Cr;};function k(){if(j){return;}this.x=null;this.y=null;}k.prototype._$HT=function(aH){this.x=aH.x;this.y=aH.y;};k.prototype._$HT=function(aH,aI){this.x=aH;this.y=aI;};function l(aH){if(j){return;}aa.prototype.constructor.call(this);this.drawParamWebGL=new C(aH);this.drawParamWebGL.setGL(Q.getGL(aH));}l.prototype=new aa();l.loadModel=function(aI){var aH=new l();aa._$62(aH,aI);return aH;};l.loadModel=function(aI,aK){var aJ=aK||0;var aH=new l(aJ);aa._$62(aH,aI);return aH;};l._$to=function(){var aH=new l();return aH;};l._$er=function(aM){var aJ=new _$5("../_$_r/_$t0/_$Ri/_$_P._$d");if(aJ.exists()==false){throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+aJ._$PL());}var aH=["../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1"];var aK=l.loadModel(aJ._$3b());for(var aI=0;aI<aH.length;aI++){var aL=new _$5(aH[aI]);if(aL.exists()==false){throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+aL._$PL());}aK.setTexture(aI,_$nL._$_o(aM,aL._$3b()));}return aK;};l.prototype.setGL=function(aH){Q.setGL(aH);};l.prototype.setTransform=function(aH){this.drawParamWebGL.setTransform(aH);};l.prototype.update=function(){this._$5S.update();this._$5S.preDraw(this.drawParamWebGL);};l.prototype.draw=function(){this._$5S.draw(this.drawParamWebGL);};l.prototype._$K2=function(){this.drawParamWebGL._$K2();};l.prototype.setTexture=function(aI,aH){if(this.drawParamWebGL==null){q._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!");}this.drawParamWebGL.setTexture(aI,aH);};l.prototype.setTexture=function(aI,aH){if(this.drawParamWebGL==null){q._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!");}this.drawParamWebGL.setTexture(aI,aH);};l.prototype._$Rs=function(){return this.drawParamWebGL._$Rs();};l.prototype._$Ds=function(aH){this.drawParamWebGL._$Ds(aH);};l.prototype.getDrawParam=function(){return this.drawParamWebGL;};l.prototype.setMatrix=function(aH){this.drawParamWebGL.setMatrix(aH);};l.prototype.setPremultipliedAlpha=function(aH){this.drawParamWebGL.setPremultipliedAlpha(aH);};l.prototype.isPremultipliedAlpha=function(){return this.drawParamWebGL.isPremultipliedAlpha();};l.prototype.setAnisotropy=function(aH){this.drawParamWebGL.setAnisotropy(aH);};l.prototype.getAnisotropy=function(){return this.drawParamWebGL.getAnisotropy();};function V(){if(j){return;}this.motions=null;this._$eb=false;this.motions=new Array();}V.prototype._$tb=function(){return this.motions;};V.prototype.startMotion=function(aJ,aI){var aM=null;var aL=null;var aH=this.motions.length;for(var aK=0;aK<aH;++aK){aL=this.motions[aK];if(aL==null){continue;}aL._$qS(aL._$w0.getFadeOut());if(this._$eb){q._$Ji("MotionQueueManager[size:%2d]->startMotion() / start _$K _$3 (m%d)\n",aH,aL._$sr);}}if(aJ==null){return -1;}aL=new M();aL._$w0=aJ;this.motions.push(aL);var aN=aL._$sr;if(this._$eb){q._$Ji("MotionQueueManager[size:%2d]->startMotion() / new _$w0 (m%d)\n",aH,aN);}return aN;};V.prototype.updateParam=function(aJ){try{var aI=false;for(var aK=0;aK<this.motions.length;aK++){var aL=this.motions[aK];if(aL==null){this.motions.splice(aK,1);aK--;continue;}var aH=aL._$w0;if(aH==null){this.motions=this.motions.splice(aK,1);aK--;continue;}aH.updateParam(aJ,aL);aI=true;if(aL.isFinished()){if(this._$eb){q._$Ji("MotionQueueManager[size:%2d]->updateParam() / _$T0 _$w0 (m%d)\n",this.motions.length-1,aL._$sr);}this.motions.splice(aK,1);aK--;}else{}}return aI;}catch(aM){q._$li(aM);return true;}};V.prototype.isFinished=function(aK){if(arguments.length>=1){for(var aI=0;aI<this.motions.length;aI++){var aJ=this.motions[aI];if(aJ==null){continue;}if(aJ._$sr==aK&&!aJ.isFinished()){return false;}}return true;}else{for(var aI=0;aI<this.motions.length;aI++){var aJ=this.motions[aI];if(aJ==null){this.motions.splice(aI,1);aI--;continue;}var aH=aJ._$w0;if(aH==null){this.motions.splice(aI,1);aI--;continue;}if(!aJ.isFinished()){return false;}}return true;}};V.prototype.stopAllMotions=function(){for(var aI=0;aI<this.motions.length;aI++){var aJ=this.motions[aI];if(aJ==null){this.motions.splice(aI,1);aI--;continue;}var aH=aJ._$w0;if(aH==null){this.motions.splice(aI,1);aI--;continue;}if(true){this.motions.splice(aI,1);aI--;}}};V.prototype._$Zr=function(aH){this._$eb=aH;};V.prototype._$e=function(){console.log("-- _$R --\n");for(var aH=0;aH<this.motions.length;aH++){var aI=this.motions[aH];var aJ=aI._$w0;console.log("MotionQueueEnt[%d] :: %s\n",this.motions.length,aJ.toString());}};function M(){this._$w0=null;this._$AT=true;this._$9L=false;this._$z2=-1;this._$bs=-1;this._$Do=-1;this._$sr=null;this._$sr=M._$Gs++;}M._$Gs=0;M.prototype.isFinished=function(){return this._$9L;};M.prototype._$qS=function(aJ){var aI=P.getUserTimeMSec();var aH=aI+aJ;if(this._$Do<0||aH<this._$Do){this._$Do=aH;}};M.prototype._$Bs=function(){return this._$sr;};function am(){this.m=new Array(1,0,0,0,1,0,0,0,1);}am.prototype.setContext=function(aI){var aH=this.m;aI.transform(aH[0],aH[1],aH[3],aH[4],aH[6],aH[7]);};am.prototype.toString=function(){var aI="LDTransform { ";for(var aH=0;aH<9;aH++){aI+=this.m[aH].toFixed(2)+" ,";}aI+=" }";return aI;};am.prototype.identity=function(){var aH=this.m;aH[0]=aH[4]=aH[8]=1;aH[1]=aH[2]=aH[3]=aH[5]=aH[6]=aH[7]=0;};am.prototype._$PS=function(aI,aK,aJ){if(aJ==null){aJ=new Array(0,0);}var aH=this.m;aJ[0]=aH[0]*aI+aH[3]*aK+aH[6];aJ[1]=aH[1]*aI+aH[4]*aK+aH[7];return aJ;};am.prototype._$P2=function(aK){if(!aK){aK=new am();}var aI=this.m;var aT=aI[0];var aS=aI[1];var aR=aI[2];var aQ=aI[3];var aP=aI[4];var aO=aI[5];var aN=aI[6];var aM=aI[7];var aL=aI[8];var aJ=aT*aP*aL+aS*aO*aN+aR*aQ*aM-aT*aO*aM-aR*aP*aN-aS*aQ*aL;if(aJ==0){return null;}else{var aH=1/aJ;aK.m[0]=aH*(aP*aL-aM*aO);aK.m[1]=aH*(aM*aR-aS*aL);aK.m[2]=aH*(aS*aO-aP*aR);aK.m[3]=aH*(aN*aO-aQ*aL);aK.m[4]=aH*(aT*aL-aN*aR);aK.m[5]=aH*(aQ*aR-aT*aO);aK.m[6]=aH*(aQ*aM-aN*aP);aK.m[7]=aH*(aN*aS-aT*aM);aK.m[8]=aH*(aT*aP-aQ*aS);return aK;}};am.prototype.transform=function(aI,aK,aJ){if(aJ==null){aJ=new Array(0,0);}var aH=this.m;aJ[0]=aH[0]*aI+aH[3]*aK+aH[6];aJ[1]=aH[1]*aI+aH[4]*aK+aH[7];return aJ;};am.prototype.translate=function(aI,aJ){var aH=this.m;aH[6]=aH[0]*aI+aH[3]*aJ+aH[6];aH[7]=aH[1]*aI+aH[4]*aJ+aH[7];aH[8]=aH[2]*aI+aH[5]*aJ+aH[8];};am.prototype.scale=function(aJ,aI){var aH=this.m;aH[0]*=aJ;aH[1]*=aJ;aH[2]*=aJ;aH[3]*=aI;aH[4]*=aI;aH[5]*=aI;};am.prototype.shear=function(aM,aL){var aH=this.m;var aK=aH[0]+aH[3]*aL;var aJ=aH[1]+aH[4]*aL;var aI=aH[2]+aH[5]*aL;aH[3]=aH[0]*aM+aH[3];aH[4]=aH[1]*aM+aH[4];aH[5]=aH[2]*aM+aH[5];aH[0]=aK;aH[1]=aJ;aH[2]=aI;};am.prototype.rotate=function(aM){var aH=this.m;var aN=Math.cos(aM);var aL=Math.sin(aM);var aK=aH[0]*aN+aH[3]*aL;var aJ=aH[1]*aN+aH[4]*aL;var aI=aH[2]*aN+aH[5]*aL;aH[3]=-aH[0]*aL+aH[3]*aN;aH[4]=-aH[1]*aL+aH[4]*aN;aH[5]=-aH[2]*aL+aH[5]*aN;aH[0]=aK;aH[1]=aJ;aH[2]=aI;};am.prototype.concatenate=function(aL){var aO=this.m;var aM=aL.m;var aS=aO[0]*aM[0]+aO[3]*aM[1]+aO[6]*aM[2];var aR=aO[1]*aM[0]+aO[4]*aM[1]+aO[7]*aM[2];var aQ=aO[2]*aM[0]+aO[5]*aM[1]+aO[8]*aM[2];var aP=aO[0]*aM[3]+aO[3]*aM[4]+aO[6]*aM[5];var aN=aO[1]*aM[3]+aO[4]*aM[4]+aO[7]*aM[5];var aK=aO[2]*aM[3]+aO[5]*aM[4]+aO[8]*aM[5];var aJ=aO[0]*aM[6]+aO[3]*aM[7]+aO[6]*aM[8];var aI=aO[1]*aM[6]+aO[4]*aM[7]+aO[7]*aM[8];var aH=aO[2]*aM[6]+aO[5]*aM[7]+aO[8]*aM[8];m[0]=aS;m[1]=aR;m[2]=aQ;m[3]=aP;m[4]=aN;m[5]=aK;m[6]=aJ;m[7]=aI;m[8]=aH;};function n(aH){if(j){return;}ak.prototype.constructor.call(this,aH);}n.prototype=new ak();n._$eT=null;n._$tP=new Object();n._$2o=function(){if(n._$eT==null){n._$eT=n.getID("DST_BASE");}return n._$eT;};n._$27=function(){n._$tP.clear();n._$eT=null;};n.getID=function(aH){var aI=n._$tP[aH];if(aI==null){aI=new n(aH);n._$tP[aH]=aI;}return aI;};n.prototype._$3s=function(){return new n();};function C(aH){if(j){return;}ax.prototype.constructor.call(this);this.textures=new Array();this.transform=null;this.gl=null;this.glno=aH;this.firstDraw=true;this.anisotropyExt=null;this.maxAnisotropy=0;this._$As=32;this._$Gr=false;this._$NT=null;this._$vS=null;this._$no=null;this.vertShader=null;this.fragShader=null;this.vertShaderOff=null;this.fragShaderOff=null;}C.prototype=new ax();C._$9r=function(aH){var aI=new Float32Array(aH);return aI;};C._$vb=function(aH){var aI=new Int16Array(aH);return aI;};C._$cr=function(aI,aH){if(aI==null||aI._$yL()<aH.length){aI=C._$9r(aH.length*2);aI.put(aH);aI._$oT(0);}else{aI.clear();aI.put(aH);aI._$oT(0);}return aI;};C._$mb=function(aI,aH){if(aI==null||aI._$yL()<aH.length){aI=C._$vb(aH.length*2);aI.put(aH);aI._$oT(0);}else{aI.clear();aI.put(aH);aI._$oT(0);}return aI;};C._$Hs=function(){return this._$Gr;};C._$as=function(aH){this._$Gr=aH;};C.prototype.getGL=function(){return this.gl;};C.prototype.setGL=function(aH){this.gl=aH;};C.prototype.setTransform=function(aH){this.transform=aH;};C.prototype._$ZT=function(){var aH=this.gl;if(this.firstDraw){this.initShader();this.firstDraw=false;this.anisotropyExt=aH.getExtension("EXT_texture_filter_anisotropic")||aH.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||aH.getExtension("MOZ_EXT_texture_filter_anisotropic");if(this.anisotropyExt){this.maxAnisotropy=aH.getParameter(this.anisotropyExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}}aH.disable(aH.SCISSOR_TEST);aH.disable(aH.STENCIL_TEST);aH.disable(aH.DEPTH_TEST);aH.frontFace(aH.CW);aH.enable(aH.BLEND);aH.colorMask(1,1,1,1);aH.bindBuffer(aH.ARRAY_BUFFER,null);aH.bindBuffer(aH.ELEMENT_ARRAY_BUFFER,null);};C.prototype._$Uo=function(aS,aT,aL,aU,aV,aN,aM,aO){if(aN<0.01&&this.clipBufPre_clipContextMask==null){return;}var aH=aN>0.9?Q.EXPAND_W:0;var a0=this.gl;if(this.gl==null){throw new Error("gl is null");}var a1=false;var aQ=1;var aP=1;var a3=1;var aZ=1;var aW=this._$C0*aP*aN;var a2=this._$tT*a3*aN;var a5=this._$WL*aZ*aN;var a7=this._$lT*aN;if(this.clipBufPre_clipContextMask!=null){a0.frontFace(a0.CCW);a0.useProgram(this.shaderProgram);this._$vS=T(a0,this._$vS,aU);this._$no=L(a0,this._$no,aL);a0.enableVertexAttribArray(this.a_position_Loc);a0.vertexAttribPointer(this.a_position_Loc,2,a0.FLOAT,false,0,0);this._$NT=T(a0,this._$NT,aV);a0.activeTexture(a0.TEXTURE1);a0.bindTexture(a0.TEXTURE_2D,this.textures[aS]);a0.uniform1i(this.s_texture0_Loc,1);a0.enableVertexAttribArray(this.a_texCoord_Loc);a0.vertexAttribPointer(this.a_texCoord_Loc,2,a0.FLOAT,false,0,0);a0.uniformMatrix4fv(this.u_matrix_Loc,false,this.getClipBufPre_clipContextMask().matrixForMask);var aY=this.getClipBufPre_clipContextMask().layoutChannelNo;var a4=this.getChannelFlagAsColor(aY);a0.uniform4f(this.u_channelFlag,a4.r,a4.g,a4.b,a4.a);var aI=this.getClipBufPre_clipContextMask().layoutBounds;a0.uniform4f(this.u_baseColor_Loc,aI.x*2-1,aI.y*2-1,aI._$EL()*2-1,aI._$5T()*2-1);a0.uniform1i(this.u_maskFlag_Loc,true);}else{a1=this.getClipBufPre_clipContextDraw()!=null;if(a1){a0.useProgram(this.shaderProgramOff);this._$vS=T(a0,this._$vS,aU);this._$no=L(a0,this._$no,aL);a0.enableVertexAttribArray(this.a_position_Loc_Off);a0.vertexAttribPointer(this.a_position_Loc_Off,2,a0.FLOAT,false,0,0);this._$NT=T(a0,this._$NT,aV);a0.activeTexture(a0.TEXTURE1);a0.bindTexture(a0.TEXTURE_2D,this.textures[aS]);a0.uniform1i(this.s_texture0_Loc_Off,1);a0.enableVertexAttribArray(this.a_texCoord_Loc_Off);a0.vertexAttribPointer(this.a_texCoord_Loc_Off,2,a0.FLOAT,false,0,0);a0.uniformMatrix4fv(this.u_clipMatrix_Loc_Off,false,this.getClipBufPre_clipContextDraw().matrixForDraw);a0.uniformMatrix4fv(this.u_matrix_Loc_Off,false,this.matrix4x4);a0.activeTexture(a0.TEXTURE2);a0.bindTexture(a0.TEXTURE_2D,Q.fTexture[this.glno]);a0.uniform1i(this.s_texture1_Loc_Off,2);var aY=this.getClipBufPre_clipContextDraw().layoutChannelNo;var a4=this.getChannelFlagAsColor(aY);a0.uniform4f(this.u_channelFlag_Loc_Off,a4.r,a4.g,a4.b,a4.a);a0.uniform4f(this.u_baseColor_Loc_Off,aW,a2,a5,a7);}else{a0.useProgram(this.shaderProgram);this._$vS=T(a0,this._$vS,aU);this._$no=L(a0,this._$no,aL);a0.enableVertexAttribArray(this.a_position_Loc);a0.vertexAttribPointer(this.a_position_Loc,2,a0.FLOAT,false,0,0);this._$NT=T(a0,this._$NT,aV);a0.activeTexture(a0.TEXTURE1);a0.bindTexture(a0.TEXTURE_2D,this.textures[aS]);a0.uniform1i(this.s_texture0_Loc,1);a0.enableVertexAttribArray(this.a_texCoord_Loc);a0.vertexAttribPointer(this.a_texCoord_Loc,2,a0.FLOAT,false,0,0);a0.uniformMatrix4fv(this.u_matrix_Loc,false,this.matrix4x4);a0.uniform4f(this.u_baseColor_Loc,aW,a2,a5,a7);a0.uniform1i(this.u_maskFlag_Loc,false);}}if(this.culling){this.gl.enable(a0.CULL_FACE);}else{this.gl.disable(a0.CULL_FACE);}this.gl.enable(a0.BLEND);var a6;var aX;var aR;var aK;if(this.clipBufPre_clipContextMask!=null){a6=a0.ONE;aX=a0.ONE_MINUS_SRC_ALPHA;aR=a0.ONE;aK=a0.ONE_MINUS_SRC_ALPHA;}else{switch(aM){case b._$ms:a6=a0.ONE;aX=a0.ONE_MINUS_SRC_ALPHA;aR=a0.ONE;aK=a0.ONE_MINUS_SRC_ALPHA;break;case b._$ns:a6=a0.ONE;aX=a0.ONE;aR=a0.ZERO;aK=a0.ONE;break;case b._$_s:a6=a0.DST_COLOR;aX=a0.ONE_MINUS_SRC_ALPHA;aR=a0.ZERO;aK=a0.ONE;break;}}a0.blendEquationSeparate(a0.FUNC_ADD,a0.FUNC_ADD);a0.blendFuncSeparate(a6,aX,aR,aK);if(this.anisotropyExt){a0.texParameteri(a0.TEXTURE_2D,this.anisotropyExt.TEXTURE_MAX_ANISOTROPY_EXT,this.maxAnisotropy);}var aJ=aL.length;a0.drawElements(a0.TRIANGLES,aJ,a0.UNSIGNED_SHORT,0);a0.bindTexture(a0.TEXTURE_2D,null);};function T(aJ,aH,aI){if(aH==null){aH=aJ.createBuffer();}aJ.bindBuffer(aJ.ARRAY_BUFFER,aH);aJ.bufferData(aJ.ARRAY_BUFFER,aI,aJ.DYNAMIC_DRAW);return aH;}function L(aJ,aH,aI){if(aH==null){aH=aJ.createBuffer();}aJ.bindBuffer(aJ.ELEMENT_ARRAY_BUFFER,aH);aJ.bufferData(aJ.ELEMENT_ARRAY_BUFFER,aI,aJ.DYNAMIC_DRAW);return aH;}C.prototype._$Rs=function(){throw new Error("_$Rs");};C.prototype._$Ds=function(aH){throw new Error("_$Ds");};C.prototype._$K2=function(){for(var aH=0;aH<this.textures.length;aH++){var aI=this.textures[aH];if(aI!=0){this.gl._$K2(1,this.textures,aH);this.textures[aH]=null;}}};C.prototype.setTexture=function(aH,aI){this.textures[aH]=aI;};C.prototype.initShader=function(){var aH=this.gl;this.loadShaders2();this.a_position_Loc=aH.getAttribLocation(this.shaderProgram,"a_position");this.a_texCoord_Loc=aH.getAttribLocation(this.shaderProgram,"a_texCoord");this.u_matrix_Loc=aH.getUniformLocation(this.shaderProgram,"u_mvpMatrix");this.s_texture0_Loc=aH.getUniformLocation(this.shaderProgram,"s_texture0");this.u_channelFlag=aH.getUniformLocation(this.shaderProgram,"u_channelFlag");this.u_baseColor_Loc=aH.getUniformLocation(this.shaderProgram,"u_baseColor");this.u_maskFlag_Loc=aH.getUniformLocation(this.shaderProgram,"u_maskFlag");this.a_position_Loc_Off=aH.getAttribLocation(this.shaderProgramOff,"a_position");this.a_texCoord_Loc_Off=aH.getAttribLocation(this.shaderProgramOff,"a_texCoord");this.u_matrix_Loc_Off=aH.getUniformLocation(this.shaderProgramOff,"u_mvpMatrix");this.u_clipMatrix_Loc_Off=aH.getUniformLocation(this.shaderProgramOff,"u_ClipMatrix");this.s_texture0_Loc_Off=aH.getUniformLocation(this.shaderProgramOff,"s_texture0");this.s_texture1_Loc_Off=aH.getUniformLocation(this.shaderProgramOff,"s_texture1");this.u_channelFlag_Loc_Off=aH.getUniformLocation(this.shaderProgramOff,"u_channelFlag");this.u_baseColor_Loc_Off=aH.getUniformLocation(this.shaderProgramOff,"u_baseColor");};C.prototype.disposeShader=function(){var aH=this.gl;if(this.shaderProgram){aH.deleteProgram(this.shaderProgram);this.shaderProgram=null;}if(this.shaderProgramOff){aH.deleteProgram(this.shaderProgramOff);this.shaderProgramOff=null;}};C.prototype.compileShader=function(aJ,aN){var aM=this.gl;var aH;var aL=aN;var aK=aM.createShader(aJ);if(aK==null){q._$Ji("_$L0 to create shader");return null;}aM.shaderSource(aK,aL);aM.compileShader(aK);var aH=aM.getShaderParameter(aK,aM.COMPILE_STATUS);if(!aH){var aI=aM.getShaderInfoLog(aK);q._$Ji("_$L0 to compile shader : "+aI);aM.deleteShader(aK);return null;}return aK;};C.prototype.loadShaders2=function(){var aN=this.gl;this.shaderProgram=aN.createProgram();if(!this.shaderProgram){return false;}this.shaderProgramOff=aN.createProgram();if(!this.shaderProgramOff){return false;}var aK="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_mvpMatrix * a_position;    v_texCoord = a_texCoord;}";var aM="precision mediump float;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform vec4       u_channelFlag;uniform vec4       u_baseColor;uniform bool       u_maskFlag;void main(){    vec4 smpColor;     if(u_maskFlag){        float isInside =             step(u_baseColor.x, v_ClipPos.x/v_ClipPos.w)          * step(u_baseColor.y, v_ClipPos.y/v_ClipPos.w)          * step(v_ClipPos.x/v_ClipPos.w, u_baseColor.z)          * step(v_ClipPos.y/v_ClipPos.w, u_baseColor.w);        smpColor = u_channelFlag * texture2D(s_texture0 , v_texCoord).a * isInside;    }else{        smpColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;    }    gl_FragColor = smpColor;}";var aL="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;uniform mat4       u_ClipMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_ClipMatrix * a_position;    v_texCoord = a_texCoord ;}";var aJ="precision mediump float ;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_channelFlag;uniform vec4       u_baseColor ;void main(){    vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;    vec4 clipMask = texture2D(s_texture1, v_ClipPos.xy / v_ClipPos.w) * u_channelFlag;    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;    col_formask = col_formask * maskVal;    gl_FragColor = col_formask;}";this.vertShader=this.compileShader(aN.VERTEX_SHADER,aK);if(!this.vertShader){q._$Ji("Vertex shader compile _$li!");return false;}this.vertShaderOff=this.compileShader(aN.VERTEX_SHADER,aL);if(!this.vertShaderOff){q._$Ji("OffVertex shader compile _$li!");return false;}this.fragShader=this.compileShader(aN.FRAGMENT_SHADER,aM);if(!this.fragShader){q._$Ji("Fragment shader compile _$li!");return false;}this.fragShaderOff=this.compileShader(aN.FRAGMENT_SHADER,aJ);if(!this.fragShaderOff){q._$Ji("OffFragment shader compile _$li!");return false;}aN.attachShader(this.shaderProgram,this.vertShader);aN.attachShader(this.shaderProgram,this.fragShader);aN.attachShader(this.shaderProgramOff,this.vertShaderOff);aN.attachShader(this.shaderProgramOff,this.fragShaderOff);aN.linkProgram(this.shaderProgram);aN.linkProgram(this.shaderProgramOff);var aH=aN.getProgramParameter(this.shaderProgram,aN.LINK_STATUS);if(!aH){var aI=aN.getProgramInfoLog(this.shaderProgram);q._$Ji("_$L0 to link program: "+aI);if(this.vertShader){aN.deleteShader(this.vertShader);this.vertShader=0;}if(this.fragShader){aN.deleteShader(this.fragShader);this.fragShader=0;}if(this.shaderProgram){aN.deleteProgram(this.shaderProgram);this.shaderProgram=0;}if(this.vertShaderOff){aN.deleteShader(this.vertShaderOff);this.vertShaderOff=0;}if(this.fragShaderOff){aN.deleteShader(this.fragShaderOff);this.fragShaderOff=0;}if(this.shaderProgramOff){aN.deleteProgram(this.shaderProgramOff);this.shaderProgramOff=0;}return false;}return true;};C.prototype.createFramebuffer=function(){var aL=this.gl;var aK=Q.clippingMaskBufferSize;var aJ=aL.createFramebuffer();aL.bindFramebuffer(aL.FRAMEBUFFER,aJ);var aH=aL.createRenderbuffer();aL.bindRenderbuffer(aL.RENDERBUFFER,aH);aL.renderbufferStorage(aL.RENDERBUFFER,aL.RGBA4,aK,aK);aL.framebufferRenderbuffer(aL.FRAMEBUFFER,aL.COLOR_ATTACHMENT0,aL.RENDERBUFFER,aH);var aI=aL.createTexture();aL.bindTexture(aL.TEXTURE_2D,aI);aL.texImage2D(aL.TEXTURE_2D,0,aL.RGBA,aK,aK,0,aL.RGBA,aL.UNSIGNED_BYTE,null);aL.texParameteri(aL.TEXTURE_2D,aL.TEXTURE_MIN_FILTER,aL.LINEAR);aL.texParameteri(aL.TEXTURE_2D,aL.TEXTURE_MAG_FILTER,aL.LINEAR);aL.texParameteri(aL.TEXTURE_2D,aL.TEXTURE_WRAP_S,aL.CLAMP_TO_EDGE);aL.texParameteri(aL.TEXTURE_2D,aL.TEXTURE_WRAP_T,aL.CLAMP_TO_EDGE);aL.framebufferTexture2D(aL.FRAMEBUFFER,aL.COLOR_ATTACHMENT0,aL.TEXTURE_2D,aI,0);aL.bindTexture(aL.TEXTURE_2D,null);aL.bindRenderbuffer(aL.RENDERBUFFER,null);aL.bindFramebuffer(aL.FRAMEBUFFER,null);Q.fTexture[this.glno]=aI;return{framebuffer:aJ,renderbuffer:aH,texture:Q.fTexture[this.glno]};};function K(aH){if(j){return;}this._$P=new Int8Array(8);this._$R0=new DataView(this._$P.buffer);this._$3i=new Int8Array(1000);this._$hL=0;this._$v0=0;this._$S2=0;this._$Ko=new Array();this._$T=aH;this._$F=0;}K.prototype._$fP=function(){var aK=this._$ST();var aJ,aI,aH;if((aK&128)==0){return aK&255;}else{if(((aJ=this._$ST())&128)==0){return((aK&127)<<7)|(aJ&127);}else{if(((aI=this._$ST())&128)==0){return((aK&127)<<14)|((aJ&127)<<7)|(aI&255);}else{if(((aH=this._$ST())&128)==0){return((aK&127)<<21)|((aJ&127)<<14)|((aI&127)<<7)|(aH&255);}else{throw new J("_$L _$0P  _");}}}}};K.prototype.getFormatVersion=function(){return this._$S2;};K.prototype._$gr=function(aH){this._$S2=aH;};K.prototype._$3L=function(){return this._$fP();};K.prototype._$mP=function(){this._$zT();this._$F+=8;return this._$T.getFloat64(this._$F-8);};K.prototype._$_T=function(){this._$zT();this._$F+=4;return this._$T.getFloat32(this._$F-4);};K.prototype._$6L=function(){this._$zT();this._$F+=4;return this._$T.getInt32(this._$F-4);};K.prototype._$ST=function(){this._$zT();return this._$T.getInt8(this._$F++);};K.prototype._$9T=function(){this._$zT();this._$F+=2;return this._$T.getInt16(this._$F-2);};K.prototype._$2T=function(){this._$zT();this._$F+=8;throw new J("_$L _$q read long");};K.prototype._$po=function(){this._$zT();return this._$T.getInt8(this._$F++)!=0;};var O=true;K.prototype._$bT=function(){this._$zT();var aH=this._$3L();var aK=null;if(O){try{var aM=new ArrayBuffer(aH*2);aK=new Uint16Array(aM);for(var aJ=0;aJ<aH;++aJ){aK[aJ]=this._$T.getUint8(this._$F++);}return String.fromCharCode.apply(null,aK);}catch(aL){O=false;}}try{var aI=new Array();if(aK==null){for(var aJ=0;aJ<aH;++aJ){aI[aJ]=this._$T.getUint8(this._$F++);}}else{for(var aJ=0;aJ<aH;++aJ){aI[aJ]=aK[aJ];}}return String.fromCharCode.apply(null,aI);}catch(aL){console.log("read utf8 / _$rT _$L0 !! : "+aL);}};K.prototype._$cS=function(){this._$zT();var aI=this._$3L();var aH=new Int32Array(aI);for(var aJ=0;aJ<aI;aJ++){aH[aJ]=this._$T.getInt32(this._$F);this._$F+=4;}return aH;};K.prototype._$Tb=function(){this._$zT();var aI=this._$3L();var aH=new Float32Array(aI);for(var aJ=0;aJ<aI;aJ++){aH[aJ]=this._$T.getFloat32(this._$F);this._$F+=4;}return aH;};K.prototype._$5b=function(){this._$zT();var aI=this._$3L();var aH=new Float64Array(aI);for(var aJ=0;aJ<aI;aJ++){aH[aJ]=this._$T.getFloat64(this._$F);this._$F+=8;}return aH;};K.prototype._$nP=function(){return this._$Jb(-1);};K.prototype._$Jb=function(aJ){this._$zT();if(aJ<0){aJ=this._$3L();}if(aJ==ay._$7P){var aH=this._$6L();if(0<=aH&&aH<this._$Ko.length){return this._$Ko[aH];}else{throw new J("_$sL _$4i @_$m0");}}else{var aI=this._$4b(aJ);this._$Ko.push(aI);return aI;}};K.prototype._$4b=function(aN){if(aN==0){return null;}if(aN==50){var aK=this._$bT();var aI=Z.getID(aK);return aI;}else{if(aN==51){var aK=this._$bT();var aI=n.getID(aK);return aI;}else{if(aN==134){var aK=this._$bT();var aI=i.getID(aK);return aI;}else{if(aN==60){var aK=this._$bT();var aI=z.getID(aK);return aI;}}}}if(aN>=48){var aL=ay._$9o(aN);if(aL!=null){aL._$F0(this);return aL;}else{return null;}}switch(aN){case 1:return this._$bT();case 10:var aM=this._$6L();return new I(aM,true);case 11:return new av(this._$mP(),this._$mP(),this._$mP(),this._$mP());case 12:return new av(this._$_T(),this._$_T(),this._$_T(),this._$_T());case 13:return new e(this._$mP(),this._$mP());case 14:return new e(this._$_T(),this._$_T());case 15:var aH=this._$3L();var aI=new Array(aH);for(var aJ=0;aJ<aH;aJ++){aI[aJ]=this._$nP();}return aI;case 17:var aI=new aD(this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP());return aI;case 21:return new F(this._$6L(),this._$6L(),this._$6L(),this._$6L());case 22:return new k(this._$6L(),this._$6L());case 23:throw new Error("_$L _$ro ");case 16:case 25:return this._$cS();case 26:return this._$5b();case 27:return this._$Tb();case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 18:case 19:case 20:case 24:case 28:throw new J("_$6 _$q : _$nP() of 2-9 ,18,19,20,24,28 : "+aN);default:throw new J("_$6 _$q : _$nP() NO _$i : "+aN);}};K.prototype._$8L=function(){if(this._$hL==0){this._$v0=this._$ST();}else{if(this._$hL==8){this._$v0=this._$ST();this._$hL=0;}}return((this._$v0>>(7-this._$hL++))&1)==1;};K.prototype._$zT=function(){if(this._$hL!=0){this._$hL=0;}};function ai(){}ai.prototype._$wP=function(aM,aI,aK){for(var aL=0;aL<aK;aL++){for(var aH=0;aH<aI;aH++){var aJ=2*(aH+aL*aI);console.log("(% 7.3f , % 7.3f) , ",aM[aJ],aM[aJ+1]);}console.log("\n");}console.log("\n");};function aC(){}aC._$2S=Math.PI/180;aC._$bS=(Math.PI/180);aC._$wS=180/Math.PI;aC._$NS=(180/Math.PI);aC.PI_F=Math.PI;aC._$kT=[0,0.012368,0.024734,0.037097,0.049454,0.061803,0.074143,0.086471,0.098786,0.111087,0.12337,0.135634,0.147877,0.160098,0.172295,0.184465,0.196606,0.208718,0.220798,0.232844,0.244854,0.256827,0.268761,0.280654,0.292503,0.304308,0.316066,0.327776,0.339436,0.351044,0.362598,0.374097,0.385538,0.396921,0.408243,0.419502,0.430697,0.441826,0.452888,0.463881,0.474802,0.485651,0.496425,0.507124,0.517745,0.528287,0.538748,0.549126,0.559421,0.56963,0.579752,0.589785,0.599728,0.609579,0.619337,0.629,0.638567,0.648036,0.657406,0.666676,0.675843,0.684908,0.693867,0.70272,0.711466,0.720103,0.72863,0.737045,0.745348,0.753536,0.76161,0.769566,0.777405,0.785125,0.792725,0.800204,0.807561,0.814793,0.821901,0.828884,0.835739,0.842467,0.849066,0.855535,0.861873,0.868079,0.874153,0.880093,0.885898,0.891567,0.897101,0.902497,0.907754,0.912873,0.917853,0.922692,0.92739,0.931946,0.936359,0.940629,0.944755,0.948737,0.952574,0.956265,0.959809,0.963207,0.966457,0.96956,0.972514,0.97532,0.977976,0.980482,0.982839,0.985045,0.987101,0.989006,0.990759,0.992361,0.993811,0.995109,0.996254,0.997248,0.998088,0.998776,0.999312,0.999694,0.999924,1];aC._$92=function(aK,aI){var aH=Math.atan2(aK[1],aK[0]);var aJ=Math.atan2(aI[1],aI[0]);return aC._$tS(aH,aJ);};aC._$tS=function(aI,aH){var aJ=aI-aH;while(aJ<-Math.PI){aJ+=2*Math.PI;}while(aJ>Math.PI){aJ-=2*Math.PI;}return aJ;};aC._$9=function(aH){return Math.sin(aH);};aC.fcos=function(aH){return Math.cos(aH);};function aB(aH){if(j){return;}this._$e0=null;this._$IP=null;this._$Us=null;this._$7s=null;this._$IS=[false];this._$VS=null;this._$AT=true;this.baseOpacity=1;this.clipBufPre_clipContext=null;this._$e0=aH;}aB.prototype._$u2=function(){return this._$IS[0];};aB.prototype._$yo=function(){return this._$AT&&!this._$IS[0];};aB.prototype._$GT=function(){return this._$e0;};function r(){}r._$W2=0;r.SYSTEM_INFO=null;r.USER_AGENT=navigator.userAgent;r.isIPhone=function(){if(!r.SYSTEM_INFO){r.setup();}return r.SYSTEM_INFO._isIPhone;};r.isIOS=function(){if(!r.SYSTEM_INFO){r.setup();}return r.SYSTEM_INFO._isIPhone||r.SYSTEM_INFO._isIPad;};r.isAndroid=function(){if(!r.SYSTEM_INFO){r.setup();}return r.SYSTEM_INFO._isAndroid;};r.getOSVersion=function(){if(!r.SYSTEM_INFO){r.setup();}return r.SYSTEM_INFO.version;};r.getOS=function(){if(!r.SYSTEM_INFO){r.setup();}if(r.SYSTEM_INFO._isIPhone||r.SYSTEM_INFO._isIPad){return"iOS";}if(r.SYSTEM_INFO._isAndroid){return"Android";}else{return"_$Q0 OS";}};r.setup=function(){var aK=r.USER_AGENT;function aI(aO,aR){var aN=aO.substring(aR).split(/[ _,;\.]/);var aQ=0;for(var aM=0;aM<=2;aM++){if(isNaN(aN[aM])){break;}var aP=parseInt(aN[aM]);if(aP<0||aP>999){q._$li("err : "+aP+" @UtHtml5.setup()");aQ=0;break;}aQ+=aP*Math.pow(1000,(2-aM));}return aQ;}var aL;var aH;var aJ=r.SYSTEM_INFO={userAgent:aK};if((aL=aK.indexOf("iPhone OS "))>=0){aJ.os="iPhone";aJ._isIPhone=true;aJ.version=aI(aK,aL+"iPhone OS ".length);}else{if((aL=aK.indexOf("iPad"))>=0){aL=aK.indexOf("CPU OS");if(aL<0){q._$li(" err : "+aK+" @UtHtml5.setup()");return;}aJ.os="iPad";aJ._isIPad=true;aJ.version=aI(aK,aL+"CPU OS ".length);}else{if((aL=aK.indexOf("Android"))>=0){aJ.os="Android";aJ._isAndroid=true;aJ.version=aI(aK,aL+"Android ".length);}else{aJ.os="-";aJ.version=-1;}}}};window.UtSystem=P;window.UtDebug=q;window.LDTransform=am;window.LDGL=au;window.Live2D=Q;window.Live2DModelWebGL=l;window.Live2DModelJS=v;window.Live2DMotion=ao;window.MotionQueueManager=V;window.PhysicsHair=u;window.AMotion=ah;window.PartsDataID=i;window.DrawDataID=Z;window.BaseDataID=n;window.ParamID=z;Q.init();var j=false;})();

/***/ }),

/***/ "./src/SDKv2/mainV2.js":
/*!*****************************!*\
  !*** ./src/SDKv2/mainV2.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_coreV2_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/coreV2.min */ "./src/SDKv2/lib/coreV2.min.js");
/* harmony import */ var _lib_coreV2_min__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_coreV2_min__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/Live2DFramework */ "./src/SDKv2/lib/Live2DFramework.js");
/* harmony import */ var _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _LAppLive2DManagerV2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LAppLive2DManagerV2 */ "./src/SDKv2/LAppLive2DManagerV2.js");
/* harmony import */ var _LAppDefineV2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LAppDefineV2 */ "./src/SDKv2/LAppDefineV2.js");
/* harmony import */ var _LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/MatrixStack */ "./src/SDKv2/lib/MatrixStack.js");
/* harmony import */ var _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _webglcontext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webglcontext */ "./src/SDKv2/webglcontext.js");












const platform = window.navigator.platform.toLowerCase();

const live2DMgr = new _LAppLive2DManagerV2__WEBPACK_IMPORTED_MODULE_2__.default();

let isDrawStart = false;

let gl = null;

let canvas = null;

let dragMgr = null;

let viewMatrix = null;

let projMatrix = null;

let deviceToScreen = null;

let drag = false;

let oldLen = 0;

let lastMouseX = 0;

let lastMouseY = 0;

let isModelShown = 0;

let modelurl = "";

let head_pos = 0.5;

function initL2dCanvas(canvasId) {
    canvas = document.getElementById(canvasId);
    if (canvas.addEventListener) {
        //canvas.addEventListener("mousewheel", mouseEvent);
        window.addEventListener("click", mouseEvent);
        window.addEventListener("mousedown", mouseEvent);
        window.addEventListener("mousemove", mouseEvent);
        window.addEventListener("mouseup", mouseEvent);
        document.addEventListener("mouseout", mouseEvent);
        //canvas.addEventListener("contextmenu", mouseEvent);
        window.addEventListener("touchstart", touchEvent);
        window.addEventListener("touchend", touchEvent);
        window.addEventListener("touchmove", touchEvent);
    }
}

function init(modelurl) {
    let width = canvas.width;
    let height = canvas.height;

    dragMgr = new _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_1__.L2DTargetPoint();

    let ratio = height / width;
    let left = (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_LOGICAL_LEFT);
    let right = (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_LOGICAL_RIGHT);
    let bottom = -ratio;
    let top = ratio;

    viewMatrix = new _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_1__.L2DViewMatrix();


    viewMatrix.setScreenRect(left, right, bottom, top);

    viewMatrix.setMaxScreenRect((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_LOGICAL_MAX_LEFT),
        (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_LOGICAL_MAX_RIGHT),
        (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_LOGICAL_MAX_BOTTOM),
        (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_LOGICAL_MAX_TOP));

    viewMatrix.setMaxScale((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_MAX_SCALE));
    viewMatrix.setMinScale((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().VIEW_MIN_SCALE));

    projMatrix = new _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_1__.L2DMatrix44();
    projMatrix.multScale(1, (width / height));

    deviceToScreen = new _lib_Live2DFramework__WEBPACK_IMPORTED_MODULE_1__.L2DMatrix44();
    deviceToScreen.multTranslate(-width / 2.0, -height / 2.0);
    deviceToScreen.multScale(2 / width, -2 / width);

    gl = getWebGLContext();
    (0,_webglcontext__WEBPACK_IMPORTED_MODULE_5__.setContext)(gl);
    if (!gl) {
        console.error("Failed to create WebGL context.");
        if (!!window.WebGLRenderingContext) {
            console.error("Your browser don't support WebGL, check https://get.webgl.org/ for futher information.");
        }
        return;
    }
    window.Live2D.setGL(gl);
    gl.clearColor(0.0, 0.0, 0.0, 0.0);
    changeModel(modelurl);
    startDraw();
}

function startDraw() {
    if (!isDrawStart) {
        isDrawStart = true;
        (function tick() {
            draw();
            let requestAnimationFrame =
                window.requestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.msRequestAnimationFrame;

            // 截图指令检测
            if (window.live2dv2.captureFrame) {
                window.live2dv2.captureFrame = false;
                canvas.toBlob(window.downloadCap);
            }

            requestAnimationFrame(tick, canvas);
        })();
    }
}

function draw() {
    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4___default().reset();
    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4___default().loadIdentity();
    dragMgr.update();
    live2DMgr.setDrag(dragMgr.getX(), dragMgr.getY());

    gl.clear(gl.COLOR_BUFFER_BIT);

    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4___default().multMatrix(projMatrix.getArray());
    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4___default().multMatrix(viewMatrix.getArray());
    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4___default().push();

    for (let i = 0; i < live2DMgr.numModels(); i++) {
        let model = live2DMgr.getModel(i);

        if (model == null) return;

        if (model.initialized && !model.updating) {
            model.update();
            model.draw(gl);
        }
    }
    _lib_MatrixStack__WEBPACK_IMPORTED_MODULE_4___default().pop();
}

function changeModel(modelurl) {
    live2DMgr.reloadFlg = true;
    live2DMgr.count++;
    live2DMgr.changeModel(gl, modelurl);
}

function modelScaling(scale) {
    let isMaxScale = viewMatrix.isMaxScale();
    let isMinScale = viewMatrix.isMinScale();

    viewMatrix.adjustScale(0, 0, scale);

    if (!isMaxScale) {
        if (viewMatrix.isMaxScale()) {
            live2DMgr.maxScaleEvent();
        }
    }

    if (!isMinScale) {
        if (viewMatrix.isMinScale()) {
            live2DMgr.minScaleEvent();
        }
    }
}

function transformRange(center, transform, range) {
    let a = {
        x: transform.x - center.x,
        y: transform.y - center.y
    }
    let r = Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2));
    if (r > range) {
        a = {
            x: a.x / r * range + center.x,
            y: a.y / r * range + center.y
        };
        return a;
    } else {
        return transform;
    }
}

function dot(A, B) {
    return A.x * B.x + A.y * B.y;
}

function normalize(x, y) {
    let length = Math.sqrt(x * x + y * y)
    return {
        x: x / length,
        y: y / length
    }
}

function transformRect(center, transform, rect) {
    if (transform.x < rect.left + rect.width && transform.y < rect.top + rect.height &&
        transform.x > rect.left && transform.y > rect.top) return transform;
    let Len_X = center.x - transform.x;
    let Len_Y = center.y - transform.y;

    function angle(Len_X, Len_Y) {
        return Math.acos(dot({
            x: 0,
            y: 1
        }, normalize(Len_X, Len_Y))) * 180 / Math.PI
    }

    let angleTarget = angle(Len_X, Len_Y);
    if (transform.x < center.x) angleTarget = 360 - angleTarget;
    let angleLeftTop = 360 - angle(rect.left - center.x, (rect.top - center.y) * -1);
    let angleLeftBottom = 360 - angle(rect.left - center.x, (rect.top + rect.height - center.y) * -1);
    let angleRightTop = angle(rect.left + rect.width - center.x, (rect.top - center.y) * -1);
    let angleRightBottom = angle(rect.left + rect.width - center.x, (rect.top + rect.height - center.y) * -1);
    let scale = Len_Y / Len_X;
    let res = {};

    if (angleTarget < angleRightTop) {
        let y3 = rect.top - center.y;
        let x3 = y3 / scale;
        res = {
            y: center.y + y3,
            x: center.x + x3
        }
    } else if (angleTarget < angleRightBottom) {
        let x3 = rect.left + rect.width - center.x;
        let y3 = x3 * scale;
        res = {
            y: center.y + y3,
            x: center.x + x3
        }
    } else if (angleTarget < angleLeftBottom) {
        let y3 = rect.top + rect.height - center.y;
        let x3 = y3 / scale;
        res = {
            y: center.y + y3,
            x: center.x + x3
        }
    } else if (angleTarget < angleLeftTop) {
        let x3 = center.x - rect.left;
        let y3 = x3 * scale;
        res = {
            y: center.y - y3,
            x: center.x - x3
        }
    } else {
        let y3 = rect.top - center.y;
        let x3 = y3 / scale;
        res = {
            y: center.y + y3,
            x: center.x + x3
        }
    }

    return res;
}

function modelTurnHead(event) {
    drag = true;

    let rect = canvas.getBoundingClientRect();

    let sx = transformScreenX(event.clientX - rect.left);
    let sy = transformScreenY(event.clientY - rect.top);
    let target = transformRect({
        x: rect.left + rect.width / 2,
        y: rect.top + rect.height * head_pos
    }, {
        x: event.clientX,
        y: event.clientY
    }, rect)
    let vx = transformViewX(target.x - rect.left);
    let vy = transformViewY(target.y - rect.top);

    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_MOUSE_LOG))
        console.log("[Live2Dv2] onMouseMove device( x:" + event.clientX + " y:" + event.clientY + " ) view( x:" + vx + " y:" + vy + ")");

    lastMouseX = sx;
    lastMouseY = sy;

    dragMgr.setPoint(vx, vy);

    //live2DMgr.tapEvent(vx, vy);
}

function modelTapEvent(event) {
    drag = true;

    let rect = canvas.getBoundingClientRect();

    let sx = transformScreenX(event.clientX - rect.left);
    let sy = transformScreenY(event.clientY - rect.top);
    let target = transformRect({
        x: rect.left + rect.width / 2,
        y: rect.top + rect.height * head_pos
    }, {
        x: event.clientX,
        y: event.clientY
    }, rect)
    let vx = transformViewX(target.x - rect.left);
    let vy = transformViewY(target.y - rect.top);

    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_MOUSE_LOG))
        console.log("[Live2Dv2] onMouseDown device( x:" + event.clientX + " y:" + event.clientY + " ) view( x:" + vx + " y:" + vy + ")");

    lastMouseX = sx;
    lastMouseY = sy;

    //dragMgr.setPoint(vx, vy); 

    live2DMgr.tapEvent(vx, vy);
}

function followPointer(event) {
    let rect = canvas.getBoundingClientRect();

    let sx = transformScreenX(event.clientX - rect.left);
    let sy = transformScreenY(event.clientY - rect.top);
    let target = transformRect({
        x: rect.left + rect.width / 2,
        y: rect.top + rect.height * head_pos
    }, {
        x: event.clientX,
        y: event.clientY
    }, rect)
    let vx = transformViewX(target.x - rect.left);
    let vy = transformViewY(target.y - rect.top);

    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_MOUSE_LOG))
        console.log("[Live2Dv2] onMouseMove device( x:" + event.clientX + " y:" + event.clientY + " ) view( x:" + vx + " y:" + vy + ")");

    if (drag) {
        lastMouseX = sx;
        lastMouseY = sy;
        dragMgr.setPoint(vx, vy);
    }
}

function lookFront() {
    if (drag) {
        drag = false;
    }
    dragMgr.setPoint(0, 0);
}

function sleepy() {
    if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG))
        console.log("[Live2Dv2] Set Session Storage: Sleepy = 1.");

    sessionStorage.setItem('Sleepy', '1');
}

function mouseEvent(e) {
    //e.preventDefault();
    if (e.type == "mousewheel") {
        // if (e.clientX < 0 || canvas.clientWidth < e.clientX || 
        // e.clientY < 0 || canvas.clientHeight < e.clientY)
        // {
        //     return;
        // }
        // if (e.wheelDelta > 0) modelScaling(1.1); 
        // else modelScaling(0.9); 
    } else if (e.type == "mousedown") {
        //if("button" in e && e.button != 0) return;
        // modelTurnHead(e);
        modelTapEvent(e);
    } else if (e.type == "mousemove") {
        var Sleepy = sessionStorage.getItem('Sleepy');
        if (Sleepy === '1') {
            sessionStorage.setItem('Sleepy', '0');
        }
        modelTurnHead(e);
    } else if (e.type == "mouseup") {
        if ("button" in e && e.button != 0) return;
        // lookFront();
    } else if (e.type == "mouseout") {
        if ((_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG))
            console.log("[Live2Dv2] Mouse out Window.");
        lookFront();
        var SleepyTimer = sessionStorage.getItem('SleepyTimer');
        window.clearTimeout(SleepyTimer);

        SleepyTimer = window.setTimeout(sleepy, 50000);
        sessionStorage.setItem('SleepyTimer', SleepyTimer);
    }
}

function touchEvent(e) {
    var touch = e.touches[0];
    if (e.type == "touchstart") {
        if (e.touches.length == 1) modelTurnHead(touch);
        // onClick(touch);
    } else if (e.type == "touchmove") {
        followPointer(touch);
    } else if (e.type == "touchend") {
        lookFront();
    }
}

function transformViewX(deviceX) {
    var screenX = deviceToScreen.transformX(deviceX);
    return viewMatrix.invertTransformX(screenX);
}


function transformViewY(deviceY) {
    var screenY = deviceToScreen.transformY(deviceY);
    return viewMatrix.invertTransformY(screenY);
}


function transformScreenX(deviceX) {
    return deviceToScreen.transformX(deviceX);
}


function transformScreenY(deviceY) {
    return deviceToScreen.transformY(deviceY);
}

function getWebGLContext() {
    var NAMES = ["webgl", "experimental-webgl"];
    for (var i = 0; i < NAMES.length; i++) {
        try {
            var ctx = canvas.getContext(NAMES[i], {premultipliedAlpha: true});
            if (ctx) return ctx;
        } catch (e) {
        }
    }
    return null;
};

function loadlive2d(canvasId, modelurl, headPos) {
    (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_LOG) = window.live2dv2.debug;
    (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_DRAW_HIT_AREA) = window.live2dv2.debug;
    (_LAppDefineV2__WEBPACK_IMPORTED_MODULE_3___default().DEBUG_MOUSE_LOG) = window.live2dv2.debugMousemove;
    head_pos = typeof headPos === 'undefined' ? 0.5 : headPos;
    initL2dCanvas(canvasId);
    init(modelurl);
}

function releaseLive2dv2() {
    live2DMgr.releaseModel(0, gl);
    // 移除监听器
    window.removeEventListener("click", mouseEvent);
    window.removeEventListener("mousedown", mouseEvent);
    window.removeEventListener("mousemove", mouseEvent);
    window.removeEventListener("mouseup", mouseEvent);
    document.removeEventListener("mouseout", mouseEvent);
    window.removeEventListener("touchstart", touchEvent);
    window.removeEventListener("touchend", touchEvent);
    window.removeEventListener("touchmove", touchEvent);
}

window.live2dv2 = window.live2dv2 || {};
window.live2dv2.load = loadlive2d;
window.live2dv2.release = releaseLive2dv2;


/***/ }),

/***/ "./src/SDKv2/webglcontext.js":
/*!***********************************!*\
  !*** ./src/SDKv2/webglcontext.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setContext": () => (/* binding */ setContext),
/* harmony export */   "getContext": () => (/* binding */ getContext)
/* harmony export */ });

var context = undefined;

function setContext(webglContext) {
  context = webglContext;
}

function getContext() {
  return context;
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./src/SDKv4/main.ts");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/SDKv2/mainV2.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvQ29yZS9saXZlMmRjdWJpc21jb3JlLm1pbi5qcyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvY3ViaXNtZnJhbWV3b3JrY29uZmlnLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL2N1YmlzbW1vZGVsc2V0dGluZ2pzb24udHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvZWZmZWN0L2N1YmlzbWJyZWF0aC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtZXllYmxpbmsudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvZWZmZWN0L2N1YmlzbXBvc2UudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvaWN1YmlzbW1vZGVsc2V0dGluZy50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZG1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbWF0aC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbW1hdHJpeDQ0LnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbW9kZWxtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc210YXJnZXRwb2ludC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc212aWV3bWF0cml4LnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vYy50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbXVzZXJtb2RlbC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb3Rpb24vYWN1YmlzbW1vdGlvbi50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtZXhwcmVzc2lvbm1vdGlvbi50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9uLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25pbnRlcm5hbC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9uanNvbi50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlci50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVlbnRyeS50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljcy50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3NpbnRlcm5hbC50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3Nqc29uLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9GcmFtZXdvcmsvc3JjL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlci50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXJfd2ViZ2wudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvdHlwZS9jc21tYXAudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L0ZyYW1ld29yay9zcmMvdHlwZS9jc21yZWN0Zi50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy90eXBlL2NzbXN0cmluZy50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy90eXBlL2NzbXZlY3Rvci50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy91dGlscy9jdWJpc21kZWJ1Zy50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvRnJhbWV3b3JrL3NyYy91dGlscy9jdWJpc21qc29uLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9sYXBwZGVmaW5lLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9sYXBwZGVsZWdhdGUudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L2xhcHBsaXZlMmRtYW5hZ2VyLnRzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2NC9sYXBwbW9kZWwudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L2xhcHBwYWwudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L2xhcHB0ZXh0dXJlbWFuYWdlci50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjQvbGFwcHZpZXcudHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L21haW4udHMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3Y0L3RvdWNobWFuYWdlci50cyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2Mi9MQXBwRGVmaW5lVjIuanMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3YyL0xBcHBMaXZlMkRNYW5hZ2VyVjIuanMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3YyL0xBcHBNb2RlbFYyLmpzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2Mi9QbGF0Zm9ybU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3YyL2xpYi9MaXZlMkRGcmFtZXdvcmsuanMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3YyL2xpYi9NYXRyaXhTdGFjay5qcyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvLi9zcmMvU0RLdjIvbGliL01vZGVsU2V0dGluZ0pzb24uanMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3YyL2xpYi9jb3JlVjIubWluLmpzIiwid2VicGFjazovL2xpdmUyZHdlYi8uL3NyYy9TREt2Mi9tYWluVjIuanMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViLy4vc3JjL1NES3YyL3dlYmdsY29udGV4dC5qcyIsIndlYnBhY2s6Ly9saXZlMmR3ZWIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2xpdmUyZHdlYi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbGl2ZTJkd2ViL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLGlFQUFlLDhVQUE4VSw0QkFBNEIsb0JBQW9CLGlCQUFpQixrQ0FBa0MscURBQXFELHFDQUFxQyw4REFBOEQsa0NBQWtDLHFFQUFxRSxtQ0FBbUMsc0VBQXNFLGdEQUFnRCw4RkFBOEYsNERB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Q0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JELE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCw0RUFBNEU7QUFDNUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLHFDQUFxQywwQkFBMEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QiwwQkFBMEIsZUFBZTtBQUN0RTs7QUFFTztBQUNQO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFF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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25ELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xELG1EQUFtRDtBQUNuRCxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsbUJBQW1CLE9BQU87QUFDMUIsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFFBQVE7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRO0FBQ25DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEM7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQzs7Ozs7Ozs7OztBQ3QrQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTs7O0FBR0E7OztBQUdBOzs7QUFHQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQSxDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNB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QUFzQjtBQUMxQixJQUFJLDREQUFnQjs7QUFFcEIsbUJBQW1CLDJCQUEyQjtBQUM5Qzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSwyREFBZTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLFFBQVEsc0VBQTRCO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLFFBQVEsc0VBQTRCO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUEsK0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLFFBQVEsc0VBQTRCO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLGdFQUFzQjtBQUM5Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRDtBQUNBLGtDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSxnRUFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBLG1EQUFtRCx5QkFBeUI7QUFDNUU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLGdFQUFzQjtBQUMxQixJQUFJLDBFQUFnQztBQUNwQyxJQUFJLHNFQUE0QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwZEE7O0FBRU87QUFDUDtBQUNBOztBQUVPO0FBQ1A7QUFDQSxDOzs7Ozs7VUNUQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0NyQkE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGdDQUFnQyxZQUFZO1dBQzVDO1dBQ0EsRTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHdDQUF3Qyx5Q0FBeUM7V0FDakY7V0FDQTtXQUNBLEU7Ozs7O1dDUEEsd0Y7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0Esc0RBQXNELGtCQUFrQjtXQUN4RTtXQUNBLCtDQUErQyxjQUFjO1dBQzdELEU7Ozs7O1VDTkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSIsImZpbGUiOiJsaXZlMmRfYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIvKipcXG4gKiBMaXZlMkQgQ3ViaXNtIENvcmVcXG4gKiAoQykgMjAxOSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxcbiAqXFxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHB1cnN1YW50IHRvIHRoZSBsaWNlbnNlIGFncmVlbWVudCBiZWxvdy5cXG4gKiBUaGlzIGZpbGUgY29ycmVzcG9uZHMgdG8gdGhlIFxcXCJSZWRpc3RyaWJ1dGFibGUgQ29kZVxcXCIgaW4gdGhlIGFncmVlbWVudC5cXG4gKiBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLXByb3ByaWV0YXJ5LXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWxcXG4gKi9cXG52YXIgTGl2ZTJEQ3ViaXNtQ29yZTshZnVuY3Rpb24oTGl2ZTJEQ3ViaXNtQ29yZSl7dmFyIF9jc209ZnVuY3Rpb24oKXtmdW5jdGlvbiBfY3NtKCl7fXJldHVybiBfY3NtLmdldFZlcnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXRWZXJzaW9uXFxcIixcXFwibnVtYmVyXFxcIixbXSxbXSl9LF9jc20uZ2V0TGF0ZXN0TW9jVmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldExhdGVzdE1vY1ZlcnNpb25cXFwiLFxcXCJudW1iZXJcXFwiLFtdLFtdKX0sX2NzbS5nZXRNb2NWZXJzaW9uPWZ1bmN0aW9uKG1vYyl7cmV0dXJuIF9lbS5jY2FsbChcXFwiY3NtR2V0TW9jVmVyc2lvblxcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9jXSl9LF9jc20uZ2V0U2l6ZW9mTW9kZWw9ZnVuY3Rpb24obW9jKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXRTaXplb2ZNb2RlbFxcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9jXSl9LF9jc20ucmV2aXZlTW9jSW5QbGFjZT1mdW5jdGlvbihtZW1vcnksbW9jU2l6ZSl7cmV0dXJuIF9lbS5jY2FsbChcXFwiY3NtUmV2aXZlTW9jSW5QbGFjZVxcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiLFxcXCJudW1iZXJcXFwiXSxbbWVtb3J5LG1vY1NpemVdKX0sX2NzbS5pbml0aWFsaXplTW9kZWxJblBsYWNlPWZ1bmN0aW9uKG1vYyxtZW1vcnksbW9kZWxTaXplKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21Jbml0aWFsaXplTW9kZWxJblBsYWNlXFxcIixcXFwibnVtYmVyXFxcIixbXFxcIm51bWJlclxcXCIsXFxcIm51bWJlclxcXCIsXFxcIm51bWJlclxcXCJdLFttb2MsbWVtb3J5LG1vZGVsU2l6ZV0pfSxfY3NtLmdldFBhcmFtZXRlckNvdW50PWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXRQYXJhbWV0ZXJDb3VudFxcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXRQYXJhbWV0ZXJJZHM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldFBhcmFtZXRlcklkc1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWVzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWVzXFxcIixcXFwibnVtYmVyXFxcIixbXFxcIm51bWJlclxcXCJdLFttb2RlbF0pfSxfY3NtLmdldFBhcmFtZXRlck1heGltdW1WYWx1ZXM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldFBhcmFtZXRlck1heGltdW1WYWx1ZXNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlcz1mdW5jdGlvbihtb2RlbCl7cmV0dXJuIF9lbS5jY2FsbChcXFwiY3NtR2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlc1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXRQYXJhbWV0ZXJWYWx1ZXM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldFBhcmFtZXRlclZhbHVlc1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXRQYXJ0Q291bnQ9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldFBhcnRDb3VudFxcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXRQYXJ0SWRzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXRQYXJ0SWRzXFxcIixcXFwibnVtYmVyXFxcIixbXFxcIm51bWJlclxcXCJdLFttb2RlbF0pfSxfY3NtLmdldFBhcnRPcGFjaXRpZXM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldFBhcnRPcGFjaXRpZXNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0UGFydFBhcmVudFBhcnRJbmRpY2VzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXRQYXJ0UGFyZW50UGFydEluZGljZXNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0RHJhd2FibGVDb3VudD1mdW5jdGlvbihtb2RlbCl7cmV0dXJuIF9lbS5jY2FsbChcXFwiY3NtR2V0RHJhd2FibGVDb3VudFxcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXREcmF3YWJsZUlkcz1mdW5jdGlvbihtb2RlbCl7cmV0dXJuIF9lbS5jY2FsbChcXFwiY3NtR2V0RHJhd2FibGVJZHNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0RHJhd2FibGVDb25zdGFudEZsYWdzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXREcmF3YWJsZUNvbnN0YW50RmxhZ3NcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0RHJhd2FibGVEeW5hbWljRmxhZ3M9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldERyYXdhYmxlRHluYW1pY0ZsYWdzXFxcIixcXFwibnVtYmVyXFxcIixbXFxcIm51bWJlclxcXCJdLFttb2RlbF0pfSxfY3NtLmdldERyYXdhYmxlVGV4dHVyZUluZGljZXM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldERyYXdhYmxlVGV4dHVyZUluZGljZXNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0RHJhd2FibGVEcmF3T3JkZXJzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXREcmF3YWJsZURyYXdPcmRlcnNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0RHJhd2FibGVSZW5kZXJPcmRlcnM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldERyYXdhYmxlUmVuZGVyT3JkZXJzXFxcIixcXFwibnVtYmVyXFxcIixbXFxcIm51bWJlclxcXCJdLFttb2RlbF0pfSxfY3NtLmdldERyYXdhYmxlT3BhY2l0aWVzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXREcmF3YWJsZU9wYWNpdGllc1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXREcmF3YWJsZU1hc2tDb3VudHM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldERyYXdhYmxlTWFza0NvdW50c1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXREcmF3YWJsZU1hc2tzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXREcmF3YWJsZU1hc2tzXFxcIixcXFwibnVtYmVyXFxcIixbXFxcIm51bWJlclxcXCJdLFttb2RlbF0pfSxfY3NtLmdldERyYXdhYmxlVmVydGV4Q291bnRzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXREcmF3YWJsZVZlcnRleENvdW50c1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5nZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucz1mdW5jdGlvbihtb2RlbCl7cmV0dXJuIF9lbS5jY2FsbChcXFwiY3NtR2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0RHJhd2FibGVWZXJ0ZXhVdnM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldERyYXdhYmxlVmVydGV4VXZzXFxcIixcXFwibnVtYmVyXFxcIixbXFxcIm51bWJlclxcXCJdLFttb2RlbF0pfSxfY3NtLmdldERyYXdhYmxlSW5kZXhDb3VudHM9ZnVuY3Rpb24obW9kZWwpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbUdldERyYXdhYmxlSW5kZXhDb3VudHNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20uZ2V0RHJhd2FibGVJbmRpY2VzPWZ1bmN0aW9uKG1vZGVsKXtyZXR1cm4gX2VtLmNjYWxsKFxcXCJjc21HZXREcmF3YWJsZUluZGljZXNcXFwiLFxcXCJudW1iZXJcXFwiLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20ubWFsbG9jTW9jPWZ1bmN0aW9uKG1vY1NpemUpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbU1hbGxvY01vY1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9jU2l6ZV0pfSxfY3NtLm1hbGxvY01vZGVsQW5kSW5pdGlhbGl6ZT1mdW5jdGlvbihtb2Mpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbU1hbGxvY01vZGVsQW5kSW5pdGlhbGl6ZVxcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbbW9jXSl9LF9jc20ubWFsbG9jPWZ1bmN0aW9uKHNpemUpe3JldHVybiBfZW0uY2NhbGwoXFxcImNzbU1hbGxvY1xcXCIsXFxcIm51bWJlclxcXCIsW1xcXCJudW1iZXJcXFwiXSxbc2l6ZV0pfSxfY3NtLnNldExvZ0Z1bmN0aW9uPWZ1bmN0aW9uKGhhbmRsZXIpe19lbS5jY2FsbChcXFwiY3NtU2V0TG9nRnVuY3Rpb25cXFwiLG51bGwsW1xcXCJudW1iZXJcXFwiXSxbaGFuZGxlcl0pfSxfY3NtLnVwZGF0ZU1vZGVsPWZ1bmN0aW9uKG1vZGVsKXtfZW0uY2NhbGwoXFxcImNzbVVwZGF0ZU1vZGVsXFxcIixudWxsLFtcXFwibnVtYmVyXFxcIl0sW21vZGVsXSl9LF9jc20ucmVhZENhbnZhc0luZm89ZnVuY3Rpb24obW9kZWwsb3V0U2l6ZUluUGl4ZWxzLG91dE9yaWdpbkluUGl4ZWxzLG91dFBpeGVsc1BlclVuaXQpe19lbS5jY2FsbChcXFwiY3NtUmVhZENhbnZhc0luZm9cXFwiLG51bGwsW1xcXCJudW1iZXJcXFwiLFxcXCJudW1iZXJcXFwiLFxcXCJudW1iZXJcXFwiLFxcXCJudW1iZXJcXFwiXSxbbW9kZWwsb3V0U2l6ZUluUGl4ZWxzLG91dE9yaWdpbkluUGl4ZWxzLG91dFBpeGVsc1BlclVuaXRdKX0sX2NzbS5yZXNldERyYXdhYmxlRHluYW1pY0ZsYWdzPWZ1bmN0aW9uKG1vZGVsKXtfZW0uY2NhbGwoXFxcImNzbVJlc2V0RHJhd2FibGVEeW5hbWljRmxhZ3NcXFwiLG51bGwsW1xcXCJudW1iZXJcXFwiXSxbbW9kZWxdKX0sX2NzbS5mcmVlPWZ1bmN0aW9uKG1lbW9yeSl7X2VtLmNjYWxsKFxcXCJjc21GcmVlXFxcIixudWxsLFtcXFwibnVtYmVyXFxcIl0sW21lbW9yeV0pfSxfY3NtfSgpLFZlcnNpb249ZnVuY3Rpb24oKXtmdW5jdGlvbiBWZXJzaW9uKCl7fXJldHVybiBWZXJzaW9uLmNzbUdldFZlcnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gX2NzbS5nZXRWZXJzaW9uKCl9LFZlcnNpb24uY3NtR2V0TGF0ZXN0TW9jVmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiBfY3NtLmdldExhdGVzdE1vY1ZlcnNpb24oKX0sVmVyc2lvbi5jc21HZXRNb2NWZXJzaW9uPWZ1bmN0aW9uKG1vYyl7cmV0dXJuIF9jc20uZ2V0TW9jVmVyc2lvbihtb2MuX3B0cil9LFZlcnNpb259KCk7TGl2ZTJEQ3ViaXNtQ29yZS5WZXJzaW9uPVZlcnNpb247dmFyIExvZ2dpbmc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBMb2dnaW5nKCl7fXJldHVybiBMb2dnaW5nLmNzbVNldExvZ0Z1bmN0aW9uPWZ1bmN0aW9uKGhhbmRsZXIpe0xvZ2dpbmcubG9nRnVuY3Rpb249aGFuZGxlcjt2YXIgcG9pbnRlcj1fZW0uYWRkRnVuY3Rpb24oTG9nZ2luZy53cmFwTG9nRnVuY3Rpb24sXFxcInZpXFxcIik7X2NzbS5zZXRMb2dGdW5jdGlvbihwb2ludGVyKX0sTG9nZ2luZy5jc21HZXRMb2dGdW5jdGlvbj1mdW5jdGlvbigpe3JldHVybiBMb2dnaW5nLmxvZ0Z1bmN0aW9ufSxMb2dnaW5nLndyYXBMb2dGdW5jdGlvbj1mdW5jdGlvbihtZXNzYWdlUHRyKXt2YXIgbWVzc2FnZVN0cj1fZW0uVVRGOFRvU3RyaW5nKG1lc3NhZ2VQdHIpO0xvZ2dpbmcubG9nRnVuY3Rpb24obWVzc2FnZVN0cil9LExvZ2dpbmd9KCk7TGl2ZTJEQ3ViaXNtQ29yZS5Mb2dnaW5nPUxvZ2dpbmc7dmFyIE1vYz1mdW5jdGlvbigpe2Z1bmN0aW9uIE1vYyhtb2NCeXRlcyl7dmFyIG1lbW9yeT1fY3NtLm1hbGxvY01vYyhtb2NCeXRlcy5ieXRlTGVuZ3RoKTttZW1vcnkmJihuZXcgVWludDhBcnJheShfZW0uSEVBUFU4LmJ1ZmZlcixtZW1vcnksbW9jQnl0ZXMuYnl0ZUxlbmd0aCkuc2V0KG5ldyBVaW50OEFycmF5KG1vY0J5dGVzKSksdGhpcy5fcHRyPV9jc20ucmV2aXZlTW9jSW5QbGFjZShtZW1vcnksbW9jQnl0ZXMuYnl0ZUxlbmd0aCksdGhpcy5fcHRyfHxfY3NtLmZyZWUobWVtb3J5KSl9cmV0dXJuIE1vYy5mcm9tQXJyYXlCdWZmZXI9ZnVuY3Rpb24oYnVmZmVyKXtpZighYnVmZmVyKXJldHVybiBudWxsO3ZhciBtb2M9bmV3IE1vYyhidWZmZXIpO3JldHVybiBtb2MuX3B0cj9tb2M6bnVsbH0sTW9jLnByb3RvdHlwZS5fcmVsZWFzZT1mdW5jdGlvbigpe19jc20uZnJlZSh0aGlzLl9wdHIpLHRoaXMuX3B0cj0wfSxNb2N9KCk7TGl2ZTJEQ3ViaXNtQ29yZS5Nb2M9TW9jO3ZhciBNb2RlbD1mdW5jdGlvbigpe2Z1bmN0aW9uIE1vZGVsKG1vYyl7dGhpcy5fcHRyPV9jc20ubWFsbG9jTW9kZWxBbmRJbml0aWFsaXplKG1vYy5fcHRyKSx0aGlzLl9wdHImJih0aGlzLnBhcmFtZXRlcnM9bmV3IFBhcmFtZXRlcnModGhpcy5fcHRyKSx0aGlzLnBhcnRzPW5ldyBQYXJ0cyh0aGlzLl9wdHIpLHRoaXMuZHJhd2FibGVzPW5ldyBEcmF3YWJsZXModGhpcy5fcHRyKSx0aGlzLmNhbnZhc2luZm89bmV3IENhbnZhc0luZm8odGhpcy5fcHRyKSl9cmV0dXJuIE1vZGVsLmZyb21Nb2M9ZnVuY3Rpb24obW9jKXt2YXIgbW9kZWw9bmV3IE1vZGVsKG1vYyk7cmV0dXJuIG1vZGVsLl9wdHI/bW9kZWw6bnVsbH0sTW9kZWwucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe19jc20udXBkYXRlTW9kZWwodGhpcy5fcHRyKX0sTW9kZWwucHJvdG90eXBlLnJlbGVhc2U9ZnVuY3Rpb24oKXtfY3NtLmZyZWUodGhpcy5fcHRyKSx0aGlzLl9wdHI9MH0sTW9kZWx9KCk7TGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbD1Nb2RlbDt2YXIgQ2FudmFzSW5mbz1mdW5jdGlvbihtb2RlbFB0cil7aWYobW9kZWxQdHIpe3ZhciBfY2FudmFzU2l6ZV9kYXRhPW5ldyBGbG9hdDMyQXJyYXkoMiksX2NhbnZhc1NpemVfbkRhdGFCeXRlcz1fY2FudmFzU2l6ZV9kYXRhLmxlbmd0aCpfY2FudmFzU2l6ZV9kYXRhLkJZVEVTX1BFUl9FTEVNRU5ULF9jYW52YXNTaXplX2RhdGFQdHI9X2NzbS5tYWxsb2MoX2NhbnZhc1NpemVfbkRhdGFCeXRlcyksX2NhbnZhc1NpemVfZGF0YUhlYXA9bmV3IFVpbnQ4QXJyYXkoX2VtLkhFQVBVOC5idWZmZXIsX2NhbnZhc1NpemVfZGF0YVB0cixfY2FudmFzU2l6ZV9uRGF0YUJ5dGVzKTtfY2FudmFzU2l6ZV9kYXRhSGVhcC5zZXQobmV3IFVpbnQ4QXJyYXkoX2NhbnZhc1NpemVfZGF0YS5idWZmZXIpKTt2YXIgX2NhbnZhc09yaWdpbl9kYXRhPW5ldyBGbG9hdDMyQXJyYXkoMiksX2NhbnZhc09yaWdpbl9uRGF0YUJ5dGVzPV9jYW52YXNPcmlnaW5fZGF0YS5sZW5ndGgqX2NhbnZhc09yaWdpbl9kYXRhLkJZVEVTX1BFUl9FTEVNRU5ULF9jYW52YXNPcmlnaW5fZGF0YVB0cj1fY3NtLm1hbGxvYyhfY2FudmFzT3JpZ2luX25EYXRhQnl0ZXMpLF9jYW52YXNPcmlnaW5fZGF0YUhlYXA9bmV3IFVpbnQ4QXJyYXkoX2VtLkhFQVBVOC5idWZmZXIsX2NhbnZhc09yaWdpbl9kYXRhUHRyLF9jYW52YXNPcmlnaW5fbkRhdGFCeXRlcyk7X2NhbnZhc09yaWdpbl9kYXRhSGVhcC5zZXQobmV3IFVpbnQ4QXJyYXkoX2NhbnZhc09yaWdpbl9kYXRhLmJ1ZmZlcikpO3ZhciBfY2FudmFzUFBVX2RhdGE9bmV3IEZsb2F0MzJBcnJheSgxKSxfY2FudmFzUFBVX25EYXRhQnl0ZXM9X2NhbnZhc1BQVV9kYXRhLmxlbmd0aCpfY2FudmFzUFBVX2RhdGEuQllURVNfUEVSX0VMRU1FTlQsX2NhbnZhc1BQVV9kYXRhUHRyPV9jc20ubWFsbG9jKF9jYW52YXNQUFVfbkRhdGFCeXRlcyksX2NhbnZhc1BQVV9kYXRhSGVhcD1uZXcgVWludDhBcnJheShfZW0uSEVBUFU4LmJ1ZmZlcixfY2FudmFzUFBVX2RhdGFQdHIsX2NhbnZhc1BQVV9uRGF0YUJ5dGVzKTtfY2FudmFzUFBVX2RhdGFIZWFwLnNldChuZXcgVWludDhBcnJheShfY2FudmFzUFBVX2RhdGEuYnVmZmVyKSksX2NzbS5yZWFkQ2FudmFzSW5mbyhtb2RlbFB0cixfY2FudmFzU2l6ZV9kYXRhSGVhcC5ieXRlT2Zmc2V0LF9jYW52YXNPcmlnaW5fZGF0YUhlYXAuYnl0ZU9mZnNldCxfY2FudmFzUFBVX2RhdGFIZWFwLmJ5dGVPZmZzZXQpLF9jYW52YXNTaXplX2RhdGE9bmV3IEZsb2F0MzJBcnJheShfY2FudmFzU2l6ZV9kYXRhSGVhcC5idWZmZXIsX2NhbnZhc1NpemVfZGF0YUhlYXAuYnl0ZU9mZnNldCxfY2FudmFzU2l6ZV9kYXRhSGVhcC5sZW5ndGgpLF9jYW52YXNPcmlnaW5fZGF0YT1uZXcgRmxvYXQzMkFycmF5KF9jYW52YXNPcmlnaW5fZGF0YUhlYXAuYnVmZmVyLF9jYW52YXNPcmlnaW5fZGF0YUhlYXAuYnl0ZU9mZnNldCxfY2FudmFzT3JpZ2luX2RhdGFIZWFwLmxlbmd0aCksX2NhbnZhc1BQVV9kYXRhPW5ldyBGbG9hdDMyQXJyYXkoX2NhbnZhc1BQVV9kYXRhSGVhcC5idWZmZXIsX2NhbnZhc1BQVV9kYXRhSGVhcC5ieXRlT2Zmc2V0LF9jYW52YXNQUFVfZGF0YUhlYXAubGVuZ3RoKSx0aGlzLkNhbnZhc1dpZHRoPV9jYW52YXNTaXplX2RhdGFbMF0sdGhpcy5DYW52YXNIZWlnaHQ9X2NhbnZhc1NpemVfZGF0YVsxXSx0aGlzLkNhbnZhc09yaWdpblg9X2NhbnZhc09yaWdpbl9kYXRhWzBdLHRoaXMuQ2FudmFzT3JpZ2luWT1fY2FudmFzT3JpZ2luX2RhdGFbMV0sdGhpcy5QaXhlbHNQZXJVbml0PV9jYW52YXNQUFVfZGF0YVswXSxfY3NtLmZyZWUoX2NhbnZhc1NpemVfZGF0YUhlYXAuYnl0ZU9mZnNldCksX2NzbS5mcmVlKF9jYW52YXNPcmlnaW5fZGF0YUhlYXAuYnl0ZU9mZnNldCksX2NzbS5mcmVlKF9jYW52YXNQUFVfZGF0YUhlYXAuYnl0ZU9mZnNldCl9fTtMaXZlMkRDdWJpc21Db3JlLkNhbnZhc0luZm89Q2FudmFzSW5mbzt2YXIgUGFyYW1ldGVycz1mdW5jdGlvbihtb2RlbFB0cil7dmFyIGxlbmd0aD0wO3RoaXMuY291bnQ9X2NzbS5nZXRQYXJhbWV0ZXJDb3VudChtb2RlbFB0ciksbGVuZ3RoPV9jc20uZ2V0UGFyYW1ldGVyQ291bnQobW9kZWxQdHIpLHRoaXMuaWRzPW5ldyBBcnJheShsZW5ndGgpO2Zvcih2YXIgX2lkcz1uZXcgVWludDMyQXJyYXkoX2VtLkhFQVBVMzIuYnVmZmVyLF9jc20uZ2V0UGFyYW1ldGVySWRzKG1vZGVsUHRyKSxsZW5ndGgpLGk9MDtpPF9pZHMubGVuZ3RoO2krKyl0aGlzLmlkc1tpXT1fZW0uVVRGOFRvU3RyaW5nKF9pZHNbaV0pO2xlbmd0aD1fY3NtLmdldFBhcmFtZXRlckNvdW50KG1vZGVsUHRyKSx0aGlzLm1pbmltdW1WYWx1ZXM9bmV3IEZsb2F0MzJBcnJheShfZW0uSEVBUEYzMi5idWZmZXIsX2NzbS5nZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWVzKG1vZGVsUHRyKSxsZW5ndGgpLGxlbmd0aD1fY3NtLmdldFBhcmFtZXRlckNvdW50KG1vZGVsUHRyKSx0aGlzLm1heGltdW1WYWx1ZXM9bmV3IEZsb2F0MzJBcnJheShfZW0uSEVBUEYzMi5idWZmZXIsX2NzbS5nZXRQYXJhbWV0ZXJNYXhpbXVtVmFsdWVzKG1vZGVsUHRyKSxsZW5ndGgpLGxlbmd0aD1fY3NtLmdldFBhcmFtZXRlckNvdW50KG1vZGVsUHRyKSx0aGlzLmRlZmF1bHRWYWx1ZXM9bmV3IEZsb2F0MzJBcnJheShfZW0uSEVBUEYzMi5idWZmZXIsX2NzbS5nZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWVzKG1vZGVsUHRyKSxsZW5ndGgpLGxlbmd0aD1fY3NtLmdldFBhcmFtZXRlckNvdW50KG1vZGVsUHRyKSx0aGlzLnZhbHVlcz1uZXcgRmxvYXQzMkFycmF5KF9lbS5IRUFQRjMyLmJ1ZmZlcixfY3NtLmdldFBhcmFtZXRlclZhbHVlcyhtb2RlbFB0ciksbGVuZ3RoKX07TGl2ZTJEQ3ViaXNtQ29yZS5QYXJhbWV0ZXJzPVBhcmFtZXRlcnM7dmFyIFBhcnRzPWZ1bmN0aW9uKG1vZGVsUHRyKXt2YXIgbGVuZ3RoPTA7dGhpcy5jb3VudD1fY3NtLmdldFBhcnRDb3VudChtb2RlbFB0ciksbGVuZ3RoPV9jc20uZ2V0UGFydENvdW50KG1vZGVsUHRyKSx0aGlzLmlkcz1uZXcgQXJyYXkobGVuZ3RoKTtmb3IodmFyIF9pZHM9bmV3IFVpbnQzMkFycmF5KF9lbS5IRUFQVTMyLmJ1ZmZlcixfY3NtLmdldFBhcnRJZHMobW9kZWxQdHIpLGxlbmd0aCksaT0wO2k8X2lkcy5sZW5ndGg7aSsrKXRoaXMuaWRzW2ldPV9lbS5VVEY4VG9TdHJpbmcoX2lkc1tpXSk7bGVuZ3RoPV9jc20uZ2V0UGFydENvdW50KG1vZGVsUHRyKSx0aGlzLm9wYWNpdGllcz1uZXcgRmxvYXQzMkFycmF5KF9lbS5IRUFQRjMyLmJ1ZmZlcixfY3NtLmdldFBhcnRPcGFjaXRpZXMobW9kZWxQdHIpLGxlbmd0aCksbGVuZ3RoPV9jc20uZ2V0UGFydENvdW50KG1vZGVsUHRyKSx0aGlzLnBhcmVudEluZGljZXM9bmV3IEludDMyQXJyYXkoX2VtLkhFQVAzMi5idWZmZXIsX2NzbS5nZXRQYXJ0UGFyZW50UGFydEluZGljZXMobW9kZWxQdHIpLGxlbmd0aCl9O0xpdmUyREN1YmlzbUNvcmUuUGFydHM9UGFydHM7dmFyIERyYXdhYmxlcz1mdW5jdGlvbigpe2Z1bmN0aW9uIERyYXdhYmxlcyhtb2RlbFB0cil7dGhpcy5fbW9kZWxQdHI9bW9kZWxQdHI7dmFyIGxlbmd0aD0wLGxlbmd0aDI9bnVsbDt0aGlzLmNvdW50PV9jc20uZ2V0RHJhd2FibGVDb3VudChtb2RlbFB0ciksbGVuZ3RoPV9jc20uZ2V0RHJhd2FibGVDb3VudChtb2RlbFB0ciksdGhpcy5pZHM9bmV3IEFycmF5KGxlbmd0aCk7Zm9yKHZhciBfaWRzPW5ldyBVaW50MzJBcnJheShfZW0uSEVBUFUzMi5idWZmZXIsX2NzbS5nZXREcmF3YWJsZUlkcyhtb2RlbFB0ciksbGVuZ3RoKSxpPTA7aTxfaWRzLmxlbmd0aDtpKyspdGhpcy5pZHNbaV09X2VtLlVURjhUb1N0cmluZyhfaWRzW2ldKTtsZW5ndGg9X2NzbS5nZXREcmF3YWJsZUNvdW50KG1vZGVsUHRyKSx0aGlzLmNvbnN0YW50RmxhZ3M9bmV3IFVpbnQ4QXJyYXkoX2VtLkhFQVBVOC5idWZmZXIsX2NzbS5nZXREcmF3YWJsZUNvbnN0YW50RmxhZ3MobW9kZWxQdHIpLGxlbmd0aCksbGVuZ3RoPV9jc20uZ2V0RHJhd2FibGVDb3VudChtb2RlbFB0ciksdGhpcy5keW5hbWljRmxhZ3M9bmV3IFVpbnQ4QXJyYXkoX2VtLkhFQVBVOC5idWZmZXIsX2NzbS5nZXREcmF3YWJsZUR5bmFtaWNGbGFncyhtb2RlbFB0ciksbGVuZ3RoKSxsZW5ndGg9X2NzbS5nZXREcmF3YWJsZUNvdW50KG1vZGVsUHRyKSx0aGlzLnRleHR1cmVJbmRpY2VzPW5ldyBJbnQzMkFycmF5KF9lbS5IRUFQMzIuYnVmZmVyLF9jc20uZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhtb2RlbFB0ciksbGVuZ3RoKSxsZW5ndGg9X2NzbS5nZXREcmF3YWJsZUNvdW50KG1vZGVsUHRyKSx0aGlzLmRyYXdPcmRlcnM9bmV3IEludDMyQXJyYXkoX2VtLkhFQVAzMi5idWZmZXIsX2NzbS5nZXREcmF3YWJsZURyYXdPcmRlcnMobW9kZWxQdHIpLGxlbmd0aCksbGVuZ3RoPV9jc20uZ2V0RHJhd2FibGVDb3VudChtb2RlbFB0ciksdGhpcy5yZW5kZXJPcmRlcnM9bmV3IEludDMyQXJyYXkoX2VtLkhFQVAzMi5idWZmZXIsX2NzbS5nZXREcmF3YWJsZVJlbmRlck9yZGVycyhtb2RlbFB0ciksbGVuZ3RoKSxsZW5ndGg9X2NzbS5nZXREcmF3YWJsZUNvdW50KG1vZGVsUHRyKSx0aGlzLm9wYWNpdGllcz1uZXcgRmxvYXQzMkFycmF5KF9lbS5IRUFQRjMyLmJ1ZmZlcixfY3NtLmdldERyYXdhYmxlT3BhY2l0aWVzKG1vZGVsUHRyKSxsZW5ndGgpLGxlbmd0aD1fY3NtLmdldERyYXdhYmxlQ291bnQobW9kZWxQdHIpLHRoaXMubWFza0NvdW50cz1uZXcgSW50MzJBcnJheShfZW0uSEVBUDMyLmJ1ZmZlcixfY3NtLmdldERyYXdhYmxlTWFza0NvdW50cyhtb2RlbFB0ciksbGVuZ3RoKSxsZW5ndGg9X2NzbS5nZXREcmF3YWJsZUNvdW50KG1vZGVsUHRyKSx0aGlzLnZlcnRleENvdW50cz1uZXcgSW50MzJBcnJheShfZW0uSEVBUDMyLmJ1ZmZlcixfY3NtLmdldERyYXdhYmxlVmVydGV4Q291bnRzKG1vZGVsUHRyKSxsZW5ndGgpLGxlbmd0aD1fY3NtLmdldERyYXdhYmxlQ291bnQobW9kZWxQdHIpLHRoaXMuaW5kZXhDb3VudHM9bmV3IEludDMyQXJyYXkoX2VtLkhFQVAzMi5idWZmZXIsX2NzbS5nZXREcmF3YWJsZUluZGV4Q291bnRzKG1vZGVsUHRyKSxsZW5ndGgpLGxlbmd0aD1fY3NtLmdldERyYXdhYmxlQ291bnQobW9kZWxQdHIpLGxlbmd0aDI9bmV3IEludDMyQXJyYXkoX2VtLkhFQVAzMi5idWZmZXIsX2NzbS5nZXREcmF3YWJsZU1hc2tDb3VudHMobW9kZWxQdHIpLGxlbmd0aCksdGhpcy5tYXNrcz1uZXcgQXJyYXkobGVuZ3RoKTt2YXIgX21hc2tzPW5ldyBVaW50MzJBcnJheShfZW0uSEVBUFUzMi5idWZmZXIsX2NzbS5nZXREcmF3YWJsZU1hc2tzKG1vZGVsUHRyKSxsZW5ndGgpO2ZvcihpPTA7aTxfbWFza3MubGVuZ3RoO2krKyl0aGlzLm1hc2tzW2ldPW5ldyBJbnQzMkFycmF5KF9lbS5IRUFQMzIuYnVmZmVyLF9tYXNrc1tpXSxsZW5ndGgyW2ldKTtsZW5ndGg9X2NzbS5nZXREcmF3YWJsZUNvdW50KG1vZGVsUHRyKSxsZW5ndGgyPW5ldyBJbnQzMkFycmF5KF9lbS5IRUFQMzIuYnVmZmVyLF9jc20uZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudHMobW9kZWxQdHIpLGxlbmd0aCksdGhpcy52ZXJ0ZXhQb3NpdGlvbnM9bmV3IEFycmF5KGxlbmd0aCk7dmFyIF92ZXJ0ZXhQb3NpdGlvbnM9bmV3IFVpbnQzMkFycmF5KF9lbS5IRUFQVTMyLmJ1ZmZlcixfY3NtLmdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zKG1vZGVsUHRyKSxsZW5ndGgpO2ZvcihpPTA7aTxfdmVydGV4UG9zaXRpb25zLmxlbmd0aDtpKyspdGhpcy52ZXJ0ZXhQb3NpdGlvbnNbaV09bmV3IEZsb2F0MzJBcnJheShfZW0uSEVBUEYzMi5idWZmZXIsX3ZlcnRleFBvc2l0aW9uc1tpXSwyKmxlbmd0aDJbaV0pO2xlbmd0aD1fY3NtLmdldERyYXdhYmxlQ291bnQobW9kZWxQdHIpLGxlbmd0aDI9bmV3IEludDMyQXJyYXkoX2VtLkhFQVAzMi5idWZmZXIsX2NzbS5nZXREcmF3YWJsZVZlcnRleENvdW50cyhtb2RlbFB0ciksbGVuZ3RoKSx0aGlzLnZlcnRleFV2cz1uZXcgQXJyYXkobGVuZ3RoKTt2YXIgX3ZlcnRleFV2cz1uZXcgVWludDMyQXJyYXkoX2VtLkhFQVBVMzIuYnVmZmVyLF9jc20uZ2V0RHJhd2FibGVWZXJ0ZXhVdnMobW9kZWxQdHIpLGxlbmd0aCk7Zm9yKGk9MDtpPF92ZXJ0ZXhVdnMubGVuZ3RoO2krKyl0aGlzLnZlcnRleFV2c1tpXT1uZXcgRmxvYXQzMkFycmF5KF9lbS5IRUFQRjMyLmJ1ZmZlcixfdmVydGV4VXZzW2ldLDIqbGVuZ3RoMltpXSk7bGVuZ3RoPV9jc20uZ2V0RHJhd2FibGVDb3VudChtb2RlbFB0ciksbGVuZ3RoMj1uZXcgSW50MzJBcnJheShfZW0uSEVBUDMyLmJ1ZmZlcixfY3NtLmdldERyYXdhYmxlSW5kZXhDb3VudHMobW9kZWxQdHIpLGxlbmd0aCksdGhpcy5pbmRpY2VzPW5ldyBBcnJheShsZW5ndGgpO3ZhciBfaW5kaWNlcz1uZXcgVWludDMyQXJyYXkoX2VtLkhFQVBVMzIuYnVmZmVyLF9jc20uZ2V0RHJhd2FibGVJbmRpY2VzKG1vZGVsUHRyKSxsZW5ndGgpO2ZvcihpPTA7aTxfaW5kaWNlcy5sZW5ndGg7aSsrKXRoaXMuaW5kaWNlc1tpXT1uZXcgVWludDE2QXJyYXkoX2VtLkhFQVBVMTYuYnVmZmVyLF9pbmRpY2VzW2ldLGxlbmd0aDJbaV0pfXJldHVybiBEcmF3YWJsZXMucHJvdG90eXBlLnJlc2V0RHluYW1pY0ZsYWdzPWZ1bmN0aW9uKCl7X2NzbS5yZXNldERyYXdhYmxlRHluYW1pY0ZsYWdzKHRoaXMuX21vZGVsUHRyKX0sRHJhd2FibGVzfSgpO0xpdmUyREN1YmlzbUNvcmUuRHJhd2FibGVzPURyYXdhYmxlczt2YXIgVXRpbHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBVdGlscygpe31yZXR1cm4gVXRpbHMuaGFzQmxlbmRBZGRpdGl2ZUJpdD1mdW5jdGlvbihiaXRmaWVsZCl7cmV0dXJuIDE9PSgxJmJpdGZpZWxkKX0sVXRpbHMuaGFzQmxlbmRNdWx0aXBsaWNhdGl2ZUJpdD1mdW5jdGlvbihiaXRmaWVsZCl7cmV0dXJuIDI9PSgyJmJpdGZpZWxkKX0sVXRpbHMuaGFzSXNEb3VibGVTaWRlZEJpdD1mdW5jdGlvbihiaXRmaWVsZCl7cmV0dXJuIDQ9PSg0JmJpdGZpZWxkKX0sVXRpbHMuaGFzSXNJbnZlcnRlZE1hc2tCaXQ9ZnVuY3Rpb24oYml0ZmllbGQpe3JldHVybiA4PT0oOCZiaXRmaWVsZCl9LFV0aWxzLmhhc0lzVmlzaWJsZUJpdD1mdW5jdGlvbihiaXRmaWVsZCl7cmV0dXJuIDE9PSgxJmJpdGZpZWxkKX0sVXRpbHMuaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdD1mdW5jdGlvbihiaXRmaWVsZCl7cmV0dXJuIDI9PSgyJmJpdGZpZWxkKX0sVXRpbHMuaGFzT3BhY2l0eURpZENoYW5nZUJpdD1mdW5jdGlvbihiaXRmaWVsZCl7cmV0dXJuIDQ9PSg0JmJpdGZpZWxkKX0sVXRpbHMuaGFzRHJhd09yZGVyRGlkQ2hhbmdlQml0PWZ1bmN0aW9uKGJpdGZpZWxkKXtyZXR1cm4gOD09KDgmYml0ZmllbGQpfSxVdGlscy5oYXNSZW5kZXJPcmRlckRpZENoYW5nZUJpdD1mdW5jdGlvbihiaXRmaWVsZCl7cmV0dXJuIDE2PT0oMTYmYml0ZmllbGQpfSxVdGlscy5oYXNWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2VCaXQ9ZnVuY3Rpb24oYml0ZmllbGQpe3JldHVybiAzMj09KDMyJmJpdGZpZWxkKX0sVXRpbHN9KCk7TGl2ZTJEQ3ViaXNtQ29yZS5VdGlscz1VdGlsczt2YXIgX3NjcmlwdERpcixfZW1fbW9kdWxlPShfc2NyaXB0RGlyPVxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQ/ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM6dm9pZCAwLFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgX19maWxlbmFtZSYmKF9zY3JpcHREaXI9X3NjcmlwdERpcnx8X19maWxlbmFtZSksZnVuY3Rpb24oX2VtX21vZHVsZSl7dmFyIGI7X2VtX21vZHVsZT1fZW1fbW9kdWxlfHx7fSxiPWJ8fCh2b2lkIDAhPT1fZW1fbW9kdWxlP19lbV9tb2R1bGU6e30pO3ZhciBuLGw9e307Zm9yKG4gaW4gYiliLmhhc093blByb3BlcnR5KG4pJiYobFtuXT1iW25dKTt2YXIgdCxwLHEscj0hMTtwPVxcXCJvYmplY3RcXFwiPT10eXBlb2Ygd2luZG93LHE9XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGltcG9ydFNjcmlwdHMscj1cXFwib2JqZWN0XFxcIj09dHlwZW9mIHByb2Nlc3MmJlxcXCJvYmplY3RcXFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXFxcInN0cmluZ1xcXCI9PXR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUmJiFwJiYhcSx0PSFwJiYhciYmIXE7dmFyIHYsdyx4LHksdT1cXFwiXFxcIjtyPyh1PV9fZGlybmFtZStcXFwiL1xcXCIsdj1mdW5jdGlvbihhLGMpe3ZhciBkPXooYSk7cmV0dXJuIGQ/Yz9kOmQudG9TdHJpbmcoKTooeD14fHxyZXF1aXJlKFxcXCJmc1xcXCIpLGE9KHk9eXx8cmVxdWlyZShcXFwicGF0aFxcXCIpKS5ub3JtYWxpemUoYSkseC5yZWFkRmlsZVN5bmMoYSxjP251bGw6XFxcInV0ZjhcXFwiKSl9LHc9ZnVuY3Rpb24oYSl7cmV0dXJuKGE9dihhLCEwKSkuYnVmZmVyfHwoYT1uZXcgVWludDhBcnJheShhKSksYXNzZXJ0KGEuYnVmZmVyKSxhfSwxPHByb2Nlc3MuYXJndi5sZW5ndGgmJnByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcXFxcXC9nLFxcXCIvXFxcIikscHJvY2Vzcy5hcmd2LnNsaWNlKDIpLHByb2Nlc3Mub24oXFxcInVuY2F1Z2h0RXhjZXB0aW9uXFxcIixmdW5jdGlvbihhKXt0aHJvdyBhfSkscHJvY2Vzcy5vbihcXFwidW5oYW5kbGVkUmVqZWN0aW9uXFxcIixCKSxiLmluc3BlY3Q9ZnVuY3Rpb24oKXtyZXR1cm5cXFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cXFwifSk6dD8oXFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiByZWFkJiYodj1mdW5jdGlvbihhKXt2YXIgYz16KGEpO3JldHVybiBjP0MoYyk6cmVhZChhKX0pLHc9ZnVuY3Rpb24oYSl7dmFyIGM7cmV0dXJuKGM9eihhKSk/YzpcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgcmVhZGJ1ZmZlcj9uZXcgVWludDhBcnJheShyZWFkYnVmZmVyKGEpKTooYXNzZXJ0KFxcXCJvYmplY3RcXFwiPT10eXBlb2YoYz1yZWFkKGEsXFxcImJpbmFyeVxcXCIpKSksYyl9LFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgcHJpbnQmJihcXFwidW5kZWZpbmVkXFxcIj09dHlwZW9mIGNvbnNvbGUmJihjb25zb2xlPXt9KSxjb25zb2xlLmxvZz1wcmludCxjb25zb2xlLndhcm49Y29uc29sZS5lcnJvcj1cXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIHByaW50RXJyP3ByaW50RXJyOnByaW50KSk6KHB8fHEpJiYocT91PXNlbGYubG9jYXRpb24uaHJlZjpkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYodT1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksX3NjcmlwdERpciYmKHU9X3NjcmlwdERpciksdT0wIT09dS5pbmRleE9mKFxcXCJibG9iOlxcXCIpP3Uuc3Vic3RyKDAsdS5sYXN0SW5kZXhPZihcXFwiL1xcXCIpKzEpOlxcXCJcXFwiLHY9ZnVuY3Rpb24oYSl7dHJ5e3ZhciBjPW5ldyBYTUxIdHRwUmVxdWVzdDtyZXR1cm4gYy5vcGVuKFxcXCJHRVRcXFwiLGEsITEpLGMuc2VuZChudWxsKSxjLnJlc3BvbnNlVGV4dH1jYXRjaChkKXtpZihhPXooYSkpcmV0dXJuIEMoYSk7dGhyb3cgZH19LHEmJih3PWZ1bmN0aW9uKGEpe3RyeXt2YXIgYz1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuIGMub3BlbihcXFwiR0VUXFxcIixhLCExKSxjLnJlc3BvbnNlVHlwZT1cXFwiYXJyYXlidWZmZXJcXFwiLGMuc2VuZChudWxsKSxuZXcgVWludDhBcnJheShjLnJlc3BvbnNlKX1jYXRjaChkKXtpZihhPXooYSkpcmV0dXJuIGE7dGhyb3cgZH19KSk7dmFyIEYsRD1iLnByaW50fHxjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLEU9Yi5wcmludEVycnx8Y29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7Zm9yKG4gaW4gbClsLmhhc093blByb3BlcnR5KG4pJiYoYltuXT1sW25dKTtmdW5jdGlvbiBkYSgpe3JldHVybntleHBvcnRzOmZ1bmN0aW9uKGFzbUxpYnJhcnlBcmcsd2FzbU1lbW9yeSx3YXNtVGFibGUpe3ZhciBzY3JhdGNoQnVmZmVyPW5ldyBBcnJheUJ1ZmZlcig4KSxiPW5ldyBJbnQzMkFycmF5KHNjcmF0Y2hCdWZmZXIpLGM9bmV3IEZsb2F0MzJBcnJheShzY3JhdGNoQnVmZmVyKSxkPW5ldyBGbG9hdDY0QXJyYXkoc2NyYXRjaEJ1ZmZlcik7ZnVuY3Rpb24gZShpbmRleCl7cmV0dXJuIGJbaW5kZXhdfWZ1bmN0aW9uIGYoaW5kZXgsdmFsdWUpe2JbaW5kZXhdPXZhbHVlfWZ1bmN0aW9uIGcoKXtyZXR1cm4gZFswXX1mdW5jdGlvbiBoKHZhbHVlKXtkWzBdPXZhbHVlfWZ1bmN0aW9uIGoodmFsdWUpe2NbMF09dmFsdWV9ZnVuY3Rpb24gaygpe3JldHVybiBjWzBdfXZhciBtZW0sVSxnbG9iYWwsZW52LGJ1ZmZlcixtLG4sbyxwLHEscixzLHQsdSx2LHcseCx5LHosQSxDLEgsSSxKLEssTCxNLFQ9KG1lbT13YXNtTWVtb3J5LmJ1ZmZlcixVPW5ldyBVaW50OEFycmF5KG1lbSksZnVuY3Rpb24ob2Zmc2V0LHMpe3ZhciBWLFc7aWYoXFxcInVuZGVmaW5lZFxcXCI9PXR5cGVvZiBCdWZmZXIpZm9yKFY9YXRvYihzKSxXPTA7VzxWLmxlbmd0aDtXKyspVVtvZmZzZXQrV109Vi5jaGFyQ29kZUF0KFcpO2Vsc2UgZm9yKFY9QnVmZmVyLmZyb20ocyxcXFwiYmFzZTY0XFxcIiksVz0wO1c8Vi5sZW5ndGg7VysrKVVbb2Zmc2V0K1ddPVZbV119KTtyZXR1cm4gVCgxMDI0LFxcXCJDZ0JiUTFOTlhTQmJSVjFKYm1sMGFXRnNhWHBsUkdWbWIzSnRaWEp6S0NrNklGVnVhMjV2ZDI0Z1JHVm1iM0p0WlhJZ1ZIbHdaUzRLQUUxUFF6TUFXME5UVFYwZ1cwVmRKWE02SUNWekNnQmJRMU5OWFNCYlJWMVhZWEp3UkdWbWIzSnRaWEk2T2xSeVlXNXpabTl5YlZSaGNtZGxkQ2dwSUdWeWNtOXlMaUJiSldSZElIQXdNVDBvSlM0MFppQXNJQ1V1TkdZcENnQWxjd29BSUNBQVcwTlRUVjBnVzBWZFkzTnRVbVYyYVhabFRXOWpTVzVRYkdGalpTQnBjeUJtWVdsc1pXUXVJRU52Y25KMWNIUmxaQ0FnYlc5ak15Qm1hV3hsTGdvQUltRmtaSEpsYzNNaUlHbHpJRzUxYkd3dUFGdERVMDFkSUZ0WFhWSnZkR0YwYVc5dVJHVm1iM0p0WlhJNklFNXZkQ0JtYjNWdVpDQjBjbUZ1YzJadmNtMWxaQ0JFYVhKbFkzUnBiMjR1Q2dBbE1ESllJQUJiUTFOTlhTQmJSVjFqYzIxU1pYWnBkbVZOYjJOSmJsQnNZV05sSUdseklHWmhhV3hsWkM0Z1ZHaGxJRU52Y21VZ2RXNXpkWEJ3YjNKMElHeGhkR1Z5SUhSb1lXNGdiVzlqTXlCMlpYSTZXeVZrWFM0Z1ZHaHBjeUJ0YjJNeklIWmxjaUJwY3lCYkpXUmRMZ29BSW1Ga1pISmxjM01pSUdGc2FXZHViV1Z1ZENCcGN5QnBiblpoYkdsa0xnQmJRMU5OWFNCYlJWMVZjR1JoZEdWRVpXWnZjbTFsY2tocFpYSmhjbU5vZVNncE9pQlZibXR1YjNkdUlFUmxabTl5YldWeUlGUjVjR1V1Q2dCYlExTk5YU0JiUlYxamMyMUhaWFJOYjJOV1pYSnphVzl1SUdseklHWmhhV3hsWkM0Z1EyOXljblZ3ZEdWa0lHMXZZek1nWm1sc1pTNEtBQ0p6YVhwbElpQnBjeUJwYm5aaGJHbGtMZ0JNYVhabE1rUWdRM1ZpYVhOdElGTkVTeUJEYjNKbElGWmxjbk5wYjI0Z0pXUXVKV1F1SldRQUltMXZaR1ZzSWlCcGN5QnBiblpoYkdsa0xnQmpjMjFIWlhSTmIyTldaWEp6YVc5dUFHTnpiVkpsZG1sMlpVMXZZMGx1VUd4aFkyVUFZM050VW1WaFpFTmhiblpoYzBsdVptOEFJbTkxZEZOcGVtVkpibEJwZUdWc2N5SWdhWE1nYm5Wc2JDNEFJbTkxZEU5eWFXZHBia2x1VUdsNFpXeHpJaUJwY3lCdWRXeHNMZ0FpYjNWMFVHbDRaV3h6VUdWeVZXNXBkQ0lnYVhNZ2JuVnNiQzRBWTNOdFIyVjBVMmw2Wlc5bVRXOWtaV3dBSW0xdll5SWdhWE1nYVc1MllXeHBaQzRBWTNOdFNXNXBkR2xoYkdsNlpVMXZaR1ZzU1c1UWJHRmpaUUFpYzJsNlpTSWdhWE1nYVc1MllXeHBaQUJqYzIxVmNHUmhkR1ZOYjJSbGJBQmpjMjFIWlhSUVlYSmhiV1YwWlhKRGIzVnVkQUJqYzIxSFpYUlFZWEpoYldWMFpYSkpaSE1BWTNOdFIyVjBVR0Z5WVcxbGRHVnlUV2x1YVcxMWJWWmhiSFZsY3dCamMyMUhaWFJRWVhKaGJXVjBaWEpOWVhocGJYVnRWbUZzZFdWekFHTnpiVWRsZEZCaGNtRnRaWFJsY2tSbFptRjFiSFJXWVd4MVpYTUFZM050UjJWMFVHRnlZVzFsZEdWeVZtRnNkV1Z6QUdOemJVZGxkRkJoY25SRGIzVnVkQUJqYzIxSFpYUlFZWEowU1dSekFHTnpiVWRsZEZCaGNuUlBjR0ZqYVhScFpYTUFZM050UjJWMFVHRnlkRkJoY21WdWRGQmhjblJKYm1ScFkyVnpBR056YlVkbGRFUnlZWGRoWW14bFEyOTFiblFBWTNOdFIyVjBSSEpoZDJGaWJHVkpaSE1BWTNOdFIyVjBSSEpoZDJGaWJHVkRiMjV6ZEdGdWRFWnNZV2R6QUdOemJVZGxkRVJ5WVhkaFlteGxSSGx1WVcxcFkwWnNZV2R6QUdOemJVZGxkRVJ5WVhkaFlteGxWR1Y0ZEhWeVpVbHVaR2xqWlhNQVkzTnRSMlYwUkhKaGQyRmliR1ZFY21GM1QzSmtaWEp6QUdOemJVZGxkRVJ5WVhkaFlteGxVbVZ1WkdWeVQzSmtaWEp6QUdOemJVZGxkRVJ5WVhkaFlteGxUM0JoWTJsMGFXVnpBR056YlVkbGRFUnlZWGRoWW14bFRXRnphME52ZFc1MGN3QmpjMjFIWlhSRWNtRjNZV0pzWlUxaGMydHpBR056YlVkbGRFUnlZWGRoWW14bFZtVnlkR1Y0UTI5MWJuUnpBR056YlVkbGRFUnlZWGRoWW14bFZtVnlkR1Y0VUc5emFYUnBiMjV6QUdOemJVZGxkRVJ5WVhkaFlteGxWbVZ5ZEdWNFZYWnpBR056YlVkbGRFUnlZWGRoWW14bFNXNWtaWGhEYjNWdWRITUFZM050UjJWMFJISmhkMkZpYkdWSmJtUnBZMlZ6QUdOemJWSmxjMlYwUkhKaGQyRmliR1ZFZVc1aGJXbGpSbXhoWjNNPVxcXCIpLFQoMjU3MixcXFwiQ3c9PVxcXCIpLFQoMjYxMSxcXFwiLy8vLy8vOD1cXFwiKSxUKDI2ODAsXFxcIkdCZ0FBQzBySUNBZ01GZ3dlQUFvYm5Wc2JDa0FBQUFBRVFBS0FCRVJFUUFBQUFBRkFBQUFBQUFBQ1FBQUFBQUxcXFwiKSxUKDI3MzYsXFxcIkVRQVBDaEVSRVFNS0J3QUJFd2tMQ3dBQUNRWUxBQUFMQUFZUkFBQUFFUkVSXFxcIiksVCgyNzg1LFxcXCJDdz09XFxcIiksVCgyNzk0LFxcXCJFUUFLQ2hFUkVRQUtBQUFDQUFrTEFBQUFDUUFMQUFBTFxcXCIpLFQoMjg0MyxcXFwiREE9PVxcXCIpLFQoMjg1NSxcXFwiREFBQUFBQU1BQUFBQUFrTUFBQUFBQUFNQUFBTVxcXCIpLFQoMjkwMSxcXFwiRGc9PVxcXCIpLFQoMjkxMyxcXFwiRFFBQUFBUU5BQUFBQUFrT0FBQUFBQUFPQUFBT1xcXCIpLFQoMjk1OSxcXFwiRUE9PVxcXCIpLFQoMjk3MSxcXFwiRHdBQUFBQVBBQUFBQUFrUUFBQUFBQUFRQUFBUUFBQVNBQUFBRWhJU1xcXCIpLFQoMzAyNixcXFwiRWdBQUFCSVNFZ0FBQUFBQUFBaz1cXFwiKSxUKDMwNzUsXFxcIkN3PT1cXFwiKSxUKDMwODcsXFxcIkNnQUFBQUFLQUFBQUFBa0xBQUFBQUFBTEFBQUxcXFwiKSxUKDMxMzMsXFxcIkRBPT1cXFwiKSxUKDMxNDUsXFxcIkRBQUFBQUFNQUFBQUFBa01BQUFBQUFBTUFBQU1BQUF3TVRJek5EVTJOemc1UVVKRFJFVkdMVEJZS3pCWUlEQllMVEI0S3pCNElEQjRBR2x1WmdCSlRrWUFibUZ1QUU1QlRnQXVcXFwiKSxUKDMyMzIsXFxcIkF3QUFBQVFBQUFBRUFBQUFCZ0FBQUlQNW9nQkVUbTRBL0NrVkFORlhKd0RkTlBVQVl0dkFBRHlabFFCQmtFTUFZMUgrQUx2ZXF3QzNZY1VBT200a0FOSk5RZ0JKQnVBQUNlb3VBQnlTMFFEckhmNEFLYkVjQU9nK3B3RDFOWUlBUkxzdUFKenBoQUMwSm5BQVFYNWZBTmFST1FCVGd6a0FuUFE1QUl0ZmhBQW8rYjBBK0I4N0FONy9sd0FQbUFVQUVTL3ZBQXBhaXdCdEgyMEF6MzQyQUFuTEp3QkdUN2NBbm1ZL0FDM3FYd0M2SjNVQTVldkhBRDE3OFFEM09RY0FrbEtLQVB0cjZnQWZzVjhBQ0YyTkFEQURWZ0I3L0VZQThLdHJBQ0M4endBMjlKb0E0NmtkQUY1aGtRQUlHK1lBaFpsbEFLQVVYd0NOUUdnQWdOai9BQ2R6VFFBR0JqRUF5bFlWQU1tb2N3Qjc0bUFBYTR6QUFCbkVSd0ROWjhNQUNlamNBRm1ES2dDTGRzUUFwaHlXQUVTdjNRQVpWOUVBcFQ0RkFBVUgvd0F6Zmo4QXdqTG9BSmhQM2dDN2ZUSUFKajNEQUI1cjd3Q2YrRjRBTlI4NkFIL3l5Z0R4aHgwQWZKQWhBR29rZkFEVmJ2b0FNQzEzQUJVN1F3QzFGTVlBd3htZEFLM0V3Z0FzVFVFQURBQmRBSVo5UmdEamNTMEFtOGFhQUROaUFBQzAwbndBdEtlWEFEZFYxUURYUHZZQW94QVlBRTEyL0FCa25Tb0FjTmVyQUdOOCtBQjZzRmNBRnhYbkFNQkpWZ0E3MXRrQXA0UTRBQ1FqeXdEV2luY0FXbFFqQUFBZnVRRHhDaHNBR2M3ZkFKOHgvd0JtSG1vQW1WZGhBS3o3UndCK2Y5Z0FJbVczQURMb2lRRG12MkFBNzhUTkFHdzJDUUJkUDlRQUZ0N1hBRmc3M2dEZW01SUEwaUlvQUNpRzZBRGlXRTBBeHNveUFBampGZ0RnZmNzQUY4QlFBUE1kcHdBWTRGc0FMaE0wQUlNU1lnQ0RTQUVBOVk1YkFLMndmd0FlNmZJQVNFcERBQkJuMHdDcTNkZ0FybDlDQUdwaHpnQUtLS1FBMDVtMEFBYW04Z0JjZDM4QW84S0RBR0U4aUFDS2MzZ0FyNHhhQUcvWHZRQXRwbU1BOUwvTEFJMkI3d0Ftd1djQVZjcEZBTXJaTmdBb3FOSUF3bUdOQUJMSmR3QUVKaFFBRWthYkFNUlp4QURJeFVRQVRiS1JBQUFYOHdEVVE2MEFLVW5sQVAzVkVBQUF2dndBSHBUTUFIRE83Z0FUUHZVQTdQR0FBTFBud3dESCtDZ0Frd1dVQU1GeFBnQXVDYk1BQzBYekFJZ1NuQUNySUhzQUxyV2ZBRWVTd2dCN01pOEFERlZ0QUhLbmtBQnI1eDhBTWN1V0FIa1dTZ0JCZWVJQTlOK0pBT2lVbHdEaTVvUUFtVEdYQUlqdGF3QmZYellBdS8wT0FFaWF0QUJucEd3QWNYSkNBSTFkTWdDZkZiZ0F2T1VKQUkweEpRRDNkRGtBTUFVY0FBME1BUUJMQ0dnQUxPNVlBRWVxa0FCMDV3SUF2ZFlrQVBkOXBnQnVTSElBbnhidkFJNlVwZ0Mwa2ZZQTBWTlJBTThLOGdBZ21ETUE5VXQrQUxKamFBRGRQbDhBUUYwREFJV0pmd0JWVWlrQU4yVEFBRzNZRUFBeVNESUFXMHgxQUU1eDFBQkZWRzRBQ3duQkFDcjFhUUFVWnRVQUp3ZWRBRjBFVUFDME85c0E2bmJGQUlmNUZ3QkphMzBBSFNlNkFKWnBLUURHekt3QXJSUlVBSkRpYWdDSTJZa0FMSEpRQUFTa3ZnQjNCNVFBOHpCd0FBRDhKd0RxY2FnQVpzSkpBR1RnUFFDWDNZTUFveitYQUVPVS9RQU5ob3dBTVVIZUFKSTVuUURkY0l3QUY3Zm5BQWpmT3dBVk55c0FYSUNnQUZxQWt3QVFFWklBRCtqWUFHeUFyd0RiLzBzQU9KQVBBRmtZZGdCaXBSVUFZY3U3QU1lSnVRQVFRTDBBMHZJRUFFbDFKd0RydHZZQTJ5SzdBQW9VcWdDSkppOEFaSU4yQUFrN013QU9sQm9BVVRxcUFCMmp3Z0N2N2E0QVhDWVNBRzNDVFFBdGVwd0F3RmFYQUFNL2d3QUo4UFlBSzBDTUFHMHhtUUE1dEFjQURDQVZBTmpEV3dEMWtzUUF4cTFMQUU3S3BRQ25OODBBNXFrMkFLdVNsQURkUW1nQUdXUGVBSGFNN3dCb2kxSUEvTnMzQUs2aHF3RGZGVEVBQUs2aEFBejcyZ0JrVFdZQTdRVzNBQ2xsTUFCWFZyOEFSLzg2QUdyNXVRQjF2dk1BS0pQZkFLdUFNQUJtalBZQUJNc1ZBUG9pQmdEWjVCMEFQYk9rQUZjYmp3QTJ6UWtBVGtMcEFCTytwQUF6STdVQThLb2FBRTlscUFEU3dhVUFDejhQQUZ0NHpRQWorWFlBZTRzRUFJa1hjZ0RHcGxNQWIyN2lBTy9yQUFDYlNsZ0F4TnEzQUtwbXVnQjJ6ODhBMFFJZEFMSHhMUUNNbWNFQXc2MTNBSVpJMmdEM1hhQUF4b0QwQUt6d0x3RGQ3Sm9BUDF5OEFORGViUUNReHg4QUt0dTJBS01sT2dBQXI1b0FyVk9UQUxaWEJBQXBMYlFBUzRCK0FOb0hwd0IycWc0QWUxbWhBQllTS2dEY3R5MEErdVg5QUluYi9nQ0p2djBBNUhac0FBYXAvQUErZ0hBQWhXNFZBUDJIL3dBb1BnY0FZV2N6QUNvWWhnQk52ZW9BcytldkFJOXRiZ0NWWnprQU1iOWJBSVRYU0FBdzN4WUF4eTFEQUNWaE5RREpjTTRBTU11NEFMOXMvUUNrQUtJQUJXemtBRnJkb0FBaGIwY0FZaExTQUxsY2hBQndZVWtBYTFiZ0FKbFNBUUJRVlRjQUh0VzNBRFB4eEFBVGJsOEFYVERrQUlVdXFRQWRzc01Bb1RJMkFBaTNwQURxc2RRQUZ2Y2hBSTlwNUFBbi8zY0FEQU9BQUkxQUxRQlB6YUFBSUtXWkFMT2kwd0F2WFFvQXRQbENBQkhheXdCOXZ0QUFtOXZCQUtzWHZRREtvb0VBQ0dwY0FDNVZGd0FuQUZVQWZ4VHdBT0VIaGdBVUMyUUFsa0dOQUllKzNnRGEvU29BYXlXMkFIdUpOQUFGOC80QXViK2VBR2hxVHdCS0txZ0FUOFJhQUMzNHZBRFhXcGdBOU1lVkFBMU5qUUFnT3FZQXBGZGZBQlEvc1FDQU9KVUF6Q0FCQUhIZGhnREozcllBdjJEMUFFMWxFUUFCQjJzQWpMQ3NBTExBMEFCUlZVZ0FIdnNPQUpWeXd3Q2pCanNBd0VBMUFBYmNld0RnUmN3QVRpbjZBTmJLeUFEbzgwRUFmR1RlQUp0azJBRFp2akVBcEpmREFIZFkxQUJwNDhVQThOb1RBTG82UEFCR0dFWUFWWFZmQU5LOTlRQnVrc1lBckM1ZEFBNUU3UUFjUGtJQVljU0hBQ245NlFEbjF2TUFJbnpLQUcrUk5RQUk0TVVBLzllTkFHNXE0Z0N3L2NZQWt3akJBSHhkZEFCcnJiSUF6VzZkQUQ1eWV3REdFV29BOTgrcEFDbHozd0MxeWJvQXR3QlJBT0t5RFFCMHVpUUE1WDFnQUhUWWlnQU5GU3dBZ1JnTUFINW1sQUFCS1JZQW4zcDJBUDM5dmdCV1JlOEEyWDQyQU96WkV3Q0x1cmtBeEpmOEFER29Kd0R4YnNNQWxNVTJBTmlvVmdDMHFMVUF6OHdPQUJLSkxRQnZWelFBTEZhSkFKbk80d0RXSUxrQWExNnFBRDRxbkFBUlg4d0EvUXRLQU9IMCt3Q09PMjBBNG9Zc0FPblVoQUQ4dEtrQTcrN1JBQzQxeVFBdk9XRUFPQ0ZFQUJ2WnlBQ0IvQW9BKzBwcUFDOGMyQUJUdElRQVRwbU1BRlFpekFBcVZkd0F3TWJXQUFzWmxnQWFjTGdBYVpWa0FDWmFZQUEvVXU0QWZ4RVBBUFMxRVFEOHkvVUFOTHd0QURTODdnRG9YY3dBM1Y1Z0FHZU9td0NTTSs4QXlSZTRBR0ZZbXdEaFY3d0FVWVBHQU5nK0VBRGRjVWdBTFJ6ZEFLOFlvUUFoTEVZQVdmUFhBTmw2bUFDZVZNQUFUNGI2QUZZRy9BRGxlYTRBaVNJMkFEaXRJZ0Juazl3QVZlaXFBSUltT0FESzU1c0FVUTJrQUprenNRQ3AxdzRBYVFWSUFHV3k4QUIvaUtjQWlFeVhBUG5STmdBaGtyTUFlNEpLQUpqUElRQkFuOXdBM0VkVkFPRjBPZ0JuNjBJQS9wM2ZBRjdVWHdCN1o2UUF1cXg2QUZYMm9nQXJpQ01BUWJwVkFGbHVDQUFoS29ZQU9VZURBSW5qNWdEbG50UUFTZnRBQVA5VzZRQWNEOG9BeFZtS0FKVDZLd0RUd2NVQUQ4WFBBTnRhcmdCSHhZWUFoVU5pQUNHR093QXNlWlFBRUdHSEFDcE1ld0NBTEJvQVE3OFNBSWdta0FCNFBJa0FxTVRrQU9YYmV3REVPc0lBSnZUcUFQZG5pZ0FOa3I4QVphTXJBRDJUc1FDOWZBc0FwRkhjQUNmZFl3QnA0ZDBBbXBRWkFLZ3BsUUJvemlnQUNlMjBBRVNmSUFCT21Nb0FjSUpqQUg1OEl3QVB1VElBcC9XT0FCUlc1d0FoOFFnQXRaMHFBRzkrVFFDbEdWRUF0Zm1yQUlMZjFnQ1czV0VBRmpZQ0FNUTZud0NEb3FFQWN1MXRBRG1OZWdDQ3VLa0FhekpjQUVZbld3QUFOTzBBMGdCM0FQejBWUUFCV1UwQTRIR0FcXFwiKSxUKDYwMTksXFxcIlFQc2grVDhBQUFBQUxVUjBQZ0FBQUlDWVJ2ZzhBQUFBWUZITWVEc0FBQUNBZ3h2d09RQUFBRUFnSlhvNEFBQUFnQ0tDNHpZQUFBQUFIZk5wTlRoajdUN2FEMGsvWHBoN1A5b1B5VDlwTjZ3eGFDRWlNN1FQRkROb0lhSXoydzlKUDlzUFNiL2t5eFpBNU1zV3dBQUFBQUFBQUFDQTJ3OUpRTnNQU2NBQUFJQS9BQURBUHdBQUFBRGN6OUUxQUFBQUFBREFGVDg9XFxcIiksVCg2MTY4LFxcXCJCUT09XFxcIiksVCg2MTgwLFxcXCJEQT09XFxcIiksVCg2MjA0LFxcXCJEUUFBQUE0QUFBRElHUUFBQUFRPVxcXCIpLFQoNjIyOCxcXFwiQVE9PVxcXCIpLFQoNjI0MyxcXFwiQ3YvLy8vOD1cXFwiKSxUKDY1MDAsXFxcIjlCMD1cXFwiKSxnbG9iYWw9e0ludDhBcnJheTpJbnQ4QXJyYXksSW50MTZBcnJheTpJbnQxNkFycmF5LEludDMyQXJyYXk6SW50MzJBcnJheSxVaW50OEFycmF5OlVpbnQ4QXJyYXksVWludDE2QXJyYXk6VWludDE2QXJyYXksVWludDMyQXJyYXk6VWludDMyQXJyYXksRmxvYXQzMkFycmF5OkZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXk6RmxvYXQ2NEFycmF5LE5hTjpOYU4sSW5maW5pdHk6MS8wLE1hdGg6TWF0aH0sZW52PWFzbUxpYnJhcnlBcmcsYnVmZmVyPXdhc21NZW1vcnkuYnVmZmVyLG09ZW52Lm1lbW9yeSxuPXdhc21UYWJsZSxvPW5ldyBnbG9iYWwuSW50OEFycmF5KGJ1ZmZlcikscD1uZXcgZ2xvYmFsLkludDE2QXJyYXkoYnVmZmVyKSxxPW5ldyBnbG9iYWwuSW50MzJBcnJheShidWZmZXIpLHI9bmV3IGdsb2JhbC5VaW50OEFycmF5KGJ1ZmZlcikscz1uZXcgZ2xvYmFsLlVpbnQxNkFycmF5KGJ1ZmZlciksdD1uZXcgZ2xvYmFsLlVpbnQzMkFycmF5KGJ1ZmZlciksdT1uZXcgZ2xvYmFsLkZsb2F0MzJBcnJheShidWZmZXIpLHY9bmV3IGdsb2JhbC5GbG9hdDY0QXJyYXkoYnVmZmVyKSx3PWdsb2JhbC5NYXRoLmltdWwseD1nbG9iYWwuTWF0aC5mcm91bmQseT1nbG9iYWwuTWF0aC5hYnMsej1nbG9iYWwuTWF0aC5jbHozMixBPWdsb2JhbC5NYXRoLm1pbixnbG9iYWwuTWF0aC5tYXgsQz1nbG9iYWwuTWF0aC5mbG9vcixnbG9iYWwuTWF0aC5jZWlsLGdsb2JhbC5NYXRoLnNxcnQsZW52LmFib3J0LGdsb2JhbC5OYU4sSD1nbG9iYWwuSW5maW5pdHksST1lbnYuZW1zY3JpcHRlbl9tZW1jcHlfYmlnLEo9ZW52LmVtc2NyaXB0ZW5fcmVzaXplX2hlYXAsSz1lbnYuZmRfd3JpdGUsTD01MjUxMDg4LE09MCxuWzFdPWZ1bmN0aW9uKGEsYmYsY2YsZGYpe2F8PTAsYmZ8PTAsY2Z8PTAsZGZ8PTA7dmFyIEdmLGVmPTAsZmY9eCgwKSxnZj14KDApLGhmPTAsamY9eCgwKSxrZj14KDApLGxmPXgoMCksbWY9MCxuZj14KDApLG9mPXgoMCkscGY9eCgwKSxxZj14KDApLHJmPXgoMCksc2Y9eCgwKSx0Zj14KDApLHVmPXgoMCksdmY9eCgwKSx3Zj14KDApLHhmPXgoMCkseWY9eCgwKSx6Zj14KDApLEFmPXgoMCksQmY9MCxDZj0wLERmPXgoMCksRWY9eCgwKSxGZj0wLEhmPTAsSWY9eCgwKSxKZj14KDApLEtmPTAsTGY9MCxNZj0wLE5mPTAsT2Y9MCxQZj0wLFFmPTAsUmY9MCxTZj0wLFRmPXgoMCksVWY9eCgwKSxWZj14KDApLFdmPXgoMCksWGY9eCgwKSxZZj14KDApLFpmPXgoMCksX2Y9MCwkZj0wO2lmKEw9R2Y9TC0zMnwwLDE8PSgwfGRmKSlmb3IoT2Y9KEJmPXFbYSs0Pj4yXSkrLTF8MCxQZj0oSGY9cVthPj4yXSkrLTF8MCxRZj1MZj0obWY9cVthKzIwPj4yXSkrKEJmPDwzKXwwLFJmPU1mPSgoS2Y9dyhIZixDZj1CZisxfDApKTw8MykrbWZ8MCxTZj1OZj0oQmYrS2Y8PDMpK21mfDAsSWY9eCgwfEhmKSxKZj14KDB8QmYpLF9mPXFbYSs4Pj4yXSxhPTA7Oyl7bGY9dVs0KyhlZj0oRmY9YTw8MykrYmZ8MCk+PjJdLGdmPXgobGYqSWYpLG5mPXVbZWY+PjJdLGZmPXgobmYqSmYpLGVmPWxmPj14KDEpO2E6aWYobGY8eCgwKV4xJiYhKGVmfG5mPj14KDEpfG5mPHgoMCkpKWVmPXgoeShzZj1nZikpPHgoMjE0NzQ4MzY0OCk/fn5nZjotMjE0NzQ4MzY0OCxrZj14KHNmLXgoMHxlZikpLGhmPXgoeShnZj1mZikpPHgoMjE0NzQ4MzY0OCk/fn5mZjotMjE0NzQ4MzY0OCxqZj14KGdmLXgoMHxoZikpLGVmPWhmK3coZWYsQ2YpfDAsZ2Y9X2Y/KGZmPXgoeCgxKS1rZiksZ2Y9eCh4KDEpLWpmKSxoZj0oZWY8PDMpK21mfDAsZWY9KGVmK0NmPDwzKSttZnwwLHVbY2YrRmY+PjJdPXgoeCh4KGZmKngoZ2YqdVtoZj4+Ml0pKSt4KGZmKngoamYqdVtoZis4Pj4yXSkpKSt4KGtmKngoZ2YqdVtlZj4+Ml0pKSkreChrZip4KGpmKnVbZWYrOD4+Ml0pKSxmZj14KHgoeChmZip4KGdmKnVbaGYrND4+Ml0pKSt4KGZmKngoamYqdVtoZisxMj4+Ml0pKSkreChrZip4KGdmKnVbZWYrND4+Ml0pKSkseChrZip4KGpmKnVbZWYrMTI+PjJdKSkpOngoamYra2YpPD14KDEpPyhmZj14KHgoeCgxKS1qZikta2YpLGhmPShlZjw8MykrbWZ8MCxlZj0oZWYrQ2Y8PDMpK21mfDAsdVtjZitGZj4+Ml09eCh4KGZmKnVbaGY+PjJdKSt4KGpmKnVbaGYrOD4+Ml0pKSt4KGtmKnVbZWY+PjJdKSxmZj14KHgoZmYqdVtoZis0Pj4yXSkreChqZip1W2hmKzEyPj4yXSkpLHgoa2YqdVtlZis0Pj4yXSkpOihmZj14KHgoamYreCgtMSkpK2tmKSxoZj0oZWYrQ2Y8PDMpK21mfDAsZ2Y9eCh4KDEpLWpmKSxsZj14KHgoMSkta2YpLGVmPShlZjw8MykrbWZ8MCx1W2NmK0ZmPj4yXT14KHgoZmYqdVtoZis4Pj4yXSkreChnZip1W2hmPj4yXSkpK3gobGYqdVtlZis4Pj4yXSksZmY9eCh4KGZmKnVbaGYrMTI+PjJdKSt4KGdmKnVbaGYrND4+Ml0pKSx4KGxmKnVbZWYrMTI+PjJdKSk7ZWxzZXtpZigkZnx8KHNmPXVbU2YrND4+Ml0sVGY9dVttZis0Pj4yXSxvZj14KHNmLVRmKSxVZj11W1FmKzQ+PjJdLFZmPXVbUmYrND4+Ml0scGY9eChVZi1WZiksdGY9eCh4KG9mLXBmKSp4KC41KSksV2Y9dVtOZj4+Ml0sWGY9dVttZj4+Ml0scWY9eChXZi1YZiksWWY9dVtMZj4+Ml0sWmY9dVtNZj4+Ml0scmY9eChZZi1aZiksdWY9eCh4KHFmLXJmKSp4KC41KSkscGY9eCh4KHBmK29mKSp4KC41KSkscmY9eCh4KHJmK3FmKSp4KC41KSksJGY9MSxvZj14KHgoeCh4KHgoVGYrVWYpK1ZmKStzZikqeCguMjUpKS14KG9mKngoLjUpKSkscWY9eCh4KHgoeCh4KFhmK1lmKStaZikrV2YpKngoLjI1KSkteChxZip4KC41KSkpKSwhKGxmPHgoMyleMXxuZj54KC0yKV4xfChuZjx4KDMpXjF8bGY+eCgtMileMSkpKXtiOmlmKG5mPD14KDApKXtpZihsZjw9eCgwKSl7a2Y9eCh4KGxmK3goMikpKngoLjUpKSxqZj14KHgobmYreCgyKSkqeCguNSkpLGZmPXgodGYrdGYpLERmPXgob2YtZmYpLGdmPXgodWYrdWYpLEVmPXgocWYtZ2YpLHpmPXgob2YteChwZitwZikpLHZmPXgoemYtZmYpLEFmPXgocWYteChyZityZikpLHdmPXgoQWYtZ2YpLHhmPXVbbWYrND4+Ml0seWY9dVttZj4+Ml07YnJlYWsgYn1pZihlZil7ZmY9eCh0Zip4KDMpKSxnZj14KG9mLXgocGYrcGYpKSx6Zj14KGZmK2dmKSx2Zj14KHVmKngoMykpLHdmPXgocWYteChyZityZikpLEFmPXgodmYrd2YpLGtmPXgoeChsZit4KC0xKSkqeCguNSkpLGpmPXgoeChuZit4KDIpKSp4KC41KSkseGY9eChmZitvZikseWY9eCh2ZitxZiksdmY9eCh0ZitnZiksd2Y9eCh1Zit3ZiksRGY9dVtSZis0Pj4yXSxFZj11W01mPj4yXTticmVhayBifWZmPXgob2YteChwZitwZikpLGVmPVBmLGhmPXgoeShnZikpPHgoMjE0NzQ4MzY0OCk/fn5nZjotMjE0NzQ4MzY0OCxrZj14KDB8KGVmPSgwfGhmKT09KDB8SGYpP2VmOmhmKSksamY9eChrZi9JZiksdmY9eCh4KGpmKnRmKStmZiksc2Y9eChqZip1ZiksamY9eChxZi14KHJmK3JmKSksd2Y9eChzZitqZiksbGY9eCh4KDB8KGhmPWVmKzF8MCkpL0lmKSx6Zj14KHgobGYqdGYpK2ZmKSxBZj14KHgobGYqdWYpK2pmKSxqZj14KHgobmYreCgyKSkqeCguNSkpLGtmPXgoZ2Yta2YpLGVmPSh3KGVmLENmKTw8MykrbWZ8MCxEZj11W2VmKzQ+PjJdLEVmPXVbZWY+PjJdLGVmPSh3KGhmLENmKTw8MykrbWZ8MCx4Zj11W2VmKzQ+PjJdLHlmPXVbZWY+PjJdfWVsc2UgaWYobmY+PXgoMSkpe2lmKGxmPD14KDApKXtrZj14KHgobGYreCgyKSkqeCguNSkpLGpmPXgoeChuZit4KC0xKSkqeCguNSkpLGZmPXgodGYrdGYpLHZmPXgoeChwZitvZiktZmYpLGdmPXgodWYrdWYpLHdmPXgoeChyZitxZiktZ2YpLHhmPXgoeChwZip4KDMpKStvZiksRGY9eCh4Zi1mZikseWY9eCh4KHJmKngoMykpK3FmKSxFZj14KHlmLWdmKSx6Zj11W1FmKzQ+PjJdLEFmPXVbTGY+PjJdO2JyZWFrIGJ9aWYoZWYpe2ZmPXgodGYqeCgzKSksemY9eChmZit4KHBmK29mKSksZ2Y9eCh1Zip4KDMpKSxBZj14KGdmK3gocmYrcWYpKSxzZj1mZixmZj14KHgocGYqeCgzKSkrb2YpLHhmPXgoc2YrZmYpLHNmPWdmLGdmPXgoeChyZip4KDMpKStxZikseWY9eChzZitnZiksa2Y9eCh4KGxmK3goLTEpKSp4KC41KSksamY9eCh4KG5mK3goLTEpKSp4KC41KSksRGY9eCh0ZitmZiksRWY9eCh1ZitnZiksdmY9dVtTZis0Pj4yXSx3Zj11W05mPj4yXTticmVhayBifWZmPXgoeChwZip4KDMpKStvZiksZWY9UGYsaGY9eCh5KGdmKSk8eCgyMTQ3NDgzNjQ4KT9+fmdmOi0yMTQ3NDgzNjQ4LGtmPXgoMHwoZWY9KDB8aGYpPT0oMHxIZik/ZWY6aGYpKSxqZj14KGtmL0lmKSxEZj14KHgoamYqdGYpK2ZmKSxzZj14KGpmKnVmKSxqZj14KHgocmYqeCgzKSkrcWYpLEVmPXgoc2YramYpLGxmPXgoeCgwfChoZj1lZisxfDApKS9JZikseGY9eCh4KGxmKnRmKStmZikseWY9eCh4KGxmKnVmKStqZiksamY9eCh4KG5mK3goLTEpKSp4KC41KSksa2Y9eChnZi1rZiksZWY9KHcoZWYsQ2YpK0JmPDwzKSttZnwwLHZmPXVbZWYrND4+Ml0sd2Y9dVtlZj4+Ml0sZWY9KHcoaGYsQ2YpK0JmPDwzKSttZnwwLHpmPXVbZWYrND4+Ml0sQWY9dVtlZj4+Ml19ZWxzZSBsZjw9eCgwKT8oa2Y9eCh4KGxmK3goMikpKngoLjUpKSxlZj1PZixoZj14KHkoZ2Y9ZmYpKTx4KDIxNDc0ODM2NDgpP35+ZmY6LTIxNDc0ODM2NDgsZmY9eCgwfChlZj0oMHxoZik9PSgwfEJmKT9lZjpoZikpLGpmPXgoZ2YtZmYpLGZmPXgoZmYvSmYpLGdmPXgodGYrdGYpLHZmPXgoeCh4KGZmKnBmKStvZiktZ2YpLHNmPXgoeChmZipyZikrcWYpLGZmPXgodWYrdWYpLHdmPXgoc2YtZmYpLGxmPXgoeCgwfChoZj1lZisxfDApKS9KZiksRGY9eCh4KHgobGYqcGYpK29mKS1nZiksRWY9eCh4KHgobGYqcmYpK3FmKS1mZiksemY9dVs0KyhlZj0oZWY8PDMpK21mfDApPj4yXSxBZj11W2VmPj4yXSx4Zj11WzQrKGVmPShoZjw8MykrbWZ8MCk+PjJdLHlmPXVbZWY+PjJdKTplZj8oc2Y9Z2Y9eCh0Zip4KDMpKSxlZj1PZixoZj14KHkoZmYpKTx4KDIxNDc0ODM2NDgpP35+ZmY6LTIxNDc0ODM2NDgsamY9eCgwfChlZj0oMHxoZik9PSgwfEJmKT9lZjpoZikpLGtmPXgoamYvSmYpLHpmPXgoc2YreCh4KGtmKnBmKStvZikpLG5mPXgodWYqeCgzKSksQWY9eChuZit4KHgoa2YqcmYpK3FmKSksc2Y9Z2YsZ2Y9eCh4KDB8KGhmPWVmKzF8MCkpL0pmKSx4Zj14KHNmK3goeChnZipwZikrb2YpKSx5Zj14KG5mK3goeChnZipyZikrcWYpKSxrZj14KHgobGYreCgtMSkpKngoLjUpKSxqZj14KGZmLWpmKSx2Zj11WzQrKGVmPShlZitLZjw8MykrbWZ8MCk+PjJdLHdmPXVbZWY+PjJdLERmPXVbNCsoZWY9KGhmK0tmPDwzKSttZnwwKT4+Ml0sRWY9dVtlZj4+Ml0pOih2WzE2K0dmPj4zXT1sZixxW0dmPj4yXT1hLHZbOCtHZj4+M109bmYsWSg0LDExMDQsR2YpKTtpZih4KGpmK2tmKTw9eCgxKSl7dVtjZitGZj4+Ml09eCh3Zit4KHgoRWYtd2YpKmpmKSkreCh4KEFmLXdmKSprZiksZmY9eCh2Zit4KHgoRGYtdmYpKmpmKSksZ2Y9eCh4KHpmLXZmKSprZik7YnJlYWsgYX1mZj14KHgoMSktamYpLGdmPXgoeCgxKS1rZiksdVtjZitGZj4+Ml09eCh5Zit4KHgoQWYteWYpKmZmKSkreCh4KEVmLXlmKSpnZiksZmY9eCh4Zit4KHgoemYteGYpKmZmKSksZ2Y9eCh4KERmLXhmKSpnZik7YnJlYWsgYX11W2NmK0ZmPj4yXT14KGxmKnVmKSt4KHgobmYqcmYpK3FmKSxmZj14KGxmKnRmKSxnZj14KHgobmYqcGYpK29mKX1pZih1WzQrKGNmK0ZmfDApPj4yXT1mZitnZiwoMHxkZik9PSgwfChhPWErMXwwKSkpYnJlYWt9TD0zMitHZnwwfSxuWzJdPWZ1bmN0aW9uKGEscWUscmUpe2F8PTAscWV8PTA7dmFyIEdlLEhlLEllLEZlPTA7aWYoSGU9cVsxNDArKHJlfD0wKT4+Ml0sSWU9cVtyZSsxMzY+PjJdLEdlPXFbYSsyND4+Ml0sLTE9PSgwfChGZT1xW2ErND4+Ml0pKSlyZXR1cm4gcVsoYT1xZTw8MikrSWU+PjJdPXFbR2UrMTY+PjJdLHZvaWQocVthK0hlPj4yXT0xMDY1MzUzMjE2KTtyZT1xW3JlKzQ+PjJdKyhGZTw8NSl8MCxGZT1xW0dlKzIwPj4yXSxuW3FbcmUrMjA+PjJdXShxW3JlKzI0Pj4yXSxGZSxGZSxxW0dlKzEyPj4yXSkscWU8PD0yLGE9cVthKzQ+PjJdPDwyLHVbcWUrSWU+PjJdPXVbR2UrMTY+PjJdKnVbYStJZT4+Ml0scVtxZStIZT4+Ml09cVthK0hlPj4yXX0sblszXT1mdW5jdGlvbihhLHFlLHJlLEplKXthfD0wLHFlfD0wLHJlfD0wLEplfD0wO3ZhciBTZSxLZT14KDApLExlPXgoMCksTWU9eCgwKSxOZT14KDApLE9lPTAsUGU9eCgwKSxRZT0wLFJlPXgoMCksVGU9eCgwKSxVZT14KDApO2lmKE9lPXFbYSsyOD4+Ml0sTGU9ZnVuY3Rpb24oYSl7dmFyIFJiLFBiPXgoMCksUWI9MCxTYj0wLFRiPTA7TD1SYj1MLTE2fDAsaihhKTthOmlmKChRYj0yMTQ3NDgzNjQ3JihTYj1lKDApKSk+Pj4wPD0xMDYxNzUyNzk0KXtpZihQYj14KDEpLFFiPj4+MDw5NjQ2ODk5MjApYnJlYWsgYTtQYj1hYSgrYSl9ZWxzZSBpZihRYj4+PjA8PTEwODE4MjQyMDkpe2lmKFRiPSthLDEwNzUyMzU4MTI8PVFiPj4+MCl7UGI9eCgtYWEoKCgwfFNiKTwwPzMuMTQxNTkyNjUzNTg5NzkzOi0zLjE0MTU5MjY1MzU4OTc5MykrVGIpKTticmVhayBhfWlmKCgwfFNiKTw9LTEpe1BiPSQoVGIrMS41NzA3OTYzMjY3OTQ4OTY2KTticmVhayBhfVBiPSQoMS41NzA3OTYzMjY3OTQ4OTY2LVRiKX1lbHNlIGlmKFFiPj4+MDw9MTA4ODU2NTcxNyl7aWYoMTA4NTI3MTUyMDw9UWI+Pj4wKXtQYj1hYSgrYSsoKDB8U2IpPDA/Ni4yODMxODUzMDcxNzk1ODY6LTYuMjgzMTg1MzA3MTc5NTg2KSk7YnJlYWsgYX1pZigoMHxTYik8PS0xKXtQYj0kKC00LjcxMjM4ODk4MDM4NDY5LWEpO2JyZWFrIGF9UGI9JChhLTQuNzEyMzg4OTgwMzg0NjkpfWVsc2UgaWYoUGI9eChhLWEpLCEoMjEzOTA5NTA0MDw9UWI+Pj4wKSlpZigoUWI9MyZsYShhLDgrUmJ8MCkpPj4+MDw9Mil7c3dpdGNoKFFiLTF8MCl7ZGVmYXVsdDpQYj1hYSh2WzgrUmI+PjNdKTticmVhayBhO2Nhc2UgMDpQYj0kKC12WzgrUmI+PjNdKTticmVhayBhO2Nhc2UgMTp9UGI9eCgtYWEodls4K1JiPj4zXSkpfWVsc2UgUGI9JCh2WzgrUmI+PjNdKTtyZXR1cm4gTD0xNitSYnwwLFBifShLZT14KHgoeCh1W2E+PjJdK3VbYSsyMD4+Ml0pKngoMy4xNDE1OTI3NDEwMTI1NzMyKSkveCgxODApKSksTWU9dVthKzg+PjJdLFNlPXFbYSsyND4+Ml0sS2U9ZnVuY3Rpb24oYSl7dmFyIE1iLEZiPTAsTmI9MCxPYj0wO0w9TWI9TC0xNnwwLGooYSk7YTppZigoRmI9MjE0NzQ4MzY0NyYoT2I9ZSgwKSkpPj4+MDw9MTA2MTc1Mjc5NCl7aWYoRmI+Pj4wPDk2NDY4OTkyMClicmVhayBhO2E9JCgrYSl9ZWxzZSBpZihGYj4+PjA8PTEwODE4MjQyMDkpe2lmKE5iPSthLEZiPj4+MDw9MTA3NTIzNTgxMSl7aWYoKDB8T2IpPD0tMSl7YT14KC1hYShOYisxLjU3MDc5NjMyNjc5NDg5NjYpKTticmVhayBhfWE9YWEoTmIrLTEuNTcwNzk2MzI2Nzk0ODk2Nik7YnJlYWsgYX1hPSQoLSgoKDB8T2IpPDA/My4xNDE1OTI2NTM1ODk3OTM6LTMuMTQxNTkyNjUzNTg5NzkzKStOYikpfWVsc2UgaWYoRmI+Pj4wPD0xMDg4NTY1NzE3KXtpZihOYj0rYSxGYj4+PjA8PTEwODUyNzE1MTkpe2lmKCgwfE9iKTw9LTEpe2E9YWEoTmIrNC43MTIzODg5ODAzODQ2OSk7YnJlYWsgYX1hPXgoLWFhKE5iKy00LjcxMjM4ODk4MDM4NDY5KSk7YnJlYWsgYX1hPSQoKCgwfE9iKTwwPzYuMjgzMTg1MzA3MTc5NTg2Oi02LjI4MzE4NTMwNzE3OTU4NikrTmIpfWVsc2UgaWYoMjEzOTA5NTA0MDw9RmI+Pj4wKWE9eChhLWEpO2Vsc2UgaWYoKEZiPTMmbGEoYSw4K01ifDApKT4+PjA8PTIpe3N3aXRjaChGYi0xfDApe2RlZmF1bHQ6YT0kKHZbOCtNYj4+M10pO2JyZWFrIGE7Y2FzZSAwOmE9YWEodls4K01iPj4zXSk7YnJlYWsgYTtjYXNlIDE6fWE9JCgtdls4K01iPj4zXSl9ZWxzZSBhPXgoLWFhKHZbOCtNYj4+M10pKTtyZXR1cm4gTD0xNitNYnwwLGF9KEtlKSwwPCgwfEplKSlmb3IoTGU9eChNZSpMZSksUGU9eChPZT8tMToxKSxUZT14KExlKlBlKSxOZT14KFNlPy0xOjEpLFVlPXgoTmUqeChNZSpLZSkpLExlPXgoTmUqTGUpLE1lPXgoeChNZSp4KC1LZSkpKlBlKSxLZT11W2ErMTY+PjJdLFBlPXVbYSsxMj4+Ml07T2U9KGE9UWU8PDMpK3JlfDAsTmU9dVsoYT1hK3FlfDApPj4yXSxSZT11W2ErND4+Ml0sdVtPZSs0Pj4yXT1LZSt4KHgoVWUqTmUpK3goVGUqUmUpKSx1W09lPj4yXT1QZSt4KHgoTGUqTmUpK3goTWUqUmUpKSwoMHwoUWU9UWUrMXwwKSkhPSgwfEplKTspO30sbls0XT1mdW5jdGlvbihhLHFlLHJlKXthfD0wLHFlfD0wLHJlfD0wO3ZhciBzZSx0ZSx6ZSxBZSxCZSx1ZT0wLHZlPXgoMCksd2U9eCgwKSx4ZT0wLHllPXgoMCksQ2U9eCgwKSxEZT14KDApLEVlPXgoMCk7aWYoTD1zZT1MKy02NHwwLHplPXFbcmUrMTQwPj4yXSxBZT1xW3JlKzEzNj4+Ml0sdGU9cVthKzI0Pj4yXSwtMSE9KDB8KEJlPXFbYSs0Pj4yXSkpKXt1ZT1xW3JlKzQ+PjJdLHhlPXFbdGUrMTI+PjJdLHFbMjQrc2U+PjJdPXhlLHJlPXFbdGUrMTY+PjJdLHFbMjgrc2U+PjJdPXJlLHFbMTYrc2U+PjJdPTAsQ2U9MT09cVs4Kyh1ZT11ZSsoQmU8PDUpfDApPj4yXT94KC0xMCk6eCgtLjEwMDAwMDAwMTQ5MDExNjEyKSx1WzIwK3NlPj4yXT1DZSxxWzYwK3NlPj4yXT1yZSxxWzU2K3NlPj4yXT14ZSxuW3FbdWUrMjA+PjJdXShxW3VlKzI0Pj4yXSw1NitzZXwwLDQ4K3NlfDAsMSkseWU9eCgxKSx4ZT05O2I6e2Zvcig7Oyl7aWYocmU9eGUsRGU9eCh5ZSp4KDApKSx1WzMyK3NlPj4yXT1EZSt1WzU2K3NlPj4yXSxFZT14KENlKnllKSx1WzM2K3NlPj4yXT1FZSt1WzYwK3NlPj4yXSxuW3FbdWUrMjA+PjJdXShxW3VlKzI0Pj4yXSwzMitzZXwwLDQwK3NlfDAsMSksd2U9eCh1WzQ0K3NlPj4yXS11WzUyK3NlPj4yXSksdVs0NCtzZT4+Ml09d2UsdmU9eCh1WzQwK3NlPj4yXS11WzQ4K3NlPj4yXSksdVs0MCtzZT4+Ml09dmUsd2UhPXgoMCl8fHZlIT14KDApKXtyZT1xWzQ0K3NlPj4yXSxxWzgrc2U+PjJdPXFbNDArc2U+PjJdLHFbMTIrc2U+PjJdPXJlO2JyZWFrIGJ9aWYodVszMitzZT4+Ml09dVs1NitzZT4+Ml0tRGUsdVszNitzZT4+Ml09dVs2MCtzZT4+Ml0tRWUsbltxW3VlKzIwPj4yXV0ocVt1ZSsyND4+Ml0sMzIrc2V8MCw0MCtzZXwwLDEpLHdlPXgodVs0MCtzZT4+Ml0tdVs0OCtzZT4+Ml0pLHVbNDArc2U+PjJdPXdlLHZlPXgodVs0NCtzZT4+Ml0tdVs1MitzZT4+Ml0pLCh1WzQ0K3NlPj4yXT12ZSkhPXgoMCl8fHdlIT14KDApKXt1WzEyK3NlPj4yXT0tdmUsdVs4K3NlPj4yXT0td2U7YnJlYWsgYn1pZih4ZT1yZSstMXwwLHllPXgoeWUqeCguMTAwMDAwMDAxNDkwMTE2MTIpKSwhcmUpYnJlYWt9WSgzLDEyNjUsMCl9dmU9ZnVuY3Rpb24oYSxkaCl7dmFyIGVoPXgoMCk7aWYoKGVoPXgoQWEodVs0K2E+PjJdLHVbYT4+Ml0pLUFhKHVbNCtkaD4+Ml0sdVtkaD4+Ml0pKSk8eCgtMy4xNDE1OTI3NDEwMTI1NzMyKSlmb3IoOyhlaD14KGVoK3goNi4yODMxODU0ODIwMjUxNDY1KSkpPHgoLTMuMTQxNTkyNzQxMDEyNTczMik7KTtpZihlaD54KDMuMTQxNTkyNzQxMDEyNTczMikpZm9yKDsoZWg9eChlaCt4KC02LjI4MzE4NTQ4MjAyNTE0NjUpKSk+eCgzLjE0MTU5Mjc0MTAxMjU3MzIpOyk7cmV0dXJuIGVofSgxNitzZXwwLDgrc2V8MCksbltxW3VlKzIwPj4yXV0ocVt1ZSsyND4+Ml0sMjQrc2V8MCwyNCtzZXwwLDEpLHFbdGUrMTI+PjJdPXFbMjQrc2U+PjJdLHFbdGUrMTY+PjJdPXFbMjgrc2U+PjJdLHVbdGUrMjA+PjJdPXVbdGUrMjA+PjJdK3goeCh2ZSp4KC0xODApKS94KDMuMTQxNTkyNzQxMDEyNTczMikpLHFlPDw9MixhPXFbYSs0Pj4yXTw8Mix1W3FlK0FlPj4yXT11W3RlKzQ+PjJdKnVbYStBZT4+Ml0sdmU9eCh1W3RlKzg+PjJdKnVbYSt6ZT4+Ml0pLHVbcWUremU+PjJdPXZlLHVbdGUrOD4+Ml09dmV9ZWxzZSBxWyhhPXFlPDwyKStBZT4+Ml09cVt0ZSs0Pj4yXSxxW2EremU+PjJdPXFbdGUrOD4+Ml07TD02NCtzZXwwfSxuWzVdPWZ1bmN0aW9uKGEpe2F8PTA7dmFyIGhnLGxnLGJmPTAsY2Y9MCxkZj0wLGFnPTAsYmc9MCxjZz14KDApLGRnPTAsZWc9MCxmZz0wLGdnPTAsaWc9MCxqZz0wLGtnPTAsbWc9MCxuZz0wLG9nPTAscGc9MDtpZihmZz1xW2ErMjQ4Pj4yXSxsZz1xW2ErMjA0Pj4yXSxoZz1xW2ErMjAwPj4yXSwhKCgwfChiZz1xW2ErMjIwPj4yXSkpPDEpKXtmb3IoZGc9cVthKzIzNj4+Ml0sYWc9cVthKzIxNj4+Ml0sZGY9cVthKzIyND4+Ml07dVsoY2Y9YmY8PDIpK2RnPj4yXT11W2NmK2RmPj4yXSp1W2NmK2FnPj4yXSwoMHxiZykhPSgwfChiZj1iZisxfDApKTspO2lmKCEoKDB8YmcpPDEpKWZvcihkZz1xW2ErMjQwPj4yXSxhZz1xW2ErMjE2Pj4yXSxkZj1xW2ErMjI4Pj4yXSxiZj0wO3VbKGNmPWJmPDwyKStkZz4+Ml09dVtjZitkZj4+Ml0qdVtjZithZz4+Ml0sKDB8YmcpIT0oMHwoYmY9YmYrMXwwKSk7KTt9aWYoMTw9KDB8aGcpKWZvcihtZz1xW2ErMjA4Pj4yXSxiZz1kZz0wOzspe2lmKHFbZmc+PjJdKXtnZz0oZGY9cVsoY2Y9ZGc8PDIpK3FbYSsyMTI+PjJdPj4yXSkrYmd8MDtjOntpZigoMHxkZik8PTApcVtjZitxW2ErMjc2Pj4yXT4+Ml09MDtlbHNle2ZvcihhZz1xW2ErMjM2Pj4yXSxjZz14KDApLGJmPWJnO2NnPXgoY2crdVthZysoYmY8PDIpPj4yXSksKDB8KGJmPWJmKzF8MCkpPCgwfGdnKTspO2lmKHVbY2YrcVthKzI3Nj4+Ml0+PjJdPWNnLCEoKDB8ZGYpPDEpKXtmb3IoYWc9cVthKzI0MD4+Ml0sY2c9eCgwKSxiZj1iZztjZz14KGNnK3VbYWcrKGJmPDwyKT4+Ml0pLCgwfChiZj1iZisxfDApKTwoMHxnZyk7KTticmVhayBjfX1jZz14KDApfWlmKGJmPWNmK3FbYSsyNjg+PjJdfDAsY2c9eChjZyt4KC4wMDEwMDAwMDAwNDc0OTc0NTEzKSksYWc9eCh5KGNnKSk8eCgyMTQ3NDgzNjQ4KT9+fmNnOi0yMTQ3NDgzNjQ4LHFbYmY+PjJdPWFnLGFnPShiZj1xWzEyKygoZGc8PDQpK2xnfDApPj4yXSk8PDEsaWc9cVtjZitxW2ErMjcyPj4yXT4+Ml0sKGJmPSgwfGJmKTwxKXx8YmEoaWcsMCwoMTwoMHxhZyk/YWc6MSk8PDIpLCEoYmZ8KDB8ZGYpPDEpKWZvcihqZz1xW2ErMjQ0Pj4yXSxuZz1xW2ErMjE2Pj4yXSxvZz1xW2ErMjMyPj4yXSxjZj1iZzs7KXtmb3IoZWc9KGJmPWNmPDwyKStuZ3wwLHBnPXFbYmYrb2c+PjJdLGRmPWJmPTA7dVtqZysoa2c9ZGY8PDIpPj4yXT11W3BnK2tnPj4yXSp1W2VnPj4yXSwoMHwoZGY9ZGYrMXwwKSk8KDB8YWcpOyk7Zm9yKDt1WyhlZz0oZGY9YmY8PDIpK2lnfDApPj4yXT11W2RmK2pnPj4yXSt1W2VnPj4yXSwoMHwoYmY9YmYrMXwwKSk8KDB8YWcpOyk7aWYoISgoMHwoY2Y9Y2YrMXwwKSk8KDB8Z2cpKSlicmVha319aWYoZmc9ZmcrNHwwLGJnPXFbKGRnPDwyKSttZz4+Ml0rYmd8MCwoMHxoZyk9PSgwfChkZz1kZysxfDApKSlicmVha319LG5bNl09ZnVuY3Rpb24oYSl7YXw9MDt2YXIgTGcsUGcsQ2c9MCxEZz0wLEVnPTAsRmc9MCxHZz0wLEhnPTAsSWc9eCgwKSxKZz0wLEtnPTAsTWc9MCxOZz0wLE9nPTAsUWc9MCxSZz0wLFNnPTAsVGc9MCxVZz0wO2lmKEtnPXFbYSsxNzI+PjJdLExnPXFbYS0gLTY0Pj4yXSxQZz1xW2ErNjg+PjJdLDE8PSgwfChFZz1xW2ErOTI+PjJdKSkpZm9yKEdnPXFbYSsxMDQ+PjJdLEhnPXFbYSs4OD4+Ml0sRGc9cVthKzk2Pj4yXTt1WyhGZz1DZzw8MikrR2c+PjJdPXVbRGcrRmc+PjJdKnVbSGcrRmc+PjJdLCgwfEVnKSE9KDB8KENnPUNnKzF8MCkpOyk7aWYoMTw9KDB8TGcpKWZvcihRZz1xW2ErODA+PjJdLEZnPUdnPTA7Oyl7aWYocVtLZz4+Ml0pe2lmKE1nPShDZz1xW3FbYSs4ND4+Ml0rKEdnPDwyKT4+Ml0pK0ZnfDAsRWc9KDB8Q2cpPDEpSWc9eCgwKTtlbHNlIGZvcihIZz1xW2ErMTA0Pj4yXSxJZz14KDApLENnPUZnO0lnPXgoSWcrdVtIZysoQ2c8PDIpPj4yXSksKDB8KENnPUNnKzF8MCkpPCgwfE1nKTspO2lmKENnPXcoR2csMjQpK1BnfDAsdVtDZysxNj4+Ml09SWcsSGc9KERnPXFbQ2crMTI+PjJdKTw8MSwoRGc9KDB8RGcpPDEpfHxiYShxW0NnKzIwPj4yXSwwLCgxPCgwfEhnKT9IZzoxKTw8MiksIShEZ3xFZykpZm9yKFJnPXFbQ2crMjA+PjJdLE5nPXFbYSsxMDg+PjJdLFNnPXFbYSs4OD4+Ml0sVGc9cVthKzEwMD4+Ml0sRWc9Rmc7Oyl7Zm9yKEpnPShDZz1FZzw8MikrU2d8MCxVZz1xW0NnK1RnPj4yXSxEZz1DZz0wO3VbKE9nPURnPDwyKStOZz4+Ml09dVtVZytPZz4+Ml0qdVtKZz4+Ml0sKDB8KERnPURnKzF8MCkpPCgwfEhnKTspO2Zvcig7dVsoSmc9KERnPUNnPDwyKStSZ3wwKT4+Ml09dVtEZytOZz4+Ml0rdVtKZz4+Ml0sKDB8KENnPUNnKzF8MCkpPCgwfEhnKTspO2lmKCEoKDB8KEVnPUVnKzF8MCkpPCgwfE1nKSkpYnJlYWt9fWlmKEtnPUtnKzR8MCxGZz1xWyhHZzw8MikrUWc+PjJdK0ZnfDAsKDB8TGcpPT0oMHwoR2c9R2crMXwwKSkpYnJlYWt9fSxuWzddPWZ1bmN0aW9uKGEpe2F8PTA7dmFyIGNoLFZnPTAsV2c9eCgwKSxYZz0wLFlnPTAsWmc9MCxfZz0wLCRnPTAsYWg9MCxiaD0wO2lmKCRnPXFbYSszNj4+Ml0sY2g9cVthKzQ+PjJdLDE8PSgwfChZZz1xW2ErMjQ+PjJdKSkpZm9yKGFoPXFbYSszMj4+Ml0sYmg9cVthKzIwPj4yXSxYZz1xW2ErMjg+PjJdO3VbKFpnPVZnPDwyKSthaD4+Ml09dVtYZytaZz4+Ml0qdVtaZytiaD4+Ml0sKDB8WWcpIT0oMHwoVmc9VmcrMXwwKSk7KTtpZigxPD0oMHxjaCkpZm9yKFpnPXFbYSsxMj4+Ml0sWGc9MDs7KXtpZihxWyRnPj4yXSl7aWYoKDB8KFZnPXFbKFlnPV9nPDwyKStxW2ErMTY+PjJdPj4yXSkpPDEpV2c9eCgwKTtlbHNlIGZvcihhaD1WZytYZ3wwLGJoPXFbYSszMj4+Ml0sV2c9eCgwKSxWZz1YZztXZz14KFdnK3VbYmgrKFZnPDwyKT4+Ml0pLCgwfChWZz1WZysxfDApKTwoMHxhaCk7KTtWZz1ZZytxW2ErNDQ+PjJdfDAsV2c9eChXZyt4KC4wMDEwMDAwMDAwNDc0OTc0NTEzKSkseCh5KFdnKSk8eCgyMTQ3NDgzNjQ4KT9xW1ZnPj4yXT1+fldnOnFbVmc+PjJdPS0yMTQ3NDgzNjQ4fWlmKCRnPSRnKzR8MCxYZz1xW1pnKyhfZzw8Mik+PjJdK1hnfDAsKDB8Y2gpPT0oMHwoX2c9X2crMXwwKSkpYnJlYWt9fSxuWzhdPWZ1bmN0aW9uKGEpe2F8PTA7dmFyIHlnLEJnLHFnPTAscmc9MCxzZz14KDApLHRnPTAsdWc9MCx2Zz0wLHdnPTAseGc9MCx6Zz0wLEFnPTA7aWYoQWc9cVthKzE3Nj4+Ml0sQmc9cVthKzcyPj4yXSx5Zz1xW2ErNzY+PjJdLCEoKDB8KHZnPXFbYSsxMjQ+PjJdKSk8MSkpe2Zvcih3Zz1xW2ErMTQ4Pj4yXSx0Zz1xW2ErMTIwPj4yXSx1Zz1xW2ErMTI4Pj4yXTt1WyhyZz1xZzw8Mikrd2c+PjJdPXVbcmcrdWc+PjJdKnVbcmcrdGc+PjJdLCgwfHZnKSE9KDB8KHFnPXFnKzF8MCkpOyk7aWYoISgoMHx2Zyk8MSkpe2Zvcih3Zz1xW2ErMTUyPj4yXSx0Zz1xW2ErMTIwPj4yXSx1Zz1xW2ErMTMyPj4yXSxxZz0wO3VbKHJnPXFnPDwyKSt3Zz4+Ml09dVtyZyt1Zz4+Ml0qdVtyZyt0Zz4+Ml0sKDB8dmcpIT0oMHwocWc9cWcrMXwwKSk7KTtpZighKCgwfHZnKTwxKSl7Zm9yKHdnPXFbYSsxNTY+PjJdLHRnPXFbYSsxMjA+PjJdLHVnPXFbYSsxMzY+PjJdLHFnPTA7dVsocmc9cWc8PDIpK3dnPj4yXT11W3JnK3VnPj4yXSp1W3JnK3RnPj4yXSwoMHx2ZykhPSgwfChxZz1xZysxfDApKTspO2lmKCEoKDB8dmcpPDEpKXtmb3Iod2c9cVthKzE2MD4+Ml0sdGc9cVthKzEyMD4+Ml0sdWc9cVthKzE0MD4+Ml0scWc9MDt1WyhyZz1xZzw8Mikrd2c+PjJdPXVbcmcrdWc+PjJdKnVbcmcrdGc+PjJdLCgwfHZnKSE9KDB8KHFnPXFnKzF8MCkpOyk7aWYoISgoMHx2Zyk8MSkpZm9yKHdnPXFbYSsxNjQ+PjJdLHRnPXFbYSsxMjA+PjJdLHVnPXFbYSsxNDQ+PjJdLHFnPTA7dVsocmc9cWc8PDIpK3dnPj4yXT11W3JnK3VnPj4yXSp1W3JnK3RnPj4yXSwoMHx2ZykhPSgwfChxZz1xZysxfDApKTspO319fX1pZigxPD0oMHxCZykpZm9yKHdnPXFbYSsxMTI+PjJdLHVnPTA7Oyl7aWYocVtBZz4+Ml0pe2I6e2M6e2Q6e2U6e2lmKCgwfChyZz1xW3FbYSsxMTY+PjJdKyh4Zzw8Mik+PjJdKSk8PTApcVs0KygoeGc8PDUpK3lnfDApPj4yXT0wO2Vsc2V7Zm9yKHpnPXJnK3VnfDAsdGc9cVthKzE0OD4+Ml0sc2c9eCgwKSxxZz11ZztzZz14KHNnK3VbdGcrKHFnPDwyKT4+Ml0pLCgwfChxZz1xZysxfDApKTwoMHx6Zyk7KTtpZih1WzQrKHZnPSh4Zzw8NSkreWd8MCk+PjJdPXNnLCEocmc9KDB8cmcpPDEpKXtmb3IodGc9cVthKzE1Mj4+Ml0sc2c9eCgwKSxxZz11ZztzZz14KHNnK3VbdGcrKHFnPDwyKT4+Ml0pLCgwfChxZz1xZysxfDApKTwoMHx6Zyk7KTtpZih1W3ZnKzIwPj4yXT1zZyxyZylicmVhayBlO2Zvcih0Zz1xW2ErMTU2Pj4yXSxzZz14KDApLHFnPXVnO3NnPXgoc2crdVt0ZysocWc8PDIpPj4yXSksKDB8KHFnPXFnKzF8MCkpPCgwfHpnKTspO2lmKHVbdmcrMTI+PjJdPXNnLHJnKWJyZWFrIGQ7Zm9yKHRnPXFbYSsxNjA+PjJdLHNnPXgoMCkscWc9dWc7c2c9eChzZyt1W3RnKyhxZzw8Mik+PjJdKSwoMHwocWc9cWcrMXwwKSk8KDB8emcpOyk7aWYodVt2ZysxNj4+Ml09c2cscmcpYnJlYWsgYztmb3IodGc9cVthKzE2ND4+Ml0sc2c9eCgwKSxxZz11ZztzZz14KHNnK3VbdGcrKHFnPDwyKT4+Ml0pLCgwfChxZz1xZysxfDApKTwoMHx6Zyk7KTticmVhayBifX1xWzIwKygoeGc8PDUpK3lnfDApPj4yXT0wfXFbMTIrKCh4Zzw8NSkreWd8MCk+PjJdPTB9cVsxNisoKHhnPDw1KSt5Z3wwKT4+Ml09MH1zZz14KDApfXVbOCsoKHhnPDw1KSt5Z3wwKT4+Ml09c2d9aWYoQWc9QWcrNHwwLHVnPXFbd2crKHhnPDwyKT4+Ml0rdWd8MCwoMHxCZyk9PSgwfCh4Zz14ZysxfDApKSlicmVha319LG5bOV09ZnVuY3Rpb24oYSl7YXw9MDt2YXIgYWUsVWQ9MCxWZD0wLFdkPTAsWGQ9MCxZZD0wLFpkPXgoMCksX2Q9MCwkZD0wLGJlPTAsY2U9MDtpZihhZT1xW2ErMzQwPj4yXSwxPD0oMHwoV2Q9cVthKzM2MD4+Ml0pKSlmb3IoX2Q9cVthKzM2OD4+Ml0sJGQ9cVthKzM1Nj4+Ml0sVmQ9cVthKzM2ND4+Ml07dVsoWGQ9VWQ8PDIpK19kPj4yXT11W1ZkK1hkPj4yXSp1W1hkKyRkPj4yXSwoMHxXZCkhPSgwfChVZD1VZCsxfDApKTspO2lmKDE8PSgwfGFlKSlmb3IoYmU9cVthKzM0OD4+Ml0sY2U9cVthKzM0ND4+Ml0sWGQ9cVthKzM1Mj4+Ml0sVmQ9MDs7KXtpZigoMHwoVWQ9cVsoV2Q9WWQ8PDIpK1hkPj4yXSkpPDEpWmQ9eCgwKTtlbHNlIGZvcihfZD1VZCtWZHwwLCRkPXFbYSszNjg+PjJdLFpkPXgoMCksVWQ9VmQ7WmQ9eChaZCt1WyRkKyhVZDw8Mik+PjJdKSwoMHwoVWQ9VWQrMXwwKSk8KDB8X2QpOyk7aWYodVsyMCsodyhZZCwyNCkrY2V8MCk+PjJdPVpkLFZkPXFbV2QrYmU+PjJdK1ZkfDAsKDB8YWUpPT0oMHwoWWQ9WWQrMXwwKSkpYnJlYWt9fSxuWzEwXT1mdW5jdGlvbihhKXt2YXIgdWQ9MCx2ZD0wLHdkPTAseGQ9MCx5ZD0wLHpkPTAsQWQ9MDtpZighKHFbMzgwKyhhfD0wKT4+Ml18fCgwfCh1ZD1xW2ErMjAwPj4yXSkpPDEpKWZvcih6ZD0odmQ9cVthKzIwND4+Ml0pKyh1ZDw8NCl8MCx1ZD1xW2ErMjQ4Pj4yXSx4ZD1xW2ErMjcyPj4yXTs7KXtpZihxW3VkPj4yXSYmKGE9MSwhKCgwfCh3ZD1xW3ZkKzEyPj4yXSkpPDEpKSlmb3Iod2Q8PD0xLEFkPXFbeGQ+PjJdO3VbKHlkPShhPDwyKStBZHwwKT4+Ml09LXVbeWQ+PjJdLCgwfChhPWErMnwwKSk8KDB8d2QpOyk7aWYoeGQ9eGQrNHwwLHVkPXVkKzR8MCwhKCh2ZD12ZCsxNnwwKT4+PjA8emQ+Pj4wKSlicmVha319LG5bMTFdPWZ1bmN0aW9uKGEsRmMsbmQpe0ZjfD0wLG5kfD0wO3ZhciBwZCxvZD0wO3JldHVybiBmYShwZD1xWzIwKyhhfD0wKT4+Ml0sRmMsb2Q9bmQ+Pj4wPChvZD1xW2ErMTY+PjJdLXBkfDApPj4+MD9uZDpvZCkscVthKzIwPj4yXT1vZCtxW2ErMjA+PjJdLDB8bmR9LG5bMTJdPWZ1bmN0aW9uKGEpe3JldHVybiAwfSxuWzEzXT1mdW5jdGlvbihhLEZjLGdkKXtGY3w9MCxnZHw9MDt2YXIgaWQsaGQ9MCxqZD0wLGtkPTAsbGQ9MCxtZD0wO2ZvcihMPWlkPUwtMzJ8MCxoZD1xWzI4KyhhfD0wKT4+Ml0scVsxNitpZD4+Ml09aGQsa2Q9cVthKzIwPj4yXSxxWzI4K2lkPj4yXT1nZCxxWzI0K2lkPj4yXT1GYyxGYz1rZC1oZHwwLGtkPShxWzIwK2lkPj4yXT1GYykrZ2R8MCxsZD0yLEZjPTE2K2lkfDA7Oyl7YTp7aWYoKGpkPShoZD0wKXxLKHFbYSs2MD4+Ml0sMHxGYywwfGxkLDEyK2lkfDApKSYmKHFbMTkwNl09amQsaGQ9LTEpLCgwfChoZD1oZD9xWzEyK2lkPj4yXT0tMTpxWzEyK2lkPj4yXSkpIT0oMHxrZCkpe2lmKC0xPCgwfGhkKSlicmVhayBhO3FbYSsyOD4+Ml09MCxxW2ErMTY+PjJdPTAscVthKzIwPj4yXT0wLHFbYT4+Ml09MzJ8cVthPj4yXSwyIT0oKGE9MCl8bGQpJiYoYT1nZC1xW0ZjKzQ+PjJdfDApfWVsc2UgRmM9cVthKzQ0Pj4yXSxxW2ErMjg+PjJdPUZjLHFbYSsyMD4+Ml09RmMscVthKzE2Pj4yXT1GYytxW2ErNDg+PjJdLGE9Z2Q7cmV0dXJuIEw9MzIraWR8MCwwfGF9amQ9aGQtKChtZD0oamQ9cVtGYys0Pj4yXSk+Pj4wPGhkPj4+MCk/amQ6MCl8MCxxWyhGYz1tZD9GYys4fDA6RmMpPj4yXT1qZCtxW0ZjPj4yXSxxW0ZjKzQ+PjJdPXFbRmMrND4+Ml0tamQsa2Q9a2QtaGR8MCxsZD1sZC1tZHwwfX0sblsxNF09ZnVuY3Rpb24oYSxGYyxnZCxoZCl7cmV0dXJuIE09MH0sblsxNV09ZnVuY3Rpb24oYSxVYixGYyxHYyxIYyxJYyl7YXw9MCxVYj0rVWIsRmN8PTAsR2N8PTAsSGN8PTAsSWN8PTA7dmFyIE5jLFpjLGRkLEpjPTAsS2M9MCxMYz0wLE1jPTAsT2M9MCxQYz0wLFFjPTAsUmM9MCxTYz0wLFRjPTAsVWM9MCxWYz0wLFdjPTAsWGM9MCxZYz0wLF9jPTAsJGM9MDtpZihxWzQ0KyhMPU5jPUwtNTYwfDApPj4yXT0wLGgoK1ViKSxKYz0wfGUoMSksZGQ9NDI5NDk2NzI5NTxlKDApPj4+MD8wOjEsWmM9KDB8SmMpPC0xfHwoMHxKYyk8PS0xJiZkZD8oaCgrKFViPS1VYikpLEpjPTB8ZSgxKSxlKDApLFljPTEsMzE4NCk6MjA0OCZIYz8oWWM9MSwzMTg3KTooWWM9MSZIYyk/MzE5MDozMTg1LDIxNDY0MzUwNzIhPSgyMTQ2NDM1MDcyJkpjKSlpZihVYj1mdW5jdGlvbiBuYShhLG9hKXt2YXIgcWEscmEscGE9MDtpZihoKCthKSxwYT0wfGUoMSkscWE9MHxlKDApLDIwNDchPSgwfChwYT0ocmE9cGEpPj4+MjAmMjA0NykpKXtpZighcGEpcmV0dXJuIHBhPW9hLG9hPTA9PWE/MDooYT1uYSgweDEwMDAwMDAwMDAwMDAwMDAwKmEsb2EpLHFbb2E+PjJdKy02NHwwKSxxW3BhPj4yXT1vYSxhO3Fbb2E+PjJdPXBhKy0xMDIyLGYoMCwwfHFhKSxmKDEsLTIxNDY0MzUwNzMmcmF8MTA3MTY0NDY3MiksYT0rZygpfXJldHVybiBhfShVYiw0NCtOY3wwKSwwIT0oVWIrPVViKSYmKHFbNDQrTmM+PjJdPXFbNDQrTmM+PjJdKy0xKSxWYz0xNitOY3wwLDk3IT0oMHwoX2M9MzJ8SWMpKSl7Zm9yKEpjPSgwfEdjKTwwLDAhPVViPyhNYz1xWzQ0K05jPj4yXSstMjh8MCxxWzQ0K05jPj4yXT1NYyxVYio9MjY4NDM1NDU2KTpNYz1xWzQ0K05jPj4yXSxQYz1KYz82OkdjLExjPVRjPSgwfE1jKTwwPzQ4K05jfDA6MzM2K05jfDA7SmM9VWI8NDI5NDk2NzI5NiYwPD1VYj9+flViPj4+MDowLExjPShHYz1MYykrNHwwLDAhPShVYj0xZTkqKFViLSgocVtHYz4+Ml09SmMpPj4+MCkpKTspO2lmKCgwfE1jKTwxKUpjPUxjLEtjPVRjO2Vsc2UgZm9yKEtjPVRjOzspe2lmKFVjPSgwfE1jKTwyOT9NYzoyOSwhKChKYz1MYystNHwwKT4+PjA8S2M+Pj4wKSl7Zm9yKEdjPVVjLFJjPTA7UWM9MCwkYz1SYyxSYz1xWyhTYz1KYyk+PjJdLE9jPTMxJkdjLE9jPTMyPD0oNjMmR2MpPj4+MD8oTWM9UmM8PE9jLDApOihNYz0oMTw8T2MpLTEmUmM+Pj4zMi1PYyxSYzw8T2MpLFFjPU1jK1FjfDAsUWM9KFJjPSRjK09jfDApPj4+MDxPYz4+PjA/UWMrMXwwOlFjLCRjPVNjLFNjPWdjKFJjPWhjKE9jPVJjLFFjLDFlOSksTSwxZTkpLHFbJGM+PjJdPU9jLVNjLEtjPj4+MDw9KEpjPUpjKy00fDApPj4+MDspOyhHYz1SYykmJihxWyhLYz1LYystNHwwKT4+Ml09R2MpfWZvcig7S2M+Pj4wPChKYz1MYyk+Pj4wJiYhcVsoTGM9SmMrLTR8MCk+PjJdOyk7aWYoTWM9cVs0NCtOYz4+Ml0tVWN8MCxMYz1KYywhKDA8KDB8KHFbNDQrTmM+PjJdPU1jKSkpKWJyZWFrfWlmKCgwfE1jKTw9LTEpZm9yKFhjPTErKChQYysyNXwwKS85fDApfDAsVWM9MTAyPT0oMHxfYyk7Oyl7aWYoUmM9KDB8TWMpPC05Pzk6MC1NY3wwLEpjPj4+MDw9S2M+Pj4wKUtjPXFbS2M+PjJdP0tjOktjKzR8MDtlbHNle2ZvcihTYz0xZTk+Pj5SYyxPYz0tMTw8UmNeLTEsTWM9MCxMYz1LYztHYz1xW0xjPj4yXSxxW0xjPj4yXT0oR2M+Pj5SYykrTWMsTWM9dyhTYyxHYyZPYyksKExjPUxjKzR8MCk+Pj4wPEpjPj4+MDspO0tjPXFbS2M+PjJdP0tjOktjKzR8MCxNYyYmKHFbSmM+PjJdPU1jLEpjPUpjKzR8MCl9aWYoTWM9UmMrcVs0NCtOYz4+Ml18MCxKYz0oMHxYYyk8SmMtKEdjPVVjP1RjOktjKT4+Mj9HYysoWGM8PDIpfDA6SmMsISgoMHwocVs0NCtOYz4+Ml09TWMpKTwwKSlicmVha31pZighKEpjPj4+KExjPTApPD1LYz4+PjB8fChMYz13KFRjLUtjPj4yLDkpLE1jPTEwLChHYz1xW0tjPj4yXSk+Pj4wPDEwKSkpZm9yKDtMYz1MYysxfDAsKE1jPXcoTWMsMTApKT4+PjA8PUdjPj4+MDspO2lmKCgwfChHYz0oUGMtKDEwMj09KDB8X2MpPzA6TGMpfDApLSgxMDM9PSgwfF9jKSYwIT0oMHxQYykpfDApKTwodyhKYy1UYz4+Miw5KSstOXwwKSl7aWYoUWM9KFRjKygoT2M9KDB8KFNjPUdjKzkyMTZ8MCkpLzl8MCk8PDIpfDApLTQwOTJ8MCxHYz0xMCwoMHwoTWM9U2MtdyhPYyw5KXwwKSk8PTcpZm9yKDtHYz13KEdjLDEwKSxPYz0oMHxNYyk8NyxNYz1NYysxfDAsT2M7KTtpZihYYz1RYys0fDAsKChSYz0oVWM9cVtRYz4+Ml0pLXcoR2MsU2M9KFVjPj4+MCkvKEdjPj4+MCl8MCl8MCl8fCgwfFhjKSE9KDB8SmMpKSYmKFdjPVJjPj4+MDwoT2M9R2M+Pj4xKT4+PjA/LjU6KDB8SmMpPT0oMHxYYykmJigwfE9jKT09KDB8UmMpPzE6MS41LFViPTEmU2M/OTAwNzE5OTI1NDc0MDk5NDo5MDA3MTk5MjU0NzQwOTkyLCFZY3w0NSE9clswfFpjXXx8KFdjPS1XYyxVYj0tVWIpLE9jPVVjLVJjfDAscVtRYz4+Ml09T2MsVWIrV2MhPVViKSl7aWYoR2M9R2MrT2N8MCwxZTk8PShxW1FjPj4yXT1HYyk+Pj4wKWZvcig7KFFjPVFjKy00fChxW1FjPj4yXT0wKSk+Pj4wPEtjPj4+MCYmKHFbKEtjPUtjKy00fDApPj4yXT0wKSxHYz1xW1FjPj4yXSsxfDAsOTk5OTk5OTk5PChxW1FjPj4yXT1HYyk+Pj4wOyk7aWYoTGM9dyhUYy1LYz4+Miw5KSxNYz0xMCwhKChHYz1xW0tjPj4yXSk+Pj4wPDEwKSlmb3IoO0xjPUxjKzF8MCwoTWM9dyhNYywxMCkpPj4+MDw9R2M+Pj4wOyk7fUpjPShHYz1RYys0fDApPj4+MDxKYz4+PjA/R2M6SmN9ajp7Zm9yKDs7KXtpZigoVWM9SmMpPj4+KFNjPTApPD1LYz4+PjApYnJlYWsgajtpZihxWyhKYz1VYystNHwwKT4+Ml0pYnJlYWt9U2M9MX1pZigxMDM9PSgwfF9jKSl7aWYoUGM9KChHYz0oMHxMYyk8KDB8KEpjPVBjfHwxKSkmLTU8KDB8TGMpKT8tMV5MYzotMSkrSmN8MCxJYz0oR2M/LTE6LTIpK0ljfDAsIShPYz04JkhjKSl7aWYoSmM9OSxTYyYmKE9jPXFbVWMrLTQ+PjJdKSYmISgoT2M+Pj4oSmM9MCkpJShHYz0xMCkpKWZvcig7SmM9SmMrMXwwLCEoKE9jPj4+MCklKChHYz13KEdjLDEwKSk+Pj4wKSk7KTtHYz13KFVjLVRjPj4yLDkpKy05fDAsUGM9MTAyIT0oMzJ8SWMpPygoT2M9MCl8UGMpPCgwfChHYz0wPCgwfChHYz0oR2MrTGN8MCktSmN8MCkpP0djOjApKT9QYzpHYzooKE9jPTApfFBjKTwoMHwoR2M9MDwoMHwoR2M9R2MtSmN8MCkpP0djOjApKT9QYzpHY319ZWxzZSBPYz04JkhjO2lmKFFjPTAhPSgwfChNYz1QY3xPYykpLEdjPWEsJGM9RmMsSmM9MDwoMHxMYyk/TGM6MCwxMDIhPSgwfChSYz0zMnxJYykpKXtpZigoVmMtKEpjPWVhKChKYz1MYz4+MzEpK0xjXkpjLDAsVmMpKXwwKTw9MSlmb3IoO29bMHwoSmM9SmMrLTF8MCldPTQ4LChWYy1KY3wwKTwyOyk7b1swfChYYz1KYystMnwwKV09SWMsb1tKYystMXwwXT0oMHxMYyk8MD80NTo0MyxKYz1WYy1YY3wwfV8oR2MsMzIsJGMsUWM9MSsoSmMrKFFjKyhQYytZY3wwKXwwKXwwKXwwLEhjKSxaKGEsWmMsWWMpLF8oYSw0OCxGYyxRYyw2NTUzNl5IYyk7bjp7bzp7cDp7aWYoMTAyPT0oMHxSYykpe2ZvcihHYz0xNitOY3w4LExjPTE2K05jfDksS2M9SWM9VGM+Pj4wPEtjPj4+MD9UYzpLYzs7KXtKYz1lYShxW0tjPj4yXSwwLExjKTtxOmlmKCgwfEljKT09KDB8S2MpKSgwfEpjKT09KDB8TGMpJiYob1syNCtOY3wwXT00OCxKYz1HYyk7ZWxzZXtpZihKYz4+PjA8PTE2K05jPj4+MClicmVhayBxO2Zvcig7b1swfChKYz1KYystMXwwKV09NDgsMTYrTmM+Pj4wPEpjPj4+MDspO31pZihaKGEsSmMsTGMtSmN8MCksISgoS2M9S2MrNHwwKT4+PjA8PVRjPj4+MCkpYnJlYWt9aWYoTWMmJlooYSwzMjE5LDEpLCgwfFBjKTwxfFVjPj4+MDw9S2M+Pj4wKWJyZWFrIHA7Zm9yKDs7KXtpZigxNitOYz4+PjA8KEpjPWVhKHFbS2M+PjJdLDAsTGMpKT4+PjApZm9yKDtvWzB8KEpjPUpjKy0xfDApXT00OCwxNitOYz4+PjA8SmM+Pj4wOyk7aWYoWihhLEpjLCgwfFBjKTw5P1BjOjkpLEpjPVBjKy05fDAsVWM+Pj4wPD0oS2M9S2MrNHwwKT4+PjApYnJlYWsgbztpZihHYz05PCgwfFBjKSxQYz1KYywhR2MpYnJlYWt9YnJlYWsgb31yOmlmKCEoKDB8UGMpPDApKWZvcihJYz1TYz9VYzpLYys0fDAsR2M9MTYrTmN8OCxUYz0xNitOY3w5LExjPUtjOzspeygwfFRjKT09KDB8KEpjPWVhKHFbTGM+PjJdLDAsVGMpKSkmJihvWzI0K05jfDBdPTQ4LEpjPUdjKTtzOmlmKCgwfEtjKT09KDB8TGMpKVooYSxKYywxKSxKYz1KYysxfDAsKDB8UGMpPDEmJiFPY3x8WihhLDMyMTksMSk7ZWxzZXtpZihKYz4+PjA8PTE2K05jPj4+MClicmVhayBzO2Zvcig7b1swfChKYz1KYystMXwwKV09NDgsMTYrTmM+Pj4wPEpjPj4+MDspO31pZihaKGEsUmM9SmMsKDB8KEpjPVRjLUpjfDApKTwoMHxQYyk/SmM6UGMpLFBjPVBjLUpjfDAsSWM+Pj4wPD0oTGM9TGMrNHwwKT4+PjApYnJlYWsgcjtpZighKC0xPCgwfFBjKSkpYnJlYWt9XyhhLDQ4LFBjKzE4fDAsMTgsMCksWihhLFhjLFZjLVhjfDApO2JyZWFrIG59SmM9UGN9XyhhLDQ4LEpjKzl8MCw5LDApfX1lbHNle2lmKE9jPShUYz0zMiZJYyk/OStaY3wwOlpjLCEoMTE8R2M+Pj4wKSYmKEpjPTEyLUdjfDApKXtmb3IoV2M9ODtXYyo9MTYsSmM9SmMrLTF8MDspO1ViPTQ1IT1yWzB8T2NdP1ViK1djLVdjOi0oV2MrKC1VYi1XYykpfWZvcigoMHxWYyk9PSgwfChKYz1lYSgoTGM9KEpjPXFbNDQrTmM+PjJdKT4+MzEpXkpjK0xjLDAsVmMpKSkmJihvWzE1K05jfDBdPTQ4LEpjPTE1K05jfDApLFBjPTJ8WWMsTGM9cVs0NCtOYz4+Ml0sb1swfChTYz1KYystMnwwKV09SWMrMTUsb1tKYystMXwwXT0oMHxMYyk8MD80NTo0MyxKYz04JkhjLEtjPTE2K05jfDA7SWM9S2MsUmM9VGMsTGM9eShVYik8MjE0NzQ4MzY0OD9+flViOi0yMTQ3NDgzNjQ4LG9bMHxLY109UmN8cltMYyszMTY4fDBdLDEhPSgoS2M9SWMrMXwwKS0oMTYrTmN8MCl8MCl8KDA9PShVYj0xNiooVWItKDB8TGMpKSk/IShKY3wwPCgwfEdjKSk6MCl8fChvW0ljKzF8MF09NDYsS2M9SWMrMnwwKSwwIT1VYjspO18oYSwzMixGYyxRYz0oSWM9IUdjfCgwfEdjKTw9KChLYy1OY3wwKS0xOHwwKT8oKFZjLSgxNitOY3wwKXwwKS1TY3wwKStLY3wwOjIrKChHYytWY3wwKS1TY3wwKXwwKStQY3wwLEhjKSxaKGEsT2MsUGMpLF8oYSw0OCxGYyxRYyw2NTUzNl5IYyksWihhLDE2K05jfDAsR2M9S2MtKDE2K05jfDApfDApLF8oYSw0OCxJYy0oKEpjPUdjKSsoR2M9VmMtU2N8MCl8MCl8MCwwLDApLFooYSxTYyxHYyl9ZWxzZSBfKGEsMzIsRmMsUWM9WWMrM3wwLC02NTUzNyZIYyksWihhLFpjLFljKSxHYz1JYz4+PjUmMSxaKGEsVWIhPVViP0djPzMyMTE6MzIxNTpHYz8zMjAzOjMyMDcsMyk7cmV0dXJuIF8oYSwzMixGYyxRYyw4MTkyXkhjKSxMPTU2MCtOY3wwLDB8KCgwfFFjKTwoMHxGYyk/RmM6UWMpfSxuWzE2XT1mdW5jdGlvbihhLFViKXt2YXIgdWMsRGMsRWM7YXw9MCxVYj1xWyh1Yz1VYnw9MCk+PjJdKzE1Ji0xNixxW3VjPj4yXT1VYisxNixEYz1hLEVjPWZ1bmN0aW9uKGEsVWIsVmIsbGMpe3ZhciBvYyxxYyxyYyxtYz0wLG5jPTAscGM9MDtMPW9jPUwtMzJ8MCxtYz0ocWM9bWM9MjE0NzQ4MzY0NyZsYyktMTAwNjY5ODQ5NnwwLChuYz1wYz1WYik+Pj4wPDAmJihtYz1tYysxfDApLHJjPW5jLG5jPW1jLG1jPXFjLTExNDA3ODUxNTJ8MCxwYz4+PjA8MCYmKG1jPW1jKzF8MCk7YTppZigoMHxtYyk9PSgwfG5jKSZyYz4+PjA8cGM+Pj4wfG5jPj4+MDxtYz4+PjApe2lmKG1jPWxjPDw0fFZiPj4+MjgsVmI9VmI8PDR8VWI+Pj4yOCwxMzQyMTc3Mjg9PSgwfChwYz1VYiY9MjY4NDM1NDU1KSkmMTw9YT4+PjB8MTM0MjE3NzI4PFViPj4+MCl7bWM9bWMrMTA3Mzc0MTgyNHwwLChhPVZiKzF8MCk+Pj4wPDEmJihtYz1tYysxfDApLG5jPWE7YnJlYWsgYX1pZihtYz1tYy0oKChuYz1WYik+Pj4wPDApKy0xMDczNzQxODI0fDApfDAsYXwxMzQyMTc3MjhecGMpYnJlYWsgYTsoYT1uYysoMSZuYyl8MCk+Pj4wPG5jPj4+MCYmKG1jPW1jKzF8MCksbmM9YX1lbHNlKCFwYyYyMTQ3NDE4MTEyPT0oMHxxYyk/IShhfFViKToyMTQ3NDE4MTEyPT0oMHxxYykmcGM+Pj4wPDB8cWM+Pj4wPDIxNDc0MTgxMTIpPyhtYz0yMTQ2NDM1MDcyLDExNDA3ODUxNTE9PSgobmM9MCl8cWMpJjQyOTQ5NjcyOTU8cGM+Pj4wfDExNDA3ODUxNTE8cWM+Pj4wfHwocGM9cWM+Pj4xNik+Pj4obWM9MCk8MTUyNDl8fChmdW5jdGlvbihhLFViLFZiLGxjLHRjLHVjKXt2YXIgemM9MCxBYz0wLEJjPTAsQ2M9MDthOmlmKDY0JnVjKVViPTMxJihWYj11Yy02NHwwKSxVYj0zMjw9KDYzJlZiKT4+PjA/KFZiPTAsdGM+Pj5VYik6KFZiPXRjPj4+VWIsKCgxPDxVYiktMSZ0Yyk8PDMyLVVifGxjPj4+VWIpLHRjPWxjPTA7ZWxzZXtpZighdWMpYnJlYWsgYTtBYz10YyxCYz1sYyx6Yz0zMSYoQ2M9NjQtdWN8MCksQ2M9MzI8PSg2MyZDYyk+Pj4wPyhBYz1CYzw8emMsMCk6KEFjPSgxPDx6YyktMSZCYz4+PjMyLXpjfEFjPDx6YyxCYzw8emMpLEJjPVViLFViPTMxJih6Yz11YyksVWI9MzI8PSg2MyZ6Yyk+Pj4wPyh6Yz0wLFZiPj4+VWIpOih6Yz1WYj4+PlViLCgoMTw8VWIpLTEmVmIpPDwzMi1VYnxCYz4+PlViKSxVYnw9Q2MsVmI9emN8QWMsemM9bGMsbGM9MzEmdWMsbGM9MzI8PSg2MyZ1Yyk+Pj4wPyhBYz0wLHRjPj4+bGMpOihBYz10Yz4+PmxjLCgoMTw8bGMpLTEmdGMpPDwzMi1sY3x6Yz4+PmxjKSx0Yz1BY31xW2E+PjJdPVViLHFbNCthPj4yXT1WYixxWzgrYT4+Ml09bGMscVsxMithPj4yXT10Y30ob2MsYSxVYixWYixtYz02NTUzNSZsY3w2NTUzNiwxNTM2MS1wY3wwKSxmdW5jdGlvbihhLFViLFZiLGxjLHRjLHVjKXt2YXIgdmM9MCx3Yz0wLHhjPTAseWM9MDs2NCZ1Yz8obGM9VWIsVWI9MzEmKHRjPXVjKy02NHwwKSwzMjw9KDYzJnRjKT4+PjA/KHRjPWxjPDxVYixsYz0wKToodGM9KDE8PFViKS0xJmxjPj4+MzItVWJ8VmI8PFViLGxjPDw9VWIpLFZiPVViPTApOnVjJiYodmM9bGMsbGM9MzEmKHhjPXVjKSx5Yz0zMjw9KDYzJnVjKT4+PjA/KHdjPXZjPDxsYywwKTood2M9KDE8PGxjKS0xJnZjPj4+MzItbGN8dGM8PGxjLHZjPDxsYyksbGM9VmIsdmM9VWIsdGM9MzEmKHVjPTY0LXVjfDApLDMyPD0oNjMmdWMpPj4+MD8odWM9MCxsYz4+Pj10Yyk6KHVjPWxjPj4+dGMsbGM9KCgxPDx0YyktMSZsYyk8PDMyLXRjfHZjPj4+dGMpLGxjfD15Yyx0Yz11Y3x3Yyx1Yz1VYixVYj0zMSZ4YyxVYj0zMjw9KDYzJnhjKT4+PjA/KHdjPXVjPDxVYiwwKTood2M9KDE8PFViKS0xJnVjPj4+MzItVWJ8VmI8PFViLHVjPDxVYiksVmI9d2MpLHFbYT4+Ml09VWIscVs0K2E+PjJdPVZiLHFbOCthPj4yXT1sYyxxWzEyK2E+PjJdPXRjfSgxNitvY3wwLGEsVWIsVmIsbWMscGMrLTE1MjMzfDApLFZiPXFbNCtvYz4+Ml0sYT1xWzgrb2M+PjJdLG1jPXFbMTIrb2M+PjJdPDw0fGE+Pj4yOCxuYz1hPDw0fFZiPj4+MjgsMTM0MjE3NzI4PT0oMHwoVmI9YT0yNjg0MzU0NTUmVmIpKSYxPD0oVWI9cVtvYz4+Ml18KDAhPShxWzE2K29jPj4yXXxxWzI0K29jPj4yXSl8MCE9KHFbMjArb2M+PjJdfHFbMjgrb2M+PjJdKSkpPj4+MHwxMzQyMTc3Mjg8YT4+PjA/KChhPW5jKzF8MCk+Pj4wPDEmJihtYz1tYysxfDApLG5jPWEpOlVifDEzNDIxNzcyOF5WYnx8KChhPW5jKygxJm5jKXwwKT4+PjA8bmM+Pj4wJiYobWM9bWMrMXwwKSxuYz1hKSkpOihuYz1WYjw8NHxVYj4+PjI4LG1jPTUyNDI4NyYobWM9bGM8PDR8VmI+Pj4yOCl8MjE0Njk1OTM2MCk7cmV0dXJuIEw9MzIrb2N8MCxmKDAsMHxuYyksZigxLC0yMTQ3NDgzNjQ4JmxjfG1jKSwrZygpfShxW1ViPj4yXSxxW1ViKzQ+PjJdLHFbVWIrOD4+Ml0scVtVYisxMj4+Ml0pLHZbRGM+PjNdPUVjfSx7X193YXNtX2NhbGxfY3RvcnM6ZnVuY3Rpb24oKXt9LGNzbUdldFZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gNjcxMDg4NjR9LGNzbUdldExhdGVzdE1vY1ZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gM30sY3NtR2V0TW9jVmVyc2lvbjpmdW5jdGlvbihhLFViKXtyZXR1cm4gVWJ8PTAsTD1VYj1MLTE2fDAsYT0oYXw9MCk/bWEoYSk/KFkoNCwxNTMzLDApLDApOnJbYSs0fDBdOihxW1ViKzQ+PjJdPTEyNDYscVtVYj4+Ml09MTY3MSxZKDQsMTA4NyxVYiksMCksTD1VYisxNnwwLDB8YX0sY3NtU2V0TG9nRnVuY3Rpb246ZnVuY3Rpb24oYSl7YXw9MCxxWzE2NDFdPWF9LGNzbVJldml2ZU1vY0luUGxhY2U6ZnVuY3Rpb24oYSxxaSl7dmFyIHJpO3JldHVybiBxaXw9MCxMPXJpPUwtNDh8MCxhPShhfD0wKT8oYSs2MyYtNjQpPT0oMHxhKT8ocWkrNjMmLTY0KT09KDB8cWkpJiZxaT9mdW5jdGlvbihhKXt2YXIgVmUscWU9MCxyZT0wLEplPTAsV2U9MCxYZT0wLFllPTAsWmU9MCxfZT0wLCRlPTAsYWY9MDtpZihxWzI0KyhMPVZlPUwtMzJ8MCk+PjJdPTAscVsxNitWZT4+Ml09NCxmdW5jdGlvbihhKXt2YXIgdGQ7c2EoMTYrKEw9dGQ9TC0yNzJ8MCl8MCwxNjExLHFbMTIrdGQ+PjJdPWEpLGZ1bmN0aW9uKGEpe3ZhciBzZDtxWyhMPXNkPUwtMTZ8MCk+PjJdPWEsZnVuY3Rpb24oYSxGYyl7dmFyIGdkO3JhKGEsMTE3NixxWzEyKyhMPWdkPUwtMTZ8MCk+PjJdPUZjLDAsMCksTD0xNitnZHwwfShxWzY3MF0sc2QpLEw9MTYrc2R8MH0oMTYrdGR8MCksTD0yNzIrdGR8MH0oMTYrVmV8KHFbMjArVmU+PjJdPTApKSxtYShhKSlZKDQsMTE4MywwKSxhPTA7ZWxzZSBpZig0PD0ocmU9clthKzR8MF0pPj4+MClxWzQrVmU+PjJdPXJlLHFbVmU+PjJdPTMsWSg0LDEzMzIsVmUpLGE9MDtlbHNle2ZvcigxIT0oMHwoV2U9IXJbYSs1fDBdKSkmJihjYShhKzR8MCwxKSxYKGEtIC02NHwwLDQsMTYwKSxvW2ErNXwwXT0wKSxxZT1hLSAtNjR8MCxKZT0xMDIscmU9YSs3MDR8MDtxW3JlPj4yXT1xW3FlPj4yXSthLHJlPXJlKzR8MCxxZT1xZSs0fDAsSmU9SmUrLTF8MDspO2lmKDEhPSgwfFdlKSYmKHJlPXJbYSs0fDBdLFgocVthKzcwND4+Ml0sNCwzMiksY2EocVthKzcwOD4+Ml0sNCksY2EocVthKzcwOD4+Ml0rNHwwLDQpLGNhKHFbYSs3MDg+PjJdKzh8MCw0KSxjYShxW2ErNzA4Pj4yXSsxMnwwLDQpLGNhKHFbYSs3MDg+PjJdKzE2fDAsNCksY2EocVthKzcwOD4+Ml0rMjB8MCwxKSxYKHFbYSs3MjA+PjJdLDQscVtxW2ErNzA0Pj4yXT4+Ml0pLFgocVthKzcyND4+Ml0sNCxxW3FbYSs3MDQ+PjJdPj4yXSksWChxW2ErNzI4Pj4yXSw0LHFbcVthKzcwND4+Ml0+PjJdKSxYKHFbYSs3MzI+PjJdLDQscVtxW2ErNzA0Pj4yXT4+Ml0pLFgocVthKzczNj4+Ml0sNCxxW3FbYSs3MDQ+PjJdPj4yXSksWChxW2ErNzQwPj4yXSw0LHFbcVthKzcwND4+Ml0+PjJdKSxYKHFbYSs3NTI+PjJdLDQscVtxW2ErNzA0Pj4yXSs0Pj4yXSksWChxW2ErNzU2Pj4yXSw0LHFbcVthKzcwND4+Ml0rND4+Ml0pLFgocVthKzc2MD4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzQ+PjJdKSxYKHFbYSs3NjQ+PjJdLDQscVtxW2ErNzA0Pj4yXSs0Pj4yXSksWChxW2ErNzY4Pj4yXSw0LHFbcVthKzcwND4+Ml0rND4+Ml0pLFgocVthKzc3Mj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzQ+PjJdKSxYKHFbYSs3NzY+PjJdLDQscVtxW2ErNzA0Pj4yXSs0Pj4yXSksWChxW2ErNzgwPj4yXSw0LHFbcVthKzcwND4+Ml0rOD4+Ml0pLFgocVthKzc4ND4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzg+PjJdKSxYKHFbYSs3ODg+PjJdLDQscVtxW2ErNzA0Pj4yXSs4Pj4yXSksWChxW2ErNzkyPj4yXSw0LHFbcVthKzcwND4+Ml0rOD4+Ml0pLFgocVthKzc5Nj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzg+PjJdKSxYKHFbYSs4MDA+PjJdLDQscVtxW2ErNzA0Pj4yXSs4Pj4yXSksWChxW2ErODA0Pj4yXSw0LHFbcVthKzcwND4+Ml0rMTI+PjJdKSxYKHFbYSs4MDg+PjJdLDQscVtxW2ErNzA0Pj4yXSsxMj4+Ml0pLFgocVthKzgxMj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzEyPj4yXSksWChxW2ErODE2Pj4yXSw0LHFbcVthKzcwND4+Ml0rMTI+PjJdKSxYKHFbYSs4NDA+PjJdLDQscVtxW2ErNzA0Pj4yXSsxNj4+Ml0pLFgocVthKzg0ND4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzE2Pj4yXSksWChxW2ErODQ4Pj4yXSw0LHFbcVthKzcwND4+Ml0rMTY+PjJdKSxYKHFbYSs4NTI+PjJdLDQscVtxW2ErNzA0Pj4yXSsxNj4+Ml0pLFgocVthKzg1Nj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzE2Pj4yXSksWChxW2ErODYwPj4yXSw0LHFbcVthKzcwND4+Ml0rMTY+PjJdKSxYKHFbYSs4NjQ+PjJdLDQscVtxW2ErNzA0Pj4yXSsxNj4+Ml0pLFgocVthKzg2OD4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzE2Pj4yXSksWChxW2ErODcyPj4yXSwxLHFbcVthKzcwND4+Ml0rMTY+PjJdKSxYKHFbYSs4NzY+PjJdLDQscVtxW2ErNzA0Pj4yXSsxNj4+Ml0pLFgocVthKzg4MD4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzE2Pj4yXSksWChxW2ErODg0Pj4yXSw0LHFbcVthKzcwND4+Ml0rMTY+PjJdKSxYKHFbYSs4ODg+PjJdLDQscVtxW2ErNzA0Pj4yXSsxNj4+Ml0pLFgocVthKzg5Mj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzE2Pj4yXSksWChxW2ErODk2Pj4yXSw0LHFbcVthKzcwND4+Ml0rMTY+PjJdKSxYKHFbYSs5MDg+PjJdLDQscVtxW2ErNzA0Pj4yXSsyMD4+Ml0pLFgocVthKzkxMj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzIwPj4yXSksWChxW2ErOTE2Pj4yXSw0LHFbcVthKzcwND4+Ml0rMjA+PjJdKSxYKHFbYSs5MjA+PjJdLDQscVtxW2ErNzA0Pj4yXSsyMD4+Ml0pLFgocVthKzkyND4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzIwPj4yXSksWChxW2ErOTI4Pj4yXSw0LHFbcVthKzcwND4+Ml0rMjA+PjJdKSxYKHFbYSs5MzI+PjJdLDQscVtxW2ErNzA0Pj4yXSsyMD4+Ml0pLFgocVthKzkzNj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzI0Pj4yXSksWChxW2ErOTQwPj4yXSw0LHFbcVthKzcwND4+Ml0rMjg+PjJdKSxYKHFbYSs5NDQ+PjJdLDQscVtxW2ErNzA0Pj4yXSsyOD4+Ml0pLFgocVthKzk0OD4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzMyPj4yXSksWChxW2ErOTUyPj4yXSw0LHFbcVthKzcwND4+Ml0rMzI+PjJdKSxYKHFbYSs5NTY+PjJdLDQscVtxW2ErNzA0Pj4yXSszMj4+Ml0pLFgocVthKzk2MD4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzMyPj4yXSksWChxW2ErOTY0Pj4yXSw0LHFbcVthKzcwND4+Ml0rMzI+PjJdKSxYKHFbYSs5Njg+PjJdLDQscVtxW2ErNzA0Pj4yXSszMj4+Ml0pLFgocVthKzk3Mj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzMyPj4yXSksWChxW2ErOTc2Pj4yXSw0LHFbcVthKzcwND4+Ml0rMzY+PjJdKSxYKHFbYSs5ODA+PjJdLDQscVtxW2ErNzA0Pj4yXSszNj4+Ml0pLFgocVthKzk4ND4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzM2Pj4yXSksWChxW2ErOTg4Pj4yXSw0LHFbcVthKzcwND4+Ml0rNDA+PjJdKSxYKHFbYSs5OTI+PjJdLDQscVtxW2ErNzA0Pj4yXSs0ND4+Ml0pLFgocVthKzk5Nj4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzQ4Pj4yXSksWChxW2ErMWUzPj4yXSw0LHFbcVthKzcwND4+Ml0rNDg+PjJdKSxYKHFbYSsxMDA0Pj4yXSw0LHFbcVthKzcwND4+Ml0rNTI+PjJdKSxYKHFbYSsxMDA4Pj4yXSw0LHFbcVthKzcwND4+Ml0rNTI+PjJdKSxYKHFbYSsxMDEyPj4yXSw0LHFbcVthKzcwND4+Ml0rNTY+PjJdKSxYKHFbYSsxMDE2Pj4yXSw0LHFbcVthKzcwND4+Ml0rNjA+PjJdKSxYKHFbYSsxMDIwPj4yXSwyLHFbcVthKzcwND4+Ml0rNjQ+PjJdKSxYKHFbYSsxMDI0Pj4yXSw0LHFbcVthKzcwND4+Ml0rNjg+PjJdKSxYKHFbYSsxMDI4Pj4yXSw0LHFbcVthKzcwND4+Ml0rNzI+PjJdKSxYKHFbYSsxMDMyPj4yXSw0LHFbcVthKzcwND4+Ml0rNzI+PjJdKSxYKHFbYSsxMDM2Pj4yXSw0LHFbcVthKzcwND4+Ml0rNzI+PjJdKSxYKHFbYSsxMDQwPj4yXSw0LHFbcVthKzcwND4+Ml0rNzI+PjJdKSxYKHFbYSsxMDQ0Pj4yXSw0LHFbcVthKzcwND4+Ml0rNzI+PjJdKSxYKHFbYSsxMDQ4Pj4yXSw0LHFbcVthKzcwND4+Ml0rNzY+PjJdKSxYKHFbYSsxMDUyPj4yXSw0LHFbcVthKzcwND4+Ml0rNzY+PjJdKSxYKHFbYSsxMDU2Pj4yXSw0LHFbcVthKzcwND4+Ml0rNzY+PjJdKSxYKHFbYSsxMDY4Pj4yXSw0LHFbcVthKzcwND4+Ml0rODA+PjJdKSxYKHFbYSsxMDcyPj4yXSw0LHFbcVthKzcwND4+Ml0rODA+PjJdKSxYKHFbYSsxMDc2Pj4yXSw0LHFbcVthKzcwND4+Ml0rODA+PjJdKSxYKHFbYSsxMDgwPj4yXSw0LHFbcVthKzcwND4+Ml0rODA+PjJdKSxYKHFbYSsxMDg0Pj4yXSw0LHFbcVthKzcwND4+Ml0rODA+PjJdKSxYKHFbYSsxMDg4Pj4yXSw0LHFbcVthKzcwND4+Ml0rODA+PjJdKSxYKHFbYSsxMDkyPj4yXSw0LHFbcVthKzcwND4+Ml0rODA+PjJdKSxYKHFbYSsxMDk2Pj4yXSw0LHFbcVthKzcwND4+Ml0rODQ+PjJdKSxYKHFbYSsxMTAwPj4yXSwyLHFbcVthKzcwND4+Ml0rODQ+PjJdKSxYKHFbYSsxMTA0Pj4yXSw0LHFbcVthKzcwND4+Ml0rODg+PjJdKSxyZT4+PjA8Mnx8WChxW2ErMTEwOD4+Ml0sNCxxW3FbYSs3MDQ+PjJdKzg+PjJdKSkscVsxNjQzXT01LHFbMTY0Ml09NixxWzE2NDRdPTcscVsxNjQ1XT04LHFbMTY0Nl09OSxxWzE2NDddPTEwLHFlPXFbYSs3MDQ+PjJdLDE8PXFbcWU+PjJdKWZvcihyZT0wO3FbcVthKzcxMj4+Ml0rKHJlPDwyKT4+Ml09cVthKzcxNj4+Ml0rKHJlPDw2KSxyZT1yZSsxfDAscWU9cVthKzcwND4+Ml0sKDB8cmUpPHFbcWU+PjJdOyk7aWYoMTw9cVtxZSs0Pj4yXSlmb3IocmU9MDtxW3FbYSs3NDQ+PjJdKyhyZTw8Mik+PjJdPXFbYSs3NDg+PjJdKyhyZTw8NikscmU9cmUrMXwwLHFlPXFbYSs3MDQ+PjJdLCgwfHJlKTxxW3FlKzQ+PjJdOyk7aWYoMTw9cVtxZSsxNj4+Ml0pZm9yKHJlPTA7cVsocWU9cmU8PDIpK3FbYSs4MjA+PjJdPj4yXT1xW2ErODM2Pj4yXSsocmU8PDYpLHFbcWUrcVthKzgyND4+Ml0+PjJdPXFbYSsxMDE2Pj4yXSsocVtxZStxW2ErODgwPj4yXT4+Ml08PDIpLHFbcWUrcVthKzgyOD4+Ml0+PjJdPXFbYSsxMDIwPj4yXSsocVtxZStxW2ErODg0Pj4yXT4+Ml08PDEpLHFbcWUrcVthKzgzMj4+Ml0+PjJdPXFbYSsxMDI0Pj4yXSsocVtxZStxW2ErODkyPj4yXT4+Ml08PDIpLHJlPXJlKzF8MCxxZT1xW2ErNzA0Pj4yXSwoMHxyZSk8cVtxZSsxNj4+Ml07KTtpZigxPD1xW3FlKzIwPj4yXSlmb3IocmU9MDtxW3FbYSs5MDA+PjJdKyhyZTw8Mik+PjJdPXFbYSs5MDQ+PjJdKyhyZTw8NikscmU9cmUrMXwwLHFlPXFbYSs3MDQ+PjJdLCgwfHJlKTxxW3FlKzIwPj4yXTspO2lmKDE8PXFbcWUrODA+PjJdKWZvcihyZT0wO3FbcVthKzEwNjA+PjJdKyhyZTw8Mik+PjJdPXFbYSsxMDY0Pj4yXSsocmU8PDYpLHJlPXJlKzF8MCxxZT1xW2ErNzA0Pj4yXSwoMHxyZSk8cVtxZSs4MD4+Ml07KTtpZighKDEmb1txW2ErNzA4Pj4yXSsyMHwwXXx8KDB8KFdlPXFbcWUrMTY+PjJdKSk8MSkpe2ZvcihZZT1xW2ErODg4Pj4yXSxaZT1xW2ErODg0Pj4yXSxYZT1xW2ErMTAyMD4+Ml0scmU9MDs7KXtpZigxPCgwfChKZT1xWyhxZT1yZTw8MikrWWU+PjJdKSkpZm9yKF9lPUplKy0xfDAsJGU9WGUrKHFbcWUrWmU+PjJdPDwxKXwwLHFlPTA7YWY9c1soSmU9KHFlPDwxKSskZXwwKT4+MV0scFtKZT4+MV09c1tKZSs0Pj4xXSxwW0plKzQ+PjFdPWFmLCgwfChxZT1xZSszfDApKTwoMHxfZSk7KTtpZigoMHxXZSk9PSgwfChyZT1yZSsxfDApKSlicmVha31mb3IocmU9cVthKzg3Nj4+Ml0sWWU9cVthKzg4MD4+Ml0sWmU9cVthKzEwMTY+PjJdLEplPTA7Oyl7aWYoMTw9KDB8KFhlPXFbKHFlPUplPDwyKStyZT4+Ml0pKSlmb3IoWGU9KHFlPVplKyhxW3FlK1llPj4yXTw8Mil8MCkrKFhlPDwzKXwwLHFlPXFlKzR8MDt1W3FlPj4yXT14KDEpLXVbcWU+PjJdLChxZT1xZSs4fDApPj4+MDxYZT4+PjA7KTtpZigoMHxXZSk9PSgwfChKZT1KZSsxfDApKSlicmVha319fXJldHVybiBMPTMyK1ZlfDAsYX0oYSk6KHFbMjArcmk+PjJdPTE1OTIscVsxNityaT4+Ml09MTY4OCxZKDQsMTA4NywxNityaXwwKSwwKToocVszNityaT4+Ml09MTQ0MSxxWzMyK3JpPj4yXT0xNjg4LFkoNCwxMDg3LDMyK3JpfDApLDApOihxWzQrcmk+PjJdPTEyNDYscVtyaT4+Ml09MTY4OCxZKDQsMTA4NyxyaSksMCksTD00OCtyaXwwLDB8YX0sY3NtUmVhZENhbnZhc0luZm86ZnVuY3Rpb24oYSxfaCwkaCxhaSl7dmFyIGJpO19ofD0wLCRofD0wLGFpfD0wLEw9Ymk9TCstNjR8MCwoYXw9MCk/X2g/JGg/YWk/KGE9cVtxW2E+PjJdKzcwOD4+Ml0scVtfaD4+Ml09cVthKzEyPj4yXSxxW19oKzQ+PjJdPXFbYSsxNj4+Ml0scVskaD4+Ml09cVthKzQ+PjJdLHFbJGgrND4+Ml09cVthKzg+PjJdLHFbYWk+PjJdPXFbYT4+Ml0pOihxWzUyK2JpPj4yXT0xNzgyLHFbNDgrYmk+PjJdPTE3MDgsWSg0LDEwODcsNDgrYml8MCkpOihxWzM2K2JpPj4yXT0xNzUzLHFbMzIrYmk+PjJdPTE3MDgsWSg0LDEwODcsMzIrYml8MCkpOihxWzIwK2JpPj4yXT0xNzI2LHFbMTYrYmk+PjJdPTE3MDgsWSg0LDEwODcsMTYrYml8MCkpOihxWzQrYmk+PjJdPTE2NTEscVtiaT4+Ml09MTcwOCxZKDQsMTA4NyxiaSkpLEw9NjQrYml8MH0sY3NtR2V0U2l6ZW9mTW9kZWw6d2EsY3NtSW5pdGlhbGl6ZU1vZGVsSW5QbGFjZTp2YSxjc21VcGRhdGVNb2RlbDpmdW5jdGlvbihhKXt2YXIgWmg7TD1aaD1MLTE2fDAsKGF8PTApP3RhKGEpOihxWzQrWmg+PjJdPTE2NTEscVtaaD4+Ml09MTg5MCxZKDQsMTA4NyxaaCkpLEw9MTYrWmh8MH0sY3NtR2V0UGFyYW1ldGVyQ291bnQ6ZnVuY3Rpb24oYSl7dmFyIFloO3JldHVybiBMPVloPUwtMTZ8MCxhPShhfD0wKT9xW2ErMjkyPj4yXToocVs0K1loPj4yXT0xNjUxLHFbWWg+PjJdPTE5MDUsWSg0LDEwODcsWWgpLC0xKSxMPTE2K1lofDAsMHxhfSxjc21HZXRQYXJhbWV0ZXJJZHM6ZnVuY3Rpb24oYSl7dmFyIFhoO3JldHVybiBMPVhoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rOTAwPj4yXToocVs0K1hoPj4yXT0xNjUxLHFbWGg+PjJdPTE5MjYsWSg0LDEwODcsWGgpLDApLEw9MTYrWGh8MCwwfGF9LGNzbUdldFBhcmFtZXRlck1pbmltdW1WYWx1ZXM6ZnVuY3Rpb24oYSl7dmFyIFdoO3JldHVybiBMPVdoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rOTEyPj4yXToocVs0K1doPj4yXT0xNjUxLHFbV2g+PjJdPTE5NDUsWSg0LDEwODcsV2gpLDApLEw9MTYrV2h8MCwwfGF9LGNzbUdldFBhcmFtZXRlck1heGltdW1WYWx1ZXM6ZnVuY3Rpb24oYSl7dmFyIFZoO3JldHVybiBMPVZoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rOTA4Pj4yXToocVs0K1ZoPj4yXT0xNjUxLHFbVmg+PjJdPTE5NzQsWSg0LDEwODcsVmgpLDApLEw9MTYrVmh8MCwwfGF9LGNzbUdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXM6ZnVuY3Rpb24oYSl7dmFyIFVoO3JldHVybiBMPVVoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rOTE2Pj4yXToocVs0K1VoPj4yXT0xNjUxLHFbVWg+PjJdPTIwMDMsWSg0LDEwODcsVWgpLDApLEw9MTYrVWh8MCwwfGF9LGNzbUdldFBhcmFtZXRlclZhbHVlczpmdW5jdGlvbihhKXt2YXIgU2g7cmV0dXJuIEw9U2g9TC0xNnwwLGE9KGF8PTApP3FbYSszMDA+PjJdOihxWzQrU2g+PjJdPTE2NTEscVtTaD4+Ml09MjAzMixZKDQsMTA4NyxTaCksMCksTD0xNitTaHwwLDB8YX0sY3NtR2V0UGFydENvdW50OmZ1bmN0aW9uKGEpe3ZhciBSaDtyZXR1cm4gTD1SaD1MLTE2fDAsYT0oYXw9MCk/cVthKzQ+PjJdOihxWzQrUmg+PjJdPTE2NTEscVtSaD4+Ml09MjA1NCxZKDQsMTA4NyxSaCksLTEpLEw9MTYrUmh8MCwwfGF9LGNzbUdldFBhcnRJZHM6ZnVuY3Rpb24oYSl7dmFyIFFoO3JldHVybiBMPVFoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rNzEyPj4yXToocVs0K1FoPj4yXT0xNjUxLHFbUWg+PjJdPTIwNzAsWSg0LDEwODcsUWgpLDApLEw9MTYrUWh8MCwwfGF9LGNzbUdldFBhcnRPcGFjaXRpZXM6ZnVuY3Rpb24oYSl7dmFyIFBoO3JldHVybiBMPVBoPUwtMTZ8MCxhPShhfD0wKT9xW2ErNTI+PjJdOihxWzQrUGg+PjJdPTE2NTEscVtQaD4+Ml09MjA4NCxZKDQsMTA4NyxQaCksMCksTD0xNitQaHwwLDB8YX0sY3NtR2V0UGFydFBhcmVudFBhcnRJbmRpY2VzOmZ1bmN0aW9uKGEpe3ZhciBPaDtyZXR1cm4gTD1PaD1MLTE2fDAsYT0oYXw9MCk/cVtxW2E+PjJdKzc0MD4+Ml06KHFbNCtPaD4+Ml09MTY1MSxxW09oPj4yXT0yMTA0LFkoNCwxMDg3LE9oKSwwKSxMPTE2K09ofDAsMHxhfSxjc21HZXREcmF3YWJsZUNvdW50OmZ1bmN0aW9uKGEpe3ZhciBOaDtyZXR1cm4gTD1OaD1MLTE2fDAsYT0oYXw9MCk/cVthKzIwMD4+Ml06KHFbNCtOaD4+Ml09MTY1MSxxW05oPj4yXT0yMTMyLFkoNCwxMDg3LE5oKSwtMSksTD0xNitOaHwwLDB8YX0sY3NtR2V0RHJhd2FibGVJZHM6ZnVuY3Rpb24oYSl7dmFyIE1oO3JldHVybiBMPU1oPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rODIwPj4yXToocVs0K01oPj4yXT0xNjUxLHFbTWg+PjJdPTIxNTIsWSg0LDEwODcsTWgpLDApLEw9MTYrTWh8MCwwfGF9LGNzbUdldERyYXdhYmxlQ29uc3RhbnRGbGFnczpmdW5jdGlvbihhKXt2YXIgTGg7cmV0dXJuIEw9TGg9TC0xNnwwLGE9KGF8PTApP3FbcVthPj4yXSs4NzI+PjJdOihxWzQrTGg+PjJdPTE2NTEscVtMaD4+Ml09MjE3MCxZKDQsMTA4NyxMaCksMCksTD0xNitMaHwwLDB8YX0sY3NtR2V0RHJhd2FibGVEeW5hbWljRmxhZ3M6ZnVuY3Rpb24oYSl7dmFyIEtoO3JldHVybiBMPUtoPUwtMTZ8MCxhPShhfD0wKT9xW2ErMjYwPj4yXToocVs0K0toPj4yXT0xNjUxLHFbS2g+PjJdPTIxOTgsWSg0LDEwODcsS2gpLDApLEw9MTYrS2h8MCwwfGF9LGNzbUdldERyYXdhYmxlVGV4dHVyZUluZGljZXM6ZnVuY3Rpb24oYSl7dmFyIEpoO3JldHVybiBMPUpoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rODY4Pj4yXToocVs0K0poPj4yXT0xNjUxLHFbSmg+PjJdPTIyMjUsWSg0LDEwODcsSmgpLDApLEw9MTYrSmh8MCwwfGF9LGNzbUdldERyYXdhYmxlRHJhd09yZGVyczpmdW5jdGlvbihhKXt2YXIgSWg7cmV0dXJuIEw9SWg9TC0xNnwwLGE9KGF8PTApP3FbYSsyNjg+PjJdOihxWzQrSWg+PjJdPTE2NTEscVtJaD4+Ml09MjI1NCxZKDQsMTA4NyxJaCksMCksTD0xNitJaHwwLDB8YX0sY3NtR2V0RHJhd2FibGVSZW5kZXJPcmRlcnM6ZnVuY3Rpb24oYSl7dmFyIEhoO3JldHVybiBMPUhoPUwtMTZ8MCxhPShhfD0wKT9xW2ErMjY0Pj4yXToocVs0K0hoPj4yXT0xNjUxLHFbSGg+PjJdPTIyNzksWSg0LDEwODcsSGgpLDApLEw9MTYrSGh8MCwwfGF9LGNzbUdldERyYXdhYmxlT3BhY2l0aWVzOmZ1bmN0aW9uKGEpe3ZhciBHaDtyZXR1cm4gTD1HaD1MLTE2fDAsYT0oYXw9MCk/cVthKzI3Nj4+Ml06KHFbNCtHaD4+Ml09MTY1MSxxW0doPj4yXT0yMzA2LFkoNCwxMDg3LEdoKSwwKSxMPTE2K0dofDAsMHxhfSxjc21HZXREcmF3YWJsZU1hc2tDb3VudHM6ZnVuY3Rpb24oYSl7dmFyIEZoO3JldHVybiBMPUZoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rODk2Pj4yXToocVs0K0ZoPj4yXT0xNjUxLHFbRmg+PjJdPTIzMzAsWSg0LDEwODcsRmgpLDApLEw9MTYrRmh8MCwwfGF9LGNzbUdldERyYXdhYmxlTWFza3M6ZnVuY3Rpb24oYSl7dmFyIEVoO3JldHVybiBMPUVoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rODMyPj4yXToocVs0K0VoPj4yXT0xNjUxLHFbRWg+PjJdPTIzNTUsWSg0LDEwODcsRWgpLDApLEw9MTYrRWh8MCwwfGF9LGNzbUdldERyYXdhYmxlVmVydGV4Q291bnRzOmZ1bmN0aW9uKGEpe3ZhciBEaDtyZXR1cm4gTD1EaD1MLTE2fDAsYT0oYXw9MCk/cVtxW2E+PjJdKzg3Nj4+Ml06KHFbNCtEaD4+Ml09MTY1MSxxW0RoPj4yXT0yMzc1LFkoNCwxMDg3LERoKSwwKSxMPTE2K0RofDAsMHxhfSxjc21HZXREcmF3YWJsZVZlcnRleFBvc2l0aW9uczpmdW5jdGlvbihhKXt2YXIgQ2g7cmV0dXJuIEw9Q2g9TC0xNnwwLGE9KGF8PTApP3FbYSsyNzI+PjJdOihxWzQrQ2g+PjJdPTE2NTEscVtDaD4+Ml09MjQwMixZKDQsMTA4NyxDaCksMCksTD0xNitDaHwwLDB8YX0sY3NtR2V0RHJhd2FibGVWZXJ0ZXhVdnM6ZnVuY3Rpb24oYSl7dmFyIEJoO3JldHVybiBMPUJoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rODI0Pj4yXToocVs0K0JoPj4yXT0xNjUxLHFbQmg+PjJdPTI0MzIsWSg0LDEwODcsQmgpLDApLEw9MTYrQmh8MCwwfGF9LGNzbUdldERyYXdhYmxlSW5kZXhDb3VudHM6ZnVuY3Rpb24oYSl7dmFyIGdoO3JldHVybiBMPWdoPUwtMTZ8MCxhPShhfD0wKT9xW3FbYT4+Ml0rODg4Pj4yXToocVs0K2doPj4yXT0xNjUxLHFbZ2g+PjJdPTI0NTYsWSg0LDEwODcsZ2gpLDApLEw9MTYrZ2h8MCwwfGF9LGNzbUdldERyYXdhYmxlSW5kaWNlczpmdW5jdGlvbihhKXt2YXIgZmg7cmV0dXJuIEw9Zmg9TC0xNnwwLGE9KGF8PTApP3FbcVthPj4yXSs4Mjg+PjJdOihxWzQrZmg+PjJdPTE2NTEscVtmaD4+Ml09MjQ4MixZKDQsMTA4NyxmaCksMCksTD0xNitmaHwwLDB8YX0sY3NtUmVzZXREcmF3YWJsZUR5bmFtaWNGbGFnczpmdW5jdGlvbihhKXt2YXIgZGg7TD1kaD1MLTE2fDAsKGF8PTApP3FbYSsyNTY+PjJdPTE6KHFbNCtkaD4+Ml09MTY1MSxxW2RoPj4yXT0yNTA0LFkoNCwxMDg3LGRoKSksTD0xNitkaHwwfSxjc21NYWxsb2NNb2M6ZnVuY3Rpb24oYSl7dmFyIHJkO3JldHVybiB5YSgxMisoTD1yZD1MLTE2fDApfDAsNjQsYXw9MCksTD0xNityZHwwLHFbMTIrcmQ+PjJdfSxjc21NYWxsb2NNb2RlbEFuZEluaXRpYWxpemU6ZnVuY3Rpb24oYSl7dmFyIEZjLG5kPTAscWQ9MDtyZXR1cm4gTD1GYz1MLTE2fDAsKGF8PTApJiYoeWEoMTIrRmN8MCwxNixxZD13YShhKSl8fChuZD12YShhLHFbMTIrRmM+PjJdLHFkKSl8fCh6YShxWzEyK0ZjPj4yXSksbmQ9MCkpLEw9MTYrRmN8MCwwfG5kfSxjc21NYWxsb2M6ZnVuY3Rpb24oYSl7cmV0dXJuIDB8amEoYXw9MCl9LGNzbUZyZWU6ZnVuY3Rpb24oYSl7emEoYXw9MCl9LHN0YWNrU2F2ZTpmdW5jdGlvbigpe3JldHVybiAwfEx9LHN0YWNrQWxsb2M6ZnVuY3Rpb24oYSl7cmV0dXJuIDB8KEw9TC0oYXw9MCkmLTE2KX0sc3RhY2tSZXN0b3JlOmZ1bmN0aW9uKGEpe0w9YXw9MH0sX19ncm93V2FzbU1lbW9yeTpmdW5jdGlvbihhKXtyZXR1cm4gMHxmdW5jdGlvbihwYWdlc1RvQWRkKXtwYWdlc1RvQWRkfD0wO3ZhciBQPTB8TigpLFE9UCtwYWdlc1RvQWRkfDA7aWYoUDxRJiZRPDY1NTM2KXt2YXIgUj1uZXcgQXJyYXlCdWZmZXIodyhRLDY1NTM2KSksUz1uZXcgZ2xvYmFsLkludDhBcnJheShSKTtTLnNldChvKSxvPVMsbz1uZXcgZ2xvYmFsLkludDhBcnJheShSKSxwPW5ldyBnbG9iYWwuSW50MTZBcnJheShSKSxxPW5ldyBnbG9iYWwuSW50MzJBcnJheShSKSxyPW5ldyBnbG9iYWwuVWludDhBcnJheShSKSxzPW5ldyBnbG9iYWwuVWludDE2QXJyYXkoUiksdD1uZXcgZ2xvYmFsLlVpbnQzMkFycmF5KFIpLHU9bmV3IGdsb2JhbC5GbG9hdDMyQXJyYXkoUiksdj1uZXcgZ2xvYmFsLkZsb2F0NjRBcnJheShSKSxidWZmZXI9UixtLmJ1ZmZlcj1SfXJldHVybiBQfSgwfChhfD0wKSl9LGR5bkNhbGxfdmk6ZnVuY3Rpb24oYSxfaCl7X2h8PTAsblthfD0wXShfaCl9fTtmdW5jdGlvbiBYKGEsYixjKXt2YXIgZD0wLGU9MCxmPTA7aWYoYylmb3IoOzspe2lmKGM9YystMXwwLGE+Pj4wPChkPShlPWErYnwwKS0xfDApPj4+MClmb3IoO2Y9clswfGFdLG9bMHxhXT1yWzB8ZF0sb1swfGRdPWYsKGE9YSsxfDApPj4+MDwoZD1kKy0xfDApPj4+MDspO2lmKGE9ZSwhYylicmVha319ZnVuY3Rpb24gWShhLGIsYyl7dmFyIGc7TD1nPUwtMjcyfDAsdFsxNjQwXT5hPj4+MHx8KGE9cVsxNjQxXSkmJihzYSgxNitnfDAsYixxWzEyK2c+PjJdPWMpLG5bYV0oMTYrZ3wwKSksTD0yNzIrZ3wwfWZ1bmN0aW9uIFooYSxiLGMpezMyJnJbMHxhXXx8ZnVuY3Rpb24oYSxVYixGYyl7dmFyIEdjPTAsSGM9MCxJYz0wO2E6e2lmKCEoR2M9cVtGYysxNj4+Ml0pKXtpZihmdW5jdGlvbihhKXt2YXIgVWI9MDtyZXR1cm4gVWI9clthKzc0fDBdLG9bYSs3NHwwXT1VYistMXxVYiw4JihVYj1xW2E+PjJdKT8ocVthPj4yXT0zMnxVYiwxKToocVthKzQ+PjJdPTAscVthKzg+PjJdPTAsVWI9cVthKzQ0Pj4yXSxxW2ErMjg+PjJdPVViLHFbYSsyMD4+Ml09VWIscVthKzE2Pj4yXT1VYitxW2ErNDg+PjJdLDApfShGYykpYnJlYWsgYTtHYz1xW0ZjKzE2Pj4yXX1pZihHYy0oSWM9cVtGYysyMD4+Ml0pPj4+MDxVYj4+PjApcmV0dXJuIG5bcVtGYyszNj4+Ml1dKEZjLGEsVWIpO2I6aWYoIShvW0ZjKzc1fDBdPDApKXtmb3IoR2M9VWI7Oyl7aWYoIShIYz1HYykpYnJlYWsgYjtpZigxMD09clsoR2M9SGMrLTF8MCkrYXwwXSlicmVha31pZihuW3FbRmMrMzY+PjJdXShGYyxhLEhjKT4+PjA8SGM+Pj4wKWJyZWFrIGE7VWI9VWItSGN8MCxhPWErSGN8MCxJYz1xW0ZjKzIwPj4yXX1mYShJYyxhLFViKSxxW0ZjKzIwPj4yXT1xW0ZjKzIwPj4yXStVYn19KGIsYyxhKX1mdW5jdGlvbiBfKGEsYixjLGgsaSl7dmFyIGosaz0wLGw9MDtpZihMPWo9TC0yNTZ8MCwhKDczNzI4Jml8KDB8Yyk8PSgwfGgpKSl7aWYoYmEoaixiLChrPShpPWMtaHwwKT4+PjA8MjU2KT9pOjI1NiksYj1hLGw9aiwhayl7Zm9yKGM9Yy1ofDA7WihhLGosMjU2KSwyNTU8KGk9aSstMjU2fDApPj4+MDspO2k9MjU1JmN9WihiLGwsaSl9TD0yNTYranwwfWZ1bmN0aW9uICQoYSl7dmFyIGIsYztyZXR1cm4geCgoYj1hKmEpKmIqKGM9YiphKSooMjcxODMxMTQ5Mzk4OTgyMmUtMjEqYi0uMDAwMTk4MzkzMzQ4MzYwOTY2MzIpKyhjKiguMDA4MzMzMzI5Mzg1ODg5NDYzKmItLjE2NjY2NjY2NjQxNjI2NTI0KSthKSl9ZnVuY3Rpb24gYWEoYSl7dmFyIGg7cmV0dXJuIHgoLS40OTk5OTk5OTcyNTEwMzEqKGEqPWEpKzErLjA0MTY2NjYyMzMyMzczOTA2KihoPWEqYSkrYSpoKigyNDM5MDQ0ODc5NjI3NzQxZS0yMCphLS4wMDEzODg2NzYzNzc0NjA5OTMpKX1mdW5jdGlvbiBiYShhLGksbSl7dmFyIG49MCxwPTAscj0wLHM9MDtpZihtJiYob1sobj1hK218MCktMXwwXT1pLG9bMHxhXT1pLCEobT4+PjA8M3x8KG9bbistMnwwXT1pLG9bYSsxfDBdPWksb1tuKy0zfDBdPWksb1thKzJ8MF09aSxtPj4+MDw3fHwob1tuKy00fDBdPWksb1thKzN8MF09aSxtPj4+MDw5fHwocD0obj0wLWEmMykrYXwwLGk9dygyNTUmaSwxNjg0MzAwOSkscVtwPj4yXT1pLHFbKG49KG09bS1uJi00KStwfDApLTQ+PjJdPWksbT4+PjA8OXx8KHFbcCs4Pj4yXT1pLHFbcCs0Pj4yXT1pLHFbbistOD4+Ml09aSxxW24rLTEyPj4yXT1pLG0+Pj4wPDI1fHwocVtwKzI0Pj4yXT1pLHFbcCsyMD4+Ml09aSxxW3ArMTY+PjJdPWkscVtwKzEyPj4yXT1pLHFbbistMTY+PjJdPWkscVtuKy0yMD4+Ml09aSxxW24rLTI0Pj4yXT1pLHFbbistMjg+PjJdPWksKG09bS0ocz00JnB8MjQpfDApPj4+MDwzMikpKSkpKSkpZm9yKHI9bj1pLGk9cCtzfDA7cVtpKzI0Pj4yXT1yLHFbaSsyOD4+Ml09bixxW2krMTY+PjJdPXIscVtpKzIwPj4yXT1uLHFbaSs4Pj4yXT1yLHFbaSsxMj4+Ml09bixxW2k+PjJdPXIscVtpKzQ+PjJdPW4saT1pKzMyfDAsMzE8KG09bSstMzJ8MCk+Pj4wOyk7cmV0dXJuIGF9ZnVuY3Rpb24gY2EoYSxpKXt2YXIgbT0wO2lmKGE+Pj4wPChpPShhK2l8MCktMXwwKT4+PjApZm9yKDttPXJbMHxhXSxvWzB8YV09clswfGldLG9bMHxpXT1tLChhPWErMXwwKT4+PjA8KGk9aSstMXwwKT4+PjA7KTt9ZnVuY3Rpb24gZGEoYSl7dmFyIGk7cmV0dXJuKDB8KGE9KGk9cVsyMDUyXSkrYXwwKSk8PS0xPyhxWzE5MDZdPTQ4LC0xKTphPj4+MDw9TigpPDwxNj4+PjB8fEooMHxhKT8ocVsyMDUyXT1hLGkpOihxWzE5MDZdPTQ4LC0xKX1mdW5jdGlvbiBlYShhLHEsdCl7dmFyIHU9MCx2PTAseD0wO2lmKDE9PSgwfHEpJmE+Pj4wPDB8cT4+PjA8MSl1PWE7ZWxzZSBmb3IoO3Y9Z2ModT1oYyhhLHEsMTApLHg9dj1NLDEwKSxvWzB8KHQ9dCstMXwwKV09YS12fDQ4LHY9OT09KDB8cSkmNDI5NDk2NzI5NTxhPj4+MHw5PHE+Pj4wLGE9dSxxPXgsdjspO2lmKHUpZm9yKDthPSh1Pj4+MCkvMTB8MCxvWzB8KHQ9dCstMXwwKV09dS13KGEsMTApfDQ4LHE9OTx1Pj4+MCx1PWEscTspO3JldHVybiB0fWZ1bmN0aW9uIGZhKGEsdCx3KXt2YXIgeSx6PTA7aWYoODE5Mjw9dz4+PjApSSgwfGEsMHx0LDB8dyk7ZWxzZXt5PWErd3wwO2E6aWYoMyYoYV50KSlpZih5Pj4+MDw0KXc9YTtlbHNlIGlmKCh6PXktNHwwKT4+PjA8YT4+PjApdz1hO2Vsc2UgZm9yKHc9YTtvWzB8d109clswfHRdLG9bdysxfDBdPXJbdCsxfDBdLG9bdysyfDBdPXJbdCsyfDBdLG9bdyszfDBdPXJbdCszfDBdLHQ9dCs0fDAsKHc9dys0fDApPj4+MDw9ej4+PjA7KTtlbHNle2I6aWYoKDB8dyk8MSl3PWE7ZWxzZSBpZigzJmEpZm9yKHc9YTs7KXtpZihvWzB8d109clswfHRdLHQ9dCsxfDAseT4+PjA8PSh3PXcrMXwwKT4+PjApYnJlYWsgYjtpZighKDMmdykpYnJlYWt9ZWxzZSB3PWE7aWYoISgoYT0tNCZ5KT4+PjA8NjR8fCh6PWErLTY0fDApPj4+MDx3Pj4+MCkpZm9yKDtxW3c+PjJdPXFbdD4+Ml0scVt3KzQ+PjJdPXFbdCs0Pj4yXSxxW3crOD4+Ml09cVt0Kzg+PjJdLHFbdysxMj4+Ml09cVt0KzEyPj4yXSxxW3crMTY+PjJdPXFbdCsxNj4+Ml0scVt3KzIwPj4yXT1xW3QrMjA+PjJdLHFbdysyND4+Ml09cVt0KzI0Pj4yXSxxW3crMjg+PjJdPXFbdCsyOD4+Ml0scVt3KzMyPj4yXT1xW3QrMzI+PjJdLHFbdyszNj4+Ml09cVt0KzM2Pj4yXSxxW3crNDA+PjJdPXFbdCs0MD4+Ml0scVt3KzQ0Pj4yXT1xW3QrNDQ+PjJdLHFbdys0OD4+Ml09cVt0KzQ4Pj4yXSxxW3crNTI+PjJdPXFbdCs1Mj4+Ml0scVt3KzU2Pj4yXT1xW3QrNTY+PjJdLHFbdys2MD4+Ml09cVt0KzYwPj4yXSx0PXQtIC02NHwwLCh3PXctIC02NHwwKT4+PjA8PXo+Pj4wOyk7aWYoYT4+PjA8PXc+Pj4wKWJyZWFrIGE7Zm9yKDtxW3c+PjJdPXFbdD4+Ml0sdD10KzR8MCwodz13KzR8MCk+Pj4wPGE+Pj4wOyk7fWlmKHc+Pj4wPHk+Pj4wKWZvcig7b1swfHddPXJbMHx0XSx0PXQrMXwwLCgwfHkpIT0oMHwodz13KzF8MCkpOyk7fX1mdW5jdGlvbiBnYShhKXtyZXR1cm4gYSstNDg+Pj4wPDEwfWZ1bmN0aW9uIGhhKGEsbyl7YTppZigxMDI0PD0oMHxvKSl7aWYoYSo9ODk4ODQ2NTY3NDMxMTU4ZTI5MywoMHxvKTwyMDQ3KXtvPW8rLTEwMjN8MDticmVhayBhfWEqPTg5ODg0NjU2NzQzMTE1OGUyOTMsbz0oKDB8byk8MzA2OT9vOjMwNjkpKy0yMDQ2fDB9ZWxzZS0xMDIzPCgwfG8pfHwoYSo9MjIyNTA3Mzg1ODUwNzIwMTRlLTMyNCxvPS0yMDQ1PCgwfG8pP28rMTAyMnwwOihhKj0yMjI1MDczODU4NTA3MjAxNGUtMzI0LCgtMzA2NjwoMHxvKT9vOi0zMDY2KSsyMDQ0fDApKTtyZXR1cm4gZigwLDApLGYoMSxvKzEwMjM8PDIwKSxhKmcoKX1mdW5jdGlvbiBpYShhLHQsQSxCLEMsRCxFKXt2YXIgRixSLFUsRz0wLEg9MCxJPTAsSj0wLEs9MCxNPTAsTj0wLE89MCxQPTAsUT0wLFM9MCxUPTA7cVs3NisoTD1GPUwtODB8MCk+PjJdPXQsVT01NStGfDAsUj01NitGfDAsdD0wO2E6e2I6Zm9yKDs7KXsoMHxQKTwwfHwoUD0oMjE0NzQ4MzY0Ny1QfDApPCgwfHQpPyhxWzE5MDZdPTYxLC0xKTp0K1B8MCk7ZDp7ZTp7Zjp7Zzp7aDp7aTp7ajp7azp7bDp7bTp7bjp7bzp7cDp7cTp7aWYoSj1xWzc2K0Y+PjJdLEk9clswfCh0PUopXSl7Zm9yKDs7KXtyOntzOnt0OmlmKEc9MjU1Jkkpe2lmKDM3IT0oMHxHKSlicmVhayBzO2ZvcihJPXQ7Oyl7aWYoMzchPXJbdCsxfDBdKWJyZWFrIHQ7aWYoRz10KzJ8MCxxWzc2K0Y+PjJdPUcsST1JKzF8MCxIPXJbdCsyfDBdLHQ9RywzNyE9KDB8SCkpYnJlYWt9fWVsc2UgST10O2lmKHQ9SS1KfDAsYSYmWihhLEosdCksdCljb250aW51ZSBiO1E9LTEsST0xLEs9IWdhKG9bcVs3NisoRz1GKT4+Ml0rMXwwXSksdD1xWzc2K0Y+PjJdLEt8MzYhPXJbdCsyfDBdfHwoUT1vW3QrMXwwXSstNDh8MCxTPTEsST0zKSx0PUkrdHwwLHFbRys3Nj4+Ml09dDt1OmlmKDMxPChIPShNPW9bKEk9MCl8dF0pKy0zMnwwKT4+PjApRz10O2Vsc2UgaWYoRz10LDc1OTEzJihIPTE8PEgpKWZvcig7Oyl7aWYoRz10KzF8MCxxWzc2K0Y+PjJdPUcsSXw9SCwzMTwoSD0oTT1vW3QrMXwwXSkrLTMyfDApPj4+MClicmVhayB1O2lmKHQ9RywhKDc1OTEzJihIPTE8PEgpKSlicmVha312OmlmKDQyIT0oMHxNKSl7aWYoKDB8KE49cWEoNzYrRnwwKSkpPDApYnJlYWsgcTt0PXFbNzYrRj4+Ml19ZWxzZXtpZihLPUYsZ2Eob1tHKzF8MF0pJiYodD1xWzc2K0Y+PjJdLDM2PT1yW3QrMnwwXSkpcVsoKG9bdCsxfDBdPDwyKStDfDApLTE5Mj4+Ml09MTAsTj1xWygob1t0KzF8MF08PDMpK0J8MCktMzg0Pj4yXSxTPTEsdD10KzN8MDtlbHNle2lmKFMpYnJlYWsgcTtOPVM9MCxhJiYodD1xW0E+PjJdLHFbQT4+Ml09dCs0LE49cVt0Pj4yXSksdD1xWzc2K0Y+PjJdKzF8MH1pZihxW0srNzY+PjJdPXQsLTE8KDB8TikpYnJlYWsgdjtOPTAtTnwwLEl8PTgxOTJ9SD0tMTt5OmlmKDQ2PT1yWzB8dF0paWYoNDIhPXJbdCsxfDBdKXFbNzYrRj4+Ml09dCsxLEg9cWEoNzYrRnwwKSx0PXFbNzYrRj4+Ml07ZWxzZXtpZihnYShvW3QrMnwwXSkmJih0PXFbNzYrRj4+Ml0sMzY9PXJbdCszfDBdKSl7cVsoKG9bdCsyfDBdPDwyKStDfDApLTE5Mj4+Ml09MTAsSD1xWygob1t0KzJ8MF08PDMpK0J8MCktMzg0Pj4yXSx0PXQrNHwwLHFbNzYrRj4+Ml09dDticmVhayB5fWlmKFMpYnJlYWsgcTtIPWE/KHQ9cVtBPj4yXSxxW0E+PjJdPXQrNCxxW3Q+PjJdKTowLHQ9cVs3NitGPj4yXSsyfDAscVs3NitGPj4yXT10fWZvcihHPTA7Oyl7aWYoVD1HLE89LTEsNTc8b1swfHRdKy02NT4+PjApYnJlYWsgYTtpZihNPXQrMXwwLHFbNzYrRj4+Ml09TSxHPW9bMHx0XSx0PU0sISgoRz1yWzI2MzkrKEcrdyhULDU4KXwwKXwwXSkrLTE+Pj4wPDgpKWJyZWFrfWlmKCFHKWJyZWFrIGE7QTp7Qjp7Qzp7aWYoMTk9PSgwfEcpKXtpZigoMHxRKTw9LTEpYnJlYWsgQzticmVhayBhfWlmKCgwfFEpPDApYnJlYWsgQjtxWyhRPDwyKStDPj4yXT1HLEc9cVs0Kyh0PShRPDwzKStCfDApPj4yXSxxWzY0K0Y+PjJdPXFbdD4+Ml0scVs2OCtGPj4yXT1HfWlmKHQ9MCwhYSljb250aW51ZSBiO2JyZWFrIEF9aWYoIWEpYnJlYWsgZDtwYSg2NCtGfDAsRyxBLEUpLE09cVs3NitGPj4yXX1pZihLPS02NTUzNyZJLEk9ODE5MiZJP0s6SSxRPTI2ODQsRz1SLHQ9b1tNKy0xfChPPTApXSwoTT0odD1UJiYzPT0oMTUmdCk/LTMzJnQ6dCkrLTg4fDApPj4+MDw9MzIpYnJlYWsgcjtEOntFOntGOntHOntpZig2PChLPXQrLTY1fDApPj4+MCl7aWYoODMhPSgwfHQpKWJyZWFrIGU7aWYoIUgpYnJlYWsgRztHPXFbNjQrRj4+Ml07YnJlYWsgRX1zd2l0Y2goSy0xfDApe2Nhc2UgMTpicmVhayBGO2Nhc2UgMDpjYXNlIDI6YnJlYWsgZTtkZWZhdWx0OmJyZWFrIHB9fV8oYSwzMixOLHQ9MCxJKTticmVhayBEfXFbMTIrRj4+Ml09MCxxWzgrRj4+Ml09cVs2NCtGPj4yXSxxWzY0K0Y+PjJdPTgrRixIPS0xLEc9OCtGfDB9dD0wO0g6e2Zvcig7Oyl7aWYoIShKPXFbRz4+Ml0pKWJyZWFrIEg7aWYoKEs9KDB8KEo9b2EoNCtGfDAsSikpKTwwKXxILXQ+Pj4wPEo+Pj4wKWJyZWFrO2lmKEc9Rys0fDAsISgodD10K0p8MCk+Pj4wPEg+Pj4wKSlicmVhayBIfWlmKE89LTEsSylicmVhayBhfWlmKF8oYSwzMixOLHQsSSksdClmb3IoSD0wLEc9cVs2NCtGPj4yXTs7KXtpZighKEo9cVtHPj4yXSkpYnJlYWsgRDtpZigoMHx0KTwoMHwoSD0oSj1vYSg0K0Z8MCxKKSkrSHwwKSkpYnJlYWsgRDtpZihaKGEsNCtGfDAsSiksRz1HKzR8MCwhKEg+Pj4wPHQ+Pj4wKSlicmVha31lbHNlIHQ9MH1fKGEsMzIsTix0LDgxOTJeSSksdD0oMHx0KTwoMHxOKT9OOnQ7Y29udGludWUgYn1HPXQrMXwwLHFbNzYrRj4+Ml09RyxJPXJbdCsxfDBdLHQ9Rztjb250aW51ZX1icmVha31zd2l0Y2goTS0xfDApe2Nhc2UgMjE6YnJlYWsgaTtjYXNlIDIzOmJyZWFrIGs7Y2FzZSAyMjpicmVhayBsO2Nhc2UgMTE6Y2FzZSAxNjpicmVhayBtO2Nhc2UgMTA6YnJlYWsgbjtjYXNlIDI2OmJyZWFrIG87Y2FzZSA4OmNhc2UgMTI6Y2FzZSAxMzpjYXNlIDE0OmJyZWFrIHA7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6Y2FzZSA2OmNhc2UgNzpjYXNlIDk6Y2FzZSAxNTpjYXNlIDE3OmNhc2UgMTg6Y2FzZSAxOTpjYXNlIDIwOmNhc2UgMjQ6Y2FzZSAyNTpjYXNlIDI3OmNhc2UgMjk6Y2FzZSAzMDpicmVhayBlO2Nhc2UgMjg6YnJlYWsgaDtkZWZhdWx0OmJyZWFrIGp9fWlmKE89UCxhKWJyZWFrIGE7aWYoIVMpYnJlYWsgZDtmb3IodD0xOzspe2lmKGE9cVsodDw8MikrQz4+Ml0pe2lmKHBhKCh0PDwzKStCfDAsYSxBLEUpLDEwIT0oMHwodD10KyhPPTEpfDApKSljb250aW51ZTticmVhayBhfWJyZWFrfWlmKE89MSwxMDw9dD4+PjApYnJlYWsgYTtmb3IoOzspe2lmKHFbKHQ8PDIpK0M+PjJdKWJyZWFrIHE7aWYoYT04PHQ+Pj4wLHQ9dCsxfDAsYSlicmVha31icmVhayBhfU89LTE7YnJlYWsgYX10PTB8bltEXShhLHZbNjQrRj4+M10sTixILEksdCk7Y29udGludWV9Rz0odD1JYShKPSh0PXFbNjQrRj4+Ml0pfHwyNjk0LEgpKXx8SCtKfDAsST1LLEg9dD90LUp8MDpIO2JyZWFrIGV9b1s1NStGfDBdPXFbNjQrRj4+Ml0sSD0xLEo9VSxJPUs7YnJlYWsgZX1pZih0PUs9cVs2OCtGPj4yXSxKPXFbNjQrRj4+Ml0sKDB8dCk8LTF8fCgwfHQpPD0tMSYmISg0Mjk0OTY3Mjk1PEo+Pj4wKSl7dD0wLSh0KygwPEo+Pj4wKXwwKXwwLEo9MC1KfDAscVs2NCtGPj4yXT1KLHFbNjgrRj4+Ml09dCxPPTEsUT0yNjg0O2JyZWFrIGd9aWYoMjA0OCZJKXtPPTEsUT0yNjg1O2JyZWFrIGd9UT0oTz0xJkkpPzI2ODY6MjY4NDticmVhayBnfWlmKEo9T2EocVs2NCtGPj4yXSxxWzY4K0Y+PjJdLFIpLCEoOCZJKSlicmVhayBmO0g9KDB8KHQ9Ui1KfDApKTwoMHxIKT9IOnQrMXwwO2JyZWFrIGZ9SD04PEg+Pj4wP0g6OCxJfD04LHQ9MTIwfWlmKEo9TmEocVs2NCtGPj4yXSxxWzY4K0Y+PjJdLFIsMzImdCksISg4JkkpfCEocVs2NCtGPj4yXXxxWzY4K0Y+PjJdKSlicmVhayBmO1E9MjY4NCsodD4+PjQpfDAsTz0yO2JyZWFrIGZ9aWYoNzwoRz0yNTUmVCk+Pj4odD0wKSljb250aW51ZTtzd2l0Y2goRy0xfDApe2RlZmF1bHQ6Y2FzZSAwOnFbcVs2NCtGPj4yXT4+Ml09UDtjb250aW51ZTtjYXNlIDE6Rz1xWzY0K0Y+PjJdLHFbRz4+Ml09UCxxW0crND4+Ml09UD4+MzE7Y29udGludWU7Y2FzZSAyOnBbcVs2NCtGPj4yXT4+MV09UDtjb250aW51ZTtjYXNlIDM6b1txWzY0K0Y+PjJdXT1QO2NvbnRpbnVlO2Nhc2UgNTpxW3FbNjQrRj4+Ml0+PjJdPVA7Y29udGludWU7Y2FzZSA0OmNvbnRpbnVlO2Nhc2UgNjp9Rz1xWzY0K0Y+PjJdLHFbRz4+Ml09UCxxW0crND4+Ml09UD4+MzE7Y29udGludWV9Sj1xWzY0K0Y+PjJdLHQ9cVs2OCtGPj4yXSxRPTI2ODR9Sj1lYShKLHQsUil9ST0tMTwoMHxIKT8tNjU1MzcmSTpJLEg9ISEoKEs9dD1xWzY4K0Y+PjJdKXwoTT1xWzY0K0Y+PjJdKSl8SD8oMHwodD0hKEt8TSkrKFItSnwwKXwwKSk8KDB8SCk/SDp0OihKPVIsMCl9XyhhLDMyLHQ9KDB8Tik8KDB8KEc9KEg9KDB8SCk8KDB8KEs9Ry1KfDApKT9LOkgpK098MCkpP0c6TixHLEkpLFooYSxRLE8pLF8oYSw0OCx0LEcsNjU1MzZeSSksXyhhLDQ4LEgsSywwKSxaKGEsSixLKSxfKGEsMzIsdCxHLDgxOTJeSSk7Y29udGludWV9YnJlYWt9Tz0wfXJldHVybiBMPTgwK0Z8MCxPfWZ1bmN0aW9uIGphKGEpe3ZhciBZLG89MCx3PTAsQT0wLEI9MCxDPTAsRD0wLEU9MCxWPTAsVz0wLFg9MCxaPTAsXz0wO0w9WT1MLTE2fDA7YTp7Yjp7Yzp7ZDp7ZTp7Zjp7Zzp7aDp7aTp7ajp7azp7aWYoYT4+PjA8PTI0NCl7aWYoMyYobz0oQz1xWzE5MjNdKT4+PihhPShEPWE+Pj4wPDExPzE2OmErMTEmLTgpPj4+MykpKXthPShvPXFbNzc0MCsoQj0odz1hKygxJigtMV5vKSl8MCk8PDMpPj4yXSkrOHwwLCgwfChBPXFbbys4Pj4yXSkpIT0oMHwoQj1CKzc3MzJ8MCkpPyhxW0ErMTI+PjJdPUIscVtCKzg+PjJdPUEpOihaPTc2OTIsXz1qYyh3KSZDLHFbWj4+Ml09Xyksdzw8PTMscVtvKzQ+PjJdPTN8dyxxWzQrKG89byt3fDApPj4yXT0xfHFbbys0Pj4yXTticmVhayBhfWlmKEQ+Pj4wPD0oVj1xWzE5MjVdKT4+PjApYnJlYWsgaztpZihvKXt3PW89KGE9KDAtKGE9KDAtKHc9Mjw8YSl8dykmbzw8YSkmYSktMXwwKT4+PjEyJjE2LHd8PW89KGE+Pj49byk+Pj41Jjgsd3w9bz0oYT4+Pj1vKT4+PjImNCxvPXFbNzc0MCsoQT0odz0oKHd8PW89KGE+Pj49byk+Pj4xJjIpfChvPShhPj4+PW8pPj4+MSYxKSkrKGE+Pj5vKXwwKTw8Myk+PjJdLCgwfChhPXFbbys4Pj4yXSkpIT0oMHwoQT1BKzc3MzJ8MCkpPyhxW2ErMTI+PjJdPUEscVtBKzg+PjJdPWEpOihDPWpjKHcpJkMscVsxOTIzXT1DKSxhPW8rOHwwLHFbbys0Pj4yXT0zfEQsQj0odzw8PTMpLUR8MCxxWzQrKEU9bytEfDApPj4yXT0xfEIscVtvK3c+PjJdPUIsViYmKG89NzczMisoKHc9Vj4+PjMpPDwzKXwwLEE9cVsxOTI4XSx3PSh3PTE8PHcpJkM/cVtvKzg+PjJdOihxWzE5MjNdPXd8QyxvKSxxW28rOD4+Ml09QSxxW3crMTI+PjJdPUEscVtBKzEyPj4yXT1vLHFbQSs4Pj4yXT13KSxxWzE5MjhdPUUscVsxOTI1XT1CO2JyZWFrIGF9aWYoIShYPXFbMTkyNF0pKWJyZWFrIGs7Zm9yKHc9bz0oYT0oWCYwLVgpLTF8MCk+Pj4xMiYxNix3fD1vPShhPj4+PW8pPj4+NSY4LHd8PW89KGE+Pj49byk+Pj4yJjQsbz1xWzc5OTYrKCgod3w9bz0oYT4+Pj1vKT4+PjEmMil8KG89KGE+Pj49byk+Pj4xJjEpKSsoYT4+Pm8pPDwyKT4+Ml0sQT0oLTgmcVtvKzQ+PjJdKS1EfDAsdz1vO2E9KGE9cVt3KzE2Pj4yXSl8fHFbdysyMD4+Ml07KUE9KHc9KEI9KC04JnFbYSs0Pj4yXSktRHwwKT4+PjA8QT4+PjApP0I6QSxvPXc/YTpvLHc9YTtpZihXPXFbbysyND4+Ml0sKDB8KEI9cVtvKzEyPj4yXSkpIT0oMHxvKSl7YT1xW28rOD4+Ml0scVthKzEyPj4yXT1CLHFbQis4Pj4yXT1hO2JyZWFrIGJ9aWYoIShhPXFbKHc9bysyMHwwKT4+Ml0pKXtpZighKGE9cVtvKzE2Pj4yXSkpYnJlYWsgajt3PW8rMTZ8MH1mb3IoO0U9dywoYT1xWyh3PShCPWEpKzIwfDApPj4yXSl8fCh3PUIrMTZ8MCxhPXFbQisxNj4+Ml0pOyk7cVtFPj4yXT0wO2JyZWFrIGJ9aWYoRD0tMSwhKDQyOTQ5NjcyMzE8YT4+PjApJiYoRD0tOCYobz1hKzExfDApLFY9cVsxOTI0XSkpe3c9MC1EfDAsQz0wLChvPj4+PTgpJiYoQz0zMSwxNjc3NzIxNTxEPj4+MHx8KEM9MjgrKChhPSgoQz0obzw8PUE9bysxMDQ4MzIwPj4+MTYmOCk8PChhPW8rNTIwMTkyPj4+MTYmNCkpPDwobz1DKzI0NTc2MD4+PjE2JjIpPj4+MTUpLShvfGF8QSl8MCk8PDF8RD4+PmErMjEmMSl8MCkpO3E6e3I6e2lmKEE9cVs3OTk2KyhDPDwyKT4+Ml0pZm9yKG89RDw8KDMxPT0oMHxDKT8wOjI1LShDPj4+MSl8MCksYT0wOzspe2lmKCEodz4+PjA8PShFPSgtOCZxW0ErND4+Ml0pLUR8MCk+Pj4wfHwoQj1BLHc9RSkpKXt3PTAsYT1BO2JyZWFrIHJ9aWYoRT1xW0ErMjA+PjJdLEE9cVsxNisoKG8+Pj4yOSY0KStBfDApPj4yXSxhPUU/KDB8RSk9PSgwfEEpP2E6RTphLG88PD0wIT0oMHxBKSwhQSlicmVha31lbHNlIGE9MDtpZighKGF8Qikpe2lmKCEoYT0oMC0oYT0yPDxDKXxhKSZWKSlicmVhayBrO0E9bz0oYT0oYSYwLWEpLTF8MCk+Pj4xMiYxNixBfD1vPShhPj4+PW8pPj4+NSY4LEF8PW89KGE+Pj49byk+Pj4yJjQsYT1xWzc5OTYrKCgoQXw9bz0oYT4+Pj1vKT4+PjEmMil8KG89KGE+Pj49byk+Pj4xJjEpKSsoYT4+Pm8pPDwyKT4+Ml19aWYoIWEpYnJlYWsgcX1mb3IoO3c9KG89KEE9KC04JnFbYSs0Pj4yXSktRHwwKT4+PjA8dz4+PjApP0E6dyxCPW8/YTpCLGE9KG89cVthKzE2Pj4yXSl8fHFbYSsyMD4+Ml07KTt9aWYoISghQnx3Pj4+MD49cVsxOTI1XS1EPj4+MCkpe2lmKEU9cVtCKzI0Pj4yXSwoMHxCKSE9KDB8KG89cVtCKzEyPj4yXSkpKXthPXFbQis4Pj4yXSxxW2ErMTI+PjJdPW8scVtvKzg+PjJdPWE7YnJlYWsgY31pZighKGE9cVsoQT1CKzIwfDApPj4yXSkpe2lmKCEoYT1xW0IrMTY+PjJdKSlicmVhayBpO0E9QisxNnwwfWZvcig7Qz1BLChhPXFbKEE9KG89YSkrMjB8MCk+PjJdKXx8KEE9bysxNnwwLGE9cVtvKzE2Pj4yXSk7KTtxW0M+PjJdPTA7YnJlYWsgY319fWlmKEQ+Pj4wPD0obz1xWzE5MjVdKT4+PjApe2E9cVsxOTI4XSwxNjw9KHc9by1EfDApPj4+MD8ocVsxOTI1XT13LEE9YStEfDAscVsxOTI4XT1BLHFbQSs0Pj4yXT0xfHcscVthK28+PjJdPXcscVthKzQ+PjJdPTN8RCk6KHFbMTkyOF09MCxxWzE5MjVdPTAscVthKzQ+PjJdPTN8byxxWzQrKG89YStvfDApPj4yXT0xfHFbbys0Pj4yXSksYT1hKzh8MDticmVhayBhfWlmKEQ+Pj4wPChBPXFbMTkyNl0pPj4+MCl7bz1BLUR8MCxxWzE5MjZdPW8sdz0oYT1xWzE5MjldKStEfDAscVsxOTI5XT13LHFbdys0Pj4yXT0xfG8scVthKzQ+PjJdPTN8RCxhPWErOHwwO2JyZWFrIGF9aWYoKHc9KEM9KHc9Qj1EKzQ3fChhPTApKSsobz1xWzIwNDFdP3FbMjA0M106KHFbMjA0NF09LTEscVsyMDQ1XT0tMSxxWzIwNDJdPTQwOTYscVsyMDQzXT00MDk2LHFbMjA0MV09MTIrWSYtMTZeMTQzMTY1NTc2OCxxWzIwNDZdPTAscVsyMDM0XT0wLDQwOTYpKXwwKSYoRT0wLW98MCkpPj4+MDw9RD4+PjApYnJlYWsgYTtpZigobz1xWzIwMzNdKSYmKFc9KFY9cVsyMDMxXSkrd3wwKT4+PjA8PVY+Pj4wfG8+Pj4wPFc+Pj4wKWJyZWFrIGE7aWYoNCZyWzgxMzZdKWJyZWFrIGY7djp7dzp7aWYobz1xWzE5MjldKWZvcihhPTgxNDA7Oyl7aWYoKFY9cVthPj4yXSkrcVthKzQ+PjJdPj4+MD5vPj4+MCYmVj4+PjA8PW8+Pj4wKWJyZWFrIHc7aWYoIShhPXFbYSs4Pj4yXSkpYnJlYWt9aWYoLTE9PSgwfChvPWRhKDApKSkpYnJlYWsgZztpZihDPXcsKEE9KGE9cVsyMDQyXSkrLTF8MCkmbyYmKEM9KHctb3wwKSsobytBJjAtYSl8MCksQz4+PjA8PUQ+Pj4wfDIxNDc0ODM2NDY8Qz4+PjApYnJlYWsgZztpZigoYT1xWzIwMzNdKSYmKEU9KEE9cVsyMDMxXSkrQ3wwKT4+PjA8PUE+Pj4wfGE+Pj4wPEU+Pj4wKWJyZWFrIGc7aWYoKDB8bykhPSgwfChhPWRhKEMpKSkpYnJlYWsgdjticmVhayBlfWlmKDIxNDc0ODM2NDY8KEM9RSZDLUEpPj4+MClicmVhayBnO2lmKCgwfChvPWRhKEMpKSk9PShxW2E+PjJdK3FbYSs0Pj4yXXwwKSlicmVhayBoO2E9b31pZighKEQrNDg+Pj4wPD1DPj4+MHwyMTQ3NDgzNjQ2PEM+Pj4wfC0xPT0oMHwobz1hKSkpKXtpZigyMTQ3NDgzNjQ2PChhPShhPXFbMjA0M10pKyhCLUN8MCkmMC1hKT4+PjApYnJlYWsgZTtpZigtMSE9KDB8ZGEoYSkpKXtDPWErQ3wwO2JyZWFrIGV9ZGEoMC1DfDApO2JyZWFrIGd9aWYoLTEhPSgwfG8pKWJyZWFrIGU7YnJlYWsgZ31CPTA7YnJlYWsgYn1vPTA7YnJlYWsgY31pZigtMSE9KDB8bykpYnJlYWsgZX1xWzIwMzRdPTR8cVsyMDM0XX1pZigyMTQ3NDgzNjQ2PHc+Pj4wKWJyZWFrIGQ7aWYobz1kYSh3KSwoYT1kYSgwKSk+Pj4wPD1vPj4+MHwtMT09KDB8byl8LTE9PSgwfGEpKWJyZWFrIGQ7aWYoKEM9YS1vfDApPj4+MDw9RCs0MD4+PjApYnJlYWsgZH1hPXFbMjAzMV0rQ3wwLChxWzIwMzFdPWEpPj4+MD50WzIwMzJdJiYocVsyMDMyXT1hKTt4Ont5Ont6OntpZih3PXFbMTkyOV0pe2ZvcihhPTgxNDA7Oyl7aWYoKChBPXFbYT4+Ml0pKyhCPXFbYSs0Pj4yXSl8MCk9PSgwfG8pKWJyZWFrIHo7aWYoIShhPXFbYSs4Pj4yXSkpYnJlYWt9YnJlYWsgeX1mb3IoKGE9cVsxOTI3XSk+Pj4wPD1vPj4+MCYmYXx8KHFbMTkyN109byksYT0wLHFbMjAzNl09QyxxWzIwMzVdPW8scVsxOTMxXT0tMSxxWzE5MzJdPXFbMjA0MV0scVsyMDM4XT0wO0E9NzczMisodz1hPDwzKXwwLHFbdys3NzQwPj4yXT1BLHFbdys3NzQ0Pj4yXT1BLDMyIT0oMHwoYT1hKzF8MCkpOyk7QT0oYT1DKy00MHwwKS0odz1vKzgmNz8tOC1vJjc6MCl8MCxxWzE5MjZdPUEsdz1vK3d8MCxxWzE5MjldPXcscVt3KzQ+PjJdPTF8QSxxWzQrKGErb3wwKT4+Ml09NDAscVsxOTMwXT1xWzIwNDVdO2JyZWFrIHh9aWYoISg4JnJbYSsxMnwwXXxvPj4+MDw9dz4+PjB8dz4+PjA8QT4+PjApKXtxW2ErND4+Ml09QitDLG89KGE9dys4Jjc/LTgtdyY3OjApK3d8MCxxWzE5MjldPW8sYT0oQT1xWzE5MjZdK0N8MCktYXwwLHFbMTkyNl09YSxxW28rND4+Ml09MXxhLHFbNCsodytBfDApPj4yXT00MCxxWzE5MzBdPXFbMjA0NV07YnJlYWsgeH19bz4+PjA8KEI9cVsxOTI3XSk+Pj4wJiYocVsxOTI3XT1vLEI9MCksQT1vK0N8MCxhPTgxNDA7QTp7Qjp7Qzp7RDp7RTp7Rjp7Zm9yKDsoMHxBKSE9cVthPj4yXTspaWYoIShhPXFbYSs4Pj4yXSkpYnJlYWsgRjtpZighKDgmclthKzEyfDBdKSlicmVhayBFfWZvcihhPTgxNDA7Oyl7aWYoKEE9cVthPj4yXSk+Pj4wPD13Pj4+MCYmdz4+PjA8KEI9QStxW2ErND4+Ml18MCk+Pj4wKWJyZWFrIEQ7YT1xW2ErOD4+Ml19fWlmKHFbYT4+Ml09byxxW2ErND4+Ml09cVthKzQ+PjJdK0MscVs0KyhXPShvKzgmNz8tOC1vJjc6MCkrb3wwKT4+Ml09M3xELGE9KChvPUErKEErOCY3Py04LUEmNzowKXwwKS1XfDApLUR8MCxFPUQrV3wwLCgwfG8pPT0oMHx3KSl7cVsxOTI5XT1FLGE9cVsxOTI2XSthfDAscVsxOTI2XT1hLHFbRSs0Pj4yXT0xfGE7YnJlYWsgQn1pZihxWzE5MjhdPT0oMHxvKSl7cVsxOTI4XT1FLGE9cVsxOTI1XSthfDAscVsxOTI1XT1hLHFbRSs0Pj4yXT0xfGEscVthK0U+PjJdPWE7YnJlYWsgQn1pZigxPT0oMyYodz1xW28rND4+Ml0pKSl7WD0tOCZ3O0c6aWYodz4+PjA8PTI1NSl7aWYoQj13Pj4+Myx3PXFbbys4Pj4yXSwoMHwoQT1xW28rMTI+PjJdKSk9PSgwfHcpKXtaPTc2OTIsXz1xWzE5MjNdJmpjKEIpLHFbWj4+Ml09XzticmVhayBHfXFbdysxMj4+Ml09QSxxW0ErOD4+Ml09d31lbHNle2lmKFY9cVtvKzI0Pj4yXSwoMHwoQz1xW28rMTI+PjJdKSk9PSgwfG8pKWlmKChEPXFbKEE9bysyMHwwKT4+Ml0pfHwoRD1xWyhBPW8rMTZ8MCk+PjJdKSl7Zm9yKDt3PUEsKEQ9cVsoQT0oQz1EKSsyMHwwKT4+Ml0pfHwoQT1DKzE2fDAsRD1xW0MrMTY+PjJdKTspO3Fbdz4+Ml09MH1lbHNlIEM9MDtlbHNlIHc9cVtvKzg+PjJdLHFbdysxMj4+Ml09QyxxW0MrOD4+Ml09dztpZihWKXt3PXFbbysyOD4+Ml07Sjp7aWYocVsoQT03OTk2Kyh3PDwyKXwwKT4+Ml09PSgwfG8pKXtpZihxW0E+PjJdPUMpYnJlYWsgSjtaPTc2OTYsXz1xWzE5MjRdJmpjKHcpLHFbWj4+Ml09XzticmVhayBHfWlmKCEocVtWKyhxW1YrMTY+PjJdPT0oMHxvKT8xNjoyMCk+PjJdPUMpKWJyZWFrIEd9cVtDKzI0Pj4yXT1WLCh3PXFbbysxNj4+Ml0pJiYocVtDKzE2Pj4yXT13LHFbdysyND4+Ml09QyksKHc9cVtvKzIwPj4yXSkmJihxW0MrMjA+PjJdPXcscVt3KzI0Pj4yXT1DKX19bz1vK1h8MCxhPWErWHwwfWlmKHFbbys0Pj4yXT0tMiZxW28rND4+Ml0scVtFKzQ+PjJdPTF8YSwocVthK0U+PjJdPWEpPj4+MDw9MjU1KXthPTc3MzIrKChvPWE+Pj4zKTw8Myl8MCxvPSh3PXFbMTkyM10pJihvPTE8PG8pP3FbYSs4Pj4yXToocVsxOTIzXT1vfHcsYSkscVthKzg+PjJdPUUscVtvKzEyPj4yXT1FLHFbRSsxMj4+Ml09YSxxW0UrOD4+Ml09bzticmVhayBCfWlmKG89MCwoQT1hPj4+OCkmJihvPTMxLDE2Nzc3MjE1PGE+Pj4wfHwobz0yOCsoKG89KChEPShBPDw9Qj1BKzEwNDgzMjA+Pj4xNiY4KTw8KG89QSs1MjAxOTI+Pj4xNiY0KSk8PChBPUQrMjQ1NzYwPj4+MTYmMik+Pj4xNSktKEF8b3xCKXwwKTw8MXxhPj4+bysyMSYxKXwwKSkscVsodz1FKSsyOD4+Ml09byxxW0UrMTY+PjJdPTAsdz03OTk2KyhvPDwyKXwocVtFKzIwPj4yXT0wKSwoQT1xWzE5MjRdKSYoQj0xPDxvKSl7Zm9yKEE9YTw8KDMxPT0oMHxvKT8wOjI1LShvPj4+MSl8MCksbz1xW3c+PjJdOzspe2lmKCgtOCZxWyh3PW8pKzQ+PjJdKT09KDB8YSkpYnJlYWsgQztpZihvPUE+Pj4yOSxBPDw9MSwhKG89cVsxNisoQj0oNCZvKSt3fDApPj4yXSkpYnJlYWt9cVtCKzE2Pj4yXT1FfWVsc2UgcVsxOTI0XT1BfEIscVt3Pj4yXT1FO3FbRSsyND4+Ml09dyxxW0UrMTI+PjJdPUUscVtFKzg+PjJdPUU7YnJlYWsgQn1mb3IoRT0oYT1DKy00MHwwKS0oQT1vKzgmNz8tOC1vJjc6MCl8MCxxWzE5MjZdPUUsQT1vK0F8MCxxWzE5MjldPUEscVtBKzQ+PjJdPTF8RSxxWzQrKGErb3wwKT4+Ml09NDAscVsxOTMwXT1xWzIwNDVdLHFbKEE9KGE9KEIrKEIrLTM5Jjc/MzktQiY3OjApfDApLTQ3fDApPj4+MDx3KzE2Pj4+MD93OmEpKzQ+PjJdPTI3LGE9cVsyMDM4XSxxW0ErMTY+PjJdPXFbMjAzN10scVtBKzIwPj4yXT1hLGE9cVsyMDM2XSxxW0ErOD4+Ml09cVsyMDM1XSxxW0ErMTI+PjJdPWEscVsyMDM3XT1BKzgscVsyMDM2XT1DLHFbMjAzNV09byxhPUErMjR8KHFbMjAzOF09MCk7cVthKzQ+PjJdPTcsbz1hKzh8MCxhPWErNHwwLG8+Pj4wPEI+Pj4wOyk7aWYoKDB8dyk9PSgwfEEpKWJyZWFrIHg7aWYocVtBKzQ+PjJdPS0yJnFbQSs0Pj4yXSxCPUEtd3wwLHFbdys0Pj4yXT0xfEIsKHFbQT4+Ml09Qik+Pj4wPD0yNTUpe2E9NzczMisoKG89Qj4+PjMpPDwzKXwwLG89KEE9cVsxOTIzXSkmKG89MTw8byk/cVthKzg+PjJdOihxWzE5MjNdPW98QSxhKSxxW2ErOD4+Ml09dyxxW28rMTI+PjJdPXcscVt3KzEyPj4yXT1hLHFbdys4Pj4yXT1vO2JyZWFrIHh9aWYocVt3KzE2Pj4yXT0wLGE9cVt3KzIwPj4yXT0wLChBPUI+Pj44KSYmKGE9MzEsMTY3NzcyMTU8Qj4+PjB8fChhPTI4KygoYT0oKEU9KEE8PD1DPUErMTA0ODMyMD4+PjE2JjgpPDwoYT1BKzUyMDE5Mj4+PjE2JjQpKTw8KEE9RSsyNDU3NjA+Pj4xNiYyKT4+PjE1KS0oQXxhfEMpfDApPDwxfEI+Pj5hKzIxJjEpfDApKSxvPTc5OTYrKChxWyhvPXcpKzI4Pj4yXT1hKTw8Mil8MCwoQT1xWzE5MjRdKSYoQz0xPDxhKSl7Zm9yKGE9Qjw8KDMxPT0oMHxhKT8wOjI1LShhPj4+MSl8MCksbz1xW28+PjJdOzspe2lmKCgwfEIpPT0oLTgmcVsoQT1vKSs0Pj4yXSkpYnJlYWsgQTtpZihvPWE+Pj4yOSxhPDw9MSwhKG89cVsxNisoQz1BKyg0Jm8pfDApPj4yXSkpYnJlYWt9cVtDKzE2Pj4yXT13LHFbdysyND4+Ml09QX1lbHNlIHFbMTkyNF09QXxDLHFbbz4+Ml09dyxxW3crMjQ+PjJdPW87cVt3KzEyPj4yXT13LHFbdys4Pj4yXT13O2JyZWFrIHh9YT1xW3crOD4+Ml0scVthKzEyPj4yXT1FLHFbdys4Pj4yXT1FLHFbRSsyND4+Ml09MCxxW0UrMTI+PjJdPXcscVtFKzg+PjJdPWF9YT1XKzh8MDticmVhayBhfWE9cVtBKzg+PjJdLHFbYSsxMj4+Ml09dyxxW0ErOD4+Ml09dyxxW3crMjQ+PjJdPTAscVt3KzEyPj4yXT1BLHFbdys4Pj4yXT1hfWlmKCEoKGE9cVsxOTI2XSk+Pj4wPD1EPj4+MCkpe289YS1EfDAscVsxOTI2XT1vLHc9KGE9cVsxOTI5XSkrRHwwLHFbMTkyOV09dyxxW3crND4+Ml09MXxvLHFbYSs0Pj4yXT0zfEQsYT1hKzh8MDticmVhayBhfX1xWzE5MDZdPTQ4LGE9MDticmVhayBhfVE6aWYoRSl7YT1xW0IrMjg+PjJdO1I6e2lmKHFbKEE9Nzk5NisoYTw8Mil8MCk+PjJdPT0oMHxCKSl7aWYocVtBPj4yXT1vKWJyZWFrIFI7Vj1qYyhhKSZWLHFbMTkyNF09VjticmVhayBRfWlmKCEocVtFKyhxW0UrMTY+PjJdPT0oMHxCKT8xNjoyMCk+PjJdPW8pKWJyZWFrIFF9cVtvKzI0Pj4yXT1FLChhPXFbQisxNj4+Ml0pJiYocVtvKzE2Pj4yXT1hLHFbYSsyND4+Ml09byksKGE9cVtCKzIwPj4yXSkmJihxW28rMjA+PjJdPWEscVthKzI0Pj4yXT1vKX1TOmlmKHc+Pj4wPD0xNSlhPXcrRHwwLHFbQis0Pj4yXT0zfGEscVs0KyhhPWErQnwwKT4+Ml09MXxxW2ErND4+Ml07ZWxzZSBpZihxW0IrND4+Ml09M3xELHFbNCsoQT1CK0R8MCk+PjJdPTF8dywocVt3K0E+PjJdPXcpPj4+MDw9MjU1KWE9NzczMisoKG89dz4+PjMpPDwzKXwwLG89KHc9cVsxOTIzXSkmKG89MTw8byk/cVthKzg+PjJdOihxWzE5MjNdPW98dyxhKSxxW2ErOD4+Ml09QSxxW28rMTI+PjJdPUEscVtBKzEyPj4yXT1hLHFbQSs4Pj4yXT1vO2Vsc2V7YT0wLChEPXc+Pj44KSYmKGE9MzEsMTY3NzcyMTU8dz4+PjB8fChhPTI4KygoYT0oKEU9KEQ8PD1DPUQrMTA0ODMyMD4+PjE2JjgpPDwoYT1EKzUyMDE5Mj4+PjE2JjQpKTw8KEQ9RSsyNDU3NjA+Pj4xNiYyKT4+PjE1KS0oRHxhfEMpfDApPDwxfHc+Pj5hKzIxJjEpfDApKSxxWyhvPUEpKzI4Pj4yXT1hLHFbQSsxNj4+Ml09MCxvPTc5OTYrKGE8PDIpfChxW0ErMjA+PjJdPTApO1Y6e2lmKChEPTE8PGEpJlYpe2ZvcihhPXc8PCgzMT09KDB8YSk/MDoyNS0oYT4+PjEpfDApLEQ9cVtvPj4yXTs7KXtpZigoLTgmcVsobz1EKSs0Pj4yXSk9PSgwfHcpKWJyZWFrIFY7aWYoRD1hPj4+MjksYTw8PTEsIShEPXFbMTYrKEM9KDQmRCkrb3wwKT4+Ml0pKWJyZWFrfXFbQysxNj4+Ml09QX1lbHNlIHFbMTkyNF09RHxWLHFbbz4+Ml09QTtxW0ErMjQ+PjJdPW8scVtBKzEyPj4yXT1BLHFbQSs4Pj4yXT1BO2JyZWFrIFN9YT1xW28rOD4+Ml0scVthKzEyPj4yXT1BLHFbbys4Pj4yXT1BLHFbQSsyND4+Ml09MCxxW0ErMTI+PjJdPW8scVtBKzg+PjJdPWF9YT1CKzh8MDticmVhayBhfVg6aWYoVyl7YT1xW28rMjg+PjJdO1k6e2lmKHFbKHc9Nzk5NisoYTw8Mil8MCk+PjJdPT0oMHxvKSl7aWYocVt3Pj4yXT1CKWJyZWFrIFk7Wj03Njk2LF89amMoYSkmWCxxW1o+PjJdPV87YnJlYWsgWH1pZighKHFbVysocVtXKzE2Pj4yXT09KDB8byk/MTY6MjApPj4yXT1CKSlicmVhayBYfXFbQisyND4+Ml09VywoYT1xW28rMTY+PjJdKSYmKHFbQisxNj4+Ml09YSxxW2ErMjQ+PjJdPUIpLChhPXFbbysyMD4+Ml0pJiYocVtCKzIwPj4yXT1hLHFbYSsyND4+Ml09Qil9QT4+PjA8PTE1PyhhPUErRHwwLHFbbys0Pj4yXT0zfGEscVs0KyhhPWErb3wwKT4+Ml09MXxxW2ErND4+Ml0pOihxW28rND4+Ml09M3xELHFbNCsoRD1vK0R8MCk+PjJdPTF8QSxxW0ErRD4+Ml09QSxWJiYoYT03NzMyKygodz1WPj4+Myk8PDMpfDAsQj1xWzE5MjhdLHc9KHc9MTw8dykmQz9xW2ErOD4+Ml06KHFbMTkyM109d3xDLGEpLHFbYSs4Pj4yXT1CLHFbdysxMj4+Ml09QixxW0IrMTI+PjJdPWEscVtCKzg+PjJdPXcpLHFbMTkyOF09RCxxWzE5MjVdPUEpLGE9bys4fDB9cmV0dXJuIEw9MTYrWXwwLGF9ZnVuY3Rpb24ga2EoYSl7dmFyIHE9MCx0PXgoMCksTD0wLCQ9MCxhYT14KDApLGJhPXgoMCk7aihhKTthOntpZigxMjgzNDU3MDI0PD0ocT0yMTQ3NDgzNjQ3JigkPWUoMCkpKT4+PjApe2lmKDIxMzkwOTUwNDA8cT4+PjApYnJlYWsgYTtyZXR1cm4geCgoMHwkKTwwPy0xLjU3MDc5NjI1MTI5Njk5NzoxLjU3MDc5NjI1MTI5Njk5Nyl9Yjp7aWYocT4+PjA8PTEwNTQ4Njc0NTUpe2lmKEw9LTEsOTY0Njg5OTIwPD1xPj4+MClicmVhayBiO2JyZWFrIGF9aWYoYT14KHkoYSkpLHE+Pj4wPD0xMDY2OTI2MDc5KXtpZihxPj4+MDw9MTA2MDExMDMzNSl7YT14KHgoeChhK2EpK3goLTEpKS94KGEreCgyKSkpLEw9MDticmVhayBifWE9eCh4KGEreCgtMSkpL3goYSt4KDEpKSksTD0xfWVsc2UgTD1xPj4+MDw9MTA3NTU3NjgzMT8oYT14KHgoYSt4KC0xLjUpKS94KHgoYSp4KDEuNSkpK3goMSkpKSwyKTooYT14KHgoLTEpL2EpLDMpfWlmKHE9TCxhYT14KGEqYSksdD14KGFhKmFhKSxiYT14KHQqeCh4KHQqeCgtLjEwNjQ4MDE3Mzc2NjYxMykpK3goLS4xOTk5OTE1ODM4MjQxNTc3MSkpKSx0PXgoYWEqeCh4KHQqeCh4KHQqeCguMDYxNjg3NjA3MzE4MTYyOTIpKSt4KC4xNDI1MzYzNTcwNDUxNzM2NSkpKSt4KC4zMzMzMzMyODM2NjI3OTYpKSksKDB8cSk8PS0xKXJldHVybiB4KGEteChhKngoYmErdCkpKTthPXgodVs2MDgwKyhxPDw9Mik+PjJdLXgoeCh4KGEqeChiYSt0KSktdVtxKzYwOTY+PjJdKS1hKSksYT0oMHwkKTwwP3goLWEpOmF9cmV0dXJuIGF9ZnVuY3Rpb24gbGEoYSxjYSl7dmFyIGZhLGRhPTAsZWE9MCxnYT0wLGhhPTAsaWE9MDtMPWZhPUwtMTZ8MCxqKGEpO2E6aWYoKGRhPTIxNDc0ODM2NDcmKGdhPWUoMCkpKT4+PjA8PTEzMDUwMjI0MjYpe2lmKGVhPS42MzY2MTk3NzIzNjc1ODE0KihoYT0rYSkrNjc1NTM5OTQ0MTA1NTc0NC02NzU1Mzk5NDQxMDU1NzQ0LHZbY2E+PjNdPWhhKy0xLjU3MDc5NjMxMDkwMTY0MTgqZWErLTEuNTg5MzI1NDc3MzUyODE5NmUtOCplYSx5KGVhKTwyMTQ3NDgzNjQ4KXtkYT1+fmVhO2JyZWFrIGF9ZGE9LTIxNDc0ODM2NDh9ZWxzZSAyMTM5MDk1MDQwPD1kYT4+PjA/KHZbY2E+PjNdPXgoYS1hKSxkYT0wKTooZGE9KChpYT1kYSk+Pj4yMyktMTUwfDAsdls4K2ZhPj4zXT0oZigwLGlhLShkYTw8MjMpfDApLGsoKSksZGE9RGEoOCtmYXwwLGZhLGRhKSxlYT12W2ZhPj4zXSwoMHxnYSk8PS0xPyh2W2NhPj4zXT0tZWEsZGE9MC1kYXwwKTp2W2NhPj4zXT1lYSk7cmV0dXJuIEw9MTYrZmF8MCxkYX1mdW5jdGlvbiBtYShhKXt2YXIgY2E9MCxqYT0wLGthPTAsbGE9MCxtYT0wO2thPTQsamE9MTA4MjthOmlmKGNhPXJbMHxhXSl7Zm9yKDshKCgwfChsYT1yWzB8amFdKSkhPSgwfGNhKXx8IShrYT1rYSstMXwwKXwhbGEpOylpZihqYT1qYSsxfDAsY2E9clthKzF8MF0sYT1hKzF8MCwhY2EpYnJlYWsgYTttYT1jYX1yZXR1cm4oMjU1Jm1hKS1yWzB8amFdfDB9ZnVuY3Rpb24gb2EoYSxuYSl7cmV0dXJuIGE/ZnVuY3Rpb24oYSxVYil7YTp7aWYoYSl7aWYoVWI+Pj4wPD0xMjcpYnJlYWsgYTtpZihxW3FbMTYyNV0+PjJdKXtpZihVYj4+PjA8PTIwNDcpcmV0dXJuIG9bYSsxfDBdPTYzJlVifDEyOCxvWzB8YV09VWI+Pj42fDE5MiwyO2lmKCEoNTczNDQhPSgtODE5MiZVYikmJjU1Mjk2PD1VYj4+PjApKXJldHVybiBvW2ErMnwwXT02MyZVYnwxMjgsb1swfGFdPVViPj4+MTJ8MjI0LG9bYSsxfDBdPVViPj4+NiY2M3wxMjgsMztpZihVYistNjU1MzY+Pj4wPD0xMDQ4NTc1KXJldHVybiBvW2ErM3wwXT02MyZVYnwxMjgsb1swfGFdPVViPj4+MTh8MjQwLG9bYSsyfDBdPVViPj4+NiY2M3wxMjgsb1thKzF8MF09VWI+Pj4xMiY2M3wxMjgsNH1lbHNlIGlmKDU3MjE2PT0oLTEyOCZVYikpYnJlYWsgYTtxWzE5MDZdPTI1LGE9LTF9ZWxzZSBhPTE7cmV0dXJuIGF9cmV0dXJuIG9bMHxhXT1VYiwxfShhLG5hKTowfWZ1bmN0aW9uIHBhKGEsbmEsb2Esc2Epe2E6e2lmKCEoMjA8bmE+Pj4wfHw5PChuYT1uYSstOXwwKT4+PjApKXtzd2l0Y2gobmEtMXwwKXtkZWZhdWx0OnJldHVybiBuYT1xW29hPj4yXSxxW29hPj4yXT1uYSs0LHZvaWQocVthPj4yXT1xW25hPj4yXSk7Y2FzZSAwOnJldHVybiBuYT1xW29hPj4yXSxxW29hPj4yXT1uYSs0LG5hPXFbbmE+PjJdLHFbYT4+Ml09bmEsdm9pZChxW2ErND4+Ml09bmE+PjMxKTtjYXNlIDE6cmV0dXJuIG5hPXFbb2E+PjJdLHFbb2E+PjJdPW5hKzQscVthPj4yXT1xW25hPj4yXSx2b2lkKHFbYSs0Pj4yXT0wKTtjYXNlIDM6cmV0dXJuIG5hPXFbb2E+PjJdLHFbb2E+PjJdPW5hKzQsbmE9cFtuYT4+MV0scVthPj4yXT1uYSx2b2lkKHFbYSs0Pj4yXT1uYT4+MzEpO2Nhc2UgNDpyZXR1cm4gbmE9cVtvYT4+Ml0scVtvYT4+Ml09bmErNCxxW2E+PjJdPXNbbmE+PjFdLHZvaWQocVthKzQ+PjJdPTApO2Nhc2UgNTpyZXR1cm4gbmE9cVtvYT4+Ml0scVtvYT4+Ml09bmErNCxuYT1vWzB8bmFdLHFbYT4+Ml09bmEsdm9pZChxW2ErND4+Ml09bmE+PjMxKTtjYXNlIDY6cmV0dXJuIG5hPXFbb2E+PjJdLHFbb2E+PjJdPW5hKzQscVthPj4yXT1yWzB8bmFdLHZvaWQocVthKzQ+PjJdPTApO2Nhc2UgMjpjYXNlIDc6YnJlYWsgYTtjYXNlIDg6fW5bc2FdKGEsb2EpfXJldHVybn1uYT1xW29hPj4yXSs3Ji04LHFbb2E+PjJdPW5hKzgsb2E9cVtuYSs0Pj4yXSxxW2E+PjJdPXFbbmE+PjJdLHFbYSs0Pj4yXT1vYX1mdW5jdGlvbiBxYShhKXt2YXIgbmE9MCxvYT0wLHNhPTA7aWYoZ2Eob1txW2E+PjJdXSkpZm9yKDtuYT1xW2E+PjJdLHNhPW9bMHxuYV0scVthPj4yXT1uYSsxLG9hPSh3KG9hLDEwKStzYXwwKS00OHwwLGdhKG9bbmErMXwwXSk7KTtyZXR1cm4gb2F9ZnVuY3Rpb24gcmEoYSx0YSx1YSx2YSx3YSl7dmFyIHhhLHlhPTAsemE9MDtxWzIwNCsoTD14YT1MLTIwOHwwKT4+Ml09dWEsYmEoMTYwK3hhfCh1YT0wKSwwLDQwKSxxWzIwMCt4YT4+Ml09cVsyMDQreGE+PjJdLCgwfGlhKDAsdGEsMjAwK3hhfDAsODAreGF8MCwxNjAreGF8MCx2YSx3YSkpPDB8fCh1YT0wPD1xW2ErNzY+PjJdPzE6dWEseWE9cVthPj4yXSxvW2ErNzR8MF08PTAmJihxW2E+PjJdPS0zMyZ5YSksemE9MzImeWEscVthKzQ4Pj4yXT9pYShhLHRhLDIwMCt4YXwwLDgwK3hhfDAsMTYwK3hhfDAsdmEsd2EpOihxW2ErNDg+PjJdPTgwLHFbYSsxNj4+Ml09ODAreGEscVthKzI4Pj4yXT14YSxxW2ErMjA+PjJdPXhhLHlhPXFbYSs0ND4+Ml0saWEoYSx0YSwyMDArKHFbYSs0ND4+Ml09eGEpfDAsODAreGF8MCwxNjAreGF8MCx2YSx3YSkseWEmJihuW3FbYSszNj4+Ml1dKGEsMCwwKSxxW2ErNDg+PjJdPTAscVthKzQ0Pj4yXT15YSxxW2ErMjg+PjJdPTAscVthKzE2Pj4yXT0wLHFbYSsyMD4+Ml09MCkpLHFbYT4+Ml09cVthPj4yXXx6YSksTD0yMDgreGF8MH1mdW5jdGlvbiBzYShhLHRhLHVhKXt2YXIgdmEsd2E9MDtmYSg4KyhMPXZhPUwtMTYwfDApfDAsMjUzNiwxNDQpLHFbNTIrdmE+PjJdPWEsd2E9KHdhPS0yLShxWzI4K3ZhPj4yXT1hKXwwKT4+PjA8MjU2P3dhOjI1NixhPWErKHFbNTYrdmE+PjJdPXdhKXwwLHFbMzYrdmE+PjJdPWEscVsyNCt2YT4+Ml09YSxyYSg4K3ZhfDAsdGEsdWEsMTUsMTYpLHdhJiYoYT1xWzI4K3ZhPj4yXSxvW2EtKCgwfGEpPT1xWzI0K3ZhPj4yXSl8MF09MCksTD0xNjArdmF8MH1mdW5jdGlvbiB0YShhKXt2YXIgdGE9MCx1YT0wLEFhPTAsQmE9MCxDYT0wLERhPTAsRWE9MCxGYT14KDApLEdhPTAsSGE9MCxJYT0wLEphPTAsS2E9MCxMYT0wLE1hPTAsTmE9eCgwKSxPYT0wLFBhPXgoMCksUWE9MCxSYT0wLFNhPXgoMCksVGE9eCgwKSxVYT14KDApLFZhPTAsV2E9MCxYYT0wLFlhPTAsWmE9MCxfYT0wLCRhPTA7aWYocVthKzI1Nj4+Ml0mJih0YT1xW2ErMjAwPj4yXTw8MixmYShxW2ErMjgwPj4yXSxxW2ErMjY0Pj4yXSx0YSksZmEocVthKzI4ND4+Ml0scVthKzI2OD4+Ml0sdGEpLGZhKHFbYSsyODg+PjJdLHFbYSsyNzY+PjJdLHRhKSksISgoMHwoQ2E9cVthKzI5Mj4+Ml0pKTwxKSl7Zm9yKEdhPShFYT1xW2ErMjk2Pj4yXSkrdyhDYSw0MCl8MCxBYT1xW2ErMzAwPj4yXSx0YT1FYTtVYT11W0FhPj4yXSwoUGE9dVt0YSszMj4+Ml0pPT0oRmE9KHVhPXFbdGErMTI+PjJdKT8oU2E9dVt0YT4+Ml0sRmE9eChVYS1TYSksVWE9dVt0YSs4Pj4yXSxOYT14KEZhL1VhKSxGYT14KEMoTmEpKSxCYT14KHkoRmEpKTx4KDIxNDc0ODM2NDgpP35+RmE6LTIxNDc0ODM2NDgseChTYSt4KFVhKngoTmEteCgwfEJhKSkpKSk6KE5hPXVbdGE+PjJdLEZhPXVbdGErND4+Ml0sVWE8TmE/TmE6RmE8VWE/RmE6VWEpKT9xW3RhKzM2Pj4yXT0wOih1W3RhKzMyPj4yXT1GYSxxW3RhKzM2Pj4yXT0xKSx1YXx8KHVbQWE+PjJdPUZhKSxBYT1BYSs0fDAsKHRhPXRhKzQwfDApPj4+MDxHYT4+PjA7KTtpZighKCgwfENhKTwxKSlmb3IoT2E9cVthKzMwOD4+Ml0sTWE9cVthKzM3Nj4+Ml07Oyl7ZTppZighKCgwfCh1YT1xW0VhKzI4Pj4yXSkpPDEpKWlmKEhhPSh0YT1PYSt3KHFbRWErMjQ+PjJdLDI4KXwwKSt3KHVhLDI4KXwwLFVhPXVbRWErMjA+PjJdLFRhPXVbRWErMTY+PjJdLFBhPXVbRWErMzI+PjJdLE1hKWZvcig7Oyl7U2E9eChDYT0wKTtsOnttOntuOntpZigoMHwoRGE9cVt0YT4+Ml0pKTwxKUFhPUJhPTA7ZWxzZSBpZih1YT1xW3RhKzQ+PjJdLE5hPXVbdWE+PjJdLEZhPXgoTmEtVGEpLDEhPSgwfERhKSl7aWYoUGE8RmEpe0JhPTEsQWE9MDticmVhayBtfWlmKEJhPTAsUGE8eChUYStOYSkpQWE9MDtlbHNle2lmKEFhPTEsRmE9dVt1YSs0Pj4yXSwhKFBhPHgoVGErRmEpKSlmb3IoOzspe2lmKCgwfERhKT09KDB8KEFhPUFhKzF8MCkpKWJyZWFrIG47aWYoTmE9RmEsRmE9dVt1YSsoQWE8PDIpPj4yXSxQYTx4KFRhK0ZhKSlicmVha314KEZhLVRhKTxQYXx8KEFhPUFhKy0xfDAsKEZhPXgoRmEtTmEpKTxVYXx8KFNhPXgoeChQYS1OYSkvRmEpKSl9fWVsc2UgQmE9UGE8eChUYStOYSleMXxGYTxQYV4xLEFhPTA7aWYoQmEpYnJlYWsgbTtpZihMYT1EYT0xLCFxW3RhKzE2Pj4yXSlicmVhayBtO2JyZWFrIGx9QWE9RGErLTF8MCxCYT0xfUxhPShEYT0oRmE9dVt0YSsxMj4+Ml0pIT1TYSkmKFNhPT14KDApfEZhPT14KDApKXxxW3RhKzg+PjJdIT0oMHxBYSksQ2E9QmF9aWYocVt0YSsyMD4+Ml09TGEscVt0YSsyND4+Ml09RGEsdVt0YSsxMj4+Ml09U2EscVt0YSsxNj4+Ml09Q2EscVt0YSs4Pj4yXT1BYSwhKCh0YT10YSsyOHwwKT4+PjA8SGE+Pj4wKSlicmVha31lbHNle2lmKCFxW0VhKzM2Pj4yXSlmb3IoOzspaWYocVt0YSsyMD4+Ml09MCwhKCh0YT10YSsyOHwocVt0YSsyND4+Ml09MCkpPj4+MDxIYT4+PjApKWJyZWFrIGU7Zm9yKDs7KXtTYT14KENhPTApO2Y6e2c6e2g6e2k6aWYoISgoKEJhPTApfChBYT1xWyh1YT10YSk+PjJdKSk8MSkpe2lmKEphPXFbdGErND4+Ml0sTmE9dVtKYT4+Ml0sRmE9eChOYS1UYSksMSE9KDB8QWEpKXtpZighKFBhPEZhKSl7aWYoQmE9MCxQYTx4KFRhK05hKSlicmVhayBpO0RhPTE7ajppZihGYT11W0phKzQ+PjJdLCEoUGE8eChUYStGYSkpKXtmb3IoQWE9QWErLTF8MDtOYT1GYSwoMHxBYSkhPSgwfERhKTspaWYoRmE9dVtKYSsoKERhPURhKzF8MCk8PDIpPj4yXSxQYTx4KFRhK0ZhKSlicmVhayBqO0JhPTE7YnJlYWsgZ31pZihCYT0wLHgoRmEtVGEpPFBhKXtBYT1EYTticmVhayBofWlmKEFhPURhKy0xfDAsKEZhPXgoRmEtTmEpKTxVYSlicmVhayBoO1NhPXgoeChQYS1OYSkvRmEpO2JyZWFrIGh9QmE9MSxBYT0wO2JyZWFrIGd9QmE9UGE8eChUYStOYSleMXxGYTxQYV4xfUFhPTB9aWYoIUJhJiYoSmE9RGE9MSxxW3RhKzE2Pj4yXSkpYnJlYWsgZn1DYT1CYSxKYT0oRGE9KEZhPXVbdGErMTI+PjJdKSE9U2EpJihTYT09eCgwKXxGYT09eCgwKSl8cVt0YSs4Pj4yXSE9KDB8QWEpfWlmKHFbdWErMjA+PjJdPUphLHFbdGErMjQ+PjJdPURhLHVbdGErMTI+PjJdPVNhLHFbdGErMTY+PjJdPUNhLHFbdGErOD4+Ml09QWEsISgodGE9dGErMjh8MCk+Pj4wPEhhPj4+MCkpYnJlYWt9fWlmKCEoKEVhPUVhKzQwfDApPj4+MDxHYT4+PjApKWJyZWFrfX1pZigxPD0oMHwodGE9cVthKzMxMj4+Ml0pKSlmb3IoSmE9KElhPXFbYSszMTY+PjJdKSt3KHRhLDM2KXwwLEdhPXFbYSszNzY+PjJdOzspe1phPSh1YT1xW0lhKzEyPj4yXSkrKChFYT1xW0lhPj4yXSk8PDIpfDAsUWE9cVthKzMwOD4+Ml0sdGE9dWE7cDp7aWYoIShFYT0oKERhPUJhPUNhPTApfEVhKTwxKSlmb3IoOzspe2lmKEFhPVFhK3cocVt0YT4+Ml0sMjgpfDAscVtBYSsxNj4+Ml0pe0xhPTEsUmE9WWE9MDticmVhayBwfWlmKENhPUNhfHxxW0FhKzI0Pj4yXSxEYT1EYXx8cVtBYSsyMD4+Ml0sQmE9KHVbQWErMTI+PjJdIT14KDApKStCYXwwLCEoKHRhPXRhKzR8MCk+Pj4wPFphPj4+MCkpYnJlYWt9aWYoTGE9MCwoUmE9R2E/MTpEYSl8KFlhPUdhPzE6Q2EpJiYoWGE9MTw8QmEscVtJYSs4Pj4yXT1YYSwzMSE9KDB8QmEpKSl7Zm9yKENhPXFbSWErMjA+PjJdLEFhPSh0YT1xW0lhKzE2Pj4yXSkrKERhPVhhPDwyKXwwLFZhPWJhKEthPXRhLDAsNCsoKEhhPS0xXnRhKSsoKHRhPXRhKzR8MCk+Pj4wPEFhPj4+MD9BYTp0YSl8MCkmLTQpLERhPUNhK0RhfDAsdGE9Q2E7cVt0YT4+Ml09MTA2NTM1MzIxNiwodGE9dGErNHwwKT4+PjA8RGE+Pj4wOyk7aWYoIUVhKWlmKERhPUVhPTEsQmEpZm9yKDs7KXtpZihLYT1RYSt3KHFbdWE+PjJdLDI4KXwwLEJhPXFbS2ErOD4+Ml0sSGE9dyhCYSxFYSksdGE9MCwoRmE9dVtLYSsxMj4+Ml0pPT14KDApKWZvcig7cVsoQmE9VmErKHRhPDwyKXwwKT4+Ml09SGErcVtCYT4+Ml0sKDB8WGEpIT0oMHwodGE9dGErMXwwKSk7KTtlbHNle2ZvcihxW1ZhPj4yXT1IYStxW1ZhPj4yXSx1W0NhPj4yXT14KHgoMSktRmEpKnVbQ2E+PjJdLE9hPXcoQmErKHRhPTEpfDAsRWEpO0ZhPXVbS2ErMTI+PjJdLEFhPXRhJkRhLHFbKEJhPShNYT10YTw8MikrVmF8MCk+PjJdPXFbQmE+PjJdKyhBYT9PYTpIYSksdVsoQmE9Q2ErTWF8MCk+PjJdPShBYT9GYTp4KHgoMSktRmEpKSp1W0JhPj4yXSwoMHxYYSkhPSgwfCh0YT10YSsxfDApKTspO0RhPDw9MX1pZihFYT13KHFbS2E+PjJdLEVhKSwhKCh1YT11YSs0fDApPj4+MDxaYT4+PjApKWJyZWFrfWVsc2UgZm9yKDs7KXtpZihBYT1RYSt3KHFbdWE+PjJdLDI4KXwwLERhPXcocVtBYSs4Pj4yXSxFYSksdGE9MCwoRmE9dVtBYSsxMj4+Ml0pPT14KDApKWZvcig7cVsoQmE9VmErKHRhPDwyKXwwKT4+Ml09RGErcVtCYT4+Ml0sKDB8WGEpIT0oMHwodGE9dGErMXwwKSk7KTtlbHNlIHFbVmE+PjJdPURhK3FbVmE+PjJdLHVbQ2E+PjJdPXgoeCgxKS1GYSkqdVtDYT4+Ml07aWYoRWE9dyhxW0FhPj4yXSxFYSksISgodWE9dWErNHwwKT4+PjA8WmE+Pj4wKSlicmVha319fWlmKHFbSWErMzI+PjJdPUxhLHFbSWErMjQ+PjJdPVJhLHFbSWErMjg+PjJdPVlhLCEoKElhPUlhKzM2fDApPj4+MDxKYT4+PjApKWJyZWFrfWlmKCEoKDB8KEJhPXFbYSs0Pj4yXSkpPD0wKSl7Zm9yKHVhPSh0YT1xW2ErNTI+PjJdKSsoQmE8PDIpfDA7RmE9dVt0YT4+Ml0sdVt0YT4+Ml09RmE8eCgwKT94KDApOngoQShGYSx4KDEpKSksKHRhPXRhKzR8MCk+Pj4wPHVhPj4+MDspO2lmKCEoKDB8QmEpPDEpKXtmb3IoRWE9KHRhPXFbYSs4Pj4yXSkrKEJhPDwzKXwwLEhhPXFbYSszMTY+PjJdLENhPXFbYSs0MD4+Ml0sQWE9RGE9cVthKzM2Pj4yXTtCYT0wLHFbdGErND4+Ml0mJih1YT1xW3RhPj4yXSwhcVtEYSsodWE8PDIpPj4yXSYmLTEhPSgwfHVhKXx8KEJhPSFxWzMyKyhIYSt3KHFbQ2E+PjJdLDM2KXwwKT4+Ml0pKSxxW0FhPj4yXT1CYSxDYT1DYSs0fDAsQWE9QWErNHwwLCh0YT10YSs4fDApPj4+MDxFYT4+PjA7KTtpZighKCgwfChHYT1xW2ErND4+Ml0pKTwxKSlmb3IoSmE9cVthPj4yXSxPYT1xW0phKzcyND4+Ml0sdWE9cVthKzQwPj4yXSxEYT1FYT0wOzspe2lmKEthPUhhK3cocVt1YT4+Ml0sMzYpfDAsKHFbS2ErMjg+PjJdfHxxW0thKzI0Pj4yXSkmJihxWyhDYT1FYTw8MikrcVthKzE2Pj4yXT4+Ml09cVtLYSs4Pj4yXSxxW0thKzI0Pj4yXSYmISgoMHwoQmE9cVtLYSs4Pj4yXSkpPDEpKSlmb3IoTWE9KHRhPXFbS2ErMTY+PjJdKSsoQmE8PDIpfDAsQ2E9cVtDYStPYT4+Ml0sQWE9cVthKzI4Pj4yXSsoRGE8PDIpfDAsQmE9cVtKYSs5MzY+PjJdO3FbQWE+PjJdPXFbQmErKENhK3FbdGE+PjJdPDwyKT4+Ml0sQWE9QWErNHwwLCh0YT10YSs0fDApPj4+MDxNYT4+PjA7KTtpZihxW0thKzI4Pj4yXSYmISgoMHwoQmE9cVtLYSs4Pj4yXSkpPDEpKWZvcihCYT0odGE9cVtLYSsyMD4+Ml0pKyhCYTw8Mil8MCxBYT1xW2ErMjA+PjJdKyhEYTw8Mil8MDtxW0FhPj4yXT1xW3RhPj4yXSxBYT1BYSs0fDAsKHRhPXRhKzR8MCk+Pj4wPEJhPj4+MDspO2lmKHVhPXVhKzR8MCxEYT1xW0thKzQ+PjJdK0RhfDAsKDB8R2EpPT0oMHwoRWE9RWErMXwwKSkpYnJlYWt9fX1pZihuW3FbMTY0NF1dKGEpLF9hPXFbYSszMTY+PjJdLDE8PSgwfCh1YT1xW2ErNTY+PjJdKSkpe2ZvcihHYT0odGE9cVthKzYwPj4yXSkrKHVhPDw1KXwwLEphPXFbYSsxNzY+PjJdLE9hPXFbYSsxNzI+PjJdLE1hPXFbYSszNj4+Ml0sQmE9cVthKzE4MD4+Ml0sQ2E9QWE9cVthKzE2OD4+Ml07Oyl7RGE9Q2EsdWE9MCxxW3RhKzI4Pj4yXSYmKC0xIT0oMHwoRWE9cVt0YT4+Ml0pKSYmKHVhPTAsIXFbTWErKEVhPDwyKT4+Ml0pfHwtMSE9KDB8KEVhPXFbdGErND4+Ml0pKSYmKHVhPTAsIXFbQWErKEVhPDwyKT4+Ml0pfHwodWE9IXFbMzIrKHcocVtCYT4+Ml0sMzYpK19hfDApPj4yXSkpLHFbRGE+PjJdPXVhO3g6aWYoKERhPXFbdGErOD4+Ml0pPj4+MDw9MSl7aWYoRGEtMSl7cVtPYSsocVt0YSsxMj4+Ml08PDIpPj4yXT11YTticmVhayB4fXFbSmErKHFbdGErMTI+PjJdPDwyKT4+Ml09dWF9ZWxzZSBZKDQsMTQ3MywwKTtpZihCYT1CYSs0fDAsQ2E9Q2ErNHwwLCEoKHRhPXRhKzMyfDApPj4+MDxHYT4+PjApKWJyZWFrfV9hPXFbYSszMTY+PjJdfWlmKEVhPXFbYT4+Ml0sMTw9KDB8KEdhPXFbYS0gLTY0Pj4yXSkpKXtmb3IoSmE9cVtFYSs5ODg+PjJdLE9hPXFbRWErNzg0Pj4yXSxMYT1xW2ErMTg0Pj4yXSxJYT11YT0wOzspe2lmKEhhPXcocVtMYT4+Ml0sMzYpK19hfDAsKHFbSGErMjg+PjJdfHxxW0hhKzI0Pj4yXSkmJihxWyhDYT11YTw8MikrcVthKzg0Pj4yXT4+Ml09cVtIYSs4Pj4yXSxxW0hhKzI0Pj4yXSYmISgoMHwoQmE9cVtIYSs4Pj4yXSkpPDEpKSlmb3IoTWE9KHRhPXFbSGErMTY+PjJdKSsoQmE8PDIpfDAsRGE9cVtDYStPYT4+Ml0sQWE9KEJhPUlhPDwyKStxW2ErMTAwPj4yXXwwLENhPUJhK3FbYSs5Nj4+Ml18MDtCYT1EYStxW3RhPj4yXTw8MixxW0FhPj4yXT1KYSsocVtCYStxW0VhKzk0ND4+Ml0+PjJdPDwyKSxxW0NhPj4yXT1xW0JhK3FbRWErOTQwPj4yXT4+Ml0sQ2E9Q2ErNHwwLEFhPUFhKzR8MCwodGE9dGErNHwwKT4+PjA8TWE+Pj4wOyk7aWYocVtIYSsyOD4+Ml0mJiEoKDB8KEJhPXFbSGErOD4+Ml0pKTwxKSlmb3IoQmE9KHRhPXFbSGErMjA+PjJdKSsoQmE8PDIpfDAsQWE9cVthKzg4Pj4yXSsoSWE8PDIpfDA7cVtBYT4+Ml09cVt0YT4+Ml0sQWE9QWErNHwwLCh0YT10YSs0fDApPj4+MDxCYT4+PjA7KTtpZihMYT1MYSs0fDAsSWE9cVtIYSs0Pj4yXStJYXwwLCgwfEdhKT09KDB8KHVhPXVhKzF8MCkpKWJyZWFrfV9hPXFbYSszMTY+PjJdLEVhPXFbYT4+Ml19aWYoMTw9KDB8KFhhPXFbYSs3Mj4+Ml0pKSlmb3IoWmE9cVthKzc2Pj4yXSxRYT1xW0VhKzgwOD4+Ml0sWWE9cVthKzE4OD4+Ml0sUmE9SWE9MDs7KXtpZihXYT13KHFbWWE+PjJdLDM2KStfYXwwLChxW1dhKzI4Pj4yXXx8cVtXYSsyND4+Ml0pJiYocVsodWE9SWE8PDIpK3FbYSsxMTY+PjJdPj4yXT1xW1dhKzg+PjJdLHFbV2ErMjQ+PjJdKSl7aWYodGE9cVtXYSsxNj4+Ml0sVmE9cVt1YStRYT4+Ml0sMTw9KDB8KHVhPXFbV2ErOD4+Ml0pKSlmb3IoS2E9dGErKHVhPDwyKXwwLEFhPSh1YT1SYTw8MikrcVthKzEzMj4+Ml18MCxDYT11YStxW2ErMTM2Pj4yXXwwLEJhPXVhK3FbYSsxNDA+PjJdfDAsRGE9dWErcVthKzE0ND4+Ml18MCxMYT11YStxW2ErMTI4Pj4yXXwwLEhhPXFbRWErOTQ4Pj4yXSxHYT1xW0VhKzk2ND4+Ml0sSmE9cVtFYSs5NjA+PjJdLE9hPXFbRWErOTU2Pj4yXSxNYT1xW0VhKzk1Mj4+Ml0sdWE9dGE7JGE9VmErcVt1YT4+Ml08PDIscVtBYT4+Ml09cVskYStNYT4+Ml0scVtDYT4+Ml09cVtPYSskYT4+Ml0scVtCYT4+Ml09cVtKYSskYT4+Ml0scVtEYT4+Ml09cVtHYSskYT4+Ml0scVtMYT4+Ml09cVtIYSskYT4+Ml0sTGE9TGErNHwwLERhPURhKzR8MCxCYT1CYSs0fDAsQ2E9Q2ErNHwwLEFhPUFhKzR8MCwodWE9dWErNHwwKT4+PjA8S2E+Pj4wOyk7dWE9WmErKElhPDw1KXwwLHRhPVZhK3FbdGE+PjJdPDwyLHFbdWErMjQ+PjJdPXFbdGErcVtFYSs5Njg+PjJdPj4yXSxxW3VhKzI4Pj4yXT1xW3RhK3FbRWErOTcyPj4yXT4+Ml19aWYocVtXYSsyOD4+Ml0mJiEoKDB8KHVhPXFbV2ErOD4+Ml0pKTwxKSlmb3IodWE9KHRhPXFbV2ErMjA+PjJdKSsodWE8PDIpfDAsQWE9cVthKzEyMD4+Ml0rKFJhPDwyKXwwO3FbQWE+PjJdPXFbdGE+PjJdLEFhPUFhKzR8MCwodGE9dGErNHwwKT4+PjA8dWE+Pj4wOyk7aWYoWWE9WWErNHwwLFJhPXFbV2ErND4+Ml0rUmF8MCwoMHxYYSk9PSgwfChJYT1JYSsxfDApKSlicmVha31pZihuW3FbMTY0Ml1dKGEpLG5bcVsxNjQ1XV0oYSksISgoMHwodWE9cVthKzIwMD4+Ml0pKTwxKSl7Zm9yKE1hPSh0YT1xW2ErMjA0Pj4yXSkrKHVhPDw0KXwwLEVhPXFbYSsxNjg+PjJdLERhPXFbYSszNj4+Ml0sSGE9cVthKzMxNj4+Ml0sQ2E9cVthKzI1Mj4+Ml0sQWE9cVthKzI0OD4+Ml07QmE9MCxxW3RhKzg+PjJdJiYodWE9cVt0YT4+Ml0sIXFbRGErKHVhPDwyKT4+Ml0mJi0xIT0oMHx1YSl8fCh1YT1xW3RhKzQ+PjJdLCFxW0VhKyh1YTw8Mik+PjJdJiYtMSE9KDB8dWEpfHwoQmE9IXFbMzIrKEhhK3cocVtDYT4+Ml0sMzYpfDApPj4yXSkpKSxxW0FhPj4yXT1CYSxDYT1DYSs0fDAsQWE9QWErNHwwLCh0YT10YSsxNnwwKT4+PjA8TWE+Pj4wOyk7aWYoISgoMHwoSmE9cVthKzIwMD4+Ml0pKTwxKSlmb3IoS2E9cVthPj4yXSxPYT1xW0thKzk4OD4+Ml0sTWE9cVtLYSs4NDQ+PjJdLHVhPXFbYSsyNTI+PjJdLExhPUlhPTA7Oyl7aWYoUWE9SGErdyhxW3VhPj4yXSwzNil8MCwocVtRYSsyOD4+Ml18fHFbUWErMjQ+PjJdKSYmKHFbKENhPUlhPDwyKStxW2ErMjEyPj4yXT4+Ml09cVtRYSs4Pj4yXSxxW1FhKzI0Pj4yXSYmISgoMHwoQmE9cVtRYSs4Pj4yXSkpPDEpKSlmb3IoRWE9KHRhPXFbUWErMTY+PjJdKSsoQmE8PDIpfDAsRGE9cVtDYStNYT4+Ml0sQWE9KEJhPUxhPDwyKStxW2ErMjMyPj4yXXwwLENhPUJhK3FbYSsyMjQ+PjJdfDAsQmE9QmErcVthKzIyOD4+Ml18MDtHYT1EYStxW3RhPj4yXTw8MixxW0FhPj4yXT1PYSsocVtHYStxW0thKzk4ND4+Ml0+PjJdPDwyKSxxW0NhPj4yXT1xW0dhK3FbS2ErOTc2Pj4yXT4+Ml0scVtCYT4+Ml09cVtHYStxW0thKzk4MD4+Ml0+PjJdLEJhPUJhKzR8MCxDYT1DYSs0fDAsQWE9QWErNHwwLCh0YT10YSs0fDApPj4+MDxFYT4+PjA7KTtpZihxW1FhKzI4Pj4yXSYmISgoMHwoQmE9cVtRYSs4Pj4yXSkpPDEpKWZvcihCYT0odGE9cVtRYSsyMD4+Ml0pKyhCYTw8Mil8MCxBYT1xW2ErMjE2Pj4yXSsoTGE8PDIpfDA7cVtBYT4+Ml09cVt0YT4+Ml0sQWE9QWErNHwwLCh0YT10YSs0fDApPj4+MDxCYT4+PjA7KTtpZih1YT11YSs0fDAsTGE9cVtRYSs0Pj4yXStMYXwwLCgwfEphKT09KDB8KElhPUlhKzF8MCkpKWJyZWFrfX1pZihuW3FbMTY0M11dKGEpLGZ1bmN0aW9uKGEpe3ZhciBrZSxkZT0wLGVlPTAsZmU9MCxnZT0wLGhlPTAsaWU9MCxqZT0wLGxlPTAsbWU9MCxuZT0wLG9lPTAscGU9MDtpZigxPD0oMHwoa2U9cVthKzM0MD4+Ml0pKSlmb3IobWU9cVthKzMxNj4+Ml0sbGU9cVthPj4yXSxuZT1xW2xlKzEwNzI+PjJdLGhlPXFbYSszNzI+PjJdOzspe2lmKGZlPXcocVtoZT4+Ml0sMzYpK21lfDAsKHFbZmUrMjg+PjJdfHxxW2ZlKzI0Pj4yXSkmJihxWyhkZT1pZTw8MikrcVthKzM1Mj4+Ml0+PjJdPXFbZmUrOD4+Ml0scVtmZSsyND4+Ml0mJiEoKDB8KGdlPXFbZmUrOD4+Ml0pKTwxKSkpZm9yKGdlPShlZT1xW2ZlKzE2Pj4yXSkrKGdlPDwyKXwwLG9lPXFbZGUrbmU+PjJdLGRlPXFbYSszNjQ+PjJdKyhqZTw8Mil8MCxwZT1xW2xlKzExMDQ+PjJdO3FbZGU+PjJdPXFbKHFbZWU+PjJdK29lPDwyKStwZT4+Ml0sZGU9ZGUrNHwwLChlZT1lZSs0fDApPj4+MDxnZT4+PjA7KTtpZihxW2ZlKzI4Pj4yXSYmISgoMHwoZGU9cVtmZSs4Pj4yXSkpPDEpKWZvcihnZT0oZWU9cVtmZSsyMD4+Ml0pKyhkZTw8Mil8MCxkZT1xW2ErMzU2Pj4yXSsoamU8PDIpfDA7cVtkZT4+Ml09cVtlZT4+Ml0sZGU9ZGUrNHwwLChlZT1lZSs0fDApPj4+MDxnZT4+PjA7KTtpZihoZT1oZSs0fDAsamU9cVtmZSs0Pj4yXStqZXwwLCgwfGtlKT09KDB8KGllPWllKzF8MCkpKWJyZWFrfX0oYSksbltxWzE2NDZdXShhKSx1YT1xW2ErNDg+PjJdLDE8PSgwfCh0YT1xW2ErND4+Ml0pKSlmb3IoRWE9KENhPXFbYSs4Pj4yXSkrKHRhPDwzKXwwLEJhPXFbYSs1Mj4+Ml0sQWE9cVthKzM2Pj4yXSx0YT11YTtxW0FhPj4yXSYmKEZhPXVbQmE+PjJdLHVbdGE+PjJdPUZhLC0xIT0oMHwoRGE9cVtDYT4+Ml0pKSYmKHVbdGE+PjJdPUZhKnVbKERhPDwyKSt1YT4+Ml0pKSx0YT10YSs0fDAsQmE9QmErNHwwLEFhPUFhKzR8MCwoQ2E9Q2ErOHwwKT4+PjA8RWE+Pj4wOyk7aWYoMTw9KDB8KEJhPXFbYSs1Nj4+Ml0pKSl7Zm9yKHVhPWErNTZ8MCx0YT1xW2ErNjA+PjJdLEFhPXFbYSsxNjg+PjJdLENhPTA7cVtBYT4+Ml0mJm5bcVt0YSsxNj4+Ml1dKHRhLENhLHVhKSxBYT1BYSs0fDAsdGE9dGErMzJ8MCwoMHxCYSkhPSgwfChDYT1DYSsxfDApKTspO3VhPXFbYSs0OD4+Ml19aWYoMTw9KDB8KEJhPXFbYSsyMDA+PjJdKSkpZm9yKEphPSh0YT1xW2ErMjA0Pj4yXSkrKEJhPDw0KXwwLE9hPXFbYSsxOTI+PjJdLE1hPXFbYSs2MD4+Ml0sQ2E9cVthKzI0OD4+Ml0sQWE9cVthKzI3Nj4+Ml0sQmE9cVthKzI3Mj4+Ml07cVtDYT4+Ml0mJigtMSE9KDB8KERhPXFbdGE+PjJdKSkmJih1W0FhPj4yXT11WyhEYTw8MikrdWE+PjJdKnVbQWE+PjJdKSwtMSE9KDB8KERhPXFbdGErND4+Ml0pKSYmKHVbQWE+PjJdPXVbT2ErKERhPDwyKT4+Ml0qdVtBYT4+Ml0sRWE9TWErKERhPDw1KXwwLERhPXFbQmE+PjJdLG5bcVtFYSsyMD4+Ml1dKHFbRWErMjQ+PjJdLERhLERhLHFbdGErMTI+PjJdKSkpLEJhPUJhKzR8MCxBYT1BYSs0fDAsQ2E9Q2ErNHwwLCh0YT10YSsxNnwwKT4+PjA8SmE+Pj4wOyk7aWYoZnVuY3Rpb24oYSl7dmFyIEJkPTAsQ2Q9MCxEZD0wLEVkPTAsRmQ9eCgwKSxHZD14KDApLEhkPXgoMCksSWQ9eCgwKSxKZD14KDApLEtkPTAsTGQ9MCxNZD0wLE5kPTAsT2Q9MCxQZD14KDApLFFkPTAsUmQ9MCxTZD14KDApLFRkPTA7aWYoMTw9KDB8KERkPXFbYSszNDA+PjJdKSkpZm9yKFRkPShCZD1xW2ErMzQ0Pj4yXSkrdyhEZCwyNCl8MCxEZD1xW2ErMjcyPj4yXTs7KXtpZigoYT0wKTwoMHwoS2Q9cVtCZCs4Pj4yXSkpKWZvcihMZD1xW0RkKyhxW0JkKzQ+PjJdPDwyKT4+Ml0sTWQ9cVtEZCsocVtCZD4+Ml08PDIpPj4yXSxGZD11W0JkKzIwPj4yXSxOZD1xW0JkKzE2Pj4yXSxPZD1xW0JkKzEyPj4yXTtQZD11WygoQ2Q9MXxhKTw8MikrT2Q+PjJdLEVkPXNbKGE8PDEpK05kPj4xXTw8MyYyNjIxMzYsR2Q9dVsoUWQ9KDR8RWQpK01kfDApPj4yXSxDZD1zWyhDZDw8MSkrTmQ+PjFdPDwzJjI2MjEzNixIZD11WyhSZD0oNHxDZCkrTGR8MCk+PjJdLElkPXVbKEVkPUVkK01kfDApPj4yXSxTZD11WyhhPDwyKStPZD4+Ml0sSmQ9dVsoQ2Q9Q2QrTGR8MCk+PjJdLHVbRWQ+PjJdPUlkK3goRmQqeChTZCp4KEpkLUlkKSkpLHVbUWQ+PjJdPUdkK3goRmQqeChTZCp4KEhkLUdkKSkpLHVbQ2Q+PjJdPUpkK3goRmQqeChQZCp4KElkLUpkKSkpLHVbUmQ+PjJdPUhkK3goRmQqeChQZCp4KEdkLUhkKSkpLCgwfChhPWErMnwwKSk8KDB8S2QpOyk7aWYoISgoQmQ9QmQrMjR8MCk+Pj4wPFRkPj4+MCkpYnJlYWt9fShhKSxuW3FbMTY0N11dKGEpLExhPXFbYSsyNDg+PjJdLElhPXFbYSsyNjg+PjJdLDE8PSgwfChIYT1xW2ErMzIwPj4yXSkpKXtmb3IoSmE9KEJhPXFbYSszMjQ+PjJdKSt3KEhhLDI4KXwwLE9hPXFbYSs0ND4+Ml0sTWE9cVthKzM2Pj4yXSx1YT1CYTs7KXtpZigxPD0oMHwoQWE9cVt1YSs0Pj4yXSkpKWZvcihFYT11YSsyMHwwLERhPXFbdWErMTI+PjJdLHRhPTA7R2E9cVs0KyhDYT1EYSsodGE8PDQpfDApPj4yXTw8MixDYT0xPT1xWyhLYT1DYSk+PjJdLHFbS2ErMTI+PjJdPXFbKHFbR2ErKENhP01hOkxhKT4+Ml0/R2ErKENhP09hOklhKXwwOkVhKT4+Ml0sKDB8QWEpIT0oMHwodGE9dGErMXwwKSk7KTtpZighKCh1YT11YSsyOHwwKT4+PjA8SmE+Pj4wKSlicmVha31mb3IoT2E9cVthKzI2ND4+Ml0sUmE9MDs7KXtpZihHYT1CYSt3KFJhLDI4KXwwLCEocVsoSmE9R2EpKzI0Pj4yXTwxKSl7Zm9yKENhPXFbYSszMjg+PjJdLHRhPTA7cVtDYSsodGE8PDIpPj4yXT0tMSwoMHwodGE9dGErMXwwKSk8KDB8KHVhPXFbSmErMjQ+PjJdKSk7KTtpZighKCgwfHVhKTwxKSlmb3IodWE9cVthKzMzNj4+Ml0sdGE9MDtxW3VhKyh0YTw8Mik+PjJdPS0xLCgwfCh0YT10YSsxfDApKTxxW0phKzI0Pj4yXTspO31pZighKHFbR2ErND4+Ml08MSkpe2ZvcihNYT1xW2ErMzMyPj4yXSx0YT0wO3FbTWErKHRhPDwyKT4+Ml09LTEsKDB8KHRhPXRhKzF8MCkpPCgwfCh1YT1xW0dhKzQ+PjJdKSk7KTtpZighKCgwfHVhKTwxKSlmb3IoQWE9cVtHYSsxMj4+Ml0sRWE9cVthKzMzNj4+Ml0sdGE9MDtEYT1xWzEyKyhBYSsodGE8PDQpfDApPj4yXS1xW0dhKzIwPj4yXTw8Mix1YT0tMSE9KDB8KHVhPXFbKENhPURhK0VhfDApPj4yXSkpP01hKyh1YTw8Mil8MDpEYStxW2ErMzI4Pj4yXXwwLHFbdWE+PjJdPXRhLCgwfCh0YT0ocVtDYT4+Ml09dGEpKzF8MCkpPHFbR2ErND4+Ml07KTt9aWYoMTw9KDB8KENhPXFbSmErMjQ+PjJdKSkpZm9yKEFhPXFbR2ErOD4+Ml0sTWE9cVthKzMyOD4+Ml0sRWE9MDs7KXtpZigtMSE9KDB8KHRhPXFbTWErKEVhPDwyKT4+Ml0pKSl7Zm9yKERhPXFbYSszMzI+PjJdLENhPXFbR2ErMTI+PjJdO0FhPSh1YT0xIT1xWyh1YT1DYSsodGE8PDQpfDApPj4yXT8ocVtPYSsocVt1YSs0Pj4yXTw8Mik+PjJdPUFhLDEpOih1YT1CYSt3KHFbdWErOD4+Ml0sMjgpfDAscVt1YSs4Pj4yXT1BYSxxW3VhPj4yXSkpK0FhfDAsKDB8dGEpPCgwfCh1YT1xW0RhKyh0YTw8Mik+PjJdKSkmJi0xIT0oMHwodGE9dWEpKTspO0NhPXFbSmErMjQ+PjJdfWlmKCEoKDB8KEVhPUVhKzF8MCkpPCgwfENhKSkpYnJlYWt9aWYoKDB8SGEpPT0oMHwoUmE9UmErMXwwKSkpYnJlYWt9fURhPXFbYSsyMDA+PjJdO006e2lmKHFbYSszNzY+PjJdKXtpZih0YT0wLCgocVthKzI1Nj4+Ml09MCl8RGEpPDEpYnJlYWsgTTtmb3IoOzspe2lmKEFhPTYyLENhPXFbYSsyNjA+PjJdK3RhfDAsIXFbKHVhPXRhPDwyKStMYT4+Ml18dVt1YStxW2ErMjc2Pj4yXT4+Ml09PXgoMCl8fChBYT02Myksb1swfENhXT1BYSwoMHxEYSk9PSgwfCh0YT10YSsxfDApKSlicmVhayBNO0xhPXFbYSsyNDg+PjJdfX1pZighcVthKzI1Nj4+Ml0pe2lmKCgwfERhKTwxKWJyZWFrIE07Zm9yKHRhPTA7Oyl7aWYoIXFbKHVhPXRhPDwyKStMYT4+Ml18dVt1YStxW2ErMjc2Pj4yXT4+Ml09PXgoMCk/KHVhPXFbYSsyNjA+PjJdK3RhfDAsb1swfHVhXT0yNTQmclswfHVhXSk6KHVhPXFbYSsyNjA+PjJdK3RhfDAsb1swfHVhXT0xfHJbMHx1YV0pLCgwfERhKT09KDB8KHRhPXRhKzF8MCkpKWJyZWFrIE07TGE9cVthKzI0OD4+Ml19fWlmKCEoKChxW2ErMjU2Pj4yXT0wKXxEYSk8MSkpZm9yKEFhPTA7Oyl7aWYoRmE9dVsoQ2E9QWE8PDIpK3FbYSsyNzY+PjJdPj4yXSxCYT1xW0NhK0xhPj4yXSx0YT1GYSE9eCgwKSYwIT0oMHxCYSksdWE9cVthKzI2MD4+Ml0rQWF8MCx0YT0oMHx0YSk9PSgxJm9bMHx1YV0pP3RhOjJ8dGEsdGE9RmEhPXVbQ2ErcVthKzI4OD4+Ml0+PjJdPzR8dGE6dGEsdGE9cVtDYStJYT4+Ml09PXFbQ2ErcVthKzI4ND4+Ml0+PjJdP3RhOjh8dGEsdGE9cVtDYStxW2ErMjY0Pj4yXT4+Ml09PXFbQ2ErcVthKzI4MD4+Ml0+PjJdP3RhOjE2fHRhLG9bMHx1YV09QmE/MzJ8dGE6dGEsKDB8RGEpPT0oMHwoQWE9QWErMXwwKSkpYnJlYWsgTTtJYT1xW2ErMjY4Pj4yXSxMYT1xW2ErMjQ4Pj4yXX19cVthKzM3Nj4+Ml09MH1mdW5jdGlvbiB1YShhLGFiLGJiKXt2YXIgY2I9MCxkYj0wLGViPTAsZmI9MCxnYj0wLGhiPTAsaWI9MCxqYj0wLGtiPTAsbGI9MCxtYj0wO2lmKHFbYWI+PjJdPTM4NCxkYj1xW2E+PjJdLDE8PSgwfChmYj1xW2RiPj4yXSkpKXtmb3IoaGI9cVthKzE2Pj4yXSxpYj1xW2ErMjk2Pj4yXTtlYj0oMTw8cVtpYisocVtoYisoY2I8PDIpPj4yXTw8Mik+PjJdKStlYnwwLCgwfGZiKSE9KDB8KGNiPWNiKzF8MCkpOyk7Y2I9ZWI8PDJ9aWYocVthYis0Pj4yXT1mYjw8MyxxW2FiKzg+PjJdPXFbZGI+PjJdPDwyLHFbYWIrMTI+PjJdPXFbZGI+PjJdPDwyLHFbYWIrMTY+PjJdPXFbZGI+PjJdPDwyLHFbYWIrMjA+PjJdPXFbZGI+PjJdPDwyLHFbYWIrMjQ+PjJdPXFbZGI+PjJdPDwyLGViPXFbZGI+PjJdLHFbYWIrNDA+PjJdPWNiLHFbYWIrMzY+PjJdPWNiLHFbYWIrMzI+PjJdPWNiLHFbYWIrMjg+PjJdPWViPDwyLDE8PSgoZWI9Y2I9MCl8KGliPXFbZGIrOD4+Ml0pKSl7Zm9yKGtiPXFbYSsyOTY+PjJdLGxiPXFbYSs4OD4+Ml0samI9cVthKzc2Pj4yXSxmYj0wO2NiPSgwfGNiKTwoMHwoaGI9cVsobWI9ZWI8PDIpK2xiPj4yXSkpP2hiOmNiLGdiPSgxNSsoaGI8PDMpJi0xNikrZ2J8MCxmYj0oMTw8cVtrYisocVtqYittYj4+Ml08PDIpPj4yXSkrZmJ8MCwoMHxpYikhPSgwfChlYj1lYisxfDApKTspO2ViPWNiPDwzLGNiPWZiPDwyfWlmKHFbYWIrNDQ+PjJdPXFbZGIrND4+Ml08PDUscVthYis0OD4+Ml09dyhxW2RiKzg+PjJdLDI0KSxxW2FiKzUyPj4yXT1xW2RiKzEyPj4yXTw8NSxxW2FiKzU2Pj4yXT1xW2RiKzQ+PjJdPDwyLHFbYWIrNjA+PjJdPXFbZGIrOD4+Ml08PDIscVthYis2ND4+Ml09cVtkYisxMj4+Ml08PDIscVthYis2OD4+Ml09cVtkYis0Pj4yXTw8MixmYj1xW2RiKzQ+PjJdLHFbYWIrNzY+PjJdPWdiLHFbYWIrNzI+PjJdPWZiPDwyLHFbYWIrODA+PjJdPXFbZGIrOD4+Ml08PDIsZmI9cVtkYis4Pj4yXSxxW2FiKzEwND4+Ml09ZWIscVthYisxMDA+PjJdPWNiLHFbYWIrOTY+PjJdPWNiLHFbYWIrOTI+PjJdPWNiLHFbYWIrODg+PjJdPWNiLHFbYWIrODQ+PjJdPWZiPDwyLDE8PSgoY2I9Z2I9MCl8KGZiPXFbZGIrMTI+PjJdKSkpe2ZvcihoYj1xW2ErMjk2Pj4yXSxpYj1xW2ErMTAwPj4yXSxlYj0wO2ViPSgxPDxxW2hiKyhxW2liKyhjYjw8Mik+PjJdPDwyKT4+Ml0pK2VifDAsKDB8ZmIpIT0oMHwoY2I9Y2IrMXwwKSk7KTtjYj1lYjw8Mn1pZihxW2FiKzEwOD4+Ml09ZmI8PDIsZWI9cVtkYisxMj4+Ml0scVthYisxNTY+PjJdPWNiLHFbYWIrMTUyPj4yXT1jYixxW2FiKzE0OD4+Ml09Y2IscVthYisxNDQ+PjJdPWNiLHFbYWIrMTQwPj4yXT1jYixxW2FiKzEzNj4+Ml09Y2IscVthYisxMzI+PjJdPWNiLHFbYWIrMTI4Pj4yXT1jYixxW2FiKzEyND4+Ml09Y2IscVthYisxMjA+PjJdPWNiLHFbYWIrMTE2Pj4yXT1jYixxW2FiKzExMj4+Ml09ZWI8PDIsMTw9KChlYj1jYj0wKXwoaGI9cVtkYisxNj4+Ml0pKSl7Zm9yKGtiPXFbYSsxMzY+PjJdLGxiPXFbYSsyOTY+PjJdLGpiPXFbYSsxNzI+PjJdLGZiPTA7Y2I9KDB8Y2IpPCgwfChpYj1xWyhtYj1lYjw8MikramI+PjJdKSk/aWI6Y2IsZ2I9KDE1KyhpYjw8MykmLTE2KStnYnwwLGZiPSgxPDxxW2xiKyhxW2tiK21iPj4yXTw8Mik+PjJdKStmYnwwLCgwfGhiKSE9KDB8KGViPWViKzF8MCkpOyk7ZWI9Y2I8PDMsY2I9ZmI8PDJ9aWYocVthYisxNjA+PjJdPWhiPDw0LHFbYWIrMTY0Pj4yXT1xW2RiKzE2Pj4yXTw8MixxW2FiKzE2OD4+Ml09cVtkYisxNj4+Ml0scVthYisxNzI+PjJdPXFbZGIrMTY+PjJdPDwyLHFbYWIrMTc2Pj4yXT1xW2RiKzE2Pj4yXTw8MixmYj1xW2RiKzE2Pj4yXSxxW2FiKzE4ND4+Ml09Z2IscVthYisxODA+PjJdPWZiPDwyLHFbYWIrMTg4Pj4yXT1xW2RiKzE2Pj4yXTw8MixxW2FiKzE5Mj4+Ml09cVtkYisxNj4+Ml08PDIscVthYisxOTY+PjJdPXFbZGIrMTY+PjJdPDwyLHFbYWIrMjAwPj4yXT1xW2RiKzE2Pj4yXTw8MixxW2FiKzIwND4+Ml09cVtkYisxNj4+Ml08PDIsZmI9cVtkYisxNj4+Ml0scVthYisyMzY+PjJdPWViLHFbYWIrMjMyPj4yXT1jYixxW2FiKzIyOD4+Ml09Y2IscVthYisyMjQ+PjJdPWNiLHFbYWIrMjIwPj4yXT1jYixxW2FiKzIxNj4+Ml09Y2IscVthYisyMTI+PjJdPWNiLHFbYWIrMjA4Pj4yXT1mYjw8MixxW2FiKzI0MD4+Ml09dyhxW2RiKzIwPj4yXSw0MCkscVthYisyNDQ+PjJdPXFbZGIrMjA+PjJdPDwyLHFbYWIrMjQ4Pj4yXT13KHFbZGIrNTI+PjJdLDI4KSwxPD0oKGNiPWZiPTApfChnYj1xW2RiKzQ4Pj4yXSkpKXtmb3IoaGI9cVthKzI5Nj4+Ml0sZWI9MDtlYj0oMTw8cVtoYisoY2I8PDIpPj4yXSkrZWJ8MCwoMHxnYikhPSgwfChjYj1jYisxfDApKTspO2NiPWViPDwyfWlmKHFbYWIrMjYwPj4yXT1jYixxW2FiKzI1Nj4+Ml09Y2IscVthYisyNTI+PjJdPXcoZ2IsMzYpLHFbYWIrMjY0Pj4yXT13KHFbZGIrNzI+PjJdLDI4KSwxPD0oKGNiPTApfChoYj1xW2RiKzcyPj4yXSkpKXtmb3IoaWI9cVthKzM0MD4+Ml0sa2I9cVthKzMzNj4+Ml0sbGI9cVthKzMyOD4+Ml0sZWI9MDtlYj0oMHwoamI9cVsoZ2I9ZmI8PDIpK2tiPj4yXS1xW2diK2liPj4yXXwwKSk8KDB8ZWIpP2ViOmpiKzF8MCxjYj0oMHxjYik8KDB8KGdiPXFbZ2IrbGI+PjJdKSk/Z2I6Y2IsKDB8aGIpIT0oMHwoZmI9ZmIrMXwwKSk7KTtmYj1lYjw8MixjYjw8PTJ9aWYoZWI9cVtkYis3Nj4+Ml0scVthYisyODA+PjJdPWZiLHFbYWIrMjc2Pj4yXT1jYixxW2FiKzI3Mj4+Ml09ZmIscVthYisyNjg+PjJdPWViPDw0LDE8PSgoY2I9MCl8KGZiPXFbZGIrODA+PjJdKSkpe2ZvcihnYj1xW2ErMzY0Pj4yXSxhPXFbYSsyOTY+PjJdLGViPTA7ZWI9KDE8PHFbYSsocVtnYisoY2I8PDIpPj4yXTw8Mik+PjJdKStlYnwwLCgwfGZiKSE9KDB8KGNiPWNiKzF8MCkpOyk7Y2I9ZWI8PDJ9Zm9yKHFbYWIrMjg0Pj4yXT13KGZiLDI0KSxxW2FiKzI4OD4+Ml09cVtkYis4MD4+Ml08PDIsYT1xW2RiKzgwPj4yXSxxW2FiKzMwND4+Ml09Y2IscVthYiszMDA+PjJdPWNiLHFbYWIrMjk2Pj4yXT1jYixxW2FiPj4yXT0wLHFbYWIrMjkyPj4yXT1hPDwyLGNiPTM4NCxlYj0xO2NiPSgoZGI9cVsoYT0oZWI8PDIpK2FifDApPj4yXSkrMTUmLTE2KSsocVthPj4yXT1jYil8MCw3NyE9KDB8KGViPWViKzF8MCkpOyk7cVtiYj4+Ml09Y2J9ZnVuY3Rpb24gdmEoYSxhYixiYil7dmFyIG5iO2FifD0wLGJifD0wLEw9bmI9TCstNjR8MDthOntpZihhfD0wKWlmKGFiKWlmKChhYisxNSYtMTYpPT0oMHxhYikpe2lmKGFiPWZ1bmN0aW9uKGEsZmgsZ2gpe3ZhciBsaCxoaD0wLGloPTAsamg9MCxraD0wLG1oPTAsbmg9MCxvaD0wLHBoPTAscWg9MCxyaD0wLHNoPTAsdGg9MCx1aD0wLHZoPTAsd2g9MCx4aD0wLHloPTAsemg9MCxBaD14KDApO2lmKGJhKDE2KyhMPWxoPUwtMzM2fDApfDAsMCwzMDgpLHVhKGErNzA0fDAsMTYrbGh8MCwxMitsaHwwKSwoaWg9cVsxMitsaD4+Ml0pPj4+MDw9Z2g+Pj4wKXtpZihoaD0oamg9YmEoZmgsZ2g9MCxpaCkpK3FbMTYrbGg+PjJdfDAscVtoaCs4Pj4yXT1qaCtxWzIwK2xoPj4yXSxxW2hoKzM2Pj4yXT1qaCtxWzI0K2xoPj4yXSxxW2hoKzQ0Pj4yXT1qaCtxWzI4K2xoPj4yXSxxW2hoKzQ4Pj4yXT1qaCtxWzMyK2xoPj4yXSxxW2hoKzUyPj4yXT1qaCtxWzM2K2xoPj4yXSxxW2hoKzEyPj4yXT1qaCtxWzQwK2xoPj4yXSxxW2hoKzE2Pj4yXT1qaCtxWzQ0K2xoPj4yXSxxW2hoKzIwPj4yXT1qaCtxWzQ4K2xoPj4yXSxxW2hoKzI4Pj4yXT1qaCtxWzUyK2xoPj4yXSxxW2hoKzMyPj4yXT1qaCtxWzU2K2xoPj4yXSxmaD1xW2ErNzA0Pj4yXSxxW2hoKzYwPj4yXT1qaCtxWzYwK2xoPj4yXSxraD1qaCtxWzY0K2xoPj4yXXwwLHFbaGgrNjg+PjJdPWtoLHFbaGgrNzY+PjJdPWpoK3FbNjgrbGg+PjJdLHFbaGgrMTY4Pj4yXT1qaCtxWzcyK2xoPj4yXSxxW2hoKzE3Mj4+Ml09amgrcVs3NitsaD4+Ml0scVtoaCsxNzY+PjJdPWpoK3FbODArbGg+PjJdLHFbaGgrMTkyPj4yXT1qaCtxWzg0K2xoPj4yXSxxW2hoKzE5Nj4+Ml09amgrcVs4OCtsaD4+Ml0sMTw9KDB8KGZoPXFbZmgrOD4+Ml0pKSlmb3IoaWg9amgrcVs5MitsaD4+Ml18MCxtaD1xW2ErNzkyPj4yXTtxWzIwKyhraCt3KGdoLDI0KXwwKT4+Ml09aWgsaWg9KDE1KyhxW21oKyhnaDw8Mik+PjJdPDwzKSYtMTYpK2lofDAsKDB8ZmgpIT0oMHwoZ2g9Z2grMXwwKSk7KTtpZihxW2hoKzgwPj4yXT1qaCtxWzk2K2xoPj4yXSxxW2hoKzg0Pj4yXT1qaCtxWzEwMCtsaD4+Ml0scVtoaCs4OD4+Ml09amgrcVsxMDQrbGg+PjJdLHFbaGgrOTY+PjJdPWpoK3FbMTA4K2xoPj4yXSxxW2hoKzEwMD4+Ml09amgrcVsxMTIrbGg+PjJdLHFbaGgrMTA0Pj4yXT1qaCtxWzExNitsaD4+Ml0scVtoaCsxMDg+PjJdPWpoK3FbMTIwK2xoPj4yXSxxW2hoKzExMj4+Ml09amgrcVsxMjQrbGg+PjJdLHFbaGgrMTE2Pj4yXT1qaCtxWzEyOCtsaD4+Ml0scVtoaCsxMjA+PjJdPWpoK3FbMTMyK2xoPj4yXSxxW2hoKzEyOD4+Ml09amgrcVsxMzYrbGg+PjJdLHFbaGgrMTMyPj4yXT1qaCtxWzE0MCtsaD4+Ml0scVtoaCsxMzY+PjJdPWpoK3FbMTQ0K2xoPj4yXSxxW2hoKzE0MD4+Ml09amgrcVsxNDgrbGg+PjJdLHFbaGgrMTQ0Pj4yXT1qaCtxWzE1MitsaD4+Ml0scVtoaCsxNDg+PjJdPWpoK3FbMTU2K2xoPj4yXSxxW2hoKzE1Mj4+Ml09amgrcVsxNjArbGg+PjJdLHFbaGgrMTU2Pj4yXT1qaCtxWzE2NCtsaD4+Ml0scVtoaCsxNjA+PjJdPWpoK3FbMTY4K2xoPj4yXSxxW2hoKzE2ND4+Ml09amgrcVsxNzIrbGg+PjJdLGZoPXFbYSs3MDQ+PjJdLHFbaGgrMjA0Pj4yXT1qaCtxWzE3NitsaD4+Ml0scVtoaCsyNDg+PjJdPWpoK3FbMTgwK2xoPj4yXSxxW2hoKzI2MD4+Ml09amgrcVsxODQrbGg+PjJdLHFbaGgrMjY0Pj4yXT1qaCtxWzE4OCtsaD4+Ml0scVtoaCsyNjg+PjJdPWpoK3FbMTkyK2xoPj4yXSxnaD1qaCtxWzE5NitsaD4+Ml18MCxxW2hoKzI3Mj4+Ml09Z2gsISgoMHwoZmg9cVtmaCsxNj4+Ml0pKTwxKSYmKGloPWpoK3FbMjAwK2xoPj4yXXwwLHFbZ2g+PjJdPWloLChnaD0xKSE9KDB8ZmgpKSlmb3Ioa2g9MDtpaD0oMTUrKHFbcVthKzg3Nj4+Ml0rKGtoPDwyKT4+Ml08PDMpJi0xNikraWh8MCxxW3FbaGgrMjcyPj4yXSsoZ2g8PDIpPj4yXT1paCwoMHxmaCkhPSgwfChnaD0oa2g9Z2gpKzF8MCkpOyk7aWYocVtoaCsyNzY+PjJdPWpoK3FbMjA0K2xoPj4yXSxxW2hoKzI4MD4+Ml09amgrcVsyMDgrbGg+PjJdLHFbaGgrMjg0Pj4yXT1qaCtxWzIxMitsaD4+Ml0scVtoaCsyODg+PjJdPWpoK3FbMjE2K2xoPj4yXSxxW2hoKzIwOD4+Ml09amgrcVsyMjArbGg+PjJdLHFbaGgrMjEyPj4yXT1qaCtxWzIyNCtsaD4+Ml0scVtoaCsyMTY+PjJdPWpoK3FbMjI4K2xoPj4yXSxxW2hoKzIyND4+Ml09amgrcVsyMzIrbGg+PjJdLHFbaGgrMjI4Pj4yXT1qaCtxWzIzNitsaD4+Ml0scVtoaCsyMzI+PjJdPWpoK3FbMjQwK2xoPj4yXSxxW2hoKzIzNj4+Ml09amgrcVsyNDQrbGg+PjJdLHFbaGgrMjQwPj4yXT1qaCtxWzI0OCtsaD4+Ml0scVtoaCsyNDQ+PjJdPWpoK3FbMjUyK2xoPj4yXSxmaD1xWzI1NitsaD4+Ml0sb2g9amgrcVsyNjArbGg+PjJdfDAscVtoaCszMDA+PjJdPW9oLHFoPWZoK2pofDAscVtoaCsyOTY+PjJdPXFoLHJoPWpoK3FbMjY0K2xoPj4yXXwwLHFbaGgrMzA4Pj4yXT1yaCxmaD1xW2ErNzA0Pj4yXSxnaD1xWzI3NitsaD4+Ml0saWg9cVsyNzIrbGg+PjJdLHBoPWpoK3FbMjY4K2xoPj4yXXwwLHFbaGgrMzE2Pj4yXT1waCwxPD0oMHwoa2g9cVtmaCs0OD4+Ml0pKSlmb3IoaWg9amgraWh8MCxmaD1naCtqaHwwLG1oPXFbYSsxZTM+PjJdLGdoPTA7bmg9cGgrdyhnaCwzNil8MCxxW25oKzIwPj4yXT1maCxxW25oKzE2Pj4yXT1paCxmaD0obmg9MTw8cVttaCsoZ2g8PDIpPj4yXTw8MikrZmh8MCxpaD1paCtuaHwwLCgwfGtoKSE9KDB8KGdoPWdoKzF8MCkpOyk7aWYoZmg9cVthKzcwND4+Ml0sa2g9amgrcVsyODArbGg+PjJdfDAscVtoaCszMjQ+PjJdPWtoLDE8PSgwfChmaD1xW2ZoKzcyPj4yXSkpKWZvcihpaD1qaCtxWzI4NCtsaD4+Ml18MCxtaD1xW2ErMTAzMj4+Ml0sZ2g9MDtxWzEyKyhraCt3KGdoLDI4KXwwKT4+Ml09aWgsaWg9KHFbbWgrKGdoPDwyKT4+Ml08PDQpK2lofDAsKDB8ZmgpIT0oMHwoZ2g9Z2grMXwwKSk7KTtpZihxW2hoKzMyOD4+Ml09amgrcVsyODgrbGg+PjJdLHFbaGgrMzMyPj4yXT1qaCtxWzI5MitsaD4+Ml0scVtoaCszMzY+PjJdPWpoK3FbMjk2K2xoPj4yXSxxW2hoKzM0ND4+Ml09amgrcVszMDArbGg+PjJdLHFbaGgrMzQ4Pj4yXT1qaCtxWzMwNCtsaD4+Ml0scVtoaCszNTI+PjJdPWpoK3FbMzA4K2xoPj4yXSxxW2hoKzM1Nj4+Ml09amgrcVszMTIrbGg+PjJdLHFbaGgrMzY0Pj4yXT1qaCtxWzMxNitsaD4+Ml0sZmg9cVszMjArbGg+PjJdLHFbaGgrMzc2Pj4yXT0xLHFbaGgrMzY4Pj4yXT1maCtqaCxxW2hoKzM4MD4+Ml09MSZvW3FbYSs3MDg+PjJdKzIwfDBdLGpoPXFbYSs3MDQ+PjJdLGloPXFbamgrMjA+PjJdLDE8PSgwfChxW2hoKzI5Mj4+Ml09aWgpKSl7Zm9yKHNoPXFbYSs5MzI+PjJdLHRoPXFbYSs5Mjg+PjJdLHVoPXFbYSs5MjQ+PjJdLG5oPXFbYSs5MTY+PjJdLHdoPXFbYSs5MjA+PjJdLHhoPXFbYSs5MDg+PjJdLHloPXFbYSs5MTI+PjJdLGZoPWloO2toPXFoK3coZ2g9ZmgrLTF8MCw0MCl8MCx2aD0obWg9Z2g8PDIpK3lofDAscVtraD4+Ml09cVt2aD4+Ml0semg9bWgreGh8MCxxW2toKzQ+PjJdPXFbemg+PjJdLHVba2grOD4+Ml09dVt6aD4+Ml0tdVt2aD4+Ml0scVtraCsxMj4+Ml09cVttaCt3aD4+Ml0scVtraCszMj4+Ml09cVttaCtuaD4+Ml0sQWg9JGIoeChxW21oK3VoPj4yXSkpLHVba2grMTY+PjJdPUFoLHVba2grMjA+PjJdPUFoKngoMS41KSxxW2toKzI0Pj4yXT1xW21oK3RoPj4yXSxtaD1xW21oK3NoPj4yXSxxW2toKzM2Pj4yXT0xLHFba2grMjg+PjJdPW1oLGtoPTE8KDB8ZmgpLGZoPWdoLGtoOyk7Zm9yKDtxWyhnaD0oZmg9aWgrLTF8MCk8PDIpK29oPj4yXT1xW2doK25oPj4yXSxnaD0xPCgwfGloKSxpaD1maCxnaDspO31pZihmaD1xW2poKzUyPj4yXSwxPD0oMHwocVtoaCszMDQ+PjJdPWZoKSkpZm9yKGtoPXFbYSsxMDA0Pj4yXSxtaD1xW2ErMTAxMj4+Ml0sbmg9cVthKzEwMDg+PjJdO2loPXJoK3coZ2g9ZmgrLTF8MCwyOCl8MCxvaD1naDw8MixxW2loPj4yXT1xW29oK25oPj4yXSxvaD1xW2toK29oPj4yXSxxW2loKzIwPj4yXT0xLHFbaWgrMjQ+PjJdPTEscVtpaCsxMj4+Ml09MCxxW2loKzQ+PjJdPW1oKyhvaDw8MiksaWg9MTwoMHxmaCksZmg9Z2gsaWg7KTtpZihmaD1xW2poKzQ4Pj4yXSwxPD0oMHwocVtoaCszMTI+PjJdPWZoKSkpZm9yKGtoPXFbYSs5OTY+PjJdLG1oPXFbYSs5OTI+PjJdLG5oPXFbYSsxZTM+PjJdO2loPXBoK3coZ2g9ZmgrLTF8MCwzNil8MCxxaD1xWyhvaD1naDw8Mikrbmg+PjJdLHFbaWg+PjJdPXFoLHFbaWgrND4+Ml09MTw8cWgsb2g9cVtraCtvaD4+Ml0scVtpaCsyND4+Ml09MSxxW2loKzI4Pj4yXT0xLHFbaWgrMTI+PjJdPW1oKyhvaDw8MiksaWg9MTwoMHxmaCksZmg9Z2gsaWg7KTtpZihmaD1xW2poPj4yXSxxW2hoKzQ+PjJdPWZoLG1oPXFbYSs3MjA+PjJdLHFbaGgrNDA+PjJdPW1oLCgwfGZoKTwxKWdoPTA7ZWxzZXtmb3Iobmg9cVthKzczMj4+Ml0sb2g9cVthKzczNj4+Ml0scWg9cVthKzc0MD4+Ml0scmg9cVtoaCs1Mj4+Ml0sc2g9cVtoaCs4Pj4yXSxpaD1maDtraD0oZ2g9aWgrLTF8MCk8PDIscVsodGg9c2grKGdoPDwzKXwwKT4+Ml09cVtraCtxaD4+Ml0scVt0aCs0Pj4yXT1xW2toK29oPj4yXSx1W2toK3JoPj4yXT1xW2toK25oPj4yXT94KDEpOngoMCksa2g9MTwoMHxpaCksaWg9Z2gsa2g7KTtmb3Iobmg9cVtoaCsxMj4+Ml0sZ2g9MDtraD1xWzQrKHBoK3cocVsob2g9KGloPWZoKy0xfDApPDwyKSttaD4+Ml0sMzYpfDApPj4yXSxnaD1naCsocVtuaCtvaD4+Ml09a2gpfDAsa2g9MTwoMHxmaCksZmg9aWgsa2g7KTt9aWYocVtoaCsyND4+Ml09Z2gsaWg9cVtqaCs0Pj4yXSxxW2hoKzU2Pj4yXT1paCxxW2hoKzE4MD4+Ml09cVthKzc1Mj4+Ml0scVtoaCsxODQ+PjJdPXFbYSs3ODA+PjJdLHFbaGgrMTg4Pj4yXT1xW2ErODA0Pj4yXSwxPD0oMHxpaCkpe2Zvcig7Oyl7aWg9KGZoPWloKSstMXwwLGdoPXFbaGgrNjA+PjJdKyhpaDw8NSl8MCxraD1paDw8MixxW2doPj4yXT1xW2toK3FbYSs3NjQ+PjJdPj4yXSxxW2doKzQ+PjJdPXFba2grcVthKzc2OD4+Ml0+PjJdLGpoPXFba2grcVthKzc3Mj4+Ml0+PjJdLHFbZ2grOD4+Ml09amgsbWg9cVtraCtxW2ErNzc2Pj4yXT4+Ml0scVtnaCsxMj4+Ml09bWgscVtnaCsyOD4+Ml09cVtraCtxW2ErNzYwPj4yXT4+Ml07YzppZihqaD4+PjA8PTEpe2lmKGpoLTEpe3FbZ2grMjA+PjJdPTEscVtnaCsxNj4+Ml09MixxW2doKzI0Pj4yXT1xW2hoKzY4Pj4yXSt3KG1oLDI0KTticmVhayBjfXFbZ2grMjA+PjJdPTMscVtnaCsxNj4+Ml09NCxxW2doKzI0Pj4yXT1xW2hoKzc2Pj4yXSsobWg8PDUpfWVsc2UgWSg0LDEwMjYsMCk7aWYoISgxPCgwfGZoKSkpYnJlYWt9amg9cVthKzcwND4+Ml19Zmg9cVtqaCs4Pj4yXTtkOmlmKCEoKDB8KHFbaGgrNjQ+PjJdPWZoKSk8MSkpe2lmKGdoPWZoKy0xfDAsbWg9cVthKzc5Mj4+Ml0scGg9cVthKzgwMD4+Ml0sbmg9cVthKzc5Nj4+Ml0sb2g9cVtoaCs2OD4+Ml0sclthKzR8MF08Milmb3IoOzspaWYoaWg9b2grdyhnaCwyNCl8MCxraD1naDw8MixxW2loPj4yXT1xW2toK25oPj4yXSxxW2loKzQ+PjJdPXFba2grcGg+PjJdLGtoPXFba2grbWg+PjJdLHFbaWgrOD4+Ml09MCxxW2loKzEyPj4yXT1raCxpaD0wPCgwfGdoKSxnaD1naCstMXwwLCFpaClicmVhayBkO2ZvcihxaD1xW2ErMTEwOD4+Ml07aWg9b2grdyhnaCwyNCl8MCxraD1naDw8MixxW2loPj4yXT1xW2toK25oPj4yXSxxW2loKzQ+PjJdPXFba2grcGg+PjJdLHFbaWgrMTI+PjJdPXFba2grbWg+PjJdLHFbaWgrOD4+Ml09cVtraCtxaD4+Ml0saWg9MDwoMHxnaCksZ2g9Z2grLTF8MCxpaDspO31pZihnaD1xW2poKzEyPj4yXSwxPD0oMHwocVtoaCs3Mj4+Ml09Z2gpKSlmb3IobWg9cVthKzgxNj4+Ml0scGg9cVtoaCs3Nj4+Ml0saWg9Z2g7cVtwaCsoKGtoPWloKy0xfDApPDw1KT4+Ml09cVttaCsoa2g8PDIpPj4yXSxuaD0xPCgwfGloKSxpaD1raCxuaDspO2lmKDE8PSgoa2g9aWg9MCl8ZmgpKXtmb3IocGg9cVtoaCs4MD4+Ml0sbmg9cVtoaCsxODQ+PjJdLG9oPXFbaGgrMzE2Pj4yXTttaD1xWzQrKG9oK3cocVsocWg9KGdoPWZoKy0xfDApPDwyKStuaD4+Ml0sMzYpfDApPj4yXSxraD1raCsocVtwaCtxaD4+Ml09bWgpfDAsbWg9MTwoMHxmaCksZmg9Z2gsbWg7KTtnaD1xW2hoKzcyPj4yXX1pZihxW2hoKzkyPj4yXT1raCwxPD0oMHxnaCkpZm9yKG1oPXFbaGgrMTEyPj4yXSxwaD1xW2hoKzE4OD4+Ml0sbmg9cVtoaCszMTY+PjJdO2toPXFbNCsobmgrdyhxWyhvaD0oZmg9Z2grLTF8MCk8PDIpK3BoPj4yXSwzNil8MCk+PjJdLGloPWloKyhxW21oK29oPj4yXT1raCl8MCxraD0xPCgwfGdoKSxnaD1maCxraDspO2lmKHFbaGgrMTI0Pj4yXT1paCxpaD1xW2poKzE2Pj4yXSxxW2hoKzIwMD4+Ml09aWgscGg9cVthKzg0MD4+Ml0scVtoaCsyNTI+PjJdPXBoLCgwfGloKTwxKWdoPTA7ZWxzZXtmb3Iobmg9cVthKzg1Nj4+Ml0sb2g9cVthKzg3Nj4+Ml0scWg9cVthKzg2ND4+Ml0scmg9cVthKzg2MD4+Ml0sc2g9cVtoaCsyMDQ+PjJdLGtoPWloO21oPShmaD1raCstMXwwKTw8MixxWyhnaD1zaCsoZmg8PDQpfDApPj4yXT1xW21oK3JoPj4yXSxxW2doKzQ+PjJdPXFbbWgrcWg+PjJdLHFbZ2grMTI+PjJdPXFbbWgrb2g+PjJdLHFbZ2grOD4+Ml09cVttaCtuaD4+Ml0sZ2g9MTwoMHxraCksa2g9ZmgsZ2g7KTtmb3IobWg9cVtoaCsyMDg+PjJdLG5oPXFbaGgrMzE2Pj4yXSxnaD0wO2toPXFbNCsobmgrdyhxWyhvaD0oZmg9aWgrLTF8MCk8PDIpK3BoPj4yXSwzNil8MCk+PjJdLGdoPWdoKyhxW21oK29oPj4yXT1raCl8MCxraD0xPCgwfGloKSxpaD1maCxraDspO31pZihxW2hoKzIyMD4+Ml09Z2gsa2g9cVtqaCs3Mj4+Ml0sMTw9KDB8KHFbaGgrMzIwPj4yXT1raCkpKWZvcihuaD1xW2ErMTAyOD4+Ml0sb2g9cVthKzEwNDQ+PjJdLHFoPXFbYSsxMDQwPj4yXSxyaD1xW2ErMTAzNj4+Ml0sc2g9cVthKzEwMzI+PjJdLHRoPXFbaGgrMzI0Pj4yXSxpaD0wOzspe2lmKGZoPXRoK3coaWgsMjgpfDAsbWg9cVsoZ2g9aWg8PDIpK3NoPj4yXSxxW2ZoKzQ+PjJdPW1oLHFbZmg+PjJdPXFbZ2grcmg+PjJdLHBoPXFbZ2grcWg+PjJdLHFbZmgrMTY+PjJdPXBoLHVoPXFbZ2grb2g+PjJdLHFbZmgrMjA+PjJdPXVoLHFbZmgrOD4+Ml09MCxxW2ZoKzI0Pj4yXT0xKyhwaC11aHwwKSwxPD0oMHxtaCkpZm9yKHVoPXFbZ2grbmg+PjJdLHdoPXFbZmgrMTI+PjJdLHhoPXFbYSsxMDU2Pj4yXSx5aD1xW2ErMTA0OD4+Ml0sdmg9cVthKzEwNTI+PjJdLGdoPTA7cGg9Z2grdWg8PDIscVs0KyhmaD13aCsoZ2g8PDQpfDApPj4yXT1xW3BoK3ZoPj4yXSxxW2ZoPj4yXT1xW3BoK3loPj4yXSxwaD1xW3BoK3hoPj4yXSxxW2ZoKzEyPj4yXT0wLHFbZmgrOD4+Ml09cGgsKDB8bWgpIT0oMHwoZ2g9Z2grMXwwKSk7KTtpZigoMHxraCk9PSgwfChpaD1paCsxfDApKSlicmVha31pZihpaD1xW2poKzgwPj4yXSxxW2hoKzM0MD4+Ml09aWgsbWg9cVthKzEwNjg+PjJdLHFbaGgrMzcyPj4yXT1taCwhKCgoZmg9MCl8aWgpPDEpKXtmb3IocGg9cVthKzExMDA+PjJdLG5oPXFbYSsxMDg4Pj4yXSxvaD1xW2ErMTA5Nj4+Ml0scWg9cVthKzEwOTI+PjJdLHJoPXFbYSsxMDg0Pj4yXSxzaD1xW2ErMTA4MD4+Ml0sdGg9cVtoaCszNDQ+PjJdO2toPXRoK3coZ2g9aWgrLTF8MCwyNCl8MCxqaD1naDw8MixxW2toPj4yXT1xW2poK3NoPj4yXSxxW2toKzQ+PjJdPXFbamgrcmg+PjJdLHFba2grOD4+Ml09cVtqaCtxaD4+Ml0samg9cVtqaCtuaD4+Ml0scVtraCsxNj4+Ml09cGgrKGpoPDwxKSxxW2toKzEyPj4yXT1vaCsoamg8PDIpLGtoPTE8KDB8aWgpLGloPWdoLGtoOyk7aWYoISgoMHwoZ2g9cVtoaCszNDA+PjJdKSk8MSkpZm9yKGpoPXFbaGgrMzQ4Pj4yXSxwaD1xW2hoKzMxNj4+Ml07a2g9cVs0KyhwaCt3KHFbKG5oPShpaD1naCstMXwwKTw8MikrbWg+PjJdLDM2KXwwKT4+Ml0sZmg9ZmgrKHFbamgrbmg+PjJdPWtoKXwwLGtoPTE8KDB8Z2gpLGdoPWloLGtoOyk7fXFbaGg+PjJdPWEscVtoaCszNjA+PjJdPWZoLHRhKGhoKX1yZXR1cm4gTD0zMzYrbGh8MCxoaH0oYSxhYixiYikpYnJlYWsgYTtxWzM2K25iPj4yXT0xODcyLHFbMzIrbmI+PjJdPTE4NDYsWSg0LDEwODcsMzIrbmJ8MCl9ZWxzZSBxWzUyK25iPj4yXT0xNDQxLHFbNDgrbmI+PjJdPTE4NDYsWSg0LDEwODcsNDgrbmJ8MCk7ZWxzZSBxWzIwK25iPj4yXT0xMjQ2LHFbMTYrbmI+PjJdPTE4NDYsWSg0LDEwODcsMTYrbmJ8MCk7ZWxzZSBxWzQrbmI+PjJdPTE4MjgscVtuYj4+Ml09MTg0NixZKDQsMTA4NyxuYik7YWI9MH1yZXR1cm4gTD02NCtuYnwwLDB8YWJ9ZnVuY3Rpb24gd2EoYSl7dmFyIGFiO3JldHVybiBMPWFiPUwtMTZ8MCxhPShhfD0wKT9mdW5jdGlvbihhKXt2YXIgVGg7cmV0dXJuIGJhKDE2KyhMPVRoPUwtMzM2fDApfDAsMCwzMDgpLHVhKGErNzA0fDAsMTYrVGh8MCwxMitUaHwwKSxMPTMzNitUaHwwLHFbMTIrVGg+PjJdfShhKToocVs0K2FiPj4yXT0xODI4LHFbYWI+PjJdPTE4MTAsWSg0LDEwODcsYWIpLDApLEw9MTYrYWJ8MCwwfGF9ZnVuY3Rpb24geGEoYSxiYil7dmFyIG9iPTAscGI9MCxxYj0wLHJiPTAsc2I9MCx0Yj0wLHViPTAsdmI9MDtyYj1hK2JifDA7YTp7YjppZighKDEmKG9iPXFbYSs0Pj4yXSkpKXtpZighKDMmb2IpKWJyZWFrIGE7aWYoYmI9KG9iPXFbYT4+Ml0pK2JifDAsKDB8KGE9YS1vYnwwKSk9PXFbMTkyOF0pe2lmKDM9PSgzJihvYj1xW3JiKzQ+PjJdKSkpcmV0dXJuIHFbMTkyNV09YmIscVtyYis0Pj4yXT0tMiZvYixxW2ErND4+Ml09MXxiYix2b2lkKHFbcmI+PjJdPWJiKX1lbHNle2lmKG9iPj4+MDw9MjU1KXtpZihxYj1vYj4+PjMsb2I9cVthKzg+PjJdLCgwfChwYj1xW2ErMTI+PjJdKSk9PSgwfG9iKSl7dWI9NzY5Mix2Yj1xWzE5MjNdJmpjKHFiKSxxW3ViPj4yXT12YjticmVhayBifXFbb2IrMTI+PjJdPXBiLHFbcGIrOD4+Ml09b2I7YnJlYWsgYn1pZih0Yj1xW2ErMjQ+PjJdLCgwfChvYj1xW2ErMTI+PjJdKSk9PSgwfGEpKWlmKChxYj1xWyhwYj1hKzIwfDApPj4yXSl8fChxYj1xWyhwYj1hKzE2fDApPj4yXSkpe2Zvcig7c2I9cGIsKHFiPXFbKHBiPShvYj1xYikrMjB8MCk+PjJdKXx8KHBiPW9iKzE2fDAscWI9cVtvYisxNj4+Ml0pOyk7cVtzYj4+Ml09MH1lbHNlIG9iPTA7ZWxzZSBwYj1xW2ErOD4+Ml0scVtwYisxMj4+Ml09b2IscVtvYis4Pj4yXT1wYjtpZighdGIpYnJlYWsgYjtwYj1xW2ErMjg+PjJdO2U6e2lmKHFbKHFiPTc5OTYrKHBiPDwyKXwwKT4+Ml09PSgwfGEpKXtpZihxW3FiPj4yXT1vYilicmVhayBlO3ViPTc2OTYsdmI9cVsxOTI0XSZqYyhwYikscVt1Yj4+Ml09dmI7YnJlYWsgYn1pZighKHFbdGIrKHFbdGIrMTY+PjJdPT0oMHxhKT8xNjoyMCk+PjJdPW9iKSlicmVhayBifWlmKHFbb2IrMjQ+PjJdPXRiLChwYj1xW2ErMTY+PjJdKSYmKHFbb2IrMTY+PjJdPXBiLHFbcGIrMjQ+PjJdPW9iKSwhKHBiPXFbYSsyMD4+Ml0pKWJyZWFrIGI7cVtvYisyMD4+Ml09cGIscVtwYisyND4+Ml09b2J9fWY6e2lmKCEoMiYob2I9cVtyYis0Pj4yXSkpKXtpZihxWzE5MjldPT0oMHxyYikpe2lmKHFbMTkyOV09YSxiYj1xWzE5MjZdK2JifDAscVsxOTI2XT1iYixxW2ErND4+Ml09MXxiYixxWzE5MjhdIT0oMHxhKSlicmVhayBhO3JldHVybiBxWzE5MjVdPTAsdm9pZChxWzE5MjhdPTApfWlmKHFbMTkyOF09PSgwfHJiKSlyZXR1cm4gcVsxOTI4XT1hLGJiPXFbMTkyNV0rYmJ8MCxxWzE5MjVdPWJiLHFbYSs0Pj4yXT0xfGJiLHZvaWQocVthK2JiPj4yXT1iYik7YmI9KC04Jm9iKStiYnwwO2c6aWYob2I+Pj4wPD0yNTUpe2lmKHFiPW9iPj4+MyxvYj1xW3JiKzg+PjJdLCgwfChwYj1xW3JiKzEyPj4yXSkpPT0oMHxvYikpe3ViPTc2OTIsdmI9cVsxOTIzXSZqYyhxYikscVt1Yj4+Ml09dmI7YnJlYWsgZ31xW29iKzEyPj4yXT1wYixxW3BiKzg+PjJdPW9ifWVsc2V7aWYodGI9cVtyYisyND4+Ml0sKDB8cmIpPT0oMHwob2I9cVtyYisxMj4+Ml0pKSlpZigocWI9cVsocGI9cmIrMjB8MCk+PjJdKXx8KHFiPXFbKHBiPXJiKzE2fDApPj4yXSkpe2Zvcig7c2I9cGIsKHFiPXFbKHBiPShvYj1xYikrMjB8MCk+PjJdKXx8KHBiPW9iKzE2fDAscWI9cVtvYisxNj4+Ml0pOyk7cVtzYj4+Ml09MH1lbHNlIG9iPTA7ZWxzZSBwYj1xW3JiKzg+PjJdLHFbcGIrMTI+PjJdPW9iLHFbb2IrOD4+Ml09cGI7aWYodGIpe3BiPXFbcmIrMjg+PjJdO2o6e2lmKHFbKHFiPTc5OTYrKHBiPDwyKXwwKT4+Ml09PSgwfHJiKSl7aWYocVtxYj4+Ml09b2IpYnJlYWsgajt1Yj03Njk2LHZiPXFbMTkyNF0mamMocGIpLHFbdWI+PjJdPXZiO2JyZWFrIGd9aWYoIShxW3RiKyhxW3RiKzE2Pj4yXT09KDB8cmIpPzE2OjIwKT4+Ml09b2IpKWJyZWFrIGd9cVtvYisyND4+Ml09dGIsKHBiPXFbcmIrMTY+PjJdKSYmKHFbb2IrMTY+PjJdPXBiLHFbcGIrMjQ+PjJdPW9iKSwocGI9cVtyYisyMD4+Ml0pJiYocVtvYisyMD4+Ml09cGIscVtwYisyND4+Ml09b2IpfX1pZihxW2ErND4+Ml09MXxiYixxW2ErYmI+PjJdPWJiLHFbMTkyOF0hPSgwfGEpKWJyZWFrIGY7cmV0dXJuIHZvaWQocVsxOTI1XT1iYil9cVtyYis0Pj4yXT0tMiZvYixxW2ErND4+Ml09MXxiYixxW2ErYmI+PjJdPWJifWlmKGJiPj4+MDw9MjU1KXJldHVybiBiYj03NzMyKygob2I9YmI+Pj4zKTw8Myl8MCxvYj0ocGI9cVsxOTIzXSkmKG9iPTE8PG9iKT9xW2JiKzg+PjJdOihxWzE5MjNdPW9ifHBiLGJiKSxxW2JiKzg+PjJdPWEscVtvYisxMj4+Ml09YSxxW2ErMTI+PjJdPWJiLHZvaWQocVthKzg+PjJdPW9iKTtxW2ErMTY+PjJdPTAsb2I9cVthKzIwPj4yXT0wLChxYj1iYj4+PjgpJiYob2I9MzEsMTY3NzcyMTU8YmI+Pj4wfHwob2I9MjgrKChvYj0oKHJiPShxYjw8PXNiPXFiKzEwNDgzMjA+Pj4xNiY4KTw8KG9iPXFiKzUyMDE5Mj4+PjE2JjQpKTw8KHFiPXJiKzI0NTc2MD4+PjE2JjIpPj4+MTUpLShxYnxvYnxzYil8MCk8PDF8YmI+Pj5vYisyMSYxKXwwKSkscWI9Nzk5NisoKHFbKHBiPWEpKzI4Pj4yXT1vYik8PDIpfDA7bTp7aWYoKHBiPXFbMTkyNF0pJihzYj0xPDxvYikpe2ZvcihwYj1iYjw8KDMxPT0oMHxvYik/MDoyNS0ob2I+Pj4xKXwwKSxvYj1xW3FiPj4yXTs7KXtpZigoLTgmcVsocWI9b2IpKzQ+PjJdKT09KDB8YmIpKWJyZWFrIG07aWYob2I9cGI+Pj4yOSxwYjw8PTEsIShvYj1xWzE2KyhzYj1xYisoNCZvYil8MCk+PjJdKSlicmVha31xW3NiKzE2Pj4yXT1hfWVsc2UgcVsxOTI0XT1wYnxzYixxW3FiPj4yXT1hO3JldHVybiBxW2ErMjQ+PjJdPXFiLHFbYSsxMj4+Ml09YSx2b2lkKHFbYSs4Pj4yXT1hKX1iYj1xW3FiKzg+PjJdLHFbYmIrMTI+PjJdPWEscVtxYis4Pj4yXT1hLHFbYSsyND4+Ml09MCxxW2ErMTI+PjJdPXFiLHFbYSs4Pj4yXT1iYn19ZnVuY3Rpb24geWEoYSxiYix3Yil7dmFyIHhiPTA7YTp7aWYoOCE9KDB8YmIpKXtpZih4Yj0yOCwzJmJifDEhPSgwfGZ1bmN0aW9uKGEpe2Zvcih2YXIgcWk9MCxzaT0wO3NpPXFpLGE7KWEmPWEtMSxxaT1xaSsxfDA7cmV0dXJuIHNpfShiYj4+PjIpKSlicmVhayBhO2lmKHhiPTQ4LC02NC1iYj4+PjA8d2I+Pj4wKWJyZWFrIGE7YmI9ZnVuY3Rpb24oYSxfaCl7dmFyICRoPTAsYWk9MCxjaT0wLGRpPTAsZWk9MDtpZigoYWk9YT4+PjA+KCRoPTE2KT9hOjE2KSstMSZhaSlmb3IoOyRoPShhPSRoKTw8MSxhPj4+MDxhaT4+PjA7KTtlbHNlIGE9YWk7cmV0dXJuLTY0LWE+Pj4wPD1faD4+PjA/KHFbMTkwNl09NDgsMCk6KCRoPWphKDEyKygoYWk9X2g+Pj4wPDExPzE2Ol9oKzExJi04KSthfDApfDApKT8oX2g9JGgrLTh8MCwkaCZhKy0xPyhjaT0oLTgmKGVpPXFbKGRpPSRoKy00fDApPj4yXSkpLSgkaD0oYT0xNTwoJGg9KChhKyRofDApLTEmMC1hKS04fDApLV9oPj4+MD8kaDphKyRofDApLV9ofDApfDAsMyZlaT8ocVthKzQ+PjJdPWNpfDEmcVthKzQ+PjJdfDIscVs0KyhjaT1hK2NpfDApPj4yXT0xfHFbY2krND4+Ml0scVtkaT4+Ml09JGh8MSZxW2RpPj4yXXwyLHFbYSs0Pj4yXT0xfHFbYSs0Pj4yXSx4YShfaCwkaCkpOihfaD1xW19oPj4yXSxxW2ErND4+Ml09Y2kscVthPj4yXT1faCskaCkpOmE9X2gsMyYoX2g9cVthKzQ+PjJdKSYmKCgkaD0tOCZfaCk+Pj4wPD1haSsxNj4+PjB8fChxW2ErND4+Ml09YWl8MSZfaHwyLF9oPWErYWl8MCxhaT0kaC1haXwwLHFbX2grND4+Ml09M3xhaSxxWzQrKCRoPWErJGh8MCk+PjJdPTF8cVskaCs0Pj4yXSx4YShfaCxhaSkpKSxhKzh8MCk6MH0oMTY8YmI+Pj4wP2JiOjE2LHdiKX1lbHNlIGJiPWphKHdiKTtpZighYmIpcmV0dXJuIDE7cVthPj4yXT1iYix4Yj0wfXJldHVybiB4Yn1mdW5jdGlvbiB6YShhKXt2YXIgYmI9MCx3Yj0wLHliPTAsemI9MCxBYj0wLEJiPTAsQ2I9MCxEYj0wLEViPTA7YTppZihhKXtBYj0oeWI9YSstOHwwKSsoYT0tOCYod2I9cVthKy00Pj4yXSkpfDA7YjppZighKDEmd2IpKXtpZighKDMmd2IpKWJyZWFrIGE7aWYoKHliPXliLSh3Yj1xW3liPj4yXSl8MCk+Pj4wPHRbMTkyN10pYnJlYWsgYTtpZihhPWErd2J8MCxxWzE5MjhdPT0oMHx5Yikpe2lmKDM9PSgzJih3Yj1xW0FiKzQ+PjJdKSkpcmV0dXJuIHFbMTkyNV09YSxxW0FiKzQ+PjJdPS0yJndiLHFbeWIrND4+Ml09MXxhLHZvaWQocVthK3liPj4yXT1hKX1lbHNle2lmKHdiPj4+MDw9MjU1KXtpZih6Yj1xW3liKzg+PjJdLHdiPj4+PTMsKDB8KGJiPXFbeWIrMTI+PjJdKSk9PSgwfHpiKSl7RGI9NzY5MixFYj1xWzE5MjNdJmpjKHdiKSxxW0RiPj4yXT1FYjticmVhayBifXFbemIrMTI+PjJdPWJiLHFbYmIrOD4+Ml09emI7YnJlYWsgYn1pZihDYj1xW3liKzI0Pj4yXSwoMHx5Yik9PSgwfCh3Yj1xW3liKzEyPj4yXSkpKWlmKChiYj1xWyh6Yj15YisyMHwwKT4+Ml0pfHwoYmI9cVsoemI9eWIrMTZ8MCk+PjJdKSl7Zm9yKDtCYj16YiwoYmI9cVsoemI9KHdiPWJiKSsyMHwwKT4+Ml0pfHwoemI9d2IrMTZ8MCxiYj1xW3diKzE2Pj4yXSk7KTtxW0JiPj4yXT0wfWVsc2Ugd2I9MDtlbHNlIGJiPXFbeWIrOD4+Ml0scVtiYisxMj4+Ml09d2IscVt3Yis4Pj4yXT1iYjtpZighQ2IpYnJlYWsgYjt6Yj1xW3liKzI4Pj4yXTtlOntpZihxWyhiYj03OTk2Kyh6Yjw8Mil8MCk+PjJdPT0oMHx5Yikpe2lmKHFbYmI+PjJdPXdiKWJyZWFrIGU7RGI9NzY5NixFYj1xWzE5MjRdJmpjKHpiKSxxW0RiPj4yXT1FYjticmVhayBifWlmKCEocVtDYisocVtDYisxNj4+Ml09PSgwfHliKT8xNjoyMCk+PjJdPXdiKSlicmVhayBifWlmKHFbd2IrMjQ+PjJdPUNiLChiYj1xW3liKzE2Pj4yXSkmJihxW3diKzE2Pj4yXT1iYixxW2JiKzI0Pj4yXT13YiksIShiYj1xW3liKzIwPj4yXSkpYnJlYWsgYjtxW3diKzIwPj4yXT1iYixxW2JiKzI0Pj4yXT13Yn19aWYoIShBYj4+PjA8PXliPj4+MCkmJjEmKHdiPXFbQWIrND4+Ml0pKXtmOntpZighKDImd2IpKXtpZihxWzE5MjldPT0oMHxBYikpe2lmKHFbMTkyOV09eWIsYT1xWzE5MjZdK2F8MCxxWzE5MjZdPWEscVt5Yis0Pj4yXT0xfGEscVsxOTI4XSE9KDB8eWIpKWJyZWFrIGE7cmV0dXJuIHFbMTkyNV09MCx2b2lkKHFbMTkyOF09MCl9aWYocVsxOTI4XT09KDB8QWIpKXJldHVybiBxWzE5MjhdPXliLGE9cVsxOTI1XSthfDAscVsxOTI1XT1hLHFbeWIrND4+Ml09MXxhLHZvaWQocVthK3liPj4yXT1hKTthPSgtOCZ3YikrYXwwO2c6aWYod2I+Pj4wPD0yNTUpe2lmKHdiPj4+PTMsKDB8KGJiPXFbQWIrOD4+Ml0pKT09KDB8KHpiPXFbQWIrMTI+PjJdKSkpe0RiPTc2OTIsRWI9cVsxOTIzXSZqYyh3YikscVtEYj4+Ml09RWI7YnJlYWsgZ31xW2JiKzEyPj4yXT16YixxW3piKzg+PjJdPWJifWVsc2V7aWYoQ2I9cVtBYisyND4+Ml0sKDB8QWIpPT0oMHwod2I9cVtBYisxMj4+Ml0pKSlpZigoYmI9cVsoemI9QWIrMjB8MCk+PjJdKXx8KGJiPXFbKHpiPUFiKzE2fDApPj4yXSkpe2Zvcig7QmI9emIsKGJiPXFbKHpiPSh3Yj1iYikrMjB8MCk+PjJdKXx8KHpiPXdiKzE2fDAsYmI9cVt3YisxNj4+Ml0pOyk7cVtCYj4+Ml09MH1lbHNlIHdiPTA7ZWxzZSBiYj1xW0FiKzg+PjJdLHFbYmIrMTI+PjJdPXdiLHFbd2IrOD4+Ml09YmI7aWYoQ2Ipe3piPXFbQWIrMjg+PjJdO2o6e2lmKHFbKGJiPTc5OTYrKHpiPDwyKXwwKT4+Ml09PSgwfEFiKSl7aWYocVtiYj4+Ml09d2IpYnJlYWsgajtEYj03Njk2LEViPXFbMTkyNF0mamMoemIpLHFbRGI+PjJdPUViO2JyZWFrIGd9aWYoIShxW0NiKyhxW0NiKzE2Pj4yXT09KDB8QWIpPzE2OjIwKT4+Ml09d2IpKWJyZWFrIGd9cVt3YisyND4+Ml09Q2IsKGJiPXFbQWIrMTY+PjJdKSYmKHFbd2IrMTY+PjJdPWJiLHFbYmIrMjQ+PjJdPXdiKSwoYmI9cVtBYisyMD4+Ml0pJiYocVt3YisyMD4+Ml09YmIscVtiYisyND4+Ml09d2IpfX1pZihxW3liKzQ+PjJdPTF8YSxxW2EreWI+PjJdPWEscVsxOTI4XSE9KDB8eWIpKWJyZWFrIGY7cmV0dXJuIHZvaWQocVsxOTI1XT1hKX1xW0FiKzQ+PjJdPS0yJndiLHFbeWIrND4+Ml09MXxhLHFbYSt5Yj4+Ml09YX1pZihhPj4+MDw9MjU1KXJldHVybiB3Yj03NzMyKygoYT4+Pj0zKTw8Myl8MCxhPShiYj1xWzE5MjNdKSYoYT0xPDxhKT9xW3diKzg+PjJdOihxWzE5MjNdPWF8YmIsd2IpLHFbd2IrOD4+Ml09eWIscVthKzEyPj4yXT15YixxW3liKzEyPj4yXT13Yix2b2lkKHFbeWIrOD4+Ml09YSk7cVt5YisxNj4+Ml09MCxiYj1xW3liKzIwPj4yXT0wLCh6Yj1hPj4+OCkmJihiYj0zMSwxNjc3NzIxNTxhPj4+MHx8KGJiPXpiLGJiPDw9emI9emIrMTA0ODMyMD4+PjE2JjgsYmI9MjgrKChiYj0oKGJiPDw9Q2I9YmIrNTIwMTkyPj4+MTYmNCk8PChCYj1iYisyNDU3NjA+Pj4xNiYyKT4+PjE1KS0oQmJ8emJ8Q2IpfDApPDwxfGE+Pj5iYisyMSYxKXwwKSksQmI9Nzk5NisoKHFbKHdiPXliKSsyOD4+Ml09YmIpPDwyKXwwO206aWYoKHpiPXFbMTkyNF0pJih3Yj0xPDxiYikpe3piPWE8PCgzMT09KDB8YmIpPzA6MjUtKGJiPj4+MSl8MCksd2I9cVtCYj4+Ml07bjp7Zm9yKDs7KXtpZigoLTgmcVsoYmI9d2IpKzQ+PjJdKT09KDB8YSkpYnJlYWsgbjtpZih3Yj16Yj4+PjI5LHpiPDw9MSwhKHdiPXFbMTYrKEJiPWJiKyg0JndiKXwwKT4+Ml0pKWJyZWFrfXFbQmIrMTY+PjJdPXliLHFbeWIrMTI+PjJdPXliLHFbeWIrMjQ+PjJdPWJiLHFbeWIrOD4+Ml09eWI7YnJlYWsgbX1hPXFbYmIrOD4+Ml0scVthKzEyPj4yXT15YixxW2JiKzg+PjJdPXliLHFbeWIrMjQ+PjJdPTAscVt5YisxMj4+Ml09YmIscVt5Yis4Pj4yXT1hfWVsc2UgcVsxOTI0XT13Ynx6YixxW0JiPj4yXT15YixxW3liKzEyPj4yXT15YixxW3liKzI0Pj4yXT1CYixxW3liKzg+PjJdPXliO2lmKGE9cVsxOTMxXSstMXwwLCEocVsxOTMxXT1hKSl7Zm9yKHliPTgxNDg7eWI9KGE9cVt5Yj4+Ml0pKzh8MCxhOyk7cVsxOTMxXT0tMX19fX1mdW5jdGlvbiBBYShhLEZiKXt2YXIgTGIsSWIsR2I9MCxIYj0wLEpiPTAsS2I9eCgwKTtpZihqKEZiKSwhKChJYj0yMTQ3NDgzNjQ3JihHYj1lKDApKSk+Pj4wPD0yMTM5MDk1MDQwJiYoaihhKSwoSGI9MjE0NzQ4MzY0NyYoSmI9ZSgwKSkpPj4+MDwyMTM5MDk1MDQxKSkpcmV0dXJuIHgoYStGYik7aWYoMTA2NTM1MzIxNj09KDB8R2IpKXJldHVybiBrYShhKTtHYj0oTGI9R2I+Pj4zMCYyKXxKYj4+PjMxO2I6e2M6e2Q6e2U6e2lmKCFIYil7Zjpzd2l0Y2goR2ItMnwwKXtjYXNlIDA6YnJlYWsgZTtjYXNlIDE6YnJlYWsgZjtkZWZhdWx0OmJyZWFrIGR9cmV0dXJuIHgoLTMuMTQxNTkyNzQxMDEyNTczMil9aWYoMjEzOTA5NTA0MCE9KDB8SWIpKXtpZighSWJ8IShIYj4+PjA8PTIxODEwMzgwOCtJYj4+PjAmJjIxMzkwOTUwNDAhPSgwfEhiKSkpYnJlYWsgYjtpZihIYisyMTgxMDM4MDg+Pj4wPEliPj4+MCYmKEtiPXgoMCksTGIpfHwoS2I9a2EoeCh5KHgoYS9GYikpKSkpLGE9S2IsR2I+Pj4wPD0yKXtoOnN3aXRjaChHYi0xfDApe2Nhc2UgMDpyZXR1cm4geCgtYSk7Y2FzZSAxOmJyZWFrIGg7ZGVmYXVsdDpicmVhayBkfXJldHVybiB4KHgoMy4xNDE1OTI3NDEwMTI1NzMyKS14KGEreCg4Ljc0MjI3NzY1NzM0NzU4NmUtOCkpKX1yZXR1cm4geCh4KGEreCg4Ljc0MjI3NzY1NzM0NzU4NmUtOCkpK3goLTMuMTQxNTkyNzQxMDEyNTczMikpfWlmKDIxMzkwOTUwNDA9PSgwfEhiKSlicmVhayBjO3JldHVybiB1WzYxMjgrKEdiPDwyKT4+Ml19YT14KDMuMTQxNTkyNzQxMDEyNTczMil9cmV0dXJuIGF9cmV0dXJuIHVbNjExMisoR2I8PDIpPj4yXX1yZXR1cm4geCgoMHxKYik8MD8tMS41NzA3OTYzNzA1MDYyODY2OjEuNTcwNzk2MzcwNTA2Mjg2Nil9ZnVuY3Rpb24gRGEoYSxVYixWYil7dmFyIFpiLGJjLGdjLGhjLGtjLFdiPTAsWGI9MCxZYj0wLF9iPTAsJGI9MCxhYz0wLGNjPTAsZGM9MCxlYz0wLGZjPTAsaWM9MCxqYz0wO2lmKEw9WmI9TC01NjB8MCxjYz0oWGI9VmIpK3coZ2M9MDwoMHwoVmI9KFZiKy0zfDApLzI0fDApKT9WYjowLC0yNCl8MCwwPD0oMHwoYmM9cVs4MDhdKSkpZm9yKFhiPWJjKzF8MCxWYj1nYzt2WygzMjArWmJ8MCkrKFliPDwzKT4+M109KDB8VmIpPDA/MDorcVszMjQ4KyhWYjw8Mik+PjJdLFZiPVZiKzF8MCwoMHxYYikhPSgwfChZYj1ZYisxfDApKTspO2ZvcihhYz1jYystMjR8MCxYYj0wOzspe2ZvcihXYj1WYj0wO1diKz12WyhWYjw8MykrYT4+M10qdlsoMzIwK1pifDApKyhYYi1WYjw8Myk+PjNdLDEhPSgwfChWYj1WYisxfDApKTspO2lmKHZbKFhiPDwzKStaYj4+M109V2IsVmI9KDB8WGIpPCgwfGJjKSxYYj1YYisxfDAsIVZiKWJyZWFrfWtjPTIzLWFjfDAsaGM9MjQtYWN8MCxYYj1iYzthOntmb3IoOzspe2lmKFdiPXZbKFhiPDwzKStaYj4+M10sIShlYz0oKFZiPTApfChZYj1YYikpPDEpKWZvcig7JGI9KDQ4MCtaYnwwKSsoVmI8PDIpfDAsZGM9V2IsX2I9eShXYio9NS45NjA0NjQ0Nzc1MzkwNjNlLTgpPDIxNDc0ODM2NDg/fn5XYjotMjE0NzQ4MzY0OCxfYj15KGRjKz0tMTY3NzcyMTYqKFdiPSsoMHxfYikpKTwyMTQ3NDgzNjQ4P35+ZGM6LTIxNDc0ODM2NDgscVskYj4+Ml09X2IsV2I9dlsoKCRiPVliKy0xfDApPDwzKStaYj4+M10rV2IsVmI9VmIrMXwwLF9iPTE8KDB8WWIpLFliPSRiLF9iOyk7V2I9aGEoV2IsYWMpLFdiKz0tOCpDKC4xMjUqV2IpLFdiLT0wfCgkYj15KFdiKTwyMTQ3NDgzNjQ4P35+V2I6LTIxNDc0ODM2NDgpO2U6e2Y6e2c6e2lmKGljPSgwfGFjKTwxKXtpZihhYylicmVhayBnO19iPXFbNDc2KygoWGI8PDIpK1pifDApPj4yXT4+MjN9ZWxzZSBmYz1ZYj0oWGI8PDIpK1pifDAsWWI9KF9iPXFbWWIrNDc2Pj4yXSktKChWYj1fYj4+aGMpPDxoYyl8MCwkYj1WYiskYnwwLF9iPShxW2ZjKzQ3Nj4+Ml09WWIpPj5rYztpZigoMHxfYik8MSlicmVhayBlO2JyZWFrIGZ9aWYoX2I9MiwhKC41PD1XYikpe19iPTA7YnJlYWsgZX19aWYoWWI9VmI9MCwhZWMpZm9yKDs7KXtlYz1xWyhqYz0oNDgwK1pifDApKyhWYjw8Mil8MCk+PjJdLGZjPTE2Nzc3MjE1O2k6e2o6e2lmKCFZYil7aWYoIWVjKWJyZWFrIGo7ZmM9MTY3NzcyMTYsWWI9MX1xW2pjPj4yXT1mYy1lYzticmVhayBpfVliPTB9aWYoKDB8WGIpPT0oMHwoVmI9VmIrMXwwKSkpYnJlYWt9aWN8fDE8KFZiPWFjKy0xfDApPj4+MHx8KHFbNDc2KyhWYj0oWGI8PDIpK1pifDApPj4yXT1WYi0xPzgzODg2MDcmcVtWYis0NzY+PjJdOjQxOTQzMDMmcVtWYis0NzY+PjJdKSwkYj0kYisxfDAsMj09KDB8X2IpJiYoV2I9MS1XYixfYj0yLFliJiYoV2ItPWhhKDEsYWMpKSl9aWYoMCE9V2IpYnJlYWs7aWYoISgoKFliPTApfChWYj1YYikpPD0oMHxiYykpKXtmb3IoO1liPXFbKDQ4MCtaYnwwKSsoKFZiPVZiKy0xfDApPDwyKT4+Ml18WWIsKDB8YmMpPCgwfFZiKTspO2lmKFliKXtmb3IoY2M9YWM7Y2M9Y2MrLTI0fDAsIXFbKDQ4MCtaYnwwKSsoKFhiPVhiKy0xfDApPDwyKT4+Ml07KTticmVhayBhfX1mb3IoVmI9MTtWYj0oWWI9VmIpKzF8MCwhcVsoNDgwK1pifDApKyhiYy1ZYjw8Mik+PjJdOyk7Zm9yKFliPVhiK1lifDA7Oyl7Zm9yKFhiPSRiPVhiKzF8MCx2WygzMjArWmJ8MCkrKCRiPDwzKT4+M109cVszMjQ4KyhnYytYYjw8Mik+PjJdLFdiPVZiPTA7V2IrPXZbKFZiPDwzKSthPj4zXSp2WygzMjArWmJ8MCkrKCRiLVZiPDwzKT4+M10sMSE9KDB8KFZiPVZiKzF8MCkpOyk7aWYodlsoWGI8PDMpK1piPj4zXT1XYiwhKCgwfFhiKTwoMHxZYikpKWJyZWFrfVhiPVlifTE2Nzc3MjE2PD0oV2I9aGEoV2IsMC1hY3wwKSk/KGE9KDQ4MCtaYnwwKSsoWGI8PDIpfDAsZGM9V2IsVmI9eShXYio9NS45NjA0NjQ0Nzc1MzkwNjNlLTgpPDIxNDc0ODM2NDg/fn5XYjotMjE0NzQ4MzY0OCxZYj15KFdiPWRjKy0xNjc3NzIxNiooMHxWYikpPDIxNDc0ODM2NDg/fn5XYjotMjE0NzQ4MzY0OCxxW2E+PjJdPVliLFhiPVhiKzF8MCk6KFZiPXkoV2IpPDIxNDc0ODM2NDg/fn5XYjotMjE0NzQ4MzY0OCxjYz1hYykscVsoNDgwK1pifDApKyhYYjw8Mik+PjJdPVZifWlmKFdiPWhhKDEsY2MpLCEoKDB8WGIpPD0tMSkpe2ZvcihWYj1YYjt2WyhWYjw8MykrWmI+PjNdPVdiKnFbKDQ4MCtaYnwwKSsoVmI8PDIpPj4yXSxXYio9NS45NjA0NjQ0Nzc1MzkwNjNlLTgsYT0wPCgwfFZiKSxWYj1WYistMXwwLGE7KTtpZighKCgwfFhiKTw9LTEpKWZvcihWYj1YYjs7KXtmb3IoWWI9WGItKGE9VmIpfDAsVmI9V2I9MDtXYis9dls2MDE2KyhWYjw8Myk+PjNdKnZbKGErVmI8PDMpK1piPj4zXSwhKCgwfGJjKTw9KDB8VmIpKSYmKGFjPVZiPj4+MDxZYj4+PjAsVmI9VmIrMXwwLGFjKTspO2lmKHZbKDE2MCtaYnwwKSsoWWI8PDMpPj4zXT1XYixWYj1hKy0xfDAsISgwPCgwfGEpKSlicmVha319aWYoKFdiPTApPD0oMHxYYikpZm9yKDtXYis9dlsoMTYwK1pifDApKyhYYjw8Myk+PjNdLGE9MDwoMHxYYiksWGI9WGIrLTF8MCxhOyk7cmV0dXJuIHZbVWI+PjNdPV9iPy1XYjpXYixMPTU2MCtaYnwwLDcmJGJ9ZnVuY3Rpb24gSWEoYSxVYil7dmFyIFZiPTAsbGM9MCx0Yz0wO1ZiPTAhPSgwfFViKTthOntiOntjOntkOmlmKCEoIVVifCEoMyZhKSkpZm9yKDs7KXtpZighclswfGFdKWJyZWFrIGM7aWYoYT1hKzF8MCxWYj0wIT0oMHwoVWI9VWIrLTF8MCkpLCFVYilicmVhayBkO2lmKCEoMyZhKSlicmVha31pZighVmIpYnJlYWsgYn1pZighclswfGFdKWJyZWFrIGE7ZTp7aWYoNDw9VWI+Pj4wKXtmb3IoVmI9KFZiPVViKy00fDApLShsYz0tNCZWYil8MCxsYz00KyhhK2xjfDApfDA7Oyl7aWYoKC0xXih0Yz1xW2E+PjJdKSkmdGMrLTE2ODQzMDA5Ji0yMTM5MDYyMTQ0KWJyZWFrIGU7aWYoYT1hKzR8MCwhKDM8KFViPVViKy00fDApPj4+MCkpYnJlYWt9VWI9VmIsYT1sY31pZighVWIpYnJlYWsgYn1mb3IoOzspe2lmKCFyWzB8YV0pYnJlYWsgYTtpZihhPWErMXwwLCEoVWI9VWIrLTF8MCkpYnJlYWt9fXJldHVybiAwfXJldHVybiBhfWZ1bmN0aW9uIE5hKGEsVWIsRmMsR2Mpe2lmKGF8VWIpZm9yKDtvWzB8KEZjPUZjKy0xfDApXT1yWzMxNjgrKDE1JmEpfDBdfEdjLChhPSgxNSZVYik8PDI4fGE+Pj40KXwoVWI+Pj49NCk7KTtyZXR1cm4gRmN9ZnVuY3Rpb24gT2EoYSxVYixGYyl7aWYoYXxVYilmb3IoO29bMHwoRmM9RmMrLTF8MCldPTcmYXw0OCwoYT0oNyZVYik8PDI5fGE+Pj4zKXwoVWI+Pj49Myk7KTtyZXR1cm4gRmN9ZnVuY3Rpb24gJGIoYSl7dmFyIF9oPXgoMCksZmk9eCgwKSxnaT0wLGhpPTAsaWk9eCgwKSxqaT14KDApLGtpPXgoMCksbGk9eCgwKSxtaT0wLG5pPXgoMCksb2k9eCgwKSxwaT0wO2E6e2I6e2lmKGooYSksaGk9MjE0NzQ4MzY0NyYoZ2k9ZSgwKSkpe2lmKCEoaGk+Pj4wPDIxMzkwOTUwNDEpKXJldHVybiB4KHgoLjEwMDAwMDAwMTQ5MDExNjEyKSthKTtpZigxMDY1MzUzMjE2PT0oMHxoaSkpcmV0dXJuIHgoLTE8KDB8Z2kpPy4xMDAwMDAwMDE0OTAxMTYxMjoxMCk7aWYoMjEzOTA5NTA0MD09KDB8aGkpKXJldHVybiB4KC0xPCgwfGdpKT8wOi1hKTtpZigxMDczNzQxODI0PT0oMHxnaSkpcmV0dXJuIHgoLjAxMDAwMDAwMDcwNzgwNTE1Nyk7aWYoMTA1Njk2NDYwOD09KDB8Z2kpKXJldHVybiB4KC4zMTYyMjc3NjM4OTEyMjAxKTtpZigxMjkxODQ1NjMzPD1oaT4+PjApcmV0dXJuIHgoKDB8Z2kpPDA/SDowKTtpZihpaT11WzE1MzddLGppPXgoeCgxLjYwMDAwMDAyMzg0MTg1OCktaWkpLGtpPXgoeCgxKS94KGlpK3goMS42MDAwMDAwMjM4NDE4NTgpKSksZigwLC00MDk2JihqKGZpPXgoamkqa2kpKSxlKDApKSksX2g9aygpLGxpPXgoX2gqX2gpLG9pPXVbMTU0MV0saWk9eChraSp4KHgoamkteCgobmk9X2gpKngoMy4wOTk2MDkzNzUpKSkteChfaCp4KHgoMS42MDAwMDAwMjM4NDE4NTgpLXgoeCgzLjA5OTYwOTM3NSktaWkpKSkpKSxraT14KHgoZmkrX2gpKmlpKSxfaD14KGZpKmZpKSxqaT14KGtpK3goeChfaCpfaCkqeCh4KF9oKngoeChfaCp4KHgoX2gqeCh4KF9oKngoeChfaCp4KC4yMDY5NzUwMTMwMTc2NTQ0MikpK3goLjIzMDY2MDc1MTQ2MTk4MjczKSkpK3goLjI3MjcyODExNTMyMDIwNTcpKSkreCguMzMzMzMzMzQzMjY3NDQwOCkpKSt4KC40Mjg1NzE0MzI4Mjg5MDMyKSkpK3goLjYwMDAwMDAyMzg0MTg1NzkpKSkpLGYoMCwtNDA5NiYoaih4KHgobGkreCgzKSkramkpKSxlKDApKSksX2g9aygpLGtpPXgobmkqX2gpLGZpPXgoeChpaSpfaCkreChmaSp4KGppLXgoeChfaCt4KC0zKSktbGkpKSkpLGYoMCwtNDA5NiYoaih4KGtpK2ZpKSksZSgwKSkpLF9oPWsoKSxpaT14KF9oKngoLjk2MTkxNDA2MjUpKSxsaT14KHVbMTUzOV0reCh4KHgoZmkteChfaC1raSkpKngoLjk2MTc5NjcwMDk1NDQzNzMpKSt4KF9oKngoLS4wMDAxMTczNjg1NzQxMzc3OTk0NCkpKSksZigwLC00MDk2JihqKHgoeChvaSt4KGlpK2xpKSkreCgtNCkpKSxlKDApKSksZmk9aygpLGYoMCwtNDA5NiZnaSksamk9aygpLF9oPXgoZmkqamkpLGE9eCh4KHgobGkteCh4KHgoZmkteCgtNCkpLW9pKS1paSkpKmEpK3goeChhLWppKSpmaSkpLGooZmk9eChfaCthKSksMTEyNDA3MzQ3Mzw9KDB8KGdpPWUoMCkpKSlicmVhayBiO2Q6e2U6e2lmKChoaT0xMTI0MDczNDcyKT09KDB8Z2kpKXtpZighKHgoYSt4KDQuMjk5NTY2NTY5NDQzNDE0ZS04KSk+eChmaS1faCkpKWJyZWFrIGU7YnJlYWsgYn1pZihoaT0yMTQ3NDgzNjQ3JmdpLCEoYTw9eChmaS1faCleMXwtMTAyMTk2ODM4NCE9KDB8Z2kpKXwxMTI1NTE1MjY1PD1oaT4+PjApYnJlYWsgYTtpZihoaT4+PjA8MTA1Njk2NDYwOSlicmVhayBkfW1pPSg4Mzg4NjA3JihoaT0oODM4ODYwOD4+PihoaT4+PjIzKS0xMjYpK2dpfDApfDgzODg2MDgpPj4+MTUwLShwaT1oaT4+PjIzJjI1NSksbWk9KDB8Z2kpPDA/MC1taXwwOm1pLF9oPXgoX2gtKGYoMCxoaSYtODM4ODYwOD4+cGkrLTEyNyksaygpKSksaih4KGErX2gpKSxnaT1lKDApfWYoMCwtMzI3NjgmZ2kpLGZpPWsoKSxpaT14KGZpKngoLjY5MzE0NTc1MTk1MzEyNSkpLGZpPXgoeChmaSp4KDE0Mjg2MDY1Mzc5NTY1MTE2ZS0yMikpK3goeChhLXgoZmktX2gpKSp4KC42OTMxNDcxODI0NjQ1OTk2KSkpLGE9eChpaStmaSksX2g9eChhKmEpLF9oPXgoYS14KF9oKngoeChfaCp4KHgoX2gqeCh4KF9oKngoeChfaCp4KDQuMTM4MTM2OTQ0MjIwNjA1ZS04KSkreCgtMTY1MzM5MDE5OTg2Mjc2OThlLTIyKSkpK3goNjYxMzc1NTk3NzAxNDA4ZS0xOSkpKSt4KC0uMDAyNzc3Nzc3ODQ1MDM5OTYzNykpKSt4KC4xNjY2NjY2NzE2MzM3MjA0KSkpKSxuaT14KHgoYSpfaCkveChfaCt4KC0yKSkpLF9oPXgoZmkteChhLWlpKSksYT0oMHwoZ2k9MHwoaihhPXgoeChhLXgobmkteChfaCt4KGEqX2gpKSkpK3goMSkpKSxlKDApKyhtaTw8MjMpKSkpPD04Mzg4NjA3P2Z1bmN0aW9uKGEscWkpe2E6aWYoMTI4PD0oMHxxaSkpe2lmKGE9eChhKngoMTcwMTQxMTgzNDYwNDY5MjNlMjIpKSwoMHxxaSk8MjU1KXtxaT1xaSstMTI3fDA7YnJlYWsgYX1hPXgoYSp4KDE3MDE0MTE4MzQ2MDQ2OTIzZTIyKSkscWk9KCgwfHFpKTwzODE/cWk6MzgxKSstMjU0fDB9ZWxzZS0xMjc8KDB8cWkpfHwoYT14KGEqeCgxMTc1NDk0MzUwODIyMjg3NWUtNTQpKSxxaT0tMjUzPCgwfHFpKT9xaSsxMjZ8MDooYT14KGEqeCgxMTc1NDk0MzUwODIyMjg3NWUtNTQpKSwoLTM3ODwoMHxxaSk/cWk6LTM3OCkrMjUyfDApKTtyZXR1cm4geChhKihmKDAsMTA2NTM1MzIxNisocWk8PDIzKXwwKSxrKCkpKX0oYSxtaSk6KGYoMCxnaSksaygpKSxhPXgoeCgxKSphKX1lbHNlIGE9eCgxKTtyZXR1cm4gYX1yZXR1cm4geChIKX1yZXR1cm4geCgwKX1mdW5jdGlvbiBkYyhhLHFpKXt2YXIgbG93LGhpZ2g7bG93PTB8YSxoaWdoPTB8cWksYlswXT1sb3csYlsxXT1oaWdofWZ1bmN0aW9uIGdjKGEscWksc2kpe3JldHVybiBmdW5jdGlvbihhLHFpLHNpKXt2YXIgdWksdmksd2kseGksdGk9MDtyZXR1cm4geGk9dyh1aT1zaT4+PjE2LHRpPWE+Pj4xNiksYT0oNjU1MzUmKHRpPSgod2k9dyh2aT02NTUzNSZzaSxhJj02NTUzNSkpPj4+MTYpK3codGksdmkpfDApKSt3KGEsdWkpfDAsTT0oKHhpK3cocWksc2kpfDApKyh0aT4+PjE2KXwwKSsoYT4+PjE2KXwwLDY1NTM1JndpfGE8PDE2fShhLHFpLHNpKX1mdW5jdGlvbiBoYyhhLHFpLHNpKXtyZXR1cm4gZnVuY3Rpb24oYSxxaSxzaSl7dmFyIHlpPTAsemk9MCxBaT0wLEJpPTAsQ2k9MCxEaT0wLEVpPTAsRmk9MCxHaT0wO2E6e2I6e2M6e2Q6e2U6e2Y6e2c6e2g6e2k6e2lmKHppPXFpKXtpZighKHlpPXNpKSlicmVhayBpO2JyZWFrIGh9cmV0dXJuIGRjKChxaT1hKS13KGE9KGE+Pj4wKS8oc2k+Pj4wKXwwLHNpKXwwLDApLE09MCxhfWlmKCFhKWJyZWFrIGc7YnJlYWsgZn1pZighKChCaT15aSstMXwwKSZ5aSkpYnJlYWsgZTtDaT0wLShCaT0oeih5aSkrMzN8MCkteih6aSl8MCl8MDticmVhayBjfXJldHVybiBkYygwLHppLXcoYT0oemk+Pj4wKS8wfDAsMCl8MCksTT0wLGF9aWYoKHlpPTMyLXooemkpfDApPj4+MDwzMSlicmVhayBkO2JyZWFrIGJ9aWYoZGMoYSZCaSwwKSwxPT0oMHx5aSkpYnJlYWsgYTtyZXR1cm4gc2k9MzEmKHlpPXlpPzMxLXooeWkrLTFeeWkpfDA6MzIpLGE9MzI8PSg2MyZ5aSk+Pj4wPyh6aT0wLHFpPj4+c2kpOih6aT1xaT4+PnNpLCgoMTw8c2kpLTEmcWkpPDwzMi1zaXxhPj4+c2kpLE09emksYX1CaT15aSsxfDAsQ2k9NjMteWl8MH1pZih5aT1xaSxBaT0zMSYoemk9NjMmQmkpLEFpPTMyPD16aT4+PjA/KHppPTAseWk+Pj5BaSk6KHppPXlpPj4+QWksKCgxPDxBaSktMSZ5aSk8PDMyLUFpfGE+Pj5BaSkseWk9MzEmKENpJj02MyksMzI8PUNpPj4+MD8ocWk9YTw8eWksYT0wKToocWk9KDE8PHlpKS0xJmE+Pj4zMi15aXxxaTw8eWksYTw8PXlpKSxCaSlmb3IoKENpPXNpKyh5aT0tMSl8MCk+Pj4wPDQyOTQ5NjcyOTUmJih5aT0wKTtBaT0oRWk9RGk9QWk8PDF8cWk+Pj4zMSktKEZpPXNpJihEaT15aS0oKHppPXppPDwxfEFpPj4+MzEpKyhDaT4+PjA8RGk+Pj4wKXwwKT4+MzEpKXwwLHppPXppLShFaT4+PjA8Rmk+Pj4wKXwwLHFpPXFpPDwxfGE+Pj4zMSxhPUdpfGE8PDEsR2k9RGkmPTEsQmk9QmkrLTF8MDspO3JldHVybiBkYyhBaSx6aSksTT1xaTw8MXxhPj4+MzEsRGl8YTw8MX1kYyhhLHFpKSxxaT1hPTB9cmV0dXJuIE09cWksYX0oYSxxaSxzaSl9ZnVuY3Rpb24gamMoYSl7dmFyIEhpO3JldHVybigtMT4+PihIaT0zMSZhKSYtMik8PEhpfCgtMTw8KGE9MC1hJjMxKSYtMik+Pj5hfWZ1bmN0aW9uIE4oKXtyZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGgvNjU1MzZ8MH19KEgsSSxKKX19bD1udWxsLGIud2FzbUJpbmFyeSYmKEY9Yi53YXNtQmluYXJ5KTt2YXIgZmE9RXJyb3IsV2ViQXNzZW1ibHk9e307Rj1bXSxcXFwib2JqZWN0XFxcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZFKFxcXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXFxcIik7dmFyIEksSj1uZXcgZnVuY3Rpb24oYSl7dmFyIGM9QXJyYXkoMTcpO3JldHVybiBjLmdyb3c9ZnVuY3Rpb24oKXsxODw9Yy5sZW5ndGgmJkIoXFxcIlVuYWJsZSB0byBncm93IHdhc20gdGFibGUuIFVzZSBhIGhpZ2hlciB2YWx1ZSBmb3IgUkVTRVJWRURfRlVOQ1RJT05fUE9JTlRFUlMgb3Igc2V0IEFMTE9XX1RBQkxFX0dST1dUSC5cXFwiKSxjLnB1c2gobnVsbCl9LGMuc2V0PWZ1bmN0aW9uKGEsZSl7Y1thXT1lfSxjLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gY1thXX0sY30oe2luaXRpYWw6MTcsbWF4aW11bToxOCxlbGVtZW50OlxcXCJhbnlmdW5jXFxcIn0pLEs9ITE7ZnVuY3Rpb24gYXNzZXJ0KGEsYyl7YXx8QihcXFwiQXNzZXJ0aW9uIGZhaWxlZDogXFxcIitjKX12YXIgYnVmZmVyLE0sTCxOLGlhPVxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFxcXCJ1dGY4XFxcIik6dm9pZCAwO2Z1bmN0aW9uIGphKGEsYyxkKXt2YXIgZT1jK2Q7Zm9yKGQ9YzthW2RdJiYhKGU8PWQpOykrK2Q7aWYoMTY8ZC1jJiZhLnN1YmFycmF5JiZpYSlyZXR1cm4gaWEuZGVjb2RlKGEuc3ViYXJyYXkoYyxkKSk7Zm9yKGU9XFxcIlxcXCI7YzxkOyl7dmFyIGY9YVtjKytdO2lmKDEyOCZmKXt2YXIgZz02MyZhW2MrK107aWYoMTkyPT0oMjI0JmYpKWUrPVN0cmluZy5mcm9tQ2hhckNvZGUoKDMxJmYpPDw2fGcpO2Vsc2V7dmFyIG09NjMmYVtjKytdOyhmPTIyND09KDI0MCZmKT8oMTUmZik8PDEyfGc8PDZ8bTooNyZmKTw8MTh8Zzw8MTJ8bTw8Nnw2MyZhW2MrK10pPDY1NTM2P2UrPVN0cmluZy5mcm9tQ2hhckNvZGUoZik6KGYtPTY1NTM2LGUrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Zj4+MTAsNTYzMjB8MTAyMyZmKSl9fWVsc2UgZSs9U3RyaW5nLmZyb21DaGFyQ29kZShmKX1yZXR1cm4gZX1mdW5jdGlvbiBrYShhLGMpe3JldHVybiBhP2phKEwsYSxjKTpcXFwiXFxcIn1mdW5jdGlvbiBsYShhKXtyZXR1cm4gMDxhJTY1NTM2JiYoYSs9NjU1MzYtYSU2NTUzNiksYX1mdW5jdGlvbiBtYShhKXtidWZmZXI9YSxiLkhFQVA4PU09bmV3IEludDhBcnJheShhKSxiLkhFQVAxNj1uZXcgSW50MTZBcnJheShhKSxiLkhFQVAzMj1OPW5ldyBJbnQzMkFycmF5KGEpLGIuSEVBUFU4PUw9bmV3IFVpbnQ4QXJyYXkoYSksYi5IRUFQVTE2PW5ldyBVaW50MTZBcnJheShhKSxiLkhFQVBVMzI9bmV3IFVpbnQzMkFycmF5KGEpLGIuSEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGEpLGIuSEVBUEY2ND1uZXcgRmxvYXQ2NEFycmF5KGEpfVxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgVGV4dERlY29kZXImJm5ldyBUZXh0RGVjb2RlcihcXFwidXRmLTE2bGVcXFwiKTt2YXIgRz1iLlRPVEFMX01FTU9SWXx8MTY3NzcyMTY7ZnVuY3Rpb24gTyhhKXtmb3IoOzA8YS5sZW5ndGg7KXt2YXIgYz1hLnNoaWZ0KCk7aWYoXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGMpYygpO2Vsc2V7dmFyIGQ9Yy5iO1xcXCJudW1iZXJcXFwiPT10eXBlb2YgZD92b2lkIDA9PT1jLmE/Yi5keW5DYWxsX3YoZCk6Yi5keW5DYWxsX3ZpKGQsYy5hKTpkKHZvaWQgMD09PWMuYT9udWxsOmMuYSl9fX0oST1iLndhc21NZW1vcnk/Yi53YXNtTWVtb3J5Om5ldyBmdW5jdGlvbigpe3JldHVybntidWZmZXI6bmV3IEFycmF5QnVmZmVyKEcvNjU1MzYqNjU1MzYpLGdyb3c6ZnVuY3Rpb24oYSl7cmV0dXJuIGNhKGEpfX19KSYmKGJ1ZmZlcj1JLmJ1ZmZlciksRz1idWZmZXIuYnl0ZUxlbmd0aCxtYShidWZmZXIpLE5bMjA1Ml09NTI1MTI0ODt2YXIgbmE9W10sb2E9W10scGE9W10scWE9W107ZnVuY3Rpb24gcmEoKXt2YXIgYT1iLnByZVJ1bi5zaGlmdCgpO25hLnVuc2hpZnQoYSl9aWYoTWF0aC5pbXVsJiYtNT09PU1hdGguaW11bCg0Mjk0OTY3Mjk1LDUpfHwoTWF0aC5pbXVsPWZ1bmN0aW9uKGEsYyl7dmFyIGQ9NjU1MzUmYSxlPTY1NTM1JmM7cmV0dXJuIGQqZSsoKGE+Pj4xNikqZStkKihjPj4+MTYpPDwxNil8MH0pLCFNYXRoLmZyb3VuZCl7dmFyIHNhPW5ldyBGbG9hdDMyQXJyYXkoMSk7TWF0aC5mcm91bmQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHNhWzBdPWEsc2FbMF19fU1hdGguY2x6MzJ8fChNYXRoLmNsejMyPWZ1bmN0aW9uKGEpe3ZhciBjPTMyLGQ9YT4+MTY7cmV0dXJuIGQmJihjLT0xNixhPWQpLChkPWE+PjgpJiYoYy09OCxhPWQpLChkPWE+PjQpJiYoYy09NCxhPWQpLChkPWE+PjIpJiYoYy09MixhPWQpLGE+PjE/Yy0yOmMtYX0pLE1hdGgudHJ1bmN8fChNYXRoLnRydW5jPWZ1bmN0aW9uKGEpe3JldHVybiBhPDA/TWF0aC5jZWlsKGEpOk1hdGguZmxvb3IoYSl9KTt2YXIgUD0wLFE9bnVsbCxVPW51bGw7ZnVuY3Rpb24gQihhKXt0aHJvdyBiLm9uQWJvcnQmJmIub25BYm9ydChhKSxEKGEpLEUoYSksSz0hMCxuZXcgZmEoXFxcImFib3J0KFxcXCIrYStcXFwiKS4gQnVpbGQgd2l0aCAtcyBBU1NFUlRJT05TPTEgZm9yIG1vcmUgaW5mby5cXFwiKX1iLnByZWxvYWRlZEltYWdlcz17fSxiLnByZWxvYWRlZEF1ZGlvcz17fTt2YXIgVj1cXFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFxcXCI7ZnVuY3Rpb24gVyhhKXtyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoP2Euc3RhcnRzV2l0aChWKTowPT09YS5pbmRleE9mKFYpfXZhciBYPVxcXCJfZW1fbW9kdWxlLndhc21cXFwiO2lmKCFXKFgpKXt2YXIgdGE9WDtYPWIubG9jYXRlRmlsZT9iLmxvY2F0ZUZpbGUodGEsdSk6dSt0YX1mdW5jdGlvbiB1YSgpe3RyeXtpZihGKXJldHVybiBuZXcgVWludDhBcnJheShGKTt2YXIgYT16KFgpO2lmKGEpcmV0dXJuIGE7aWYodylyZXR1cm4gdyhYKTt0aHJvd1xcXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFxcXCJ9Y2F0Y2goYyl7QihjKX19b2EucHVzaCh7YjpmdW5jdGlvbigpe3dhKCl9fSk7dmFyIHhhPVtudWxsLFtdLFtdXSx5YT0hMTtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPWFbZF07MjU1PGUmJih5YSYmYXNzZXJ0KCExLFxcXCJDaGFyYWN0ZXIgY29kZSBcXFwiK2UrXFxcIiAoXFxcIitTdHJpbmcuZnJvbUNoYXJDb2RlKGUpK1xcXCIpICBhdCBvZmZzZXQgXFxcIitkK1xcXCIgbm90IGluIDB4MDAtMHhGRi5cXFwiKSxlJj0yNTUpLGMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGUpKX1yZXR1cm4gYy5qb2luKFxcXCJcXFwiKX12YXIgemE9XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGF0b2I/YXRvYjpmdW5jdGlvbihhKXt2YXIgYz1cXFwiXFxcIixkPTA7YT1hLnJlcGxhY2UoL1teQS1aYS16MC05XFxcXCtcXFxcLz1dL2csXFxcIlxcXCIpO2Rve3ZhciBlPVxcXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcXCIuaW5kZXhPZihhLmNoYXJBdChkKyspKSxmPVxcXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcXCIuaW5kZXhPZihhLmNoYXJBdChkKyspKSxnPVxcXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcXCIuaW5kZXhPZihhLmNoYXJBdChkKyspKSxtPVxcXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcXCIuaW5kZXhPZihhLmNoYXJBdChkKyspKTtlPWU8PDJ8Zj4+NCxmPSgxNSZmKTw8NHxnPj4yO3ZhciBoPSgzJmcpPDw2fG07Yys9U3RyaW5nLmZyb21DaGFyQ29kZShlKSw2NCE9PWcmJihjKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGYpKSw2NCE9PW0mJihjKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGgpKX13aGlsZShkPGEubGVuZ3RoKTtyZXR1cm4gY307ZnVuY3Rpb24geihhKXtpZihXKGEpKXtpZihhPWEuc2xpY2UoVi5sZW5ndGgpLFxcXCJib29sZWFuXFxcIj09dHlwZW9mIHImJnIpe3RyeXt2YXIgYz1CdWZmZXIuZnJvbShhLFxcXCJiYXNlNjRcXFwiKX1jYXRjaChnKXtjPW5ldyBCdWZmZXIoYSxcXFwiYmFzZTY0XFxcIil9dmFyIGQ9bmV3IFVpbnQ4QXJyYXkoYy5idWZmZXIsYy5ieXRlT2Zmc2V0LGMuYnl0ZUxlbmd0aCl9ZWxzZSB0cnl7dmFyIGU9emEoYSksZj1uZXcgVWludDhBcnJheShlLmxlbmd0aCk7Zm9yKGM9MDtjPGUubGVuZ3RoOysrYylmW2NdPWUuY2hhckNvZGVBdChjKTtkPWZ9Y2F0Y2goZyl7dGhyb3cgRXJyb3IoXFxcIkNvbnZlcnRpbmcgYmFzZTY0IHN0cmluZyB0byBieXRlcyBmYWlsZWQuXFxcIil9cmV0dXJuIGR9fXZhciBIPXtlbXNjcmlwdGVuX21lbWNweV9iaWc6ZnVuY3Rpb24oYSxjLGQpe0wuc2V0KEwuc3ViYXJyYXkoYyxjK2QpLGEpfSxlbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwOmZ1bmN0aW9uKGEpe2lmKDIxNDc0MTgxMTI8YSlyZXR1cm4hMTtmb3IodmFyIGM9TWF0aC5tYXgoTS5sZW5ndGgsMTY3NzcyMTYpO2M8YTspYz1jPD01MzY4NzA5MTI/bGEoMipjKTpNYXRoLm1pbihsYSgoMypjKzIxNDc0ODM2NDgpLzQpLDIxNDc0MTgxMTIpO2E6e3RyeXtJLmdyb3coYy1idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNT4+MTYpLG1hKEkuYnVmZmVyKTt2YXIgZD0xO2JyZWFrIGF9Y2F0Y2goZSl7fWQ9dm9pZCAwfXJldHVybiEhZH0sZmRfd3JpdGU6ZnVuY3Rpb24oYSxjLGQsZSl7dHJ5e2Zvcih2YXIgZj0wLGc9MDtnPGQ7ZysrKXtmb3IodmFyIG09TltjKzgqZz4+Ml0saD1OW2MrKDgqZys0KT4+Ml0sQT0wO0E8aDtBKyspe3ZhciBSPUxbbStBXSxTPXhhW2FdOzA9PT1SfHwxMD09PVI/KCgxPT09YT9EOkUpKGphKFMsMCkpLFMubGVuZ3RoPTApOlMucHVzaChSKX1mKz1ofXJldHVybiBOW2U+PjJdPWYsMH1jYXRjaChUKXtyZXR1cm5cXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIEZTJiZUIGluc3RhbmNlb2YgRlMuY3x8QihUKSxULmZ9fSxtZW1vcnk6SSx0YWJsZTpKfSxBYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7Yi5hc209YS5leHBvcnRzLFAtLSxiLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMmJmIubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhQKSwwPT1QJiYobnVsbCE9PVEmJihjbGVhckludGVydmFsKFEpLFE9bnVsbCksVSYmKGE9VSxVPW51bGwsYSgpKSl9ZnVuY3Rpb24gYyhjKXthKGMuaW5zdGFuY2UpfWZ1bmN0aW9uIGQoYSl7cmV0dXJuKEZ8fCFwJiYhcXx8XFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIGZldGNoP25ldyBQcm9taXNlKGZ1bmN0aW9uKGEpe2EodWEoKSl9KTpmZXRjaChYLHtjcmVkZW50aWFsczpcXFwic2FtZS1vcmlnaW5cXFwifSkudGhlbihmdW5jdGlvbihhKXtpZighYS5vayl0aHJvd1xcXCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcXFwiK1grXFxcIidcXFwiO3JldHVybiBhLmFycmF5QnVmZmVyKCl9KS5jYXRjaChmdW5jdGlvbigpe3JldHVybiB1YSgpfSkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm57dGhlbjpmdW5jdGlvbihhKXthKHtpbnN0YW5jZTpuZXcgZGF9KX19fSkudGhlbihhLGZ1bmN0aW9uKGEpe0UoXFxcImZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206IFxcXCIrYSksQihhKX0pfXZhciBlPXtlbnY6SCx3YXNpX3NuYXBzaG90X3ByZXZpZXcxOkh9O2lmKFArKyxiLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMmJmIubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhQKSxiLmluc3RhbnRpYXRlV2FzbSl0cnl7cmV0dXJuIGIuaW5zdGFudGlhdGVXYXNtKGUsYSl9Y2F0Y2goZil7cmV0dXJuIEUoXFxcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFxcXCIrZiksITF9cmV0dXJuIGZ1bmN0aW9uKCl7aWYoRnx8XFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nfHxXKFgpfHxcXFwiZnVuY3Rpb25cXFwiIT10eXBlb2YgZmV0Y2gpcmV0dXJuIGQoYyk7ZmV0Y2goWCx7Y3JlZGVudGlhbHM6XFxcInNhbWUtb3JpZ2luXFxcIn0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGEsZSkudGhlbihjLGZ1bmN0aW9uKGEpe0UoXFxcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcXFwiK2EpLEUoXFxcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXFxcIiksZChjKX0pfSl9KCkse319KCk7Yi5hc209QWE7dmFyIHdhPWIuX19fd2FzbV9jYWxsX2N0b3JzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLl9fd2FzbV9jYWxsX2N0b3JzLmFwcGx5KG51bGwsYXJndW1lbnRzKX07Yi5fY3NtR2V0VmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXRWZXJzaW9uLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtR2V0TGF0ZXN0TW9jVmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXRMYXRlc3RNb2NWZXJzaW9uLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtR2V0TW9jVmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXRNb2NWZXJzaW9uLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtU2V0TG9nRnVuY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtU2V0TG9nRnVuY3Rpb24uYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21SZXZpdmVNb2NJblBsYWNlPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbVJldml2ZU1vY0luUGxhY2UuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21SZWFkQ2FudmFzSW5mbz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21SZWFkQ2FudmFzSW5mby5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldFNpemVvZk1vZGVsPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldFNpemVvZk1vZGVsLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtSW5pdGlhbGl6ZU1vZGVsSW5QbGFjZT1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21Jbml0aWFsaXplTW9kZWxJblBsYWNlLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtVXBkYXRlTW9kZWw9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtVXBkYXRlTW9kZWwuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXRQYXJhbWV0ZXJDb3VudD1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXRQYXJhbWV0ZXJDb3VudC5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldFBhcmFtZXRlcklkcz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXRQYXJhbWV0ZXJJZHMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldFBhcmFtZXRlck1pbmltdW1WYWx1ZXMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXRQYXJhbWV0ZXJNYXhpbXVtVmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldFBhcmFtZXRlck1heGltdW1WYWx1ZXMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXRQYXJhbWV0ZXJWYWx1ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtR2V0UGFyYW1ldGVyVmFsdWVzLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtR2V0UGFydENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldFBhcnRDb3VudC5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldFBhcnRJZHM9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtR2V0UGFydElkcy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldFBhcnRPcGFjaXRpZXM9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtR2V0UGFydE9wYWNpdGllcy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldFBhcnRQYXJlbnRQYXJ0SW5kaWNlcz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXRQYXJ0UGFyZW50UGFydEluZGljZXMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXREcmF3YWJsZUNvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldERyYXdhYmxlQ291bnQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXREcmF3YWJsZUlkcz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXREcmF3YWJsZUlkcy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlQ29uc3RhbnRGbGFncz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXREcmF3YWJsZUNvbnN0YW50RmxhZ3MuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXREcmF3YWJsZUR5bmFtaWNGbGFncz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXREcmF3YWJsZUR5bmFtaWNGbGFncy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlVGV4dHVyZUluZGljZXM9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtR2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlRHJhd09yZGVycz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXREcmF3YWJsZURyYXdPcmRlcnMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXREcmF3YWJsZVJlbmRlck9yZGVycz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXREcmF3YWJsZVJlbmRlck9yZGVycy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlT3BhY2l0aWVzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldERyYXdhYmxlT3BhY2l0aWVzLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtR2V0RHJhd2FibGVNYXNrQ291bnRzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldERyYXdhYmxlTWFza0NvdW50cy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlTWFza3M9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtR2V0RHJhd2FibGVNYXNrcy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlVmVydGV4Q291bnRzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUdldERyYXdhYmxlVmVydGV4Q291bnRzLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtR2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtR2V0RHJhd2FibGVWZXJ0ZXhQb3NpdGlvbnMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21HZXREcmF3YWJsZVZlcnRleFV2cz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXREcmF3YWJsZVZlcnRleFV2cy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlSW5kZXhDb3VudHM9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtR2V0RHJhd2FibGVJbmRleENvdW50cy5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbUdldERyYXdhYmxlSW5kaWNlcz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21HZXREcmF3YWJsZUluZGljZXMuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21SZXNldERyYXdhYmxlRHluYW1pY0ZsYWdzPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbVJlc2V0RHJhd2FibGVEeW5hbWljRmxhZ3MuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21NYWxsb2NNb2M9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uY3NtTWFsbG9jTW9jLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sYi5fY3NtTWFsbG9jTW9kZWxBbmRJbml0aWFsaXplPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbU1hbGxvY01vZGVsQW5kSW5pdGlhbGl6ZS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuX2NzbU1hbGxvYz1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5jc21NYWxsb2MuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxiLl9jc21GcmVlPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLmNzbUZyZWUuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgWSxCYT1iLnN0YWNrU2F2ZT1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5zdGFja1NhdmUuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxDYT1iLnN0YWNrQWxsb2M9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uc3RhY2tBbGxvYy5hcHBseShudWxsLGFyZ3VtZW50cyl9LERhPWIuc3RhY2tSZXN0b3JlPWZ1bmN0aW9uKCl7cmV0dXJuIGIuYXNtLnN0YWNrUmVzdG9yZS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGNhPWIuX19ncm93V2FzbU1lbW9yeT1mdW5jdGlvbigpe3JldHVybiBiLmFzbS5fX2dyb3dXYXNtTWVtb3J5LmFwcGx5KG51bGwsYXJndW1lbnRzKX07ZnVuY3Rpb24gWigpe2Z1bmN0aW9uIGEoKXtpZighWSYmKFk9ITAsIUspKXtpZihPKG9hKSxPKHBhKSxiLm9uUnVudGltZUluaXRpYWxpemVkJiZiLm9uUnVudGltZUluaXRpYWxpemVkKCksYi5wb3N0UnVuKWZvcihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgYi5wb3N0UnVuJiYoYi5wb3N0UnVuPVtiLnBvc3RSdW5dKTtiLnBvc3RSdW4ubGVuZ3RoOyl7dmFyIGE9Yi5wb3N0UnVuLnNoaWZ0KCk7cWEudW5zaGlmdChhKX1PKHFhKX19aWYoISgwPFApKXtpZihiLnByZVJ1bilmb3IoXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGIucHJlUnVuJiYoYi5wcmVSdW49W2IucHJlUnVuXSk7Yi5wcmVSdW4ubGVuZ3RoOylyYSgpO08obmEpLDA8UHx8KGIuc2V0U3RhdHVzPyhiLnNldFN0YXR1cyhcXFwiUnVubmluZy4uLlxcXCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yi5zZXRTdGF0dXMoXFxcIlxcXCIpfSwxKSxhKCl9LDEpKTphKCkpfX1pZihiLmR5bkNhbGxfdmk9ZnVuY3Rpb24oKXtyZXR1cm4gYi5hc20uZHluQ2FsbF92aS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGIuYXNtPUFhLGIuY2NhbGw9ZnVuY3Rpb24oYSxjLGQsZSl7dmFyIGY9e3N0cmluZzpmdW5jdGlvbihhKXt2YXIgYz0wO2lmKG51bGwhPWEmJjAhPT1hKXt2YXIgZD0xKyhhLmxlbmd0aDw8MiksZT1jPUNhKGQpLGY9TDtpZigwPGQpe2Q9ZStkLTE7Zm9yKHZhciBnPTA7ZzxhLmxlbmd0aDsrK2cpe3ZhciBrPWEuY2hhckNvZGVBdChnKTtpZig1NTI5Njw9ayYmazw9NTczNDMmJihrPTY1NTM2KygoMTAyMyZrKTw8MTApfDEwMjMmYS5jaGFyQ29kZUF0KCsrZykpLGs8PTEyNyl7aWYoZDw9ZSlicmVhaztmW2UrK109a31lbHNle2lmKGs8PTIwNDcpe2lmKGQ8PWUrMSlicmVhaztmW2UrK109MTkyfGs+PjZ9ZWxzZXtpZihrPD02NTUzNSl7aWYoZDw9ZSsyKWJyZWFrO2ZbZSsrXT0yMjR8az4+MTJ9ZWxzZXtpZihkPD1lKzMpYnJlYWs7ZltlKytdPTI0MHxrPj4xOCxmW2UrK109MTI4fGs+PjEyJjYzfWZbZSsrXT0xMjh8az4+NiY2M31mW2UrK109MTI4fDYzJmt9fWZbZV09MH19cmV0dXJuIGN9LGFycmF5OmZ1bmN0aW9uKGEpe3ZhciBjPUNhKGEubGVuZ3RoKTtyZXR1cm4gTS5zZXQoYSxjKSxjfX0sZz1mdW5jdGlvbihhKXt2YXIgYz1iW1xcXCJfXFxcIithXTtyZXR1cm4gYXNzZXJ0KGMsXFxcIkNhbm5vdCBjYWxsIHVua25vd24gZnVuY3Rpb24gXFxcIithK1xcXCIsIG1ha2Ugc3VyZSBpdCBpcyBleHBvcnRlZFxcXCIpLGN9KGEpLG09W107aWYoYT0wLGUpZm9yKHZhciBoPTA7aDxlLmxlbmd0aDtoKyspe3ZhciBBPWZbZFtoXV07QT8oMD09PWEmJihhPUJhKCkpLG1baF09QShlW2hdKSk6bVtoXT1lW2hdfXJldHVybiBkPWZ1bmN0aW9uKGEpe3JldHVyblxcXCJzdHJpbmdcXFwiPT09Yz9rYShhKTpcXFwiYm9vbGVhblxcXCI9PT1jPyEhYTphfShkPWcuYXBwbHkobnVsbCxtKSksMCE9PWEmJkRhKGEpLGR9LGIuVVRGOFRvU3RyaW5nPWthLGIuYWRkRnVuY3Rpb249ZnVuY3Rpb24oYSxjKXt2YXIgZD1KLmxlbmd0aDt0cnl7Si5ncm93KDEpfWNhdGNoKGUpe2lmKCFlIGluc3RhbmNlb2YgUmFuZ2VFcnJvcil0aHJvdyBlO3Rocm93XFxcIlVuYWJsZSB0byBncm93IHdhc20gdGFibGUuIFVzZSBhIGhpZ2hlciB2YWx1ZSBmb3IgUkVTRVJWRURfRlVOQ1RJT05fUE9JTlRFUlMgb3Igc2V0IEFMTE9XX1RBQkxFX0dST1dUSC5cXFwifXRyeXtKLnNldChkLGEpfWNhdGNoKGUpe2lmKCFlIGluc3RhbmNlb2YgVHlwZUVycm9yKXRocm93IGU7YXNzZXJ0KHZvaWQgMCE9PWMsXFxcIk1pc3Npbmcgc2lnbmF0dXJlIGFyZ3VtZW50IHRvIGFkZEZ1bmN0aW9uXFxcIiksSi5zZXQoZCxhKX1yZXR1cm4gZH0sYi50aGVuPWZ1bmN0aW9uKGEpe2lmKFkpYShiKTtlbHNle3ZhciBjPWIub25SdW50aW1lSW5pdGlhbGl6ZWQ7Yi5vblJ1bnRpbWVJbml0aWFsaXplZD1mdW5jdGlvbigpe2MmJmMoKSxhKGIpfX1yZXR1cm4gYn0sVT1mdW5jdGlvbiBFYSgpe1l8fFooKSxZfHwoVT1FYSl9LGIucnVuPVosYi5wcmVJbml0KWZvcihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgYi5wcmVJbml0JiYoYi5wcmVJbml0PVtiLnByZUluaXRdKTswPGIucHJlSW5pdC5sZW5ndGg7KWIucHJlSW5pdC5wb3AoKSgpO3JldHVybiBaKCksX2VtX21vZHVsZX0pO1xcXCJvYmplY3RcXFwiPT10eXBlb2YgZXhwb3J0cyYmXFxcIm9iamVjdFxcXCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9X2VtX21vZHVsZTpcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxmdW5jdGlvbigpe3JldHVybiBfZW1fbW9kdWxlfSk6XFxcIm9iamVjdFxcXCI9PXR5cGVvZiBleHBvcnRzJiYoZXhwb3J0cy5fZW1fbW9kdWxlPV9lbV9tb2R1bGUpO3ZhciBfZW09X2VtX21vZHVsZSgpfShMaXZlMkRDdWJpc21Db3JlPUxpdmUyREN1YmlzbUNvcmV8fHt9KTtcIjsiLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIEBicmllZiDjg5Hjg6njg6Hjg7zjgr9JROOBruODh+ODleOCqeODq+ODiOWApOOCkuS/neaMgeOBmeOCi+WumuaVsDxicj5cbiAqICAgICAgICAg44OH44OV44Kp44Or44OI5YCk44Gu5LuV5qeY44Gv5Lul5LiL44Gu44Oe44OL44Ol44Ki44Or44Gr5Z+644Gl44GPPGJyPlxuICogICAgICAgICBodHRwczovL2RvY3MubGl2ZTJkLmNvbS9jdWJpc20tZWRpdG9yLW1hbnVhbC9zdGFuZGFyZC1wYXJhbWV0b3ItbGlzdC9cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvLyDjg5Hjg7zjg4RJRFxuICBleHBvcnQgY29uc3QgSGl0QXJlYVByZWZpeCA9ICdIaXRBcmVhJztcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFIZWFkID0gJ0hlYWQnO1xuICBleHBvcnQgY29uc3QgSGl0QXJlYUJvZHkgPSAnQm9keSc7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0lkQ29yZSA9ICdQYXJ0czAxQ29yZSc7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybVByZWZpeCA9ICdQYXJ0czAxQXJtXyc7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybUxQcmVmaXggPSAnUGFydHMwMUFybUxfJztcbiAgZXhwb3J0IGNvbnN0IFBhcnRzQXJtUlByZWZpeCA9ICdQYXJ0czAxQXJtUl8nO1xuXG4gIC8vIOODkeODqeODoeODvOOCv0lEXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWCA9ICdQYXJhbUFuZ2xlWCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWSA9ICdQYXJhbUFuZ2xlWSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWiA9ICdQYXJhbUFuZ2xlWic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUxPcGVuID0gJ1BhcmFtRXllTE9wZW4nO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVMU21pbGUgPSAnUGFyYW1FeWVMU21pbGUnO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVST3BlbiA9ICdQYXJhbUV5ZVJPcGVuJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllUlNtaWxlID0gJ1BhcmFtRXllUlNtaWxlJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllQmFsbFggPSAnUGFyYW1FeWVCYWxsWCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxZID0gJ1BhcmFtRXllQmFsbFknO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsRm9ybSA9ICdQYXJhbUV5ZUJhbGxGb3JtJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xZID0gJ1BhcmFtQnJvd0xZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JZID0gJ1BhcmFtQnJvd1JZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xYID0gJ1BhcmFtQnJvd0xYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JYID0gJ1BhcmFtQnJvd1JYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xBbmdsZSA9ICdQYXJhbUJyb3dMQW5nbGUnO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkFuZ2xlID0gJ1BhcmFtQnJvd1JBbmdsZSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMRm9ybSA9ICdQYXJhbUJyb3dMRm9ybSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSRm9ybSA9ICdQYXJhbUJyb3dSRm9ybSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoRm9ybSA9ICdQYXJhbU1vdXRoRm9ybSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoT3BlblkgPSAnUGFyYW1Nb3V0aE9wZW5ZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQ2hlZWsgPSAnUGFyYW1DaGVlayc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVggPSAnUGFyYW1Cb2R5QW5nbGVYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWSA9ICdQYXJhbUJvZHlBbmdsZVknO1xuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVaID0gJ1BhcmFtQm9keUFuZ2xlWic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyZWF0aCA9ICdQYXJhbUJyZWF0aCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybUxBID0gJ1BhcmFtQXJtTEEnO1xuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1SQSA9ICdQYXJhbUFybVJBJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtTEIgPSAnUGFyYW1Bcm1MQic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybVJCID0gJ1BhcmFtQXJtUkInO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYW5kTCA9ICdQYXJhbUhhbmRMJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZFIgPSAnUGFyYW1IYW5kUic7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGcm9udCA9ICdQYXJhbUhhaXJGcm9udCc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJTaWRlID0gJ1BhcmFtSGFpclNpZGUnO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyQmFjayA9ICdQYXJhbUhhaXJCYWNrJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFpckZsdWZmeSA9ICdQYXJhbUhhaXJGbHVmZnknO1xuICBleHBvcnQgY29uc3QgUGFyYW1TaG91bGRlclkgPSAnUGFyYW1TaG91bGRlclknO1xuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WCA9ICdQYXJhbUJ1c3RYJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnVzdFkgPSAnUGFyYW1CdXN0WSc7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJhc2VYID0gJ1BhcmFtQmFzZVgnO1xuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWSA9ICdQYXJhbUJhc2VZJztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTk9ORSA9ICdOT05FOic7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAg44Ot44Kw5Ye65Yqb6Zai5pWw44Gu6Kit5a6aXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vLS0tLS0tLS0tLSDjg63jgrDlh7rlipvjg6zjg5njg6sg6YG45oqe6aCF55uuIOWumue+qSAtLS0tLS0tLS0tXG4vLyDoqbPntLDjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1ZFUkJPU0UgPSAwO1xuLy8g44OH44OQ44OD44Kw44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9ERUJVRyA9IDE7XG4vLyBJbmZv44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9JTkZPID0gMjtcbi8vIOitpuWRiuODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfV0FSTklORyA9IDM7XG4vLyDjgqjjg6njg7zjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0VSUk9SID0gNDtcbi8vIOODreOCsOWHuuWKm+OCquODleioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfT0ZGID0gNTtcblxuLyoqXG4gKiDjg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjgIJcbiAqXG4gKiDlvLfliLbnmoTjgavjg63jgrDlh7rlipvjg6zjg5njg6vjgpLlpInjgYjjgovmmYLjgavlrprnvqnjgpLmnInlirnjgavjgZnjgovjgIJcbiAqIENTTV9MT0dfTEVWRUxfVkVSQk9TRSDvvZ4gQ1NNX0xPR19MRVZFTF9PRkYg44KS6YG45oqe44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMOiBudW1iZXIgPSBDU01fTE9HX0xFVkVMX1ZFUkJPU0U7XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGljdWJpc21tb2RlbHNldHRpbmcgfSBmcm9tICcuL2ljdWJpc21tb2RlbHNldHRpbmcnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtanNvbiB9IGZyb20gJy4vdXRpbHMvY3ViaXNtanNvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtbWFwIH0gZnJvbSAnLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xuaW1wb3J0IGl0ZXJhdG9yID0gY3NtbWFwLml0ZXJhdG9yO1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21Kc29uID0gY3ViaXNtanNvbi5DdWJpc21Kc29uO1xuaW1wb3J0IFZhbHVlID0gY3ViaXNtanNvbi5WYWx1ZTtcbmltcG9ydCBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gaWN1YmlzbW1vZGVsc2V0dGluZy5JQ3ViaXNtTW9kZWxTZXR0aW5nO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiBNb2RlbDNKc29u44Gu44Kt44O85paH5a2X5YiXXG4gICAqL1xuXG4gIC8vIEpTT04gS2V5c1xuICBjb25zdCBWZXJzaW9uID0gJ1ZlcnNpb24nO1xuICBjb25zdCBGaWxlUmVmZXJlbmNlcyA9ICdGaWxlUmVmZXJlbmNlcyc7XG4gIGNvbnN0IEdyb3VwcyA9ICdHcm91cHMnO1xuICBjb25zdCBMYXlvdXQgPSAnTGF5b3V0JztcbiAgY29uc3QgSGl0QXJlYXMgPSAnSGl0QXJlYXMnO1xuXG4gIGNvbnN0IE1vYyA9ICdNb2MnO1xuICBjb25zdCBUZXh0dXJlcyA9ICdUZXh0dXJlcyc7XG4gIGNvbnN0IFBoeXNpY3MgPSAnUGh5c2ljcyc7XG4gIGNvbnN0IFBvc2UgPSAnUG9zZSc7XG4gIGNvbnN0IEV4cHJlc3Npb25zID0gJ0V4cHJlc3Npb25zJztcbiAgY29uc3QgTW90aW9ucyA9ICdNb3Rpb25zJztcblxuICBjb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XG4gIGNvbnN0IE5hbWUgPSAnTmFtZSc7XG4gIGNvbnN0IEZpbGVQYXRoID0gJ0ZpbGUnO1xuICBjb25zdCBJZCA9ICdJZCc7XG4gIGNvbnN0IElkcyA9ICdJZHMnO1xuICBjb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcblxuICAvLyBNb3Rpb25zXG4gIGNvbnN0IElkbGUgPSAnSWRsZSc7XG4gIGNvbnN0IFRhcEJvZHkgPSAnVGFwQm9keSc7XG4gIGNvbnN0IFBpbmNoSW4gPSAnUGluY2hJbic7XG4gIGNvbnN0IFBpbmNoT3V0ID0gJ1BpbmNoT3V0JztcbiAgY29uc3QgU2hha2UgPSAnU2hha2UnO1xuICBjb25zdCBGbGlja0hlYWQgPSAnRmxpY2tIZWFkJztcbiAgY29uc3QgUGFyYW1ldGVyID0gJ1BhcmFtZXRlcic7XG5cbiAgY29uc3QgU291bmRQYXRoID0gJ1NvdW5kJztcbiAgY29uc3QgU291bmREZWxheSA9ICdTb3VuZERlbGF5JztcbiAgY29uc3QgRmFkZUluVGltZSA9ICdGYWRlSW5UaW1lJztcbiAgY29uc3QgRmFkZU91dFRpbWUgPSAnRmFkZU91dFRpbWUnO1xuXG4gIC8vIExheW91dFxuICBjb25zdCBDZW50ZXJYID0gJ0NlbnRlclgnO1xuICBjb25zdCBDZW50ZXJZID0gJ0NlbnRlclknO1xuICBjb25zdCBYID0gJ1gnO1xuICBjb25zdCBZID0gJ1knO1xuICBjb25zdCBXaWR0aCA9ICdXaWR0aCc7XG4gIGNvbnN0IEhlaWdodCA9ICdIZWlnaHQnO1xuXG4gIGNvbnN0IExpcFN5bmMgPSAnTGlwU3luYyc7XG4gIGNvbnN0IEV5ZUJsaW5rID0gJ0V5ZUJsaW5rJztcblxuICBjb25zdCBJbml0UGFyYW1ldGVyID0gJ2luaXRfcGFyYW0nO1xuICBjb25zdCBJbml0UGFydHNWaXNpYmxlID0gJ2luaXRfcGFydHNfdmlzaWJsZSc7XG4gIGNvbnN0IFZhbCA9ICd2YWwnO1xuXG4gIGVudW0gRnJlcXVlc3ROb2RlIHtcbiAgICBGcmVxdWVzdE5vZGVfR3JvdXBzLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhHcm91cHMpXG4gICAgRnJlcXVlc3ROb2RlX01vYywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoTW9jKVxuICAgIEZyZXF1ZXN0Tm9kZV9Nb3Rpb25zLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhNb3Rpb25zKVxuICAgIEZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbnMpXG4gICAgRnJlcXVlc3ROb2RlX1RleHR1cmVzLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhUZXh0dXJlcylcbiAgICBGcmVxdWVzdE5vZGVfUGh5c2ljcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljcylcbiAgICBGcmVxdWVzdE5vZGVfUG9zZSwgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoUG9zZSlcbiAgICBGcmVxdWVzdE5vZGVfSGl0QXJlYXMgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoSGl0QXJlYXMpXG4gIH1cblxuICAvKipcbiAgICogTW9kZWwzSnNvbuODkeODvOOCteODvFxuICAgKlxuICAgKiBtb2RlbDMuanNvbuODleOCoeOCpOODq+OCkuODkeODvOOCueOBl+OBpuWApOOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gZXh0ZW5kcyBJQ3ViaXNtTW9kZWxTZXR0aW5nIHtcbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgTW9kZWwzSnNvbuOCkuODkOOCpOODiOmFjeWIl+OBqOOBl+OBpuiqreOBv+i+vOOCk+OBoOODh+ODvOOCv+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplICAgICAgTW9kZWwzSnNvbuOBruODh+ODvOOCv+OCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcblxuICAgICAgaWYgKHRoaXMuX2pzb24pIHtcbiAgICAgICAgdGhpcy5fanNvblZhbHVlID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKTtcblxuICAgICAgICAvLyDpoIbnlarjga9lbnVtIEZyZXF1ZXN0Tm9kZeOBqOS4gOiHtOOBleOBm+OCi1xuICAgICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2sodGhpcy5fanNvbi5nZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhHcm91cHMpKTtcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTW9jKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb3Rpb25zKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9ucylcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGV4dHVyZXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3MpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2UpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgICB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEhpdEFyZWFzKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG5cbiAgICAgIHRoaXMuX2pzb25WYWx1ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3ViaXNtSnNvbuOCquODluOCuOOCp+OCr+ODiOOCkuWPluW+l+OBmeOCi1xuICAgICAqXG4gICAgICogQHJldHVybiBDdWJpc21Kc29uXG4gICAgICovXG4gICAgcHVibGljIEdldEpzb24oKTogQ3ViaXNtSnNvbiB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb2RlbEZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdE1vZGVsRmlsZSgpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb2MpLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIOODhuOCr+OCueODgeODo+OBruaVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUZXh0dXJlQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0VGV4dHVyZUZpbGVzKCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcykuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldFRleHR1cmVEaXJlY3RvcnkoKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VGV4dHVyZUZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldEhpdEFyZWFzQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0SGl0QXJlYXMoKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKS5nZXRTaXplKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSUTjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga5pbmRleFxuICAgICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSURcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SGl0QXJlYUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SGl0QXJlYU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGh5c2ljc0ZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdFBoeXNpY3NGaWxlKCkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1BoeXNpY3MpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQb3NlRmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0UG9zZUZpbGUoKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Qb3NlKS5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFeHByZXNzaW9uQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0RXhwcmVzc2lvbkZpbGUoKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucylcbiAgICAgICAgLmdldFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjgpLorZjliKXjgZnjgovlkI3liY3vvIjliKXlkI3vvInjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDooajmg4Xjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXhwcmVzc2lvbk5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldEV4cHJlc3Npb25GaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVQYXRoKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uR3JvdXBDb3VudCgpOiBudW1iZXIge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cHMoKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0S2V5cygpXG4gICAgICAgIC5nZXRTaXplKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkdyb3VwTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBzKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgICAgLmdldEtleXMoKVxuICAgICAgICAuYXQoaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBq+WQq+OBvuOCjOOCi+ODouODvOOCt+ODp+ODs+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uQ291bnQoZ3JvdXBOYW1lOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRTaXplKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kw44Or44O844OX5ZCN44Go44Kk44Oz44OH44OD44Kv44K55YCk44GL44KJ44Oi44O844K344On44Oz44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICAgKiBAcGFyYW0gaW5kZXggICAgIOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkZpbGVOYW1lKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBOYW1lKGdyb3VwTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVBhdGgpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOOCteOCpuODs+ODieODleOCoeOCpOODq+OBruWQjeWJjVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uU291bmRGaWxlKGdyb3VwTmFtZSwgaW5kZXgpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNvdW5kUGF0aClcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW+l+WIsOWKqOS9nOmfs+mikeW7tui/n1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUgICDliqjkvZznu4TlkI1cbiAgICAgKiBAcGFyYW0gaW5kZXggICDliqjkvZzntKLlvJVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uU291bmREZWxheShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvblNvdW5kRGVsYXkoZ3JvdXBOYW1lLCBpbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTb3VuZERlbGF5KVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkZhZGVJbihncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgICByZXR1cm4gLTEuMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz57WC5LqG5pmC44Gu44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uRmFkZU91dChncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgICByZXR1cm4gLTEuMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmcge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RVc2VyRGF0YUZpbGUoKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxheW91dCBpbmZvcm1hdGlvblxuICAgICAqIEBwYXJhbSBvdXRMYXlvdXRNYXAgSW5zdGFuY2Ugb2YgY3NtTWFwIGNsYXNzXG4gICAgICogQHJldHVybiB0cnVlIExheW91dCBpbmZvcm1hdGlvbiBleGlzdHNcbiAgICAgKiBAcmV0dXJuIGZhbHNlIExheW91dCBpbmZvcm1hdGlvbiBkb2VzIG5vdCBleGlzdFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMYXlvdXRNYXAob3V0TGF5b3V0TWFwOiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogYm9vbGVhbiB7XG4gICAgICAvLyDlrZjlnKjjgZfjgarjgYTopoHntKDjgavjgqLjgq/jgrvjgrnjgZnjgovjgajjgqjjg6njg7zjgavjgarjgovjgZ/jgoFWYWx1ZeOBjG51bGzjga7loLTlkIjjga9udWxs44KS5Luj5YWl44GZ44KLXG4gICAgICBjb25zdCBtYXA6IGNzbU1hcDxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhMYXlvdXQpXG4gICAgICAgIC5nZXRNYXAoKTtcblxuICAgICAgaWYgKG1hcCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJldCA9IGZhbHNlO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gbWFwLmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbChtYXAuZW5kKCkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICBvdXRMYXlvdXRNYXAuc2V0VmFsdWUoaXRlLnB0cigpLmZpcnN0LCBpdGUucHRyKCkuc2Vjb25kLnRvRmxvYXQoKSk7XG4gICAgICAgIHJldCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXIge1xuICAgICAgaWYgKCF0aGlzLmlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgbGV0IG51bSA9IDA7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcbiAgICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmspIHtcbiAgICAgICAgICBudW0gPSByZWZJXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZHMpXG4gICAgICAgICAgICAuZ2V0VmVjdG9yKClcbiAgICAgICAgICAgIC5nZXRTaXplKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga5JROOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAgICovXG4gICAgcHVibGljIGdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGluaykge1xuICAgICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICByZWZJXG4gICAgICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkcylcbiAgICAgICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIGxldCBudW0gPSAwO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IExpcFN5bmMpIHtcbiAgICAgICAgICBudW0gPSByZWZJXG4gICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZHMpXG4gICAgICAgICAgICAuZ2V0VmVjdG9yKClcbiAgICAgICAgICAgIC5nZXRTaXplKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMaXBTeW5jUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICAgIGlmICghdGhpcy5pc0V4aXN0TGlwU3luY1BhcmFtZXRlcnMoKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IExpcFN5bmMpIHtcbiAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgcmVmSVxuICAgICAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZHMpXG4gICAgICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHByaXZhdGUgaXNFeGlzdE1vZGVsRmlsZSgpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW9jKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OG44Kv44K544OB44Oj44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0VGV4dHVyZUZpbGVzKCk6IGJvb2xlYW4ge1xuICAgICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoXG4gICAgICAgIEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXNcbiAgICAgICk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW9k+OBn+OCiuWIpOWumuOBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHByaXZhdGUgaXNFeGlzdEhpdEFyZWFzKCk6IGJvb2xlYW4ge1xuICAgICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoXG4gICAgICAgIEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfSGl0QXJlYXNcbiAgICAgICk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhua8lOeul+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHByaXZhdGUgaXNFeGlzdFBoeXNpY3NGaWxlKCk6IGJvb2xlYW4ge1xuICAgICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9QaHlzaWNzKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Od44O844K66Kit5a6a44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0UG9zZUZpbGUoKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1Bvc2UpO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RFeHByZXNzaW9uRmlsZSgpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KFxuICAgICAgICBGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zXG4gICAgICApO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Hcm91cHMoKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Tb3VuZEZpbGUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291bmRQYXRoKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yik5pat5piv5ZCm5a2Y5ZyoIFNvdW5kRGVsYXkg6ZSuXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZSDliqjkvZznu4TlkI1cbiAgICAgKiBAcGFyYW0gaW5kZXgg5Yqo5L2c57Si5byVXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Tb3VuZERlbGF5KGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNvdW5kRGVsYXkpO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uRmFkZUluKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpO1xuICAgICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uRmFkZU91dChncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSk7XG4gICAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXJEYXRh44Gu44OV44Kh44Kk44Or5ZCN44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0VXNlckRhdGFGaWxlKCk6IGJvb2xlYW4ge1xuICAgICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKTtcbiAgICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog55uu44Gx44Gh44Gr5a++5b+c5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCk6IGJvb2xlYW4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmlzTnVsbCgpIHx8XG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNFcnJvcigpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgICAgKytpXG4gICAgICApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGlua1xuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oq44OD44OX44K344Oz44Kv44Gr5a++5b+c5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0V4aXN0TGlwU3luY1BhcmFtZXRlcnMoKTogYm9vbGVhbiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNOdWxsKCkgfHxcbiAgICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc0Vycm9yKClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgICAgKytpXG4gICAgICApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfanNvbjogQ3ViaXNtSnNvbjtcbiAgICBwcml2YXRlIF9qc29uVmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT47XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOWRvOWQuOapn+iDvVxuICAgKlxuICAgKiDlkbzlkLjmqZ/og73jgpLmj5DkvpvjgZnjgovjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21CcmVhdGgge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IEN1YmlzbUJyZWF0aCB7XG4gICAgICByZXR1cm4gbmV3IEN1YmlzbUJyZWF0aCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgICAqIEBwYXJhbSBpbnN0YW5jZSDlr77osaHjga5DdWJpc21CcmVhdGhcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtQnJlYXRoKTogdm9pZCB7XG4gICAgICBpZiAoaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgICBpbnN0YW5jZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5ZG85ZC444Gu44OR44Op44Oh44O844K/44Gu57SQ44Gl44GRXG4gICAgICogQHBhcmFtIGJyZWF0aFBhcmFtZXRlcnMg5ZG85ZC444KS57SQ44Gl44GR44Gf44GE44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIHNldFBhcmFtZXRlcnMoXG4gICAgICBicmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT5cbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMgPSBicmVhdGhQYXJhbWV0ZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWRvOWQuOOBq+e0kOOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlcnMoKTogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+IHtcbiAgICAgIHJldHVybiB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLl9jdXJyZW50VGltZSArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgICBjb25zdCB0OiBudW1iZXIgPSB0aGlzLl9jdXJyZW50VGltZSAqIDIuMCAqIDMuMTQxNTk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYnJlYXRoUGFyYW1ldGVycy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICBjb25zdCBkYXRhOiBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gdGhpcy5fYnJlYXRoUGFyYW1ldGVycy5hdChpKTtcblxuICAgICAgICBtb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgZGF0YS5wYXJhbWV0ZXJJZCxcbiAgICAgICAgICBkYXRhLm9mZnNldCArIGRhdGEucGVhayAqIE1hdGguc2luKHQgLyBkYXRhLmN5Y2xlKSxcbiAgICAgICAgICBkYXRhLndlaWdodFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMC4wO1xuICAgIH1cblxuICAgIF9icmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT47IC8vIOWRvOWQuOOBq+OBsuOCguOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruODquOCueODiFxuICAgIF9jdXJyZW50VGltZTogbnVtYmVyOyAvLyDnqY3nrpfmmYLplpNb56eSXVxuICB9XG5cbiAgLyoqXG4gICAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+aDheWgsVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEJyZWF0aFBhcmFtZXRlckRhdGEge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXG4gICAgICogQHBhcmFtIG9mZnNldCAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu44Kq44OV44K744OD44OIXG4gICAgICogQHBhcmFtIHBlYWsgICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXG4gICAgICogQHBhcmFtIGN5Y2xlICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXG4gICAgICogQHBhcmFtIHdlaWdodCAgICAgICAg44OR44Op44Oh44O844K/44G444Gu6YeN44G/XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICBwYXJhbWV0ZXJJZD86IEN1YmlzbUlkSGFuZGxlLFxuICAgICAgb2Zmc2V0PzogbnVtYmVyLFxuICAgICAgcGVhaz86IG51bWJlcixcbiAgICAgIGN5Y2xlPzogbnVtYmVyLFxuICAgICAgd2VpZ2h0PzogbnVtYmVyXG4gICAgKSB7XG4gICAgICB0aGlzLnBhcmFtZXRlcklkID0gcGFyYW1ldGVySWQgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtZXRlcklkO1xuICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgPT0gdW5kZWZpbmVkID8gMC4wIDogb2Zmc2V0O1xuICAgICAgdGhpcy5wZWFrID0gcGVhayA9PSB1bmRlZmluZWQgPyAwLjAgOiBwZWFrO1xuICAgICAgdGhpcy5jeWNsZSA9IGN5Y2xlID09IHVuZGVmaW5lZCA/IDAuMCA6IGN5Y2xlO1xuICAgICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQgPT0gdW5kZWZpbmVkID8gMC4wIDogd2VpZ2h0O1xuICAgIH1cblxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZTsgLy8g5ZG85ZC444KS44Gy44KC44Gl44GR44KL44OR44Op44Oh44O844K/SURcXFxuICAgIG9mZnNldDogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcbiAgICBwZWFrOiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBrumrmOOBlVxuICAgIGN5Y2xlOiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruWRqOacn1xuICAgIHdlaWdodDogbnVtYmVyOyAvLyDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBpY3ViaXNtbW9kZWxzZXR0aW5nIH0gZnJvbSAnLi4vaWN1YmlzbW1vZGVsc2V0dGluZyc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IElDdWJpc21Nb2RlbFNldHRpbmcgPSBpY3ViaXNtbW9kZWxzZXR0aW5nLklDdWJpc21Nb2RlbFNldHRpbmc7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog6Ieq5YuV44G+44Gw44Gf44GN5qmf6IO9XG4gICAqXG4gICAqIOiHquWLleOBvuOBsOOBn+OBjeapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbUV5ZUJsaW5rIHtcbiAgICAvKipcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcbiAgICAgKiBAcGFyYW0gbW9kZWxTZXR0aW5nIOODouODh+ODq+OBruioreWumuaDheWgsVxuICAgICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAgICogQG5vdGUg5byV5pWw44GMTlVMTOOBruWgtOWQiOOAgeODkeODqeODoeODvOOCv0lE44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GE56m644Gu44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KL44CCXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoXG4gICAgICBtb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcgPSBudWxsXG4gICAgKTogQ3ViaXNtRXllQmxpbmsge1xuICAgICAgcmV0dXJuIG5ldyBDdWJpc21FeWVCbGluayhtb2RlbFNldHRpbmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgICAqIEBwYXJhbSBleWVCbGluayDlr77osaHjga5DdWJpc21FeWVCbGlua1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGV5ZUJsaW5rOiBDdWJpc21FeWVCbGluayk6IHZvaWQge1xuICAgICAgaWYgKGV5ZUJsaW5rICE9IG51bGwpIHtcbiAgICAgICAgZXllQmxpbmsgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOBvuOBsOOBn+OBjeOBrumWk+malOOBruioreWumlxuICAgICAqIEBwYXJhbSBibGlua2luZ0ludGVydmFsIOOBvuOBsOOBn+OBjeOBrumWk+malOOBruaZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHNldEJsaW5raW5nSW50ZXJ2YWwoYmxpbmtpbmdJbnRlcnZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyA9IGJsaW5raW5nSW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44G+44Gw44Gf44GN44Gu44Oi44O844K344On44Oz44Gu6Kmz57Sw6Kit5a6aXG4gICAgICogQHBhcmFtIGNsb3NpbmcgICDjgb7jgbbjgZ/jgpLplonjgZjjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgICAqIEBwYXJhbSBjbG9zZWQgICAg44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgICAgKiBAcGFyYW0gb3BlbmluZyAgIOOBvuOBtuOBn+OCkumWi+OBj+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHNldEJsaW5raW5nU2V0dGluZyhcbiAgICAgIGNsb3Npbmc6IG51bWJlcixcbiAgICAgIGNsb3NlZDogbnVtYmVyLFxuICAgICAgb3BlbmluZzogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IGNsb3Npbmc7XG4gICAgICB0aGlzLl9jbG9zZWRTZWNvbmRzID0gY2xvc2VkO1xuICAgICAgdGhpcy5fb3BlbmluZ1NlY29uZHMgPSBvcGVuaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOBvuOBsOOBn+OBjeOBleOBm+OCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OI44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcklkcyDjg5Hjg6njg6Hjg7zjgr/jga5JROOBruODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJJZHMocGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KTogdm9pZCB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBwYXJhbWV0ZXJJZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44G+44Gw44Gf44GN44GV44Gb44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4jjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlcklkcygpOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+IHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJJZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgICAgbGV0IHBhcmFtZXRlclZhbHVlOiBudW1iZXI7XG4gICAgICBsZXQgdCA9IDAuMDtcblxuICAgICAgc3dpdGNoICh0aGlzLl9ibGlua2luZ1N0YXRlKSB7XG4gICAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfQ2xvc2luZzpcbiAgICAgICAgICB0ID1cbiAgICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgIHRoaXMuX2Nsb3NpbmdTZWNvbmRzO1xuXG4gICAgICAgICAgaWYgKHQgPj0gMS4wKSB7XG4gICAgICAgICAgICB0ID0gMS4wO1xuICAgICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3NlZDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMCAtIHQ7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zZWQ6XG4gICAgICAgICAgdCA9XG4gICAgICAgICAgICAodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgICB0aGlzLl9jbG9zZWRTZWNvbmRzO1xuXG4gICAgICAgICAgaWYgKHQgPj0gMS4wKSB7XG4gICAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfT3BlbmluZztcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDAuMDtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX09wZW5pbmc6XG4gICAgICAgICAgdCA9XG4gICAgICAgICAgICAodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcztcblxuICAgICAgICAgIGlmICh0ID49IDEuMCkge1xuICAgICAgICAgICAgdCA9IDEuMDtcbiAgICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDtcbiAgICAgICAgICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSB0aGlzLmRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSB0O1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw6XG4gICAgICAgICAgaWYgKHRoaXMuX25leHRCbGlua2luZ1RpbWUgPCB0aGlzLl91c2VyVGltZVNlY29uZHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zaW5nO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0ludGVydmFsO1xuICAgICAgICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSB0aGlzLmRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk7XG5cbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKCFDdWJpc21FeWVCbGluay5DbG9zZUlmWmVybykge1xuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IC1wYXJhbWV0ZXJWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX3BhcmFtZXRlcklkcy5hdChpKSwgcGFyYW1ldGVyVmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBtb2RlbFNldHRpbmcg44Oi44OH44Or44Gu6Kit5a6a5oOF5aCxXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsU2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZykge1xuICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0ZpcnN0O1xuICAgICAgdGhpcy5fbmV4dEJsaW5raW5nVGltZSA9IDAuMDtcbiAgICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICAgIHRoaXMuX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzID0gNC4wO1xuICAgICAgdGhpcy5fY2xvc2luZ1NlY29uZHMgPSAwLjE7XG4gICAgICB0aGlzLl9jbG9zZWRTZWNvbmRzID0gMC4wNTtcbiAgICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzID0gMC4xNTtcbiAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG5cbiAgICAgIGlmIChtb2RlbFNldHRpbmcgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wdXNoQmFjayhtb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5qyh44Gu556s44GN44Gu44K/44Kk44Of44Oz44Kw44Gu5rG65a6aXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOasoeOBruOBvuOBsOOBn+OBjeOCkuihjOOBhuaZguWIu1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk6IG51bWJlciB7XG4gICAgICBjb25zdCByOiBudW1iZXIgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICsgciAqICgyLjAgKiB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyAtIDEuMClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgX2JsaW5raW5nU3RhdGU6IG51bWJlcjsgLy8g54++5Zyo44Gu54q25oWLXG4gICAgX3BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g5pON5L2c5a++6LGh44Gu44OR44Op44Oh44O844K/44GuSUTjga7jg6rjgrnjg4hcbiAgICBfbmV4dEJsaW5raW5nVGltZTogbnVtYmVyOyAvLyDmrKHjga7jgb7jgbDjgZ/jgY3jga7mmYLliLtb56eSXVxuICAgIF9zdGF0ZVN0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g54++5Zyo44Gu54q25oWL44GM6ZaL5aeL44GX44Gf5pmC5Yi7W+enkl1cbiAgICBfYmxpbmtpbmdJbnRlcnZhbFNlY29uZHM6IG51bWJlcjsgLy8g44G+44Gw44Gf44GN44Gu6ZaT6ZqUW+enkl1cbiAgICBfY2xvc2luZ1NlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaJ44GY44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgICBfY2xvc2VkU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbbjgZ/jgpLplonjgZjjgabjgYTjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgIF9vcGVuaW5nU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbbjgZ/jgpLplovjgY/li5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cblxuICAgIC8qKlxuICAgICAqIElE44Gn5oyH5a6a44GV44KM44Gf55uu44Gu44OR44Op44Oh44O844K/44GM44CBMOOBruOBqOOBjeOBq+mWieOBmOOCi+OBquOCiSB0cnVlIOOAgTHjga7mmYLjgavplonjgZjjgovjgarjgokgZmFsc2Ug44CCXG4gICAgICovXG4gICAgc3RhdGljIHJlYWRvbmx5IENsb3NlSWZaZXJvOiBib29sZWFuID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgb7jgbDjgZ/jgY3jga7nirbmhYtcbiAgICpcbiAgICog44G+44Gw44Gf44GN44Gu54q25oWL44KS6KGo44GZ5YiX5oyZ5Z6LXG4gICAqL1xuICBleHBvcnQgZW51bSBFeWVTdGF0ZSB7XG4gICAgRXllU3RhdGVfRmlyc3QgPSAwLCAvLyDliJ3mnJ/nirbmhYtcbiAgICBFeWVTdGF0ZV9JbnRlcnZhbCwgLy8g44G+44Gw44Gf44GN44GX44Gm44GE44Gq44GE54q25oWLXG4gICAgRXllU3RhdGVfQ2xvc2luZywgLy8g44G+44G244Gf44GM6ZaJ44GY44Gm44GE44GP6YCU5Lit44Gu54q25oWLXG4gICAgRXllU3RhdGVfQ2xvc2VkLCAvLyDjgb7jgbbjgZ/jgYzplonjgZjjgabjgYTjgovnirbmhYtcbiAgICBFeWVTdGF0ZV9PcGVuaW5nIC8vIOOBvuOBtuOBn+OBjOmWi+OBhOOBpuOBhOOBj+mAlOS4reOBrueKtuaFi1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtanNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBpdGVyYXRvciA9IGNzbXZlY3Rvci5pdGVyYXRvcjtcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtSnNvbiA9IGN1YmlzbWpzb24uQ3ViaXNtSnNvbjtcbmltcG9ydCBWYWx1ZSA9IGN1YmlzbWpzb24uVmFsdWU7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgY29uc3QgRXBzaWxvbiA9IDAuMDAxO1xuICBjb25zdCBEZWZhdWx0RmFkZUluU2Vjb25kcyA9IDAuNTtcblxuICAvLyBQb3NlLmpzb27jga7jgr/jgrBcbiAgY29uc3QgRmFkZUluID0gJ0ZhZGVJblRpbWUnO1xuICBjb25zdCBMaW5rID0gJ0xpbmsnO1xuICBjb25zdCBHcm91cHMgPSAnR3JvdXBzJztcbiAgY29uc3QgSWQgPSAnSWQnO1xuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrppcbiAgICpcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu566h55CG44Go6Kit5a6a44KS6KGM44GG44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtUG9zZSB7XG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAgICogQHBhcmFtIHBvc2UzanNvbiBwb3NlMy5qc29u44Gu44OH44O844K/XG4gICAgICogQHBhcmFtIHNpemUgcG9zZTMuanNvbuOBruODh+ODvOOCv+OBruOCteOCpOOCultieXRlXVxuICAgICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUocG9zZTNqc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtUG9zZSB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVBvc2UgPSBuZXcgQ3ViaXNtUG9zZSgpO1xuICAgICAgY29uc3QganNvbjogQ3ViaXNtSnNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKHBvc2UzanNvbiwgc2l6ZSk7XG4gICAgICBjb25zdCByb290OiBWYWx1ZSA9IGpzb24uZ2V0Um9vdCgpO1xuXG4gICAgICAvLyDjg5Xjgqfjg7zjg4nmmYLplpPjga7mjIflrppcbiAgICAgIGlmICghcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJbikuaXNOdWxsKCkpIHtcbiAgICAgICAgcmV0Ll9mYWRlVGltZVNlY29uZHMgPSByb290XG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluKVxuICAgICAgICAgIC50b0Zsb2F0KERlZmF1bHRGYWRlSW5TZWNvbmRzKTtcblxuICAgICAgICBpZiAocmV0Ll9mYWRlVGltZVNlY29uZHMgPD0gMC4wKSB7XG4gICAgICAgICAgcmV0Ll9mYWRlVGltZVNlY29uZHMgPSBEZWZhdWx0RmFkZUluU2Vjb25kcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcbiAgICAgIGNvbnN0IHBvc2VMaXN0SW5mbzogVmFsdWUgPSByb290LmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKTtcbiAgICAgIGNvbnN0IHBvc2VDb3VudDogbnVtYmVyID0gcG9zZUxpc3RJbmZvLmdldFNpemUoKTtcblxuICAgICAgZm9yIChsZXQgcG9zZUluZGV4ID0gMDsgcG9zZUluZGV4IDwgcG9zZUNvdW50OyArK3Bvc2VJbmRleCkge1xuICAgICAgICBjb25zdCBpZExpc3RJbmZvOiBWYWx1ZSA9IHBvc2VMaXN0SW5mby5nZXRWYWx1ZUJ5SW5kZXgocG9zZUluZGV4KTtcbiAgICAgICAgY29uc3QgaWRDb3VudDogbnVtYmVyID0gaWRMaXN0SW5mby5nZXRTaXplKCk7XG4gICAgICAgIGxldCBncm91cENvdW50ID0gMDtcblxuICAgICAgICBmb3IgKGxldCBncm91cEluZGV4ID0gMDsgZ3JvdXBJbmRleCA8IGlkQ291bnQ7ICsrZ3JvdXBJbmRleCkge1xuICAgICAgICAgIGNvbnN0IHBhcnRJbmZvOiBWYWx1ZSA9IGlkTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KGdyb3VwSW5kZXgpO1xuICAgICAgICAgIGNvbnN0IHBhcnREYXRhOiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgIHBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoSWQpLmdldFJhd1N0cmluZygpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHBhcnREYXRhLnBhcnRJZCA9IHBhcmFtZXRlcklkO1xuXG4gICAgICAgICAgLy8g44Oq44Oz44Kv44GZ44KL44OR44O844OE44Gu6Kit5a6aXG4gICAgICAgICAgaWYgKCFwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKExpbmspLmlzTnVsbCgpKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rTGlzdEluZm86IFZhbHVlID0gcGFydEluZm8uZ2V0VmFsdWVCeVN0cmluZyhMaW5rKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtDb3VudDogbnVtYmVyID0gbGlua0xpc3RJbmZvLmdldFNpemUoKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgbGlua0luZGV4ID0gMDsgbGlua0luZGV4IDwgbGlua0NvdW50OyArK2xpbmtJbmRleCkge1xuICAgICAgICAgICAgICBjb25zdCBsaW5rUGFydDogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcbiAgICAgICAgICAgICAgY29uc3QgbGlua0lkOiBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgICAgICBsaW5rTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KGxpbmtJbmRleCkuZ2V0U3RyaW5nKClcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICBsaW5rUGFydC5wYXJ0SWQgPSBsaW5rSWQ7XG5cbiAgICAgICAgICAgICAgcGFydERhdGEubGluay5wdXNoQmFjayhsaW5rUGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0Ll9wYXJ0R3JvdXBzLnB1c2hCYWNrKHBhcnREYXRhLmNsb25lKCkpO1xuXG4gICAgICAgICAgKytncm91cENvdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0Ll9wYXJ0R3JvdXBDb3VudHMucHVzaEJhY2soZ3JvdXBDb3VudCk7XG4gICAgICB9XG5cbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pO1xuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xuICAgICAqIEBwYXJhbSBwb3NlIOWvvuixoeOBrkN1YmlzbVBvc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShwb3NlOiBDdWJpc21Qb3NlKTogdm9pZCB7XG4gICAgICBpZiAocG9zZSAhPSBudWxsKSB7XG4gICAgICAgIHBvc2UgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICAvLyDliY3lm57jga7jg6Ljg4fjg6vjgajlkIzjgZjjgafjgarjgYTloLTlkIjjga/liJ3mnJ/ljJbjgYzlv4XopoFcbiAgICAgIGlmIChtb2RlbCAhPSB0aGlzLl9sYXN0TW9kZWwpIHtcbiAgICAgICAgLy8g44OR44Op44Oh44O844K/44Kk44Oz44OH44OD44Kv44K544Gu5Yid5pyf5YyWXG4gICAgICAgIHRoaXMucmVzZXQobW9kZWwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9sYXN0TW9kZWwgPSBtb2RlbDtcblxuICAgICAgLy8g6Kit5a6a44GL44KJ5pmC6ZaT44KS5aSJ5pu044GZ44KL44Go44CB57WM6YGO5pmC6ZaT44GM44Oe44Kk44OK44K544Gr44Gq44KL5LqL44GM44GC44KL44Gu44Gn44CB57WM6YGO5pmC6ZaTMOOBqOOBl+OBpuWvvuW/nFxuICAgICAgaWYgKGRlbHRhVGltZVNlY29uZHMgPCAwLjApIHtcbiAgICAgICAgZGVsdGFUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICAgIH1cblxuICAgICAgbGV0IGJlZ2luSW5kZXggPSAwO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcnRHcm91cENvdW50cy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJ0R3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3VwQ291bnRzLmF0KGkpO1xuXG4gICAgICAgIHRoaXMuZG9GYWRlKG1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzLCBiZWdpbkluZGV4LCBwYXJ0R3JvdXBDb3VudCk7XG5cbiAgICAgICAgYmVnaW5JbmRleCArPSBwYXJ0R3JvdXBDb3VudDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb3B5UGFydE9wYWNpdGllcyhtb2RlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KGo56S644KS5Yid5pyf5YyWXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBub3RlIOS4jemAj+aYjuW6puOBruWIneacn+WApOOBjDDjgafjgarjgYTjg5Hjg6njg6Hjg7zjgr/jga/jgIHkuI3pgI/mmI7luqbjgpLvvJHjgavoqK3lrprjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXQobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgICBsZXQgYmVnaW5JbmRleCA9IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFydEdyb3VwQ291bnRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwQ291bnQ6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cENvdW50cy5hdChpKTtcblxuICAgICAgICBmb3IgKGxldCBqOiBudW1iZXIgPSBiZWdpbkluZGV4OyBqIDwgYmVnaW5JbmRleCArIGdyb3VwQ291bnQ7ICsraikge1xuICAgICAgICAgIHRoaXMuX3BhcnRHcm91cHMuYXQoaikuaW5pdGlhbGl6ZShtb2RlbCk7XG5cbiAgICAgICAgICBjb25zdCBwYXJ0c0luZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLnBhcnRJbmRleDtcbiAgICAgICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLnBhcmFtZXRlckluZGV4O1xuXG4gICAgICAgICAgaWYgKHBhcnRzSW5kZXggPCAwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgaiA9PSBiZWdpbkluZGV4ID8gMS4wIDogMC4wKTtcbiAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgICAgICAgICBwYXJhbUluZGV4LFxuICAgICAgICAgICAgaiA9PSBiZWdpbkluZGV4ID8gMS4wIDogMC4wXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5saW5rLmdldFNpemUoKTsgKytrKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJ0R3JvdXBzXG4gICAgICAgICAgICAgIC5hdChqKVxuICAgICAgICAgICAgICAubGluay5hdChrKVxuICAgICAgICAgICAgICAuaW5pdGlhbGl6ZShtb2RlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYmVnaW5JbmRleCArPSBncm91cENvdW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOCkuOCs+ODlOODvFxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqL1xuICAgIHB1YmxpYyBjb3B5UGFydE9wYWNpdGllcyhtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBncm91cEluZGV4ID0gMDtcbiAgICAgICAgZ3JvdXBJbmRleCA8IHRoaXMuX3BhcnRHcm91cHMuZ2V0U2l6ZSgpO1xuICAgICAgICArK2dyb3VwSW5kZXhcbiAgICAgICkge1xuICAgICAgICBjb25zdCBwYXJ0RGF0YTogUGFydERhdGEgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpO1xuXG4gICAgICAgIGlmIChwYXJ0RGF0YS5saW5rLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICAgICAgY29udGludWU7IC8vIOmAo+WLleOBmeOCi+ODkeODqeODoeODvOOCv+OBr+OBquOBhFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFydEluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpLnBhcnRJbmRleDtcbiAgICAgICAgY29uc3Qgb3BhY2l0eTogbnVtYmVyID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleCk7XG5cbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgbGlua0luZGV4ID0gMDtcbiAgICAgICAgICBsaW5rSW5kZXggPCBwYXJ0RGF0YS5saW5rLmdldFNpemUoKTtcbiAgICAgICAgICArK2xpbmtJbmRleFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBsaW5rUGFydDogUGFydERhdGEgPSBwYXJ0RGF0YS5saW5rLmF0KGxpbmtJbmRleCk7XG4gICAgICAgICAgY29uc3QgbGlua1BhcnRJbmRleDogbnVtYmVyID0gbGlua1BhcnQucGFydEluZGV4O1xuXG4gICAgICAgICAgaWYgKGxpbmtQYXJ0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgobGlua1BhcnRJbmRleCwgb3BhY2l0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjg4Tjga7jg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjgIJcbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICAgKiBAcGFyYW0gYmVnaW5JbmRleCDjg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lhYjpoK3jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gcGFydEdyb3VwQ291bnQg44OV44Kn44O844OJ5pON5L2c44KS6KGM44GG44OR44O844OE44Kw44Or44O844OX44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGRvRmFkZShcbiAgICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICAgIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcixcbiAgICAgIGJlZ2luSW5kZXg6IG51bWJlcixcbiAgICAgIHBhcnRHcm91cENvdW50OiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIGxldCB2aXNpYmxlUGFydEluZGV4ID0gLTE7XG4gICAgICBsZXQgbmV3T3BhY2l0eSA9IDEuMDtcblxuICAgICAgY29uc3QgcGhpID0gMC41O1xuICAgICAgY29uc3QgYmFja09wYWNpdHlUaHJlc2hvbGQgPSAwLjE1O1xuXG4gICAgICAvLyDnj77lnKjjgIHooajnpLrnirbmhYvjgavjgarjgaPjgabjgYTjgovjg5Hjg7zjg4TjgpLlj5blvpdcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IGJlZ2luSW5kZXg7IGkgPCBiZWdpbkluZGV4ICsgcGFydEdyb3VwQ291bnQ7ICsraSkge1xuICAgICAgICBjb25zdCBwYXJ0SW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaSkucGFydEluZGV4O1xuICAgICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcmFtZXRlckluZGV4O1xuXG4gICAgICAgIGlmIChtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1JbmRleCkgPiBFcHNpbG9uKSB7XG4gICAgICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmlzaWJsZVBhcnRJbmRleCA9IGk7XG4gICAgICAgICAgbmV3T3BhY2l0eSA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXgpO1xuXG4gICAgICAgICAgLy8g5paw44GX44GE5LiN6YCP5piO5bqm44KS6KiI566XXG4gICAgICAgICAgbmV3T3BhY2l0eSArPSBkZWx0YVRpbWVTZWNvbmRzIC8gdGhpcy5fZmFkZVRpbWVTZWNvbmRzO1xuXG4gICAgICAgICAgaWYgKG5ld09wYWNpdHkgPiAxLjApIHtcbiAgICAgICAgICAgIG5ld09wYWNpdHkgPSAxLjA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh2aXNpYmxlUGFydEluZGV4IDwgMCkge1xuICAgICAgICB2aXNpYmxlUGFydEluZGV4ID0gMDtcbiAgICAgICAgbmV3T3BhY2l0eSA9IDEuMDtcbiAgICAgIH1cblxuICAgICAgLy8g6KGo56S644OR44O844OE44CB6Z2e6KGo56S644OR44O844OE44Gu5LiN6YCP5piO5bqm44KS6Kit5a6a44GZ44KLXG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBiZWdpbkluZGV4OyBpIDwgYmVnaW5JbmRleCArIHBhcnRHcm91cENvdW50OyArK2kpIHtcbiAgICAgICAgY29uc3QgcGFydHNJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XG5cbiAgICAgICAgLy8g6KGo56S644OR44O844OE44Gu6Kit5a6aXG4gICAgICAgIGlmICh2aXNpYmxlUGFydEluZGV4ID09IGkpIHtcbiAgICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgbmV3T3BhY2l0eSk7IC8vIOWFiOOBq+ioreWumlxuICAgICAgICB9XG4gICAgICAgIC8vIOmdnuihqOekuuODkeODvOODhOOBruioreWumlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBsZXQgb3BhY2l0eTogbnVtYmVyID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgpO1xuICAgICAgICAgIGxldCBhMTogbnVtYmVyOyAvLyDoqIjnrpfjgavjgojjgaPjgabmsYLjgoHjgonjgozjgovkuI3pgI/mmI7luqZcblxuICAgICAgICAgIGlmIChuZXdPcGFjaXR5IDwgcGhpKSB7XG4gICAgICAgICAgICBhMSA9IChuZXdPcGFjaXR5ICogKHBoaSAtIDEpKSAvIHBoaSArIDEuMDsgLy8gKDAsMSksKHBoaSxwaGkp44KS6YCa44KL55u057ea5byPXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGExID0gKCgxIC0gbmV3T3BhY2l0eSkgKiBwaGkpIC8gKDEuMCAtIHBoaSk7IC8vICgxLDApLChwaGkscGhpKeOCkumAmuOCi+ebtOe3muW8j1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIOiDjOaZr+OBruimi+OBiOOCi+WJsuWQiOOCkuWItumZkOOBmeOCi+WgtOWQiFxuICAgICAgICAgIGNvbnN0IGJhY2tPcGFjaXR5OiBudW1iZXIgPSAoMS4wIC0gYTEpICogKDEuMCAtIG5ld09wYWNpdHkpO1xuXG4gICAgICAgICAgaWYgKGJhY2tPcGFjaXR5ID4gYmFja09wYWNpdHlUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGExID0gMS4wIC0gYmFja09wYWNpdHlUaHJlc2hvbGQgLyAoMS4wIC0gbmV3T3BhY2l0eSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wYWNpdHkgPiBhMSkge1xuICAgICAgICAgICAgb3BhY2l0eSA9IGExOyAvLyDoqIjnrpfjga7kuI3pgI/mmI7luqbjgojjgorjgoLlpKfjgY3jgZHjgozjgbDvvIjmv4PjgZHjgozjgbDvvInkuI3pgI/mmI7luqbjgpLkuIrjgZLjgotcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgb3BhY2l0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9mYWRlVGltZVNlY29uZHMgPSBEZWZhdWx0RmFkZUluU2Vjb25kcztcbiAgICAgIHRoaXMuX2xhc3RNb2RlbCA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJ0R3JvdXBzID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcbiAgICAgIHRoaXMuX3BhcnRHcm91cENvdW50cyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigpO1xuICAgIH1cblxuICAgIF9wYXJ0R3JvdXBzOiBjc21WZWN0b3I8UGFydERhdGE+OyAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcbiAgICBfcGFydEdyb3VwQ291bnRzOiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g44Gd44KM44Ge44KM44Gu44OR44O844OE44Kw44Or44O844OX44Gu5YCL5pWwXG4gICAgX2ZhZGVUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4nmmYLplpNb56eSXVxuICAgIF9sYXN0TW9kZWw6IEN1YmlzbU1vZGVsOyAvLyDliY3lm57mk43kvZzjgZfjgZ/jg6Ljg4fjg6tcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjgavjgb7jgaTjgo/jgovjg4fjg7zjgr/jgpLnrqHnkIZcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBQYXJ0RGF0YSB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodj86IFBhcnREYXRhKSB7XG4gICAgICB0aGlzLnBhcmFtZXRlckluZGV4ID0gMDtcbiAgICAgIHRoaXMucGFydEluZGV4ID0gMDtcbiAgICAgIHRoaXMubGluayA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XG5cbiAgICAgIGlmICh2ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnBhcnRJZCA9IHYucGFydElkO1xuXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB2LmxpbmsuYmVnaW4oKTtcbiAgICAgICAgICBpdGUubm90RXF1YWwodi5saW5rLmVuZCgpKTtcbiAgICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5saW5rLnB1c2hCYWNrKGl0ZS5wdHIoKS5jbG9uZSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgYXNzaWdubWVudCh2OiBQYXJ0RGF0YSk6IFBhcnREYXRhIHtcbiAgICAgIHRoaXMucGFydElkID0gdi5wYXJ0SWQ7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8UGFydERhdGE+ID0gdi5saW5rLmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbCh2LmxpbmsuZW5kKCkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliJ3mnJ/ljJZcbiAgICAgKiBAcGFyYW0gbW9kZWwg5Yid5pyf5YyW44Gr5L2/55So44GZ44KL44Oi44OH44OrXG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgICB0aGlzLnBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgodGhpcy5wYXJ0SWQpO1xuICAgICAgdGhpcy5wYXJ0SW5kZXggPSBtb2RlbC5nZXRQYXJ0SW5kZXgodGhpcy5wYXJ0SWQpO1xuXG4gICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgodGhpcy5wYXJhbWV0ZXJJbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kq44OW44K444Kn44Kv44OI44Gu44Kz44OU44O844KS55Sf5oiQ44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGNsb25lKCk6IFBhcnREYXRhIHtcbiAgICAgIGNvbnN0IGNsb25lUGFydERhdGE6IFBhcnREYXRhID0gbmV3IFBhcnREYXRhKCk7XG5cbiAgICAgIGNsb25lUGFydERhdGEucGFydElkID0gdGhpcy5wYXJ0SWQ7XG4gICAgICBjbG9uZVBhcnREYXRhLnBhcmFtZXRlckluZGV4ID0gdGhpcy5wYXJhbWV0ZXJJbmRleDtcbiAgICAgIGNsb25lUGFydERhdGEucGFydEluZGV4ID0gdGhpcy5wYXJ0SW5kZXg7XG4gICAgICBjbG9uZVBhcnREYXRhLmxpbmsgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB0aGlzLmxpbmsuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHRoaXMubGluay5lbmQoKSk7XG4gICAgICAgIGl0ZS5pbmNyZW1lbnQoKVxuICAgICAgKSB7XG4gICAgICAgIGNsb25lUGFydERhdGEubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9uZVBhcnREYXRhO1xuICAgIH1cblxuICAgIHBhcnRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODvOODhElEXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcjsgLy8g44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgcGFydEluZGV4OiBudW1iZXI7IC8vIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgIGxpbms6IGNzbVZlY3RvcjxQYXJ0RGF0YT47IC8vIOmAo+WLleOBmeOCi+ODkeODqeODoeODvOOCv1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZH0gZnJvbSAnLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21tYXB9IGZyb20gJy4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IGNzbU1hcCA9IGNzbW1hcC5jc21NYXA7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAgIC8qKlxuICAgICAqIOODouODh+ODq+ioreWumuaDheWgseOCkuWPluOCiuaJseOBhumWouaVsOOCkuWuo+iogOOBl+OBn+e0lOeyi+S7ruaDs+OCr+ODqeOCueOAglxuICAgICAqXG4gICAgICog44GT44Gu44Kv44Op44K544KS57aZ5om/44GZ44KL44GT44Go44Gn44CB44Oi44OH44Or6Kit5a6a5oOF5aCx44KS5Y+W44KK5omx44GG44Kv44Op44K544Gr44Gq44KL44CCXG4gICAgICovXG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIElDdWJpc21Nb2RlbFNldHRpbmcge1xuICAgICAgICAvKipcbiAgICAgICAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEByZXR1cm4gTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7mlbBcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlQ291bnQoKTogbnVtYmVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY1cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlRGlyZWN0b3J5KCk6IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgICAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY1cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICog44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEByZXR1cm4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWwXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGl0QXJlYXNDb3VudCgpOiBudW1iZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lE44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga5pbmRleFxuICAgICAgICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lEXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGl0QXJlYUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgICAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY1cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHJldHVybiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRQaHlzaWNzRmlsZU5hbWUoKTogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHJldHVybiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRQb3NlRmlsZU5hbWUoKTogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbBcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uQ291bnQoKTogbnVtYmVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjgpLorZjliKXjgZnjgovlkI3liY3vvIjliKXlkI3vvInjgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAgICAgKiBAcmV0dXJuIOihqOaDheOBruWQjeWJjVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25OYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICAgICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwQ291bnQoKTogbnVtYmVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjgavlkKvjgb7jgozjgovjg6Ljg7zjgrfjg6fjg7Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Db3VudChncm91cE5hbWU6IHN0cmluZyk6IG51bWJlcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IG1vdGlvbiBmaWxlIG5hbWUgZnJvbSBncm91cCBuYW1lIGFuZCBpbmRleCB2YWx1ZVxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIE5hbWUgb2YgbW90aW9uIGdyb3VwXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCAgICAgQXJyYXkgaW5kZXggdmFsdWVcbiAgICAgICAgICogQHJldHVybiBOYW1lIG9mIG1vdGlvbiBmaWxlXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgbmFtZSBvZiB0aGUgc291bmQgZmlsZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBtb3Rpb25cbiAgICAgICAgICogQHBhcmFtIGdyb3VwTmFtZSAgTmFtZSBvZiBtb3Rpb24gZ3JvdXBcbiAgICAgICAgICogQHBhcmFtIGluZGV4IEFycmF5IGluZGV4IHZhbHVlXG4gICAgICAgICAqIEByZXR1cm4gVGhlIG5hbWUgb2YgdGhlIHNvdW5kIGZpbGVcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKFxuICAgICAgICAgICAgZ3JvdXBOYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICBpbmRleDogbnVtYmVyXG4gICAgICAgICk6IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICog5b6X5Yiw5Yqo5L2c6Z+z6aKR5bu26L+fXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUgICDliqjkvZznu4TlkI1cbiAgICAgICAgICogQHBhcmFtIGluZGV4ICAg5Yqo5L2c57Si5byVXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uU291bmREZWxheShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IG51bWJlcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICog44Oi44O844K344On44Oz6ZaL5aeL5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpNb56eSXVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShcbiAgICAgICAgICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgaW5kZXg6IG51bWJlclxuICAgICAgICApOiBudW1iZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+e1guS6huaZguOBruODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaTW+enkl1cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKFxuICAgICAgICAgICAgZ3JvdXBOYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICBpbmRleDogbnVtYmVyXG4gICAgICAgICk6IG51bWJlcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICog44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0VXNlckRhdGFGaWxlKCk6IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSBvdXRMYXlvdXRNYXAgY3NtTWFw44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZnjgotcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZfjgarjgYRcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRMYXlvdXRNYXAob3V0TGF5b3V0TWFwOiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogYm9vbGVhbjtcblxuICAgICAgICAvKipcbiAgICAgICAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEByZXR1cm4g55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBrklE44KS5Y+W5b6X44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHJldHVybiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TGlwU3luY1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcbiAgICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyBXG4gICAqXG4gICAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyB44GZ44KL44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtSWQge1xuICAgIC8qKlxuICAgICAqIElE5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGdldFN0cmluZygpOiBjc21TdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nIHwgY3NtU3RyaW5nKSB7XG4gICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9pZCA9IG5ldyBjc21TdHJpbmcoaWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaWTjgpLmr5TovINcbiAgICAgKiBAcGFyYW0gYyDmr5TovIPjgZnjgotpZFxuICAgICAqIEByZXR1cm4g5ZCM44GY44Gq44KJ44GwdHJ1ZSznlbDjgarjgaPjgabjgYTjgozjgbBmYWxzZeOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0VxdWFsKGM6IHN0cmluZyB8IGNzbVN0cmluZyB8IEN1YmlzbUlkKTogYm9vbGVhbiB7XG4gICAgICBpZiAodHlwZW9mIGMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMpO1xuICAgICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMucyk7XG4gICAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBDdWJpc21JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZOOCkuavlOi8g1xuICAgICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXG4gICAgICogQHJldHVybiDlkIzjgZjjgarjgonjgbB0cnVlLOeVsOOBquOBo+OBpuOBhOOCjOOBsGZhbHNl44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGlzTm90RXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcbiAgICAgIGlmICh0eXBlb2YgYyA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9pZC5pc0VxdWFsKGMucyk7XG4gICAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBDdWJpc21JZCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaWQ6IGNzbVN0cmluZzsgLy8gSUTlkI1cbiAgfVxuXG4gIGV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21JZDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBDdWJpc21JZCA9IGN1YmlzbWlkLkN1YmlzbUlkO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIElE5ZCN44Gu566h55CGXG4gICAqXG4gICAqIElE5ZCN44KS566h55CG44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtSWRNYW5hZ2VyIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9pZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkPigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgdGhpcy5faWRzLnNldChpLCB2b2lkIDApO1xuICAgICAgfVxuICAgICAgdGhpcy5faWRzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJROWQjeOCkuODquOCueODiOOBi+OCieeZu+mMslxuICAgICAqXG4gICAgICogQHBhcmFtIGlkcyBJROWQjeODquOCueODiFxuICAgICAqIEBwYXJhbSBjb3VudCBJROOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyByZWdpc3RlcklkcyhpZHM6IHN0cmluZ1tdIHwgY3NtU3RyaW5nW10pOiB2b2lkIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJJZChpZHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElE5ZCN44KS55m76YyyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgSUTlkI1cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJJZChpZDogc3RyaW5nIHwgY3NtU3RyaW5nKTogQ3ViaXNtSWQge1xuICAgICAgbGV0IHJlc3VsdDogQ3ViaXNtSWQgPSBudWxsO1xuXG4gICAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGlkKSB7XG4gICAgICAgIGlmICgocmVzdWx0ID0gdGhpcy5maW5kSWQoaWQpKSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCA9IG5ldyBDdWJpc21JZChpZCk7XG4gICAgICAgIHRoaXMuX2lkcy5wdXNoQmFjayhyZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZC5zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJROWQjeOBi+OCiUlE44KS5Y+W5b6X44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgSUTlkI1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SWQoaWQ6IGNzbVN0cmluZyB8IHN0cmluZyk6IEN1YmlzbUlkIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVySWQoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElE5ZCN44GL44KJSUTjga7norroqo1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0V4aXN0KGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZElkKGlkKSAhPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaXNFeGlzdChpZC5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJROWQjeOBi+OCiUlE44KS5qSc57Si44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgSUTlkI1cbiAgICAgKiBAcmV0dXJuIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44CC44Gq44GR44KM44GwTlVMTOOAglxuICAgICAqL1xuICAgIHByaXZhdGUgZmluZElkKGlkOiBzdHJpbmcpOiBDdWJpc21JZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5faWRzXG4gICAgICAgICAgICAuYXQoaSlcbiAgICAgICAgICAgIC5nZXRTdHJpbmcoKVxuICAgICAgICAgICAgLmlzRXF1YWwoaWQpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9pZHMuYXQoaSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaWRzOiBjc21WZWN0b3I8Q3ViaXNtSWQ+OyAvLyDnmbvpjLLjgZXjgozjgabjgYTjgotJROOBruODquOCueODiFxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtanNvbiB9IGZyb20gJy4vdXRpbHMvY3ViaXNtanNvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWRtYW5hZ2VyIH0gZnJvbSAnLi9pZC9jdWJpc21pZG1hbmFnZXInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXInO1xuaW1wb3J0IHtcbiAgQ3ViaXNtTG9nSW5mbyxcbiAgQ3ViaXNtTG9nV2FybmluZyxcbiAgQ1NNX0FTU0VSVFxufSBmcm9tICcuL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCBWYWx1ZSA9IGN1YmlzbWpzb24uVmFsdWU7XG5pbXBvcnQgQ3ViaXNtSWRNYW5hZ2VyID0gY3ViaXNtaWRtYW5hZ2VyLkN1YmlzbUlkTWFuYWdlcjtcbmltcG9ydCBDdWJpc21SZW5kZXJlciA9IGN1YmlzbXJlbmRlcmVyLkN1YmlzbVJlbmRlcmVyO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RydG9kKHM6IHN0cmluZywgZW5kUHRyOiBzdHJpbmdbXSk6IG51bWJlciB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciAobGV0IGkgPSAxOyA7IGkrKykge1xuICAgIGNvbnN0IHRlc3RDOiBzdHJpbmcgPSBzLnNsaWNlKGkgLSAxLCBpKTtcblxuICAgIC8vIOaMh+aVsOODu+ODnuOCpOODiuOCueOBruWPr+iDveaAp+OBjOOBguOCi+OBruOBp+OCueOCreODg+ODl+OBmeOCi1xuICAgIGlmICh0ZXN0QyA9PSAnZScgfHwgdGVzdEMgPT0gJy0nIHx8IHRlc3RDID09ICdFJykge1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyDmloflrZfliJfjga7nr4Tlm7LjgpLluoPjgZLjgabjgYTjgY9cblxuICAgIGNvbnN0IHRlc3Q6IHN0cmluZyA9IHMuc3Vic3RyaW5nKDAsIGkpO1xuICAgIGNvbnN0IG51bWJlciA9IE51bWJlcih0ZXN0KTtcbiAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgICAgLy8g5pWw5YCk44Go44GX44Gm6KqN6K2Y44Gn44GN44Gq44GP44Gq44Gj44Gf44Gu44Gn57WC5LqGXG4gICAgICBicmVhaztcbiAgICB9IC8vIOacgOW+jOOBq+aVsOWApOOBqOOBl+OBpuOBp+OBjeOBn2luZGV444KS5qC857SN44GX44Gm44GK44GPXG5cbiAgICBpbmRleCA9IGk7XG4gIH1cbiAgbGV0IGQgPSBwYXJzZUZsb2F0KHMpOyAvLyDjg5Hjg7zjgrnjgZfjgZ/mlbDlgKRcblxuICBpZiAoaXNOYU4oZCkpIHtcbiAgICAvLyDmlbDlgKTjgajjgZfjgaboqo3orZjjgafjgY3jgarjgY/jgarjgaPjgZ/jga7jgafntYLkuoZcbiAgICBkID0gTmFOO1xuICB9XG5cbiAgZW5kUHRyWzBdID0gcy5zbGljZShpbmRleCk7IC8vIOW+jOe2muOBruaWh+Wtl+WIl1xuICByZXR1cm4gZDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvLyDjg5XjgqHjgqTjg6vjgrnjgrPjg7zjg5fjga7lpInmlbDjgpLliJ3mnJ/ljJZcblxuICBsZXQgc19pc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgbGV0IHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICBsZXQgc19vcHRpb246IE9wdGlvbiA9IG51bGw7XG4gIGxldCBzX2N1YmlzbUlkTWFuYWdlcjogQ3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcblxuICAvKipcbiAgICogRnJhbWV3b3Jr5YaF44Gn5L2/44GG5a6a5pWw44Gu5a6j6KiAXG4gICAqL1xuICBleHBvcnQgbmFtZXNwYWNlIENvbnN0YW50IHtcbiAgICBleHBvcnQgY29uc3QgdmVydGV4T2Zmc2V0ID0gMDsgLy8g44Oh44OD44K344Ol6aCC54K544Gu44Kq44OV44K744OD44OI5YCkXG4gICAgZXhwb3J0IGNvbnN0IHZlcnRleFN0ZXAgPSAyOyAvLyDjg6Hjg4Pjgrfjg6XpoILngrnjga7jgrnjg4bjg4Pjg5flgKRcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjc21EZWxldGU8VD4oYWRkcmVzczogVCk6IHZvaWQge1xuICAgIGlmICghYWRkcmVzcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGFkZHJlc3MgPSB2b2lkIDA7XG4gIH1cblxuICAvKipcbiAgICogTGl2ZTJEIEN1YmlzbSBTREsgT3JpZ2luYWwgV29ya2Zsb3cgU0RL44Gu44Ko44Oz44OI44Oq44Od44Kk44Oz44OIXG4gICAqIOWIqeeUqOmWi+Wni+aZguOBr0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCnjgpLlkbzjgbPjgIFDdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgp44Gn57WC5LqG44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtRnJhbWV3b3JrIHtcbiAgICAvKipcbiAgICAgKiBDdWJpc20gRnJhbWV3b3Jr44GuQVBJ44KS5L2/55So5Y+v6IO944Gr44GZ44KL44CCXG4gICAgICogIEFQSeOCkuWun+ihjOOBmeOCi+WJjeOBq+W/heOBmuOBk+OBrumWouaVsOOCkuWun+ihjOOBmeOCi+OBk+OBqOOAglxuICAgICAqICDkuIDluqbmupblgpnjgYzlrozkuobjgZfjgabku6XpmY3jga/jgIHlho3jgbPlrp/ooYzjgZfjgabjgoLlhoXpg6jlh6bnkIbjgYzjgrnjgq3jg4Pjg5fjgZXjgozjgb7jgZnjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgICBvcHRpb24gICAgICBPcHRpb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKlxuICAgICAqIEByZXR1cm4gICDmupblgpnlh6bnkIbjgYzlrozkuobjgZfjgZ/jgol0cnVl44GM6L+U44KK44G+44GZ44CCXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzdGFydFVwKG9wdGlvbjogT3B0aW9uID0gbnVsbCk6IGJvb2xlYW4ge1xuICAgICAgaWYgKHNfaXNTdGFydGVkKSB7XG4gICAgICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5zdGFydFVwKCkgaXMgYWxyZWFkeSBkb25lLicpO1xuICAgICAgICByZXR1cm4gc19pc1N0YXJ0ZWQ7XG4gICAgICB9XG5cbiAgICAgIHNfb3B0aW9uID0gb3B0aW9uO1xuXG4gICAgICBpZiAoc19vcHRpb24gIT0gbnVsbCkge1xuICAgICAgICBMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtU2V0TG9nRnVuY3Rpb24oc19vcHRpb24ubG9nRnVuY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICBzX2lzU3RhcnRlZCA9IHRydWU7XG5cbiAgICAgIC8vIExpdmUyRCBDdWJpc20gQ29yZeODkOODvOOCuOODp+ODs+aDheWgseOCkuihqOekulxuICAgICAgaWYgKHNfaXNTdGFydGVkKSB7XG4gICAgICAgIGNvbnN0IHZlcnNpb246IG51bWJlciA9IExpdmUyREN1YmlzbUNvcmUuVmVyc2lvbi5jc21HZXRWZXJzaW9uKCk7XG4gICAgICAgIGNvbnN0IG1ham9yOiBudW1iZXIgPSAodmVyc2lvbiAmIDB4ZmYwMDAwMDApID4+IDI0O1xuICAgICAgICBjb25zdCBtaW5vcjogbnVtYmVyID0gKHZlcnNpb24gJiAweDAwZmYwMDAwKSA+PiAxNjtcbiAgICAgICAgY29uc3QgcGF0Y2g6IG51bWJlciA9IHZlcnNpb24gJiAweDAwMDBmZmZmO1xuICAgICAgICBjb25zdCB2ZXJzaW9uTnVtYmVyOiBudW1iZXIgPSB2ZXJzaW9uO1xuXG4gICAgICAgIEN1YmlzbUxvZ0luZm8oXG4gICAgICAgICAgYExpdmUyRCBDdWJpc20gQ29yZSB2ZXJzaW9uOiB7MH0uezF9LnsyfSAoezN9KWAsXG4gICAgICAgICAgKCcwMCcgKyBtYWpvcikuc2xpY2UoLTIpLFxuICAgICAgICAgICgnMDAnICsgbWlub3IpLnNsaWNlKC0yKSxcbiAgICAgICAgICAoJzAwMDAnICsgcGF0Y2gpLnNsaWNlKC00KSxcbiAgICAgICAgICB2ZXJzaW9uTnVtYmVyXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5zdGFydFVwKCkgaXMgY29tcGxldGUuJyk7XG5cbiAgICAgIHJldHVybiBzX2lzU3RhcnRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydFVwKCnjgafliJ3mnJ/ljJbjgZfjgZ9DdWJpc21GcmFtZXdvcmvjga7lkITjg5Hjg6njg6Hjg7zjgr/jgpLjgq/jg6rjgqLjgZfjgb7jgZnjgIJcbiAgICAgKiBEaXNwb3NlKCnjgZfjgZ9DdWJpc21GcmFtZXdvcmvjgpLlho3liKnnlKjjgZnjgovpmpvjgavliKnnlKjjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNsZWFuVXAoKTogdm9pZCB7XG4gICAgICBzX2lzU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICBzX29wdGlvbiA9IG51bGw7XG4gICAgICBzX2N1YmlzbUlkTWFuYWdlciA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3ViaXNtIEZyYW1ld29ya+WGheOBruODquOCveODvOOCueOCkuWIneacn+WMluOBl+OBpuODouODh+ODq+OCkuihqOekuuWPr+iDveOBqueKtuaFi+OBq+OBl+OBvuOBmeOAgjxicj5cbiAgICAgKiAgICAg5YaN5bqmSW5pdGlhbGl6ZSgp44GZ44KL44Gr44Gv5YWI44GrRGlzcG9zZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgICAgQ1NNX0FTU0VSVChzX2lzU3RhcnRlZCk7XG4gICAgICBpZiAoIXNfaXNTdGFydGVkKSB7XG4gICAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yayBpcyBub3Qgc3RhcnRlZC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyAtLS0gc19pc0luaXRpYWxpemVk44Gr44KI44KL6YCj57aa5Yid5pyf5YyW44Ks44O844OJIC0tLVxuICAgICAgLy8g6YCj57aa44GX44Gm44Oq44K944O844K556K65L+d44GM6KGM44KP44KM44Gq44GE44KI44GG44Gr44GZ44KL44CCXG4gICAgICAvLyDlho3luqZJbml0aWFsaXplKCnjgZnjgovjgavjga/lhYjjgatEaXNwb3NlKCnjgpLlrp/ooYzjgZnjgovlv4XopoHjgYzjgYLjgovjgIJcbiAgICAgIGlmIChzX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgQ3ViaXNtTG9nV2FybmluZyhcbiAgICAgICAgICAnQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKSBza2lwcGVkLCBhbHJlYWR5IGluaXRpYWxpemVkLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLy0tLS0gc3RhdGljIOWIneacn+WMliAtLS0tXG4gICAgICBWYWx1ZS5zdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgpO1xuXG4gICAgICBzX2N1YmlzbUlkTWFuYWdlciA9IG5ldyBDdWJpc21JZE1hbmFnZXIoKTtcblxuICAgICAgc19pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKSBpcyBjb21wbGV0ZS4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlJlbGVhc2VzIGFsbCByZXNvdXJjZXMgaW4gQ3ViaXNtIEZyYW1ld29ya1xuICAgICAqICAgICAgSG93ZXZlciwgaXQgZG9lcyBub3QgcmVsZWFzZSBleHRlcm5hbGx5IHNlY3VyZWQgcmVzb3VyY2VzLlxuICAgICAqICAgICAgSXQgbXVzdCBiZSBwcm9wZXJseSBkZXN0cm95ZWQgZXh0ZXJuYWxseS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgICBDU01fQVNTRVJUKHNfaXNTdGFydGVkKTtcbiAgICAgIGlmICghc19pc1N0YXJ0ZWQpIHtcbiAgICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLSBVbmluaXRpYWxpemVkIHJlbGVhc2UgZ3VhcmQgd2l0aCBzX2lzSW5pdGlhbGl6ZWQgLS0tXG4gICAgICAvLyBZb3UgbXVzdCBleGVjdXRlIGluaXRpYWxpemUoKSBiZWZvcmUgZGlzcG9zZSgpLlxuICAgICAgaWYgKCFzX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgLy8gZmFsc2UuLi5XaGVuIHJlc291cmNlcyBhcmUgbm90IHNlY3VyZWRcbiAgICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKSBza2lwcGVkLCBub3QgaW5pdGlhbGl6ZWQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgVmFsdWUuc3RhdGljUmVsZWFzZU5vdEZvckNsaWVudENhbGwoKTtcblxuICAgICAgc19jdWJpc21JZE1hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgc19jdWJpc21JZE1hbmFnZXIgPSBudWxsO1xuXG4gICAgICAvLyBSZWxlYXNlIHN0YXRpYyByZXNvdXJjZXMgKHNoYWRlciBwcm9ncmFtLCBldGMuKSBvZiB0aGUgcmVuZGVyZXJcbiAgICAgIEN1YmlzbVJlbmRlcmVyLnN0YXRpY1JlbGVhc2UoKTtcblxuICAgICAgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5kaXNwb3NlKCkgaXMgY29tcGxldGUuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3ViaXNtIEZyYW1ld29ya+OBrkFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBn+OBi+OBqeOBhuOBi1xuICAgICAqIEByZXR1cm4gQVBJ44KS5L2/55So44GZ44KL5rqW5YKZ44GM5a6M5LqG44GX44Gm44GE44KM44GwdHJ1ZeOBjOi/lOOCiuOBvuOBmeOAglxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgaXNTdGFydGVkKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHNfaXNTdGFydGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1YmlzbSBGcmFtZXdvcmvjga7jg6rjgr3jg7zjgrnliJ3mnJ/ljJbjgYzjgZnjgafjgavooYzjgo/jgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICAgKiBAcmV0dXJuIOODquOCveODvOOCueeiuuS/neOBjOWujOS6huOBl+OBpuOBhOOCjOOBsHRydWXjgYzov5Tjgorjgb7jgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gc19pc0luaXRpYWxpemVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcmUgQVBJ44Gr44OQ44Kk44Oz44OJ44GX44Gf44Ot44Kw6Zai5pWw44KS5a6f6KGM44GZ44KLXG4gICAgICpcbiAgICAgKiBAcHJhcmFtIG1lc3NhZ2Ug44Ot44Kw44Oh44OD44K744O844K4XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjb3JlTG9nRnVuY3Rpb24obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAvLyBSZXR1cm4gaWYgbG9nZ2luZyBub3QgcG9zc2libGUuXG4gICAgICBpZiAoIUxpdmUyREN1YmlzbUNvcmUuTG9nZ2luZy5jc21HZXRMb2dGdW5jdGlvbigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgTGl2ZTJEQ3ViaXNtQ29yZS5Mb2dnaW5nLmNzbUdldExvZ0Z1bmN0aW9uKCkobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44Gu5YCk44KS6L+U44GZ44CCXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICDnj77lnKjjga7jg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjga7lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldExvZ2dpbmdMZXZlbCgpOiBMb2dMZXZlbCB7XG4gICAgICBpZiAoc19vcHRpb24gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc19vcHRpb24ubG9nZ2luZ0xldmVsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIExvZ0xldmVsLkxvZ0xldmVsX09mZjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJROODnuODjeODvOOCuOODo+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4gQ3ViaXNtTWFuYWdlcuOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SWRNYW5hZ2VyKCk6IEN1YmlzbUlkTWFuYWdlciB7XG4gICAgICByZXR1cm4gc19jdWJpc21JZE1hbmFnZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6Z2Z55qE44Kv44Op44K544Go44GX44Gm5L2/55So44GZ44KLXG4gICAgICog44Kk44Oz44K544K/44Oz44K55YyW44GV44Gb44Gq44GEXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9wdGlvbiB7XG4gIGxvZ0Z1bmN0aW9uOiBMaXZlMkRDdWJpc21Db3JlLmNzbUxvZ0Z1bmN0aW9uOyAvLyDjg63jgrDlh7rlipvjga7plqLmlbDjgqrjg5bjgrjjgqfjgq/jg4hcbiAgbG9nZ2luZ0xldmVsOiBMb2dMZXZlbDsgLy8g44Ot44Kw5Ye65Yqb44Os44OZ44Or44Gu6Kit5a6aXG59XG5cbi8qKlxuICog44Ot44Kw5Ye65Yqb44Gu44Os44OZ44OrXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgTG9nTGV2ZWxfVmVyYm9zZSA9IDAsIC8vIOips+e0sOODreOCsFxuICBMb2dMZXZlbF9EZWJ1ZywgLy8g44OH44OQ44OD44Kw44Ot44KwXG4gIExvZ0xldmVsX0luZm8sIC8vIEluZm/jg63jgrBcbiAgTG9nTGV2ZWxfV2FybmluZywgLy8g6K2m5ZGK44Ot44KwXG4gIExvZ0xldmVsX0Vycm9yLCAvLyDjgqjjg6njg7zjg63jgrBcbiAgTG9nTGV2ZWxfT2ZmIC8vIOODreOCsOWHuuWKm+eEoeWKuVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXZlY3RvcjIgfSBmcm9tICcuL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IEN1YmlzbVZlY3RvcjIgPSBjdWJpc212ZWN0b3IyLkN1YmlzbVZlY3RvcjI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOaVsOWApOioiOeul+OBquOBqeOBq+S9v+eUqOOBmeOCi+ODpuODvOODhuOCo+ODquODhuOCo+OCr+ODqeOCuVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1hdGgge1xuICAgIC8qKlxuICAgICAqIOesrOS4gOW8leaVsOOBruWApOOCkuacgOWwj+WApOOBqOacgOWkp+WApOOBruevhOWbsuOBq+WPjuOCgeOBn+WApOOCkui/lOOBmVxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIOWPjuOCgeOCieOCjOOCi+WApFxuICAgICAqIEBwYXJhbSBtaW4gICDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAgICAgKiBAcGFyYW0gbWF4ICAg56+E5Zuy44Gu5pyA5aSn5YCkXG4gICAgICogQHJldHVybiDmnIDlsI/lgKTjgajmnIDlpKflgKTjga7nr4Tlm7Ljgavlj47jgoHjgZ/lgKRcbiAgICAgKi9cbiAgICBzdGF0aWMgcmFuZ2UodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIGlmICh2YWx1ZSA8IG1pbikge1xuICAgICAgICB2YWx1ZSA9IG1pbjtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgICAgdmFsdWUgPSBtYXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrXjgqTjg7PplqLmlbDjga7lgKTjgpLmsYLjgoHjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IOinkuW6puWApO+8iOODqeOCuOOCouODs++8iVxuICAgICAqIEByZXR1cm4g44K144Kk44Oz6Zai5pWwc2luKHgp44Gu5YCkXG4gICAgICovXG4gICAgc3RhdGljIHNpbih4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguc2luKHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+OCteOCpOODs+mWouaVsOOBruWApOOCkuaxguOCgeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHgg6KeS5bqm5YCkKOODqeOCuOOCouODsylcbiAgICAgKiBAcmV0dXJuIOOCs+OCteOCpOODs+mWouaVsGNvcyh4KeOBruWApFxuICAgICAqL1xuICAgIHN0YXRpYyBjb3MoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBNYXRoLmNvcyh4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlgKTjga7ntbblr77lgKTjgpLmsYLjgoHjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IOe1tuWvvuWApOOCkuaxguOCgeOCi+WApFxuICAgICAqIEByZXR1cm4g5YCk44Gu57W25a++5YCkXG4gICAgICovXG4gICAgc3RhdGljIGFicyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguYWJzKHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW5s+aWueaguSjjg6vjg7zjg4gp44KS5rGC44KB44KLXG4gICAgICogQHBhcmFtIHggLT4g5bmz5pa55qC544KS5rGC44KB44KL5YCkXG4gICAgICogQHJldHVybiDlgKTjga7lubPmlrnmoLlcbiAgICAgKi9cbiAgICBzdGF0aWMgc3FydCh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguc3FydCh4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqTjg7zjgrjjg7PjgrDlh6bnkIbjgZXjgozjgZ/jgrXjgqTjg7PjgpLmsYLjgoHjgotcbiAgICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjg7vjgqLjgqbjg4jmmYLjga7jgqTjg7zjgrjjg7PjgrDjgavliKnnlKjjgafjgY3jgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSDjgqTjg7zjgrjjg7PjgrDjgpLooYzjgYblgKRcbiAgICAgKiBAcmV0dXJuIOOCpOODvOOCuOODs+OCsOWHpueQhuOBleOCjOOBn+OCteOCpOODs+WApFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRFYXNpbmdTaW5lKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgaWYgKHZhbHVlIDwgMC4wKSB7XG4gICAgICAgIHJldHVybiAwLjA7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID4gMS4wKSB7XG4gICAgICAgIHJldHVybiAxLjA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwLjUgLSAwLjUgKiB0aGlzLmNvcyh2YWx1ZSAqIE1hdGguUEkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWkp+OBjeOBhOaWueOBruWApOOCkui/lOOBmVxuICAgICAqXG4gICAgICogQHBhcmFtIGxlZnQg5bem6L6644Gu5YCkXG4gICAgICogQHBhcmFtIHJpZ2h0IOWPs+i+uuOBruWApFxuICAgICAqIEByZXR1cm4g5aSn44GN44GE5pa544Gu5YCkXG4gICAgICovXG4gICAgc3RhdGljIG1heChsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIGxlZnQgPiByaWdodCA/IGxlZnQgOiByaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlsI/jgZXjgYTmlrnjga7lgKTjgpLov5TjgZlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsZWZ0ICDlt6bovrrjga7lgKRcbiAgICAgKiBAcGFyYW0gcmlnaHQg5Y+z6L6644Gu5YCkXG4gICAgICogQHJldHVybiDlsI/jgZXjgYTmlrnjga7lgKRcbiAgICAgKi9cbiAgICBzdGF0aWMgbWluKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gbGVmdCA+IHJpZ2h0ID8gcmlnaHQgOiBsZWZ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOinkuW6puWApOOCkuODqeOCuOOCouODs+WApOOBq+WkieaPm+OBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGRlZ3JlZXMgICDop5LluqblgKRcbiAgICAgKiBAcmV0dXJuIOinkuW6puWApOOBi+OCieWkieaPm+OBl+OBn+ODqeOCuOOCouODs+WApFxuICAgICAqL1xuICAgIHN0YXRpYyBkZWdyZWVzVG9SYWRpYW4oZGVncmVlczogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiAoZGVncmVlcyAvIDE4MC4wKSAqIE1hdGguUEk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Op44K444Ki44Oz5YCk44KS6KeS5bqm5YCk44Gr5aSJ5o+b44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmFkaWFuICAgIOODqeOCuOOCouODs+WApFxuICAgICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5aSJ5o+b44GX44Gf6KeS5bqm5YCkXG4gICAgICovXG4gICAgc3RhdGljIHJhZGlhblRvRGVncmVlcyhyYWRpYW46IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gKHJhZGlhbiAqIDE4MC4wKSAvIE1hdGguUEk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog77yS44Gk44Gu44OZ44Kv44OI44Or44GL44KJ44Op44K444Ki44Oz5YCk44KS5rGC44KB44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnJvbSAg5aeL54K544OZ44Kv44OI44OrXG4gICAgICogQHBhcmFtIHRvICAgIOe1gueCueODmeOCr+ODiOODq1xuICAgICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5rGC44KB44Gf5pa55ZCR44OZ44Kv44OI44OrXG4gICAgICovXG4gICAgc3RhdGljIGRpcmVjdGlvblRvUmFkaWFuKGZyb206IEN1YmlzbVZlY3RvcjIsIHRvOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IHExOiBudW1iZXIgPSBNYXRoLmF0YW4yKHRvLnksIHRvLngpO1xuICAgICAgY29uc3QgcTI6IG51bWJlciA9IE1hdGguYXRhbjIoZnJvbS55LCBmcm9tLngpO1xuXG4gICAgICBsZXQgcmV0OiBudW1iZXIgPSBxMSAtIHEyO1xuXG4gICAgICB3aGlsZSAocmV0IDwgLU1hdGguUEkpIHtcbiAgICAgICAgcmV0ICs9IE1hdGguUEkgKiAyLjA7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChyZXQgPiBNYXRoLlBJKSB7XG4gICAgICAgIHJldCAtPSBNYXRoLlBJICogMi4wO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIO+8kuOBpOOBruODmeOCr+ODiOODq+OBi+OCieinkuW6puWApOOCkuaxguOCgeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGZyb20gIOWni+eCueODmeOCr+ODiOODq1xuICAgICAqIEBwYXJhbSB0byAgICDntYLngrnjg5njgq/jg4jjg6tcbiAgICAgKiBAcmV0dXJuIOinkuW6puWApOOBi+OCieaxguOCgeOBn+aWueWQkeODmeOCr+ODiOODq1xuICAgICAqL1xuICAgIHN0YXRpYyBkaXJlY3Rpb25Ub0RlZ3JlZXMoZnJvbTogQ3ViaXNtVmVjdG9yMiwgdG86IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgICAgY29uc3QgcmFkaWFuOiBudW1iZXIgPSB0aGlzLmRpcmVjdGlvblRvUmFkaWFuKGZyb20sIHRvKTtcbiAgICAgIGxldCBkZWdyZWU6IG51bWJlciA9IHRoaXMucmFkaWFuVG9EZWdyZWVzKHJhZGlhbik7XG5cbiAgICAgIGlmICh0by54IC0gZnJvbS54ID4gMC4wKSB7XG4gICAgICAgIGRlZ3JlZSA9IC1kZWdyZWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWdyZWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Op44K444Ki44Oz5YCk44KS5pa55ZCR44OZ44Kv44OI44Or44Gr5aSJ5o+b44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG90YWxBbmdsZSAgICDjg6njgrjjgqLjg7PlgKRcbiAgICAgKiBAcmV0dXJuIOODqeOCuOOCouODs+WApOOBi+OCieWkieaPm+OBl+OBn+aWueWQkeODmeOCr+ODiOODq1xuICAgICAqL1xuXG4gICAgc3RhdGljIHJhZGlhblRvRGlyZWN0aW9uKHRvdGFsQW5nbGU6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcblxuICAgICAgcmV0LnggPSB0aGlzLnNpbih0b3RhbEFuZ2xlKTtcbiAgICAgIHJldC55ID0gdGhpcy5jb3ModG90YWxBbmdsZSk7XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIDR4NOOBruihjOWIl1xuICAgKlxuICAgKiA0eDTooYzliJfjga7kvr/liKnjgq/jg6njgrnjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21NYXRyaXg0NCB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fdHIgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsgLy8gNCAqIDTjga7jgrXjgqTjgrpcbiAgICAgIHRoaXMubG9hZElkZW50aXR5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Y+X44GR5Y+W44Gj44Gf77yS44Gk44Gu6KGM5YiX44Gu5LmX566X44KS6KGM44GG44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYSDooYzliJdhXG4gICAgICogQHBhcmFtIGIg6KGM5YiXYlxuICAgICAqIEByZXR1cm4g5LmX566X57WQ5p6c44Gu6KGM5YiXXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBtdWx0aXBseShcbiAgICAgIGE6IEZsb2F0MzJBcnJheSxcbiAgICAgIGI6IEZsb2F0MzJBcnJheSxcbiAgICAgIGRzdDogRmxvYXQzMkFycmF5XG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBjOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wXG4gICAgICBdKTtcblxuICAgICAgY29uc3QgbiA9IDQ7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbjsgKytqKSB7XG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyArK2spIHtcbiAgICAgICAgICAgIGNbaiArIGkgKiA0XSArPSBhW2sgKyBpICogNF0gKiBiW2ogKyBrICogNF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBkc3RbaV0gPSBjW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWNmOS9jeihjOWIl+OBq+WIneacn+WMluOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkSWRlbnRpdHkoKTogdm9pZCB7XG4gICAgICBjb25zdCBjOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgdGhpcy5zZXRNYXRyaXgoYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KGM5YiX44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHIgMTblgIvjga7mta7li5XlsI/mlbDngrnmlbDjgafooajjgZXjgozjgos0eDTjga7ooYzliJdcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TWF0cml4KHRyOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICB0aGlzLl90cltpXSA9IHRyW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOihjOWIl+OCkua1ruWLleWwj+aVsOeCueaVsOOBrumFjeWIl+OBp+WPluW+l1xuICAgICAqXG4gICAgICogQHJldHVybiAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRBcnJheSgpOiBGbG9hdDMyQXJyYXkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFjou7jjga7mi6HlpKfnjofjgpLlj5blvpdcbiAgICAgKiBAcmV0dXJuIFjou7jjga7mi6HlpKfnjodcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2NhbGVYKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWei7uOOBruaLoeWkp+eOh+OCkuWPluW+l+OBmeOCi1xuICAgICAqXG4gICAgICogQHJldHVybiBZ6Lu444Gu5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIGdldFNjYWxlWSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyWzVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFjou7jjga7np7vli5Xph4/jgpLlj5blvpdcbiAgICAgKiBAcmV0dXJuIFjou7jjga7np7vli5Xph49cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VHJhbnNsYXRlWCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyWzEyXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBZ6Lu444Gu56e75YuV6YeP44KS5Y+W5b6XXG4gICAgICogQHJldHVybiBZ6Lu444Gu56e75YuV6YePXG4gICAgICovXG4gICAgcHVibGljIGdldFRyYW5zbGF0ZVkoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl90clsxM107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIFgtYXhpcyB2YWx1ZXMgd2l0aCBjdXJyZW50IG1hdHJpeFxuICAgICAqXG4gICAgICogQHBhcmFtIHNyYyBYLWF4aXMgdmFsdWVcbiAgICAgKiBAcmV0dXJuIFgtYXhpcyB2YWx1ZSBjYWxjdWxhdGVkIG9uIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl90clswXSAqIHNyYyArIHRoaXMuX3RyWzEyXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgeS1heGlzIHZhbHVlcyB3aXRoIGN1cnJlbnQgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3JjIFktYXhpcyB2YWx1ZVxuICAgICAqIEByZXR1cm4gWS1heGlzIHZhbHVlIGNhbGN1bGF0ZWQgb24gdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgcHVibGljIHRyYW5zZm9ybVkoc3JjOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyWzVdICogc3JjICsgdGhpcy5fdHJbMTNdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFjou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafpgIboqIjnrpdcbiAgICAgKi9cbiAgICBwdWJsaWMgaW52ZXJ0VHJhbnNmb3JtWChzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gKHNyYyAtIHRoaXMuX3RyWzEyXSkgLyB0aGlzLl90clswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6YCG6KiI566XXG4gICAgICovXG4gICAgcHVibGljIGludmVydFRyYW5zZm9ybVkoc3JjOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIChzcmMgLSB0aGlzLl90clsxM10pIC8gdGhpcy5fdHJbNV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS6LW354K544Gr44GX44Gm56e75YuVXG4gICAgICpcbiAgICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLotbfngrnjgavjgZfjgabnm7jlr77nmoTjgavnp7vli5XjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICAgKiBAcGFyYW0geSBZ6Lu444Gu56e75YuV6YePXG4gICAgICovXG4gICAgcHVibGljIHRyYW5zbGF0ZVJlbGF0aXZlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICAwLjAsXG4gICAgICAgIDEuMFxuICAgICAgXSk7XG5cbiAgICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMSwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLnp7vli5VcbiAgICAgKlxuICAgICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkuaMh+WumuOBl+OBn+S9jee9ruOBuOenu+WLleOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgICAqIEBwYXJhbSB5IHnou7jjga7np7vli5Xph49cbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl90clsxMl0gPSB4O1xuICAgICAgdGhpcy5fdHJbMTNdID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7ooYzliJfjga5Y6Lu444Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAgICovXG4gICAgcHVibGljIHRyYW5zbGF0ZVgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl90clsxMl0gPSB4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruihjOWIl+OBrlnou7jjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNsYXRlWSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3RyWzEzXSA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu6KGM5YiX44Gu5ouh5aSn546H44KS55u45a++55qE44Gr6Kit5a6a44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu5ouh5aSn546HXG4gICAgICogQHBhcmFtIHkgWei7uOOBruaLoeWkp+eOh1xuICAgICAqL1xuICAgIHB1YmxpYyBzY2FsZVJlbGF0aXZlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICB4LFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIHksXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDEuMFxuICAgICAgXSk7XG5cbiAgICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMSwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7ooYzliJfjga7mi6HlpKfnjofjgpLmjIflrprjgZfjgZ/lgI3njofjgavoqK3lrprjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IFjou7jjga7mi6HlpKfnjodcbiAgICAgKiBAcGFyYW0geSBZ6Lu444Gu5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIHNjYWxlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl90clswXSA9IHg7XG4gICAgICB0aGlzLl90cls1XSA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu6KGM5YiX44Gr6KGM5YiX44KS5LmX566XXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbSDooYzliJdcbiAgICAgKi9cbiAgICBwdWJsaWMgbXVsdGlwbHlCeU1hdHJpeChtOiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkobS5nZXRBcnJheSgpLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCquODluOCuOOCp+OCr+ODiOOBruOCs+ODlOODvOOCkueUn+aIkOOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBjbG9uZSgpOiBDdWJpc21NYXRyaXg0NCB7XG4gICAgICBjb25zdCBjbG9uZU1hdHJpeDogQ3ViaXNtTWF0cml4NDQgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZU1hdHJpeC5fdHJbaV0gPSB0aGlzLl90cltpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lTWF0cml4O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfdHI6IEZsb2F0MzJBcnJheTsgLy8gNHg0IG1hdHJpeCBkYXRhXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21tYXAgfSBmcm9tICcuLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0cml4NDQgfSBmcm9tICcuL2N1YmlzbW1hdHJpeDQ0JztcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xuaW1wb3J0IGl0ZXJhdG9yID0gY3NtbWFwLml0ZXJhdG9yO1xuaW1wb3J0IEN1YmlzbU1hdHJpeDQ0ID0gY3ViaXNtbWF0cml4NDQuQ3ViaXNtTWF0cml4NDQ7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOODouODh+ODq+W6p+aomeioreWumueUqOOBrjR4NOihjOWIl1xuICAgKlxuICAgKiDjg6Ljg4fjg6vluqfmqJnoqK3lrprnlKjjga40eDTooYzliJfjgq/jg6njgrlcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbE1hdHJpeCBleHRlbmRzIEN1YmlzbU1hdHJpeDQ0IHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKlxuICAgICAqIEBwYXJhbSB3IOaoquW5hVxuICAgICAqIEBwYXJhbSBoIOe4puW5hVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHc/OiBudW1iZXIsIGg/OiBudW1iZXIpIHtcbiAgICAgIHN1cGVyKCk7XG5cbiAgICAgIHRoaXMuX3dpZHRoID0gdyAhPT0gdW5kZWZpbmVkID8gdyA6IDAuMDtcbiAgICAgIHRoaXMuX2hlaWdodCA9IGggIT09IHVuZGVmaW5lZCA/IGggOiAwLjA7XG5cbiAgICAgIHRoaXMuc2V0SGVpZ2h0KDEuMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5qiq5bmF44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdyDmqKrluYVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0V2lkdGgodzogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9IHcgLyB0aGlzLl93aWR0aDtcbiAgICAgIGNvbnN0IHNjYWxlWTogbnVtYmVyID0gc2NhbGVYO1xuICAgICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog57im5bmF44KS6Kit5a6aXG4gICAgICogQHBhcmFtIGgg57im5bmFXG4gICAgICovXG4gICAgcHVibGljIHNldEhlaWdodChoOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHNjYWxlWDogbnVtYmVyID0gaCAvIHRoaXMuX2hlaWdodDtcbiAgICAgIGNvbnN0IHNjYWxlWTogbnVtYmVyID0gc2NhbGVYO1xuICAgICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5L2N572u44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy50cmFuc2xhdGUoeCwgeSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Lit5b+D5L2N572u44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu5Lit5b+D5L2N572uXG4gICAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxuICAgICAqXG4gICAgICogQG5vdGUgd2lkdGjjgYtoZWlnaHTjgpLoqK3lrprjgZfjgZ/jgYLjgajjgafjgarjgYTjgajjgIHmi6HlpKfnjofjgYzmraPjgZfjgY/lj5blvpfjgafjgY3jgarjgYTjgZ/jgoHjgZrjgozjgovjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2VudGVyUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgIHRoaXMuY2VudGVyWCh4KTtcbiAgICAgIHRoaXMuY2VudGVyWSh5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIrovrrjga7kvY3nva7jgpLoqK3lrprjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSB5IOS4iui+uuOBrlnou7jkvY3nva5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9wKHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5zZXRZKHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS4i+i+uuOBruS9jee9ruOCkuioreWumuOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHkg5LiL6L6644GuWei7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBib3R0b20oeTogbnVtYmVyKSB7XG4gICAgICBjb25zdCBoOiBudW1iZXIgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xuXG4gICAgICB0aGlzLnRyYW5zbGF0ZVkoeSAtIGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW3pui+uuOBruS9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHgg5bem6L6644GuWOi7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBsZWZ0KHg6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5zZXRYKHgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPs+i+uuOBruS9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHgg5Y+z6L6644GuWOi7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyByaWdodCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XG5cbiAgICAgIHRoaXMudHJhbnNsYXRlWCh4IC0gdyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWOi7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHggWOi7uOOBruS4reW/g+S9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBjZW50ZXJYKHg6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgdyA9IHRoaXMuX3dpZHRoICogdGhpcy5nZXRTY2FsZVgoKTtcblxuICAgICAgdGhpcy50cmFuc2xhdGVYKHggLSB3IC8gMi4wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBY6Lu444Gu5L2N572u44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXG4gICAgICovXG4gICAgcHVibGljIHNldFgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLnRyYW5zbGF0ZVgoeCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWei7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBjZW50ZXJZKHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgaDogbnVtYmVyID0gdGhpcy5faGVpZ2h0ICogdGhpcy5nZXRTY2FsZVkoKTtcblxuICAgICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoIC8gMi4wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBZ6Lu444Gu5L2N572u44KS6Kit5a6a44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0geSBZ6Lu444Gu5L2N572uXG4gICAgICovXG4gICAgcHVibGljIHNldFkoeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLnRyYW5zbGF0ZVkoeSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHBvc2l0aW9uIGZyb20gbGF5b3V0IGluZm9ybWF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGF5b3V0IExheW91dCBpbmZvcm1hdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBzZXR1cEZyb21MYXlvdXQobGF5b3V0OiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogdm9pZCB7XG4gICAgICBjb25zdCBrZXlXaWR0aCA9ICd3aWR0aCc7XG4gICAgICBjb25zdCBrZXlIZWlnaHQgPSAnaGVpZ2h0JztcbiAgICAgIGNvbnN0IGtleVggPSAneCc7XG4gICAgICBjb25zdCBrZXlZID0gJ3knO1xuICAgICAgY29uc3Qga2V5Q2VudGVyWCA9ICdjZW50ZXJfeCc7XG4gICAgICBjb25zdCBrZXlDZW50ZXJZID0gJ2NlbnRlcl95JztcbiAgICAgIGNvbnN0IGtleVRvcCA9ICd0b3AnO1xuICAgICAgY29uc3Qga2V5Qm90dG9tID0gJ2JvdHRvbSc7XG4gICAgICBjb25zdCBrZXlMZWZ0ID0gJ2xlZnQnO1xuICAgICAgY29uc3Qga2V5UmlnaHQgPSAncmlnaHQnO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwobGF5b3V0LmVuZCgpKTtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICAgIGlmIChrZXkgPT0ga2V5V2lkdGgpIHtcbiAgICAgICAgICB0aGlzLnNldFdpZHRoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5SGVpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5zZXRIZWlnaHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8c3RyaW5nLCBudW1iZXI+ID0gbGF5b3V0LmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbChsYXlvdXQuZW5kKCkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICBjb25zdCBrZXk6IHN0cmluZyA9IGl0ZS5wdHIoKS5maXJzdDtcbiAgICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgICAgaWYgKGtleSA9PSBrZXlYKSB7XG4gICAgICAgICAgdGhpcy5zZXRYKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5WSkge1xuICAgICAgICAgIHRoaXMuc2V0WSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUNlbnRlclgpIHtcbiAgICAgICAgICB0aGlzLmNlbnRlclgodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlDZW50ZXJZKSB7XG4gICAgICAgICAgdGhpcy5jZW50ZXJZKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5VG9wKSB7XG4gICAgICAgICAgdGhpcy50b3AodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlCb3R0b20pIHtcbiAgICAgICAgICB0aGlzLmJvdHRvbSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUxlZnQpIHtcbiAgICAgICAgICB0aGlzLmxlZnQodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlSaWdodCkge1xuICAgICAgICAgIHRoaXMucmlnaHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjsgLy8g5qiq5bmFXG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7IC8vIOe4puW5hVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0aCB9IGZyb20gJy4vY3ViaXNtbWF0aCc7XG5pbXBvcnQgQ3ViaXNtTWF0aCA9IGN1YmlzbW1hdGguQ3ViaXNtTWF0aDtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBjb25zdCBGcmFtZVJhdGUgPSAzMDtcbiAgY29uc3QgRXBzaWxvbiA9IDAuMDE7XG5cbiAgLyoqXG4gICAqIOmhlOOBruWQkeOBjeOBruWItuW+oeapn+iDvVxuICAgKlxuICAgKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og73jgpLmj5DkvpvjgZnjgovjgq/jg6njgrnjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21UYXJnZXRQb2ludCB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fZmFjZVRhcmdldFggPSAwLjA7XG4gICAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IDAuMDtcbiAgICAgIHRoaXMuX2ZhY2VYID0gMC4wO1xuICAgICAgdGhpcy5fZmFjZVkgPSAwLjA7XG4gICAgICB0aGlzLl9mYWNlVlggPSAwLjA7XG4gICAgICB0aGlzLl9mYWNlVlkgPSAwLjA7XG4gICAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSAwLjA7XG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pu05paw5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIC8vIOODh+ODq+OCv+aZgumWk+OCkuWKoOeul+OBmeOCi1xuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICAgIC8vIOmmluOCkuS4reWkruOBi+OCieW3puWPs+OBq+aMr+OCi+OBqOOBjeOBruW5s+Wdh+eahOOBqumAn+OBleOBryDnp5LpgJ/luqbjgILliqDpgJ/jg7vmuJvpgJ/jgpLogIPmha7jgZfjgabjgIHjgZ3jga7vvJLlgI3jgpLmnIDpq5jpgJ/luqbjgajjgZnjgotcbiAgICAgIC8vIOmhlOOBruaMr+OCiuWFt+WQiOOCkuOAgeS4reWkru+8iDAuMO+8ieOBi+OCieOAgeW3puWPs+OBr++8iCstMS4w77yJ44Go44GZ44KLXG4gICAgICBjb25zdCBmYWNlUGFyYW1NYXhWOiBudW1iZXIgPSA0MC4wIC8gMTAuMDsgLy8gNy4156eS6ZaT44GrNDDliIbnp7vli5UoNS4zL3NjKVxuICAgICAgY29uc3QgbWF4VjogbnVtYmVyID0gKGZhY2VQYXJhbU1heFYgKiAxLjApIC8gRnJhbWVSYXRlOyAvLyAxZnJhbWXjgYLjgZ/jgorjgavlpInljJbjgafjgY3jgovpgJ/luqbjga7kuIrpmZBcblxuICAgICAgaWYgKHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9PSAwLjApIHtcbiAgICAgICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRlbHRhVGltZVdlaWdodDogbnVtYmVyID1cbiAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX2xhc3RUaW1lU2Vjb25kcykgKiBGcmFtZVJhdGU7XG4gICAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG5cbiAgICAgIC8vIOacgOmrmOmAn+W6puOBq+OBquOCi+OBvuOBp+OBruaZgumWk+OCklxuICAgICAgY29uc3QgdGltZVRvTWF4U3BlZWQgPSAwLjE1O1xuICAgICAgY29uc3QgZnJhbWVUb01heFNwZWVkOiBudW1iZXIgPSB0aW1lVG9NYXhTcGVlZCAqIEZyYW1lUmF0ZTsgLy8gc2VjICogZnJhbWUvc2VjXG4gICAgICBjb25zdCBtYXhBOiBudW1iZXIgPSAoZGVsdGFUaW1lV2VpZ2h0ICogbWF4VikgLyBmcmFtZVRvTWF4U3BlZWQ7IC8vIDFmcmFtZeOBguOBn+OCiuOBruWKoOmAn+W6plxuXG4gICAgICAvLyDnm67mjIfjgZnlkJHjgY3jga/jgIHvvIhkeCwgZHnvvInmlrnlkJHjga7jg5njgq/jg4jjg6vjgajjgarjgotcbiAgICAgIGNvbnN0IGR4OiBudW1iZXIgPSB0aGlzLl9mYWNlVGFyZ2V0WCAtIHRoaXMuX2ZhY2VYO1xuICAgICAgY29uc3QgZHk6IG51bWJlciA9IHRoaXMuX2ZhY2VUYXJnZXRZIC0gdGhpcy5fZmFjZVk7XG5cbiAgICAgIGlmIChDdWJpc21NYXRoLmFicyhkeCkgPD0gRXBzaWxvbiAmJiBDdWJpc21NYXRoLmFicyhkeSkgPD0gRXBzaWxvbikge1xuICAgICAgICByZXR1cm47IC8vIOWkieWMluOBquOBl1xuICAgICAgfVxuXG4gICAgICAvLyDpgJ/luqbjga7mnIDlpKfjgojjgorjgoLlpKfjgY3jgYTloLTlkIjjga/jgIHpgJ/luqbjgpLokL3jgajjgZlcbiAgICAgIGNvbnN0IGQ6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICAgIC8vIOmAsuihjOaWueWQkeOBruacgOWkp+mAn+W6puODmeOCr+ODiOODq1xuICAgICAgY29uc3Qgdng6IG51bWJlciA9IChtYXhWICogZHgpIC8gZDtcbiAgICAgIGNvbnN0IHZ5OiBudW1iZXIgPSAobWF4ViAqIGR5KSAvIGQ7XG5cbiAgICAgIC8vIOePvuWcqOOBrumAn+W6puOBi+OCieOAgeaWsOimj+mAn+W6puOBuOOBruWkieWMlu+8iOWKoOmAn+W6pu+8ieOCkuaxguOCgeOCi1xuICAgICAgbGV0IGF4OiBudW1iZXIgPSB2eCAtIHRoaXMuX2ZhY2VWWDtcbiAgICAgIGxldCBheTogbnVtYmVyID0gdnkgLSB0aGlzLl9mYWNlVlk7XG5cbiAgICAgIGNvbnN0IGE6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSk7XG5cbiAgICAgIC8vIOWKoOmAn+OBruOBqOOBjVxuICAgICAgaWYgKGEgPCAtbWF4QSB8fCBhID4gbWF4QSkge1xuICAgICAgICBheCAqPSBtYXhBIC8gYTtcbiAgICAgICAgYXkgKj0gbWF4QSAvIGE7XG4gICAgICB9XG5cbiAgICAgIC8vIOWKoOmAn+W6puOCkuWFg+OBrumAn+W6puOBq+i2s+OBl+OBpuOAgeaWsOmAn+W6puOBqOOBmeOCi1xuICAgICAgdGhpcy5fZmFjZVZYICs9IGF4O1xuICAgICAgdGhpcy5fZmFjZVZZICs9IGF5O1xuXG4gICAgICAvLyDnm67nmoTjga7mlrnlkJHjgavov5HjgaXjgYTjgZ/jgajjgY3jgIHmu5HjgonjgYvjgavmuJvpgJ/jgZnjgovjgZ/jgoHjga7lh6bnkIZcbiAgICAgIC8vIOioreWumuOBleOCjOOBn+WKoOmAn+W6puOBp+atouOBvuOCi+S6i+OBruWHuuadpeOCi+i3nembouOBqOmAn+W6puOBrumWouS/guOBi+OCiVxuICAgICAgLy8g54++5Zyo44Go44KK44GG44KL5pyA6auY6YCf5bqm44KS6KiI566X44GX44CB44Gd44KM5Lul5LiK44Gu5pmC44Gv6YCf5bqm44KS6JC944Go44GZXG4gICAgICAvLyDigLvmnKzmnaXjgIHkurrplpPjga/nrYvlipvjgaflipvvvIjliqDpgJ/luqbvvInjgpLoqr/mlbTjgafjgY3jgovjgZ/jgoHjgIHjgojjgoroh6rnlLHluqbjgYzpq5jjgYTjgYzjgIHnsKHljZjjgarlh6bnkIbjgafmuIjjgb7jgZvjgabjgYTjgotcbiAgICAgIHtcbiAgICAgICAgLy8g5Yqg6YCf5bqm44CB6YCf5bqm44CB6Led6Zui44Gu6Zai5L+C5byP44CCXG4gICAgICAgIC8vICAgICAgICAgICAgMiAgNiAgICAgICAgICAgMiAgICAgICAgICAgICAgIDNcbiAgICAgICAgLy8gICAgICBzcXJ0KGEgIHQgICsgMTYgYSBoIHQgIC0gOCBhIGgpIC0gYSB0XG4gICAgICAgIC8vIHYgPSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgNCB0ICAtIDJcbiAgICAgICAgLy8gKHQ9MSlcbiAgICAgICAgLy8gXHTmmYLliLt044Gv44CB44GC44KJ44GL44GY44KB5Yqg6YCf5bqm44CB6YCf5bqm44KSMS82MCjjg5Xjg6zjg7zjg6Djg6zjg7zjg4jjgIHljZjkvY3jgarjgZcp44GnXG4gICAgICAgIC8vIFx06ICD44GI44Gm44GE44KL44Gu44Gn44CBdO+8ne+8keOBqOOBl+OBpua2iOOBl+OBpuOCiOOBhO+8iOKAu+acquaknOiovO+8iVxuXG4gICAgICAgIGNvbnN0IG1heFY6IG51bWJlciA9XG4gICAgICAgICAgMC41ICpcbiAgICAgICAgICAoQ3ViaXNtTWF0aC5zcXJ0KG1heEEgKiBtYXhBICsgMTYuMCAqIG1heEEgKiBkIC0gOC4wICogbWF4QSAqIGQpIC1cbiAgICAgICAgICAgIG1heEEpO1xuICAgICAgICBjb25zdCBjdXJWOiBudW1iZXIgPSBDdWJpc21NYXRoLnNxcnQoXG4gICAgICAgICAgdGhpcy5fZmFjZVZYICogdGhpcy5fZmFjZVZYICsgdGhpcy5fZmFjZVZZICogdGhpcy5fZmFjZVZZXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGN1clYgPiBtYXhWKSB7XG4gICAgICAgICAgLy8g54++5Zyo44Gu6YCf5bqmID4g5pyA6auY6YCf5bqm44Gu44Go44GN44CB5pyA6auY6YCf5bqm44G+44Gn5rib6YCfXG4gICAgICAgICAgdGhpcy5fZmFjZVZYICo9IG1heFYgLyBjdXJWO1xuICAgICAgICAgIHRoaXMuX2ZhY2VWWSAqPSBtYXhWIC8gY3VyVjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mYWNlWCArPSB0aGlzLl9mYWNlVlg7XG4gICAgICB0aGlzLl9mYWNlWSArPSB0aGlzLl9mYWNlVlk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWOi7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xuICAgICAqXG4gICAgICogQHJldHVybiBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRYKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFjZVg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWei7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xuICAgICAqXG4gICAgICogQHJldHVybiBZ6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRZKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFjZVk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6aGU44Gu5ZCR44GN44Gu55uu5qiZ5YCk44KS6Kit5a6aXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgICAqIEBwYXJhbSB5IFnou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXG4gICAgICovXG4gICAgcHVibGljIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fZmFjZVRhcmdldFggPSB4O1xuICAgICAgdGhpcy5fZmFjZVRhcmdldFkgPSB5O1xuICAgIH1cblxuICAgIHByaXZhdGUgX2ZhY2VUYXJnZXRYOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBrljnm67mqJnlgKTvvIjjgZPjga7lgKTjgavov5HjgaXjgYTjgabjgYTjgY/vvIlcbiAgICBwcml2YXRlIF9mYWNlVGFyZ2V0WTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga5Z55uu5qiZ5YCk77yI44GT44Gu5YCk44Gr6L+R44Gl44GE44Gm44GE44GP77yJXG4gICAgcHJpdmF0ZSBfZmFjZVg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GNWO+8iC0xLjAgfiAxLjDvvIlcbiAgICBwcml2YXRlIF9mYWNlWTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY1Z77yILTEuMCB+IDEuMO+8iVxuICAgIHByaXZhdGUgX2ZhY2VWWDogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga7lpInljJbpgJ/luqZYXG4gICAgcHJpdmF0ZSBfZmFjZVZZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBruWkieWMlumAn+W6pllcbiAgICBwcml2YXRlIF9sYXN0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g5pyA5b6M44Gu5a6f6KGM5pmC6ZaTW+enkl1cbiAgICBwcml2YXRlIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICogMuasoeWFg+ODmeOCr+ODiOODq+Wei1xuICAgKlxuICAgKiAy5qyh5YWD44OZ44Kv44OI44Or5Z6L44Gu5qmf6IO944KS5o+Q5L6b44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMiB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyB4PzogbnVtYmVyLCBwdWJsaWMgeT86IG51bWJlcikge1xuICAgICAgdGhpcy54ID0geCA9PSB1bmRlZmluZWQgPyAwLjAgOiB4O1xuXG4gICAgICB0aGlzLnkgPSB5ID09IHVuZGVmaW5lZCA/IDAuMCA6IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OZ44Kv44OI44Or44Gu5Yqg566XXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmVjdG9yMiDliqDnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICAgKiBAcmV0dXJuIOWKoOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkKHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgIHJldC54ID0gdGhpcy54ICsgdmVjdG9yMi54O1xuICAgICAgcmV0LnkgPSB0aGlzLnkgKyB2ZWN0b3IyLnk7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xuICAgICAqXG4gICAgICogQHBhcmFtIHZlY3RvcjIg5rib566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAgICogQHJldHVybiDmuJvnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAgICovXG4gICAgcHVibGljIHN1YnN0cmFjdCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICByZXQueCA9IHRoaXMueCAtIHZlY3RvcjIueDtcbiAgICAgIHJldC55ID0gdGhpcy55IC0gdmVjdG9yMi55O1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOS5l+eul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgICAqIEByZXR1cm4g5LmX566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBtdWx0aXBseSh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICByZXQueCA9IHRoaXMueCAqIHZlY3RvcjIueDtcbiAgICAgIHJldC55ID0gdGhpcy55ICogdmVjdG9yMi55O1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpco44K544Kr44Op44O8KVxuICAgICAqXG4gICAgICogQHBhcmFtIHNjYWxhciDkuZfnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcbiAgICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgbXVsdGlwbHlCeVNjYWxlcihzY2FsYXI6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOmZpOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBkaXZpc2lvbih2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICByZXQueCA9IHRoaXMueCAvIHZlY3RvcjIueDtcbiAgICAgIHJldC55ID0gdGhpcy55IC8gdmVjdG9yMi55O1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpco44K544Kr44Op44O8KVxuICAgICAqXG4gICAgICogQHBhcmFtIHNjYWxhciDpmaTnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcbiAgICAgKiBAcmV0dXJuIOmZpOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZGl2aXNpb25CeVNjYWxhcihzY2FsYXI6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgICAgcmV0dXJuIHRoaXMuZGl2aXNpb24obmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5njgq/jg4jjg6vjga7plbfjgZXjgpLlj5blvpfjgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4g44OZ44Kv44OI44Or44Gu6ZW344GVXG4gICAgICovXG4gICAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODmeOCr+ODiOODq+OBrui3nembouOBruWPluW+l1xuICAgICAqXG4gICAgICogQHBhcmFtIGEg54K5XG4gICAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7ot53pm6JcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RGlzdGFuY2VXaXRoKGE6IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGguc3FydChcbiAgICAgICAgKHRoaXMueCAtIGEueCkgKiAodGhpcy54IC0gYS54KSArICh0aGlzLnkgLSBhLnkpICogKHRoaXMueSAtIGEueSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OJ44OD44OI56mN44Gu6KiI566XXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYSDlgKRcbiAgICAgKiBAcmV0dXJuIOe1kOaenFxuICAgICAqL1xuICAgIHB1YmxpYyBkb3QoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy54ICogYS54ICsgdGhpcy55ICogYS55O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOato+imj+WMluOBrumBqeeUqFxuICAgICAqL1xuICAgIHB1YmxpYyBub3JtYWxpemUoKTogdm9pZCB7XG4gICAgICBjb25zdCBsZW5ndGg6IG51bWJlciA9IE1hdGgucG93KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSwgMC41KTtcblxuICAgICAgdGhpcy54ID0gdGhpcy54IC8gbGVuZ3RoO1xuICAgICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBhOOBi++8n++8iVxuICAgICAqXG4gICAgICog5YCk44GM562J44GX44GE44GL77yfXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxuICAgICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgYRcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0VxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMueCA9PSByaHMueCAmJiB0aGlzLnkgPT0gcmhzLnk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GP44Gq44GE44GL77yf77yJXG4gICAgICpcbiAgICAgKiDlgKTjgYznrYnjgZfjgY/jgarjgYTjgYvvvJ9cbiAgICAgKlxuICAgICAqIEBwYXJhbSByaHMg56K66KqN44GZ44KL5YCkXG4gICAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GEXG4gICAgICovXG4gICAgcHVibGljIGlzTm90RXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gIXRoaXMuaXNFcXVhbChyaHMpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdHJpeDQ0IH0gZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgQ3ViaXNtTWF0cml4NDQgPSBjdWJpc21tYXRyaXg0NC5DdWJpc21NYXRyaXg0NDtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44Kr44Oh44Op44Gu5L2N572u5aSJ5pu044Gr5L2/44GG44Go5L6/5Yip44GqNHg06KGM5YiXXG4gICAqXG4gICAqIOOCq+ODoeODqeOBruS9jee9ruWkieabtOOBq+S9v+OBhuOBqOS+v+WIqeOBqjR4NOihjOWIl+OBruOCr+ODqeOCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVZpZXdNYXRyaXggZXh0ZW5kcyBDdWJpc21NYXRyaXg0NCB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX3NjcmVlbkxlZnQgPSAwLjA7XG4gICAgICB0aGlzLl9zY3JlZW5SaWdodCA9IDAuMDtcbiAgICAgIHRoaXMuX3NjcmVlblRvcCA9IDAuMDtcbiAgICAgIHRoaXMuX3NjcmVlbkJvdHRvbSA9IDAuMDtcbiAgICAgIHRoaXMuX21heExlZnQgPSAwLjA7XG4gICAgICB0aGlzLl9tYXhSaWdodCA9IDAuMDtcbiAgICAgIHRoaXMuX21heFRvcCA9IDAuMDtcbiAgICAgIHRoaXMuX21heEJvdHRvbSA9IDAuMDtcbiAgICAgIHRoaXMuX21heFNjYWxlID0gMC4wO1xuICAgICAgdGhpcy5fbWluU2NhbGUgPSAwLjA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog56e75YuV44KS6Kq/5pW0XG4gICAgICpcbiAgICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAgICogQHBhcmFtIHkgWei7uOOBruenu+WLlemHj1xuICAgICAqL1xuICAgIHB1YmxpYyBhZGp1c3RUcmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLl90clswXSAqIHRoaXMuX21heExlZnQgKyAodGhpcy5fdHJbMTJdICsgeCkgPiB0aGlzLl9zY3JlZW5MZWZ0KSB7XG4gICAgICAgIHggPSB0aGlzLl9zY3JlZW5MZWZ0IC0gdGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhMZWZ0IC0gdGhpcy5fdHJbMTJdO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgKyAodGhpcy5fdHJbMTJdICsgeCkgPFxuICAgICAgICB0aGlzLl9zY3JlZW5SaWdodFxuICAgICAgKSB7XG4gICAgICAgIHggPSB0aGlzLl9zY3JlZW5SaWdodCAtIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgLSB0aGlzLl90clsxMl07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl90cls1XSAqIHRoaXMuX21heFRvcCArICh0aGlzLl90clsxM10gKyB5KSA8IHRoaXMuX3NjcmVlblRvcCkge1xuICAgICAgICB5ID0gdGhpcy5fc2NyZWVuVG9wIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhUb3AgLSB0aGlzLl90clsxM107XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gKyAodGhpcy5fdHJbMTNdICsgeSkgPlxuICAgICAgICB0aGlzLl9zY3JlZW5Cb3R0b21cbiAgICAgICkge1xuICAgICAgICB5ID0gdGhpcy5fc2NyZWVuQm90dG9tIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gLSB0aGlzLl90clsxM107XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaLoeWkp+eOh+OCkuiqv+aVtFxuICAgICAqXG4gICAgICogQHBhcmFtIGN4IOaLoeWkp+OCkuihjOOBhljou7jjga7kuK3lv4PkvY3nva5cbiAgICAgKiBAcGFyYW0gY3kg5ouh5aSn44KS6KGM44GGWei7uOOBruS4reW/g+S9jee9rlxuICAgICAqIEBwYXJhbSBzY2FsZSDmi6HlpKfnjodcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRqdXN0U2NhbGUoY3g6IG51bWJlciwgY3k6IG51bWJlciwgc2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgbWF4U2NhbGU6IG51bWJlciA9IHRoaXMuZ2V0TWF4U2NhbGUoKTtcbiAgICAgIGNvbnN0IG1pblNjYWxlOiBudW1iZXIgPSB0aGlzLmdldE1pblNjYWxlKCk7XG5cbiAgICAgIGNvbnN0IHRhcmdldFNjYWxlID0gc2NhbGUgKiB0aGlzLl90clswXTtcblxuICAgICAgaWYgKHRhcmdldFNjYWxlIDwgbWluU2NhbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyWzBdID4gMC4wKSB7XG4gICAgICAgICAgc2NhbGUgPSBtaW5TY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFNjYWxlID4gbWF4U2NhbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyWzBdID4gMC4wKSB7XG4gICAgICAgICAgc2NhbGUgPSBtYXhTY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIGN4LFxuICAgICAgICBjeSxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjBcbiAgICAgIF0pO1xuXG4gICAgICBjb25zdCB0cjI6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICBzY2FsZSxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICBzY2FsZSxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgY29uc3QgdHIzOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMS4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDEuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAwLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgMC4wLFxuICAgICAgICAxLjAsXG4gICAgICAgIDAuMCxcbiAgICAgICAgLWN4LFxuICAgICAgICAtY3ksXG4gICAgICAgIDAuMCxcbiAgICAgICAgMS4wXG4gICAgICBdKTtcblxuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIzLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIyLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+mkiueUn+OBruevhOWbsuOBruioreWumlxuICAgICAqXG4gICAgICogQHBhcmFtIGxlZnQgICAgICDlt6bovrrjga5Y6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIGJvdHRvbSAgICDkuIvovrrjga5Z6Lu444Gu5L2N572uXG4gICAgICogQHBhcmFtIHRvcCAgICAgICDkuIrovrrjga5Z6Lu444Gu5L2N572uXG4gICAgICovXG4gICAgcHVibGljIHNldFNjcmVlblJlY3QoXG4gICAgICBsZWZ0OiBudW1iZXIsXG4gICAgICByaWdodDogbnVtYmVyLFxuICAgICAgYm90dG9tOiBudW1iZXIsXG4gICAgICB0b3A6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fc2NyZWVuTGVmdCA9IGxlZnQ7XG4gICAgICB0aGlzLl9zY3JlZW5SaWdodCA9IHJpZ2h0O1xuICAgICAgdGhpcy5fc2NyZWVuQm90dG9tID0gYm90dG9tO1xuICAgICAgdGhpcy5fc2NyZWVuVG9wID0gdG9wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsuOBruioreWumlxuICAgICAqIEBwYXJhbSBsZWZ0ICAgICAg5bem6L6644GuWOi7uOOBruS9jee9rlxuICAgICAqIEBwYXJhbSByaWdodCAgICAg5Y+z6L6644GuWOi7uOOBruS9jee9rlxuICAgICAqIEBwYXJhbSBib3R0b20gICAg5LiL6L6644GuWei7uOOBruS9jee9rlxuICAgICAqIEBwYXJhbSB0b3AgICAgICAg5LiK6L6644GuWei7uOOBruS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNYXhTY3JlZW5SZWN0KFxuICAgICAgbGVmdDogbnVtYmVyLFxuICAgICAgcmlnaHQ6IG51bWJlcixcbiAgICAgIGJvdHRvbTogbnVtYmVyLFxuICAgICAgdG9wOiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuX21heExlZnQgPSBsZWZ0O1xuICAgICAgdGhpcy5fbWF4UmlnaHQgPSByaWdodDtcbiAgICAgIHRoaXMuX21heFRvcCA9IHRvcDtcbiAgICAgIHRoaXMuX21heEJvdHRvbSA9IGJvdHRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmnIDlpKfmi6HlpKfnjofjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gbWF4U2NhbGUg5pyA5aSn5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIHNldE1heFNjYWxlKG1heFNjYWxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX21heFNjYWxlID0gbWF4U2NhbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pyA5bCP5ouh5aSn546H44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIG1pblNjYWxlIOacgOWwj+aLoeWkp+eOh1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNaW5TY2FsZShtaW5TY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9taW5TY2FsZSA9IG1pblNjYWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOacgOWkp+aLoeWkp+eOh+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g5pyA5aSn5ouh5aSn546HXG4gICAgICovXG4gICAgcHVibGljIGdldE1heFNjYWxlKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fbWF4U2NhbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pyA5bCP5ouh5aSn546H44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDmnIDlsI/mi6HlpKfnjodcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWluU2NhbGUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9taW5TY2FsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmi6HlpKfnjofjgYzmnIDlpKfjgavjgarjgaPjgabjgYTjgovjgYvjgpLnorroqo3jgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSDmi6HlpKfnjofjga/mnIDlpKdcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOaLoeWkp+eOh+OBr+acgOWkp+OBp+OBr+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc01heFNjYWxlKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPj0gdGhpcy5fbWF4U2NhbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5ouh5aSn546H44GM5pyA5bCP44Gr44Gq44Gj44Gm44GE44KL44GL44KS56K66KqN44GZ44KLXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRydWUg5ouh5aSn546H44Gv5pyA5bCPXG4gICAgICogQHJldHVybiBmYWxzZSDmi6HlpKfnjofjga/mnIDlsI/jgafjga/jgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNNaW5TY2FsZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFNjYWxlWCgpIDw9IHRoaXMuX21pblNjYWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruW3pui+uuOBru+8uOi7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644GuWOi7uOS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTY3JlZW5MZWZ0KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fc2NyZWVuTGVmdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruWPs+i+uuOBrljou7jkvY3nva5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2NyZWVuUmlnaHQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JlZW5SaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIvovrrjga5Z6Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIvovrrjga5Z6Lu45L2N572uXG4gICAgICovXG4gICAgcHVibGljIGdldFNjcmVlbkJvdHRvbSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3NjcmVlbkJvdHRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIrovrrjga5Z6Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIrovrrjga5Z6Lu45L2N572uXG4gICAgICovXG4gICAgcHVibGljIGdldFNjcmVlblRvcCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3NjcmVlblRvcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE1heExlZnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXhMZWZ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPs+i+uuOBrljou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOWPs+i+uuOBrljou7jkvY3nva7jga7mnIDlpKflgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWF4UmlnaHQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXhSaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIvovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDkuIvovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE1heEJvdHRvbSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX21heEJvdHRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE1heFRvcCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX21heFRvcDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9zY3JlZW5MZWZ0OiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgICBwcml2YXRlIF9zY3JlZW5SaWdodDogbnVtYmVyOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7nr4Tlm7LvvIjlj7PovrpY6Lu45L2N572u77yJXG4gICAgcHJpdmF0ZSBfc2NyZWVuVG9wOiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOS4iui+ulnou7jkvY3nva7vvIlcbiAgICBwcml2YXRlIF9zY3JlZW5Cb3R0b206IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICAgIHByaXZhdGUgX21heExlZnQ6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5bem6L66WOi7uOS9jee9ru+8iVxuICAgIHByaXZhdGUgX21heFJpZ2h0OiBudW1iZXI7IC8vIOirlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsu+8iOWPs+i+uljou7jkvY3nva7vvIlcbiAgICBwcml2YXRlIF9tYXhUb3A6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICAgIHByaXZhdGUgX21heEJvdHRvbTogbnVtYmVyOyAvLyDoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7LvvIjkuIvovrpZ6Lu45L2N572u77yJXG4gICAgcHJpdmF0ZSBfbWF4U2NhbGU6IG51bWJlcjsgLy8g5ouh5aSn546H44Gu5pyA5aSn5YCkXG4gICAgcHJpdmF0ZSBfbWluU2NhbGU6IG51bWJlcjsgLy8g5ouh5aSn546H44Gu5pyA5bCP5YCkXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4vY3ViaXNtbW9kZWwnO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIZcbiAgICpcbiAgICogTW9j44OH44O844K/44Gu566h55CG44KS6KGM44GG44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9jIHtcbiAgICAvKipcbiAgICAgKiBNb2Pjg4fjg7zjgr/jga7kvZzmiJBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShtb2NCeXRlczogQXJyYXlCdWZmZXIpOiBDdWJpc21Nb2Mge1xuICAgICAgbGV0IGN1YmlzbU1vYzogQ3ViaXNtTW9jID0gbnVsbDtcbiAgICAgIGNvbnN0IG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MgPSBMaXZlMkRDdWJpc21Db3JlLk1vYy5mcm9tQXJyYXlCdWZmZXIoXG4gICAgICAgIG1vY0J5dGVzXG4gICAgICApO1xuXG4gICAgICBpZiAobW9jKSB7XG4gICAgICAgIGN1YmlzbU1vYyA9IG5ldyBDdWJpc21Nb2MobW9jKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1YmlzbU1vYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb2Pjg4fjg7zjgr/jgpLliYrpmaRcbiAgICAgKlxuICAgICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpOOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vYzogQ3ViaXNtTW9jKTogdm9pZCB7XG4gICAgICBtb2MuX21vYy5fcmVsZWFzZSgpO1xuICAgICAgbW9jLl9tb2MgPSBudWxsO1xuICAgICAgbW9jID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgpLkvZzmiJDjgZnjgotcbiAgICAgKlxuICAgICAqIEByZXR1cm4gTW9j44OH44O844K/44GL44KJ5L2c5oiQ44GV44KM44Gf44Oi44OH44OrXG4gICAgICovXG4gICAgY3JlYXRlTW9kZWwoKTogQ3ViaXNtTW9kZWwge1xuICAgICAgbGV0IGN1YmlzbU1vZGVsOiBDdWJpc21Nb2RlbCA9IG51bGw7XG5cbiAgICAgIGNvbnN0IG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbC5mcm9tTW9jKFxuICAgICAgICB0aGlzLl9tb2NcbiAgICAgICk7XG5cbiAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICBjdWJpc21Nb2RlbCA9IG5ldyBDdWJpc21Nb2RlbChtb2RlbCk7XG4gICAgICAgIGN1YmlzbU1vZGVsLmluaXRpYWxpemUoKTtcblxuICAgICAgICArK3RoaXMuX21vZGVsQ291bnQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdWJpc21Nb2RlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgpLliYrpmaTjgZnjgotcbiAgICAgKi9cbiAgICBkZWxldGVNb2RlbChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICAgIGlmIChtb2RlbCAhPSBudWxsKSB7XG4gICAgICAgIG1vZGVsLnJlbGVhc2UoKTtcbiAgICAgICAgbW9kZWwgPSBudWxsO1xuICAgICAgICAtLXRoaXMuX21vZGVsQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jKSB7XG4gICAgICB0aGlzLl9tb2MgPSBtb2M7XG4gICAgICB0aGlzLl9tb2RlbENvdW50ID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIENTTV9BU1NFUlQodGhpcy5fbW9kZWxDb3VudCA9PSAwKTtcblxuICAgICAgdGhpcy5fbW9jLl9yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9tb2MgPSBudWxsO1xuICAgIH1cblxuICAgIF9tb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jOyAvLyBNb2Pjg4fjg7zjgr9cbiAgICBfbW9kZWxDb3VudDogbnVtYmVyOyAvLyBNb2Pjg4fjg7zjgr/jgYvjgonkvZzjgonjgozjgZ/jg6Ljg4fjg6vjga7lgIvmlbBcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbW1hcCB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtQmxlbmRNb2RlID0gY3ViaXNtcmVuZGVyZXIuQ3ViaXNtQmxlbmRNb2RlO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgY3NtTWFwID0gY3NtbWFwLmNzbU1hcDtcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiDjg6Ljg4fjg6tcbiAgICpcbiAgICogTW9j44OH44O844K/44GL44KJ55Sf5oiQ44GV44KM44KL44Oi44OH44Or44Gu44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWwge1xuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAvLyBVcGRhdGUgbW9kZWxcbiAgICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xuXG4gICAgICB0aGlzLl9tb2RlbC5kcmF3YWJsZXMucmVzZXREeW5hbWljRmxhZ3MoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq3jg6Pjg7Pjg5Djgrnjga7luYXjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q2FudmFzV2lkdGgoKTogbnVtYmVyIHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwLjA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzV2lkdGggL1xuICAgICAgICB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLlBpeGVsc1BlclVuaXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kt44Oj44Oz44OQ44K544Gu6auY44GV44KS5Y+W5b6X44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGdldENhbnZhc0hlaWdodCgpOiBudW1iZXIge1xuICAgICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbW9kZWwuY2FudmFzaW5mby5DYW52YXNIZWlnaHQgL1xuICAgICAgICB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLlBpeGVsc1BlclVuaXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44KS5L+d5a2Y44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHNhdmVQYXJhbWV0ZXJzKCk6IHZvaWQge1xuICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG4gICAgICBjb25zdCBzYXZlZFBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuZ2V0U2l6ZSgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgICAgaWYgKGkgPCBzYXZlZFBhcmFtZXRlckNvdW50KSB7XG4gICAgICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLnNldChpLCB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3NhdmVkUGFyYW1ldGVycy5wdXNoQmFjayh0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44KS5Y+W5b6XXG4gICAgICovXG4gICAgcHVibGljIGdldE1vZGVsKCk6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCueOCkuWPluW+l1xuICAgICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcbiAgICAgKiBAcmV0dXJuIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJ0SW5kZXgocGFydElkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgICBsZXQgcGFydEluZGV4OiBudW1iZXI7XG4gICAgICBjb25zdCBwYXJ0Q291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcnRzLmNvdW50O1xuXG4gICAgICBmb3IgKHBhcnRJbmRleCA9IDA7IHBhcnRJbmRleCA8IHBhcnRDb3VudDsgKytwYXJ0SW5kZXgpIHtcbiAgICAgICAgaWYgKHBhcnRJZCA9PSB0aGlzLl9wYXJ0SWRzLmF0KHBhcnRJbmRleCkpIHtcbiAgICAgICAgICByZXR1cm4gcGFydEluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOAgemdnuWtmOWcqOODkeODvOODhElE44Oq44K544OI5YaF44Gr44GC44KL44GL44KS5qSc57Si44GX44CB44Gd44Gu44Kk44Oz44OH44OD44Kv44K544KS6L+U44GZXG4gICAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0SWQuaXNFeGlzdChwYXJ0SWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRJZC5nZXRWYWx1ZShwYXJ0SWQpO1xuICAgICAgfVxuXG4gICAgICAvLyDpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOOBq+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgICAgcGFydEluZGV4ID0gcGFydENvdW50ICsgdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0U2l6ZSgpO1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0SWQuc2V0VmFsdWUocGFydElkLCBwYXJ0SW5kZXgpO1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmFwcGVuZEtleShwYXJ0SW5kZXgpO1xuXG4gICAgICByZXR1cm4gcGFydEluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OR44O844OE44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcnRDb3VudCgpOiBudW1iZXIge1xuICAgICAgY29uc3QgcGFydENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJ0cy5jb3VudDtcbiAgICAgIHJldHVybiBwYXJ0Q291bnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aKEluZGV4KVxuICAgICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAgICovXG4gICAgcHVibGljIHNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXg6IG51bWJlciwgb3BhY2l0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmlzRXhpc3QocGFydEluZGV4KSkge1xuICAgICAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuc2V0VmFsdWUocGFydEluZGV4LCBvcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICAgIENTTV9BU1NFUlQoMCA8PSBwYXJ0SW5kZXggJiYgcGFydEluZGV4IDwgdGhpcy5nZXRQYXJ0Q291bnQoKSk7XG5cbiAgICAgIHRoaXMuX3BhcnRPcGFjaXRpZXNbcGFydEluZGV4XSA9IG9wYWNpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aKElkKVxuICAgICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcbiAgICAgKiBAcGFyYW0gb3BhY2l0eSDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqZcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UGFydE9wYWNpdHlCeUlkKHBhcnRJZDogQ3ViaXNtSWRIYW5kbGUsIG9wYWNpdHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgLy8g6auY6YCf5YyW44Gu44Gf44KB44GrUGFydEluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXG4gICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJ0SW5kZXgocGFydElkKTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm47IC8vIOODkeODvOODhOOBjOOBquOBhOOBruOBp+OCueOCreODg+ODl1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFBhcnRPcGFjaXR5QnlJbmRleChpbmRleCwgb3BhY2l0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XKGluZGV4KVxuICAgICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqZcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuaXNFeGlzdChwYXJ0SW5kZXgpKSB7XG4gICAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBquOBhOODkeODvOODhElE44Gu5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44O844OE44Oq44K544OI44GL44KJ5LiN6YCP5piO5bqm44KS6L+U44GZ44CCXG4gICAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuZ2V0VmFsdWUocGFydEluZGV4KTtcbiAgICAgIH1cblxuICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgICBDU01fQVNTRVJUKDAgPD0gcGFydEluZGV4ICYmIHBhcnRJbmRleCA8IHRoaXMuZ2V0UGFydENvdW50KCkpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fcGFydE9wYWNpdGllc1twYXJ0SW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruWPluW+lyhpZClcbiAgICAgKiBAcGFyYW0gcGFydElkIOODkeODvOODhOOBru+8qe+9hFxuICAgICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJZChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq1BhcnRJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxuICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFydEluZGV4KHBhcnRJZCk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIDA7IC8vIOODkeODvOODhOOBjOeEoeOBhOOBruOBp+OCueOCreODg+ODl1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgoaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgICAqIEBwYXJhbSDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgICBsZXQgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcbiAgICAgIGNvbnN0IGlkQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG5cbiAgICAgIGZvciAocGFyYW1ldGVySW5kZXggPSAwOyBwYXJhbWV0ZXJJbmRleCA8IGlkQ291bnQ7ICsrcGFyYW1ldGVySW5kZXgpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlcklkICE9IHRoaXMuX3BhcmFtZXRlcklkcy5hdChwYXJhbWV0ZXJJbmRleCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJJbmRleDtcbiAgICAgIH1cblxuICAgICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jlhoXjgpLmpJzntKLjgZfjgIHjgZ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLov5TjgZlcbiAgICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmlzRXhpc3QocGFyYW1ldGVySWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFZhbHVlKHBhcmFtZXRlcklkKTtcbiAgICAgIH1cblxuICAgICAgLy8g6Z2e5a2Y5Zyo44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jjgavjgarjgYTloLTlkIjmlrDjgZfjgY/opoHntKDjgpLov73liqDjgZnjgotcbiAgICAgIHBhcmFtZXRlckluZGV4ID1cbiAgICAgICAgdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudCArIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuZ2V0U2l6ZSgpO1xuXG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLnNldFZhbHVlKHBhcmFtZXRlcklkLCBwYXJhbWV0ZXJJbmRleCk7XG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5hcHBlbmRLZXkocGFyYW1ldGVySW5kZXgpO1xuXG4gICAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyYW1ldGVyQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJNYXhpbXVtVmFsdWUocGFyYW1ldGVySW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyYW1ldGVyTWluaW11bVZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu44OH44OV44Kp44Or44OI5YCk44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmRlZmF1bHRWYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCAgICDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuaXNFeGlzdChwYXJhbWV0ZXJJbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmdldFZhbHVlKHBhcmFtZXRlckluZGV4KTtcbiAgICAgIH1cblxuICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgICBDU01fQVNTRVJUKFxuICAgICAgICAwIDw9IHBhcmFtZXRlckluZGV4ICYmIHBhcmFtZXRlckluZGV4IDwgdGhpcy5nZXRQYXJhbWV0ZXJDb3VudCgpXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAg44OR44Op44Oh44O844K/44GuSURcbiAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq3BhcmFtZXRlckluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXG4gICAgICBjb25zdCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruioreWumlxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXG4gICAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcbiAgICAgIHZhbHVlOiBudW1iZXIsXG4gICAgICB3ZWlnaHQgPSAxLjBcbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5pc0V4aXN0KHBhcmFtZXRlckluZGV4KSkge1xuICAgICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5zZXRWYWx1ZShcbiAgICAgICAgICBwYXJhbWV0ZXJJbmRleCxcbiAgICAgICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgOiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5nZXRWYWx1ZShwYXJhbWV0ZXJJbmRleCkgKlxuICAgICAgICAgICAgICAgICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICAgICAgdmFsdWUgKiB3ZWlnaHRcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueOBruevhOWbsuWGheaknOefpVxuICAgICAgQ1NNX0FTU0VSVChcbiAgICAgICAgMCA8PSBwYXJhbWV0ZXJJbmRleCAmJiBwYXJhbWV0ZXJJbmRleCA8IHRoaXMuZ2V0UGFyYW1ldGVyQ291bnQoKVxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPCB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XSA+IHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSA9XG4gICAgICAgIHdlaWdodCA9PSAxXG4gICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgIDogKHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPVxuICAgICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdICogKDEgLSB3ZWlnaHQpICtcbiAgICAgICAgICAgICAgdmFsdWUgKiB3ZWlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruioreWumlxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgICAqIEBwYXJhbSB2YWx1ZSDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgd2VpZ2h0ID0gMS4wXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Yqg566XKGluZGV4KVxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXG4gICAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcbiAgICAgIHZhbHVlOiBudW1iZXIsXG4gICAgICB3ZWlnaHQgPSAxLjBcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgICAgICBwYXJhbWV0ZXJJbmRleCxcbiAgICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICsgdmFsdWUgKiB3ZWlnaHRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Yqg566XKGlkKVxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/vvKnvvKRcbiAgICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXG4gICAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgcGFyYW1ldGVySWQ6IGFueSxcbiAgICAgIHZhbHVlOiBudW1iZXIsXG4gICAgICB3ZWlnaHQgPSAxLjBcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICAgIHRoaXMuYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7kuZfnrpdcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQg44OR44Op44Oh44O844K/44GuSURcbiAgICAgKiBAcGFyYW0gdmFsdWUg5LmX566X44GZ44KL5YCkXG4gICAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICAgKi9cbiAgICBwdWJsaWMgbXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgd2VpZ2h0ID0gMS4wXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgICB0aGlzLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7kuZfnrpdcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIHZhbHVlIOS5l+eul+OBmeOCi+WApFxuICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIG11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcbiAgICAgIHZhbHVlOiBudW1iZXIsXG4gICAgICB3ZWlnaHQgPSAxLjBcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgICAgICBwYXJhbWV0ZXJJbmRleCxcbiAgICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICpcbiAgICAgICAgICAoMS4wICsgKHZhbHVlIC0gMS4wKSAqIHdlaWdodClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJZCBEcmF3YWJsZeOBrklEXG4gICAgICogQHJldHVybiBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IGRyYXdhYmxlQ291bnQgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBkcmF3YWJsZUluZGV4ID0gMDtcbiAgICAgICAgZHJhd2FibGVJbmRleCA8IGRyYXdhYmxlQ291bnQ7XG4gICAgICAgICsrZHJhd2FibGVJbmRleFxuICAgICAgKSB7XG4gICAgICAgIGlmICh0aGlzLl9kcmF3YWJsZUlkcy5hdChkcmF3YWJsZUluZGV4KSA9PSBkcmF3YWJsZUlkKSB7XG4gICAgICAgICAgcmV0dXJuIGRyYXdhYmxlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUNvdW50KCk6IG51bWJlciB7XG4gICAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuICAgICAgcmV0dXJuIGRyYXdhYmxlQ291bnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga5JROOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBrklEXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlSWQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pZHM7XG4gICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcmFtZXRlcklkc1tkcmF3YWJsZUluZGV4XSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7mj4/nlLvpoIbjg6rjgrnjg4jjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIERyYXdhYmxl44Gu5o+P55S76aCG44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlUmVuZGVyT3JkZXJzKCk6IEludDMyQXJyYXkge1xuICAgICAgY29uc3QgcmVuZGVyT3JkZXJzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnJlbmRlck9yZGVycztcbiAgICAgIHJldHVybiByZW5kZXJPcmRlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7jg4bjgq/jgrnjg4Hjg6PjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7jg4bjgq/jgrnjg4Hjg6PjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgY29uc3QgdGV4dHVyZUluZGljZXM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudGV4dHVyZUluZGljZXM7XG4gICAgICByZXR1cm4gdGV4dHVyZUluZGljZXNbZHJhd2FibGVJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga5WZXJ0ZXhQb3NpdGlvbnPjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICAgKlxuICAgICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp0RyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICBkcmF3YWJsZUluZGV4ICAgRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dmFsICB0cnVlICAgIERyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAgICogQHJldHZhbCAgZmFsc2UgICBEcmF3YWJsZeOBrumggueCueaDheWgseOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlKFxuICAgICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlQml0KFxuICAgICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbDjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBjb25zdCBpbmRleENvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pbmRleENvdW50cztcbiAgICAgIHJldHVybiBpbmRleENvdW50c1tkcmF3YWJsZUluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBrumggueCueOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBjb25zdCB2ZXJ0ZXhDb3VudHMgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4Q291bnRzO1xuICAgICAgcmV0dXJuIHZlcnRleENvdW50c1tkcmF3YWJsZUluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBrumggueCueODquOCueODiOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyhkcmF3YWJsZUluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueODquOCueODiOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmFyYWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleEluZGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogVWludDE2QXJyYXkge1xuICAgICAgY29uc3QgaW5kaWNlc0FycmF5OiBVaW50MTZBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmluZGljZXM7XG4gICAgICByZXR1cm4gaW5kaWNlc0FycmF5W2RyYXdhYmxlSW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu6aCC54K544Oq44K544OI44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgICBjb25zdCB2ZXJ0aWNlc0FycmF5OiBGbG9hdDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlc1xuICAgICAgICAudmVydGV4UG9zaXRpb25zO1xuICAgICAgcmV0dXJuIHZlcnRpY2VzQXJyYXlbZHJhd2FibGVJbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7poILngrnjga5VVuODquOCueODiOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCuVVW44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlVmVydGV4VXZzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgICBjb25zdCB1dnNBcnJheTogRmxvYXQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4VXZzO1xuICAgICAgcmV0dXJuIHV2c0FycmF5W2RyYXdhYmxlSW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqmXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlT3BhY2l0eShkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgY29uc3Qgb3BhY2l0aWVzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMub3BhY2l0aWVzO1xuICAgICAgcmV0dXJuIG9wYWNpdGllc1tkcmF3YWJsZUluZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruOCq+ODquODs+OCsOaDheWgseOBruWPluW+l1xuICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiBkcmF3YWJsZeOBruOCq+ODquODs+OCsOaDheWgsVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBjb25zdGFudEZsYWdzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XG5cbiAgICAgIHJldHVybiAhTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0RvdWJsZVNpZGVkQml0KFxuICAgICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu44OW44Os44Oz44OJ44Oi44O844OJ44KS5Y+W5b6XXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44OW44Os44Oz44OJ44Oi44O844OJXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlQmxlbmRNb2RlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbUJsZW5kTW9kZSB7XG4gICAgICBjb25zdCBjb25zdGFudEZsYWdzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XG5cbiAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0JsZW5kQWRkaXRpdmVCaXQoXG4gICAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICAgIClcbiAgICAgICAgPyBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlXG4gICAgICAgIDogTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZE11bHRpcGxpY2F0aXZlQml0KFxuICAgICAgICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICAgICAgIClcbiAgICAgICAgPyBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlXG4gICAgICAgIDogQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKjjga7lj5blvpdcbiAgICAgKlxuICAgICAqIERyYXdhYmxl44Gu44Oe44K544Kv5L2/55So5pmC44Gu5Y+N6Lui6Kit5a6a44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICog44Oe44K544Kv44KS5L2/55So44GX44Gq44GE5aC05ZCI44Gv54Sh6KaW44GV44KM44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gRHJhd2FibGXjga7lj43ou6LoqK3lrppcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RHJhd2FibGVJbnZlcnRlZE1hc2tCaXQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBjb25zdGFudEZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XG5cbiAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0lzSW52ZXJ0ZWRNYXNrQml0KFxuICAgICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Oq44K544OI44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tzKCk6IEludDMyQXJyYXlbXSB7XG4gICAgICBjb25zdCBtYXNrczogSW50MzJBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tzO1xuICAgICAgcmV0dXJuIG1hc2tzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5YCL5pWw44Oq44K544OI44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWAi+aVsOODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tDb3VudHMoKTogSW50MzJBcnJheSB7XG4gICAgICBjb25zdCBtYXNrQ291bnRzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHM7XG4gICAgICByZXR1cm4gbWFza0NvdW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7kvb/nlKjnirbmhYtcbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/nlKjjgZfjgabjgYTjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+eUqOOBl+OBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1VzaW5nTWFza2luZygpOiBib29sZWFuIHtcbiAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50OyArK2QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrQ291bnRzW2RdIDw9IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEcmF3YWJsZeOBruihqOekuuaDheWgseOCkuWPluW+l+OBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIHRydWUgRHJhd2FibGXjgYzooajnpLpcbiAgICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44GM6Z2e6KGo56S6XG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdJc1Zpc2libGUoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNWaXNpYmxlQml0KFxuICAgICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhd2FibGXjga5EcmF3T3JkZXLjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICAgKlxuICAgICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44GuZHJhd09yZGVy44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogZHJhd09yZGVy44GvYXJ0TWVzaOS4iuOBp+aMh+WumuOBmeOCizDjgYvjgokxMDAw44Gu5oOF5aCxXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIHRydWUgZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICAgKiBAcmV0dXJuIGZhbHNlIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44GE44KLXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlKFxuICAgICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdChcbiAgICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadkcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIHRydWUgRHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdPcGFjaXR5RGlkQ2hhbmdlKFxuICAgICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzT3BhY2l0eURpZENoYW5nZUJpdChcbiAgICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERyYXdhYmxl44Gu5o+P55S76aCG5bqP44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIHRydWUgRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44Gu5o+P55S744Gu6aCG5bqP44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdSZW5kZXJPcmRlckRpZENoYW5nZShcbiAgICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1JlbmRlck9yZGVyRGlkQ2hhbmdlQml0KFxuICAgICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5L+d5a2Y44GV44KM44Gf44OR44Op44Oh44O844K/44Gu6Kqt44G/6L6844G/XG4gICAgICovXG4gICAgcHVibGljIGxvYWRQYXJhbWV0ZXJzKCk6IHZvaWQge1xuICAgICAgbGV0IHBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xuICAgICAgY29uc3Qgc2F2ZWRQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmdldFNpemUoKTtcblxuICAgICAgaWYgKHBhcmFtZXRlckNvdW50ID4gc2F2ZWRQYXJhbWV0ZXJDb3VudCkge1xuICAgICAgICBwYXJhbWV0ZXJDb3VudCA9IHNhdmVkUGFyYW1ldGVyQ291bnQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0gPSB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuYXQoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yid5pyf5YyW44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsKTtcblxuICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy52YWx1ZXM7XG4gICAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzID0gdGhpcy5fbW9kZWwucGFydHMub3BhY2l0aWVzO1xuICAgICAgdGhpcy5fcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcbiAgICAgIHRoaXMuX3BhcmFtZXRlck1pbmltdW1WYWx1ZXMgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXM7XG5cbiAgICAgIHtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuaWRzO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcblxuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMucHJlcGFyZUNhcGFjaXR5KHBhcmFtZXRlckNvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnB1c2hCYWNrKFxuICAgICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcmFtZXRlcklkc1tpXSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHtcbiAgICAgICAgY29uc3QgcGFydElkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5wYXJ0cy5pZHM7XG4gICAgICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG5cbiAgICAgICAgdGhpcy5fcGFydElkcy5wcmVwYXJlQ2FwYWNpdHkocGFydENvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0Q291bnQ7ICsraSkge1xuICAgICAgICAgIHRoaXMuX3BhcnRJZHMucHVzaEJhY2soXG4gICAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQocGFydElkc1tpXSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHtcbiAgICAgICAgY29uc3QgZHJhd2FibGVJZHM6IHN0cmluZ1tdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmlkcztcbiAgICAgICAgY29uc3QgZHJhd2FibGVDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuXG4gICAgICAgIHRoaXMuX2RyYXdhYmxlSWRzLnByZXBhcmVDYXBhY2l0eShkcmF3YWJsZUNvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3YWJsZUNvdW50OyArK2kpIHtcbiAgICAgICAgICB0aGlzLl9kcmF3YWJsZUlkcy5wdXNoQmFjayhcbiAgICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChkcmF3YWJsZUlkc1tpXSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihtb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbCkge1xuICAgICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcbiAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlcyA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gbnVsbDtcbiAgICAgIHRoaXMuX3BhcmFtZXRlck1pbmltdW1WYWx1ZXMgPSBudWxsO1xuICAgICAgdGhpcy5fcGFydE9wYWNpdGllcyA9IG51bGw7XG4gICAgICB0aGlzLl9zYXZlZFBhcmFtZXRlcnMgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG4gICAgICB0aGlzLl9kcmF3YWJsZUlkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG4gICAgICB0aGlzLl9wYXJ0SWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcblxuICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0SWQgPSBuZXcgY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+KCk7XG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkID0gbmV3IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPigpO1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIHRoaXMuX21vZGVsLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX21vZGVsID0gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9ub3RFeGlzdFBhcnRPcGFjaXRpZXM6IGNzbU1hcDxudW1iZXIsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruODquOCueODiFxuICAgIHByaXZhdGUgX25vdEV4aXN0UGFydElkOiBjc21NYXA8Q3ViaXNtSWRIYW5kbGUsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODvOODhElE44Gu44Oq44K544OIXG5cbiAgICBwcml2YXRlIF9ub3RFeGlzdFBhcmFtZXRlclZhbHVlczogY3NtTWFwPG51bWJlciwgbnVtYmVyPjsgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44Op44Oh44O844K/44Gu5YCk44Gu44Oq44K544OIXG4gICAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxuXG4gICAgcHJpdmF0ZSBfc2F2ZWRQYXJhbWV0ZXJzOiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g5L+d5a2Y44GV44KM44Gf44OR44Op44Oh44O844K/XG5cbiAgICBwcml2YXRlIF9tb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbDsgLy8g44Oi44OH44OrXG5cbiAgICBwcml2YXRlIF9wYXJhbWV0ZXJWYWx1ZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44Op44Oh44O844K/44Gu5YCk44Gu44Oq44K544OIXG4gICAgcHJpdmF0ZSBfcGFyYW1ldGVyTWF4aW11bVZhbHVlczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7jg6rjgrnjg4hcbiAgICBwcml2YXRlIF9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApOOBruODquOCueODiFxuXG4gICAgcHJpdmF0ZSBfcGFydE9wYWNpdGllczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7jg6rjgrnjg4hcblxuICAgIHByaXZhdGUgX3BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbiAgICBwcml2YXRlIF9wYXJ0SWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+O1xuICAgIHByaXZhdGUgX2RyYXdhYmxlSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+O1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24gfSBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9IGN1YmlzbW1vZGVsdXNlcmRhdGFqc29uLkN1YmlzbU1vZGVsVXNlckRhdGFKc29uO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGNvbnN0IEFydE1lc2ggPSAnQXJ0TWVzaCc7XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OCpOODs+OCv+ODvOODleOCp+ODvOOCuVxuICAgKlxuICAgKiBKc29u44GL44KJ6Kqt44G/6L6844KT44Gg44Om44O844K244O844OH44O844K/44KS6KiY6Yyy44GX44Gm44GK44GP44Gf44KB44Gu5qeL6YCg5L2TXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUge1xuICAgIHRhcmdldFR5cGU6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4jjgr/jgqTjg5dcbiAgICB0YXJnZXRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOBrklEXG4gICAgdmFsdWU6IGNzbVN0cmluZzsgLy8g44Om44O844K244O844OH44O844K/XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244OH44O844K/44Gu566h55CG44Kv44Op44K5XG4gICAqXG4gICAqIOODpuODvOOCtuODh+ODvOOCv+OCkuODreODvOODieOAgeeuoeeQhuOAgeaknOe0ouOCpOODs+OCv+ODvOODleOCp+OCpOOCueOAgeino+aUvuOBvuOBp+OCkuihjOOBhuOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGEge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgICBzaXplOiBudW1iZXJcbiAgICApOiBDdWJpc21Nb2RlbFVzZXJEYXRhIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtTW9kZWxVc2VyRGF0YSA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhKCk7XG5cbiAgICAgIHJldC5wYXJzZVVzZXJEYXRhKGJ1ZmZlciwgc2l6ZSk7XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZWxVc2VyRGF0YSDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb2RlbFVzZXJEYXRhOiBDdWJpc21Nb2RlbFVzZXJEYXRhKTogdm9pZCB7XG4gICAgICBpZiAobW9kZWxVc2VyRGF0YSAhPSBudWxsKSB7XG4gICAgICAgIG1vZGVsVXNlckRhdGEucmVsZWFzZSgpO1xuICAgICAgICBtb2RlbFVzZXJEYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcnRNZXNo44Gu44Om44O844K244O844OH44O844K/44Gu44Oq44K544OI44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+ODquOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRBcnRNZXNoVXNlckRhdGFzKCk6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdXNlcmRhdGEzLmpzb27jga7jg5Hjg7zjgrlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBwYXJzZVVzZXJEYXRhKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgICAgbGV0IGpzb246IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uKFxuICAgICAgICBidWZmZXIsXG4gICAgICAgIHNpemVcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHR5cGVPZkFydE1lc2ggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoQXJ0TWVzaCk7XG4gICAgICBjb25zdCBub2RlQ291bnQ6IG51bWJlciA9IGpzb24uZ2V0VXNlckRhdGFDb3VudCgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFkZE5vZGU6IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlKCk7XG5cbiAgICAgICAgYWRkTm9kZS50YXJnZXRJZCA9IGpzb24uZ2V0VXNlckRhdGFJZChpKTtcbiAgICAgICAgYWRkTm9kZS50YXJnZXRUeXBlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIGpzb24uZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGkpXG4gICAgICAgICk7XG4gICAgICAgIGFkZE5vZGUudmFsdWUgPSBuZXcgY3NtU3RyaW5nKGpzb24uZ2V0VXNlckRhdGFWYWx1ZShpKSk7XG4gICAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMucHVzaEJhY2soYWRkTm9kZSk7XG5cbiAgICAgICAgaWYgKGFkZE5vZGUudGFyZ2V0VHlwZSA9PSB0eXBlT2ZBcnRNZXNoKSB7XG4gICAgICAgICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZS5wdXNoQmFjayhhZGROb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBqc29uLnJlbGVhc2UoKTtcbiAgICAgIGpzb24gPSB2b2lkIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XG4gICAgICB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKlxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl+OCkuino+aUvuOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl91c2VyRGF0YU5vZGVzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMuc2V0KGksIG51bGwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF91c2VyRGF0YU5vZGVzOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr/mp4vpgKDkvZPphY3liJdcbiAgICBwcml2YXRlIF9hcnRNZXNoVXNlckRhdGFOb2RlOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDplrLopqfjg6rjgrnjg4jjga7kv53mjIFcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb24gfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21Kc29uID0gY3ViaXNtanNvbi5DdWJpc21Kc29uO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGNvbnN0IE1ldGEgPSAnTWV0YSc7XG4gIGNvbnN0IFVzZXJEYXRhQ291bnQgPSAnVXNlckRhdGFDb3VudCc7XG4gIGNvbnN0IFRvdGFsVXNlckRhdGFTaXplID0gJ1RvdGFsVXNlckRhdGFTaXplJztcbiAgY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuICBjb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcbiAgY29uc3QgSWQgPSAnSWQnO1xuICBjb25zdCBWYWx1ZSA9ICdWYWx1ZSc7XG5cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFKc29uIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+WAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJEYXRhQ291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGFDb3VudClcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWw44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+e3j+aWh+Wtl+WIl+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUb3RhbFVzZXJEYXRhU2l6ZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFVzZXJEYXRhU2l6ZSlcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OX44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+OCpOODl1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVc2VyRGF0YVRhcmdldFR5cGUoaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGFyZ2V0KVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Om44O844K244O844OH44O844K/44Gu44K/44O844Ky44OD44OISUTjga7lj5blvpdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpIOOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OISURcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckRhdGFJZChpOiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Om44O844K244O844OH44O844K/44Gu5paH5a2X5YiX44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaSDjgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVc2VyRGF0YVZhbHVlKGk6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZhbHVlKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfanNvbjogQ3ViaXNtSnNvbjtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9ubWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc210YXJnZXRwb2ludCB9IGZyb20gJy4uL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsbWF0cml4IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tb2RlbG1hdHJpeCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9jIH0gZnJvbSAnLi9jdWJpc21tb2MnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbiB9IGZyb20gJy4uL21vdGlvbi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb24gfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21leHByZXNzaW9ubW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbWV4cHJlc3Npb25tb3Rpb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXBvc2UgfSBmcm9tICcuLi9lZmZlY3QvY3ViaXNtcG9zZSc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx1c2VyZGF0YSB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YSc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcGh5c2ljcyB9IGZyb20gJy4uL3BoeXNpY3MvY3ViaXNtcGh5c2ljcyc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWJyZWF0aCB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21icmVhdGgnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWV5ZWJsaW5rIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWV5ZWJsaW5rJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlcl93ZWJnbCB9IGZyb20gJy4uL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl93ZWJnbCc7XG5pbXBvcnQgeyBDdWJpc21Mb2dFcnJvciwgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCBDdWJpc21SZW5kZXJlcl9XZWJHTCA9IGN1YmlzbXJlbmRlcmVyX3dlYmdsLkN1YmlzbVJlbmRlcmVyX1dlYkdMO1xuaW1wb3J0IEN1YmlzbUV5ZUJsaW5rID0gY3ViaXNtZXllYmxpbmsuQ3ViaXNtRXllQmxpbms7XG5pbXBvcnQgQ3ViaXNtQnJlYXRoID0gY3ViaXNtYnJlYXRoLkN1YmlzbUJyZWF0aDtcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyO1xuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XG5pbXBvcnQgQ29uc3RhbnQgPSBjdWJpc21mcmFtZXdvcmsuQ29uc3RhbnQ7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21QaHlzaWNzID0gY3ViaXNtcGh5c2ljcy5DdWJpc21QaHlzaWNzO1xuaW1wb3J0IEN1YmlzbU1vZGVsVXNlckRhdGEgPSBjdWJpc21tb2RlbHVzZXJkYXRhLkN1YmlzbU1vZGVsVXNlckRhdGE7XG5pbXBvcnQgQ3ViaXNtUG9zZSA9IGN1YmlzbXBvc2UuQ3ViaXNtUG9zZTtcbmltcG9ydCBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gY3ViaXNtZXhwcmVzc2lvbm1vdGlvbi5DdWJpc21FeHByZXNzaW9uTW90aW9uO1xuaW1wb3J0IEN1YmlzbU1vdGlvbiA9IGN1YmlzbW1vdGlvbi5DdWJpc21Nb3Rpb247XG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcbmltcG9ydCBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrID0gYWN1YmlzbW1vdGlvbi5GaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQ3ViaXNtTW9jID0gY3ViaXNtbW9jLkN1YmlzbU1vYztcbmltcG9ydCBDdWJpc21Nb2RlbE1hdHJpeCA9IGN1YmlzbW1vZGVsbWF0cml4LkN1YmlzbU1vZGVsTWF0cml4O1xuaW1wb3J0IEN1YmlzbVRhcmdldFBvaW50ID0gY3ViaXNtdGFyZ2V0cG9pbnQuQ3ViaXNtVGFyZ2V0UG9pbnQ7XG5pbXBvcnQgQ3ViaXNtTW90aW9uTWFuYWdlciA9IGN1YmlzbW1vdGlvbm1hbmFnZXIuQ3ViaXNtTW90aW9uTWFuYWdlcjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44OrXG4gICAqXG4gICAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq+OBruWfuuW6leOCr+ODqeOCueOAguOBk+OCjOOCkue2meaJv+OBl+OBpuODpuODvOOCtuODvOOBjOWun+ijheOBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVVzZXJNb2RlbCB7XG4gICAgLyoqXG4gICAgICog5Yid5pyf5YyW54q25oWL44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgovnirbmhYvjgYvvvJ9cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSAgICAg5Yid5pyf5YyW44GV44KM44Gm44GE44KLXG4gICAgICogQHJldHVybiBmYWxzZSAgICDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNJbml0aWFsaXplZCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0aWFsaXplZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliJ3mnJ/ljJbnirbmhYvjga7oqK3lrppcbiAgICAgKlxuICAgICAqIOWIneacn+WMlueKtuaFi+OCkuioreWumuOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIHYg5Yid5pyf5YyW54q25oWLXG4gICAgICovXG4gICAgcHVibGljIHNldEluaXRpYWxpemVkKHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmm7TmlrDnirbmhYvjga7lj5blvpdcbiAgICAgKlxuICAgICAqIOabtOaWsOOBleOCjOOBpuOBhOOCi+eKtuaFi+OBi++8n1xuICAgICAqXG4gICAgICogQHJldHVybiB0cnVlICAgICDmm7TmlrDjgZXjgozjgabjgYTjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlICAgIOabtOaWsOOBleOCjOOBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1VwZGF0aW5nKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0aW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOabtOaWsOeKtuaFi+OBruioreWumlxuICAgICAqXG4gICAgICog5pu05paw54q25oWL44KS6Kit5a6a44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiDmm7TmlrDnirbmhYtcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0VXBkYXRpbmcodjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5fdXBkYXRpbmcgPSB2O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODnuOCpuOCueODieODqeODg+OCsOaDheWgseOBruioreWumlxuICAgICAqIEBwYXJhbSDjg4njg6njg4PjgrDjgZfjgabjgYTjgovjgqvjg7zjgr3jg6vjga5Y5L2N572uXG4gICAgICogQHBhcmFtIOODieODqeODg+OCsOOBl+OBpuOBhOOCi+OCq+ODvOOCveODq+OBrlnkvY3nva5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RHJhZ2dpbmcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnNldCh4LCB5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliqDpgJ/luqbjga7mg4XloLHjgpLoqK3lrprjgZnjgotcbiAgICAgKiBAcGFyYW0geCBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAgICogQHBhcmFtIHkgWei7uOaWueWQkeOBruWKoOmAn+W6plxuICAgICAqIEBwYXJhbSB6IFrou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0QWNjZWxlcmF0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblggPSB4O1xuICAgICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IHk7XG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25aID0gejtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vooYzliJfjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODouODh+ODq+ihjOWIl1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb2RlbE1hdHJpeCgpOiBDdWJpc21Nb2RlbE1hdHJpeCB7XG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWxNYXRyaXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5LiN6YCP5piO5bqm44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGEg5LiN6YCP5piO5bqmXG4gICAgICovXG4gICAgcHVibGljIHNldE9wYWNpdHkoYTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9vcGFjaXR5ID0gYTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuI3pgI/mmI7luqbjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOS4jemAj+aYjuW6plxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPcGFjaXR5KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fb3BhY2l0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgbW9jM+ODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2FkTW9kZWwoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xuICAgICAgdGhpcy5fbW9jID0gQ3ViaXNtTW9jLmNyZWF0ZShidWZmZXIpO1xuICAgICAgdGhpcy5fbW9kZWwgPSB0aGlzLl9tb2MuY3JlYXRlTW9kZWwoKTtcbiAgICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7XG5cbiAgICAgIGlmICh0aGlzLl9tb2MgPT0gbnVsbCB8fCB0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gQ3JlYXRlTW9kZWwoKS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG5ldyBDdWJpc21Nb2RlbE1hdHJpeChcbiAgICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzV2lkdGgoKSxcbiAgICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzSGVpZ2h0KClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZCBtb3Rpb24gZGF0YVxuICAgICAqIEBwYXJhbSBidWZmZXIgVGhlIGJ1ZmZlciBpbiB3aGljaCB0aGUgbW90aW9uMy5qc29uIGZpbGUgaXMgcmVhZFxuICAgICAqIEBwYXJhbSBzaXplIFRoZSBzaXplIG9mIHRoZSBidWZmZXJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbW90aW9uXG4gICAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBhdCB0aGUgZW5kIG9mIG1vdGlvbiBwbGF5YmFja1xuICAgICAqIEByZXR1cm4gTW90aW9uIGNsYXNzXG4gICAgICovXG4gICAgcHVibGljIGxvYWRNb3Rpb24gPSAoXG4gICAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgICAgc2l6ZTogbnVtYmVyLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICAgKSA9PiBDdWJpc21Nb3Rpb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSwgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuXG4gICAgLyoqXG4gICAgICog6KGo5oOF44OH44O844K/44Gu6Kqt44G/6L6844G/XG4gICAgICogQHBhcmFtIGJ1ZmZlciBleHDjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKiBAcGFyYW0gbmFtZSDooajmg4Xjga7lkI3liY1cbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZEV4cHJlc3Npb24oXG4gICAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgICAgc2l6ZTogbnVtYmVyLFxuICAgICAgbmFtZTogc3RyaW5nXG4gICAgKTogQUN1YmlzbU1vdGlvbiB7XG4gICAgICByZXR1cm4gQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg53jg7zjgrrjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICAgKiBAcGFyYW0gYnVmZmVyIHBvc2UzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZFBvc2UoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9wb3NlID0gQ3ViaXNtUG9zZS5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgavku5jlsZ7jgZnjgovjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICAgKiBAcGFyYW0gYnVmZmVyIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIGxvYWRVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX21vZGVsVXNlckRhdGEgPSBDdWJpc21Nb2RlbFVzZXJEYXRhLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhua8lOeul+ODh+ODvOOCv+OBruiqreOBv+i+vOOBv1xuICAgICAqIEBwYXJhbSBidWZmZXIgIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZFBoeXNpY3MoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9waHlzaWNzID0gQ3ViaXNtUGh5c2ljcy5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvZPjgZ/jgorliKTlrprjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVJZCDmpJzoqLzjgZfjgZ/jgYREcmF3YWJsZeOBrklEXG4gICAgICogQHBhcmFtIHBvaW50WCBY5L2N572uXG4gICAgICogQHBhcmFtIHBvaW50WSBZ5L2N572uXG4gICAgICogQHJldHVybiB0cnVlIOODkuODg+ODiOOBl+OBpuOBhOOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug44OS44OD44OI44GX44Gm44GE44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzSGl0KFxuICAgICAgZHJhd2FibGVJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgICBwb2ludFg6IG51bWJlcixcbiAgICAgIHBvaW50WTogbnVtYmVyXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBkcmF3SW5kZXg6IG51bWJlciA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlSW5kZXgoZHJhd2FibGVJZCk7XG5cbiAgICAgIGlmIChkcmF3SW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8g5a2Y5Zyo44GX44Gq44GE5aC05ZCI44GvZmFsc2VcbiAgICAgIH1cblxuICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd0luZGV4KTtcbiAgICAgIGNvbnN0IHZlcnRpY2VzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdJbmRleCk7XG5cbiAgICAgIGxldCBsZWZ0OiBudW1iZXIgPSB2ZXJ0aWNlc1swXTtcbiAgICAgIGxldCByaWdodDogbnVtYmVyID0gdmVydGljZXNbMF07XG4gICAgICBsZXQgdG9wOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcbiAgICAgIGxldCBib3R0b206IG51bWJlciA9IHZlcnRpY2VzWzFdO1xuXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNvdW50OyArK2opIHtcbiAgICAgICAgY29uc3QgeCA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwXTtcbiAgICAgICAgY29uc3QgeSA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwICsgMV07XG5cbiAgICAgICAgaWYgKHggPCBsZWZ0KSB7XG4gICAgICAgICAgbGVmdCA9IHg7IC8vIE1pbiB4XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeCA+IHJpZ2h0KSB7XG4gICAgICAgICAgcmlnaHQgPSB4OyAvLyBNYXggeFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHkgPCB0b3ApIHtcbiAgICAgICAgICB0b3AgPSB5OyAvLyBNaW4geVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHkgPiBib3R0b20pIHtcbiAgICAgICAgICBib3R0b20gPSB5OyAvLyBNYXggeVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHR4OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHBvaW50WCk7XG4gICAgICBjb25zdCB0eTogbnVtYmVyID0gdGhpcy5fbW9kZWxNYXRyaXguaW52ZXJ0VHJhbnNmb3JtWShwb2ludFkpO1xuXG4gICAgICByZXR1cm4gbGVmdCA8PSB0eCAmJiB0eCA8PSByaWdodCAmJiB0b3AgPD0gdHkgJiYgdHkgPD0gYm90dG9tO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Oi44OH44OrXG4gICAgICovXG4gICAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODrOODs+ODgOODqVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSZW5kZXJlcigpOiBDdWJpc21SZW5kZXJlcl9XZWJHTCB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Os44Oz44OA44Op44KS5L2c5oiQ44GX44Gm5Yid5pyf5YyW44KS5a6f6KGM44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZVJlbmRlcmVyKCk6IHZvaWQge1xuICAgICAgaWYgKHRoaXMuX3JlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgQ3ViaXNtUmVuZGVyZXJfV2ViR0woKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmluaXRpYWxpemUodGhpcy5fbW9kZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODqeOBruino+aUvlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVSZW5kZXJlcigpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLl9yZW5kZXJlciAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbGVhc2UoKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODmeODs+ODiOeZuueBq+aZguOBruaomea6luWHpueQhlxuICAgICAqXG4gICAgICogRXZlbnTjgYzlho3nlJ/lh6bnkIbmmYLjgavjgYLjgaPjgZ/loLTlkIjjga7lh6bnkIbjgpLjgZnjgovjgIJcbiAgICAgKiDntpnmib/jgafkuIrmm7jjgY3jgZnjgovjgZPjgajjgpLmg7PlrprjgZfjgabjgYTjgovjgIJcbiAgICAgKiDkuIrmm7jjgY3jgZfjgarjgYTloLTlkIjjga/jg63jgrDlh7rlipvjgpLjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xuICAgICAqL1xuICAgIHB1YmxpYyBtb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWU6IGNzbVN0cmluZyk6IHZvaWQge1xuICAgICAgQ3ViaXNtTG9nSW5mbygnezB9JywgZXZlbnRWYWx1ZS5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqTjg5njg7Pjg4jnlKjjga7jgrPjg7zjg6vjg5Djg4Pjgq9cbiAgICAgKlxuICAgICAqIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBq+OCpOODmeODs+ODiOeUqOOBq+eZu+mMsuOBmeOCi+OBn+OCgeOBrkNhbGxiYWNr44CCXG4gICAgICogQ3ViaXNtVXNlck1vZGVs44Gu57aZ5om/5YWI44GuRXZlbnRGaXJlZOOCkuWRvOOBtuOAglxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxlciDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLnrqHnkIbjgZfjgabjgYTjgZ/jg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgIHmr5TovIPnlKhcbiAgICAgKiBAcGFyYW0gZXZlbnRWYWx1ZSDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjga7mloflrZfliJfjg4fjg7zjgr9cbiAgICAgKiBAcGFyYW0gY3VzdG9tRGF0YSBDdWJpc21Vc2VyTW9kZWzjgpLntpnmib/jgZfjgZ/jgqTjg7Pjgrnjgr/jg7PjgrnjgpLmg7PlrppcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGN1YmlzbURlZmF1bHRNb3Rpb25FdmVudENhbGxiYWNrKFxuICAgICAgY2FsbGVyOiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIsXG4gICAgICBldmVudFZhbHVlOiBjc21TdHJpbmcsXG4gICAgICBjdXN0b21EYXRhOiBDdWJpc21Vc2VyTW9kZWxcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IG1vZGVsOiBDdWJpc21Vc2VyTW9kZWwgPSBjdXN0b21EYXRhO1xuXG4gICAgICBpZiAobW9kZWwgIT0gbnVsbCkge1xuICAgICAgICBtb2RlbC5tb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihkZWJ1Z01vZGUpIHtcbiAgICAgIC8vIOWQhOWkieaVsOWIneacn+WMllxuICAgICAgdGhpcy5fbW9jID0gbnVsbDtcbiAgICAgIHRoaXMuX21vZGVsID0gbnVsbDtcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgPSBudWxsO1xuICAgICAgdGhpcy5fZXllQmxpbmsgPSBudWxsO1xuICAgICAgdGhpcy5fYnJlYXRoID0gbnVsbDtcbiAgICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Bvc2UgPSBudWxsO1xuICAgICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xuICAgICAgdGhpcy5fcGh5c2ljcyA9IG51bGw7XG4gICAgICB0aGlzLl9tb2RlbFVzZXJEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICB0aGlzLl91cGRhdGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5fb3BhY2l0eSA9IDEuMDtcbiAgICAgIHRoaXMuX2xpcHN5bmMgPSB0cnVlO1xuICAgICAgdGhpcy5fbGFzdExpcFN5bmNWYWx1ZSA9IDAuMDtcbiAgICAgIHRoaXMuX2RyYWdYID0gMC4wO1xuICAgICAgdGhpcy5fZHJhZ1kgPSAwLjA7XG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25YID0gMC4wO1xuICAgICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IDAuMDtcbiAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSAwLjA7XG4gICAgICB0aGlzLl9kZWJ1Z01vZGUgPSBkZWJ1Z01vZGU7XG4gICAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG5cbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+ODnuODjeODvOOCuOODo+ODvOOCkuS9nOaIkFxuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlciA9IG5ldyBDdWJpc21Nb3Rpb25NYW5hZ2VyKCk7XG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnNldEV2ZW50Q2FsbGJhY2soXG4gICAgICAgIEN1YmlzbVVzZXJNb2RlbC5jdWJpc21EZWZhdWx0TW90aW9uRXZlbnRDYWxsYmFjayxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcblxuICAgICAgLy8g6KGo5oOF44Oe44ON44O844K444Oj44O844KS5L2c5oiQXG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG5ldyBDdWJpc21Nb3Rpb25NYW5hZ2VyKCk7XG5cbiAgICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+OCouODi+ODoeODvOOCt+ODp+ODs1xuICAgICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBuZXcgQ3ViaXNtVGFyZ2V0UG9pbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/jgavnm7jlvZPjgZnjgovlh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9tb3Rpb25NYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbW90aW9uTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX21vYyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX21vYy5kZWxldGVNb2RlbCh0aGlzLl9tb2RlbCk7XG4gICAgICAgIHRoaXMuX21vYy5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMuX21vYyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbnVsbDtcblxuICAgICAgQ3ViaXNtUG9zZS5kZWxldGUodGhpcy5fcG9zZSk7XG4gICAgICBDdWJpc21FeWVCbGluay5kZWxldGUodGhpcy5fZXllQmxpbmspO1xuICAgICAgQ3ViaXNtQnJlYXRoLmRlbGV0ZSh0aGlzLl9icmVhdGgpO1xuXG4gICAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG51bGw7XG5cbiAgICAgIEN1YmlzbVBoeXNpY3MuZGVsZXRlKHRoaXMuX3BoeXNpY3MpO1xuICAgICAgQ3ViaXNtTW9kZWxVc2VyRGF0YS5kZWxldGUodGhpcy5fbW9kZWxVc2VyRGF0YSk7XG5cbiAgICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX21vYzogQ3ViaXNtTW9jOyAvLyBNb2Pjg4fjg7zjgr9cbiAgICBwcm90ZWN0ZWQgX21vZGVsOiBDdWJpc21Nb2RlbDsgLy8gTW9kZWzjgqTjg7Pjgrnjgr/jg7PjgrlcblxuICAgIHByb3RlY3RlZCBfbW90aW9uTWFuYWdlcjogQ3ViaXNtTW90aW9uTWFuYWdlcjsgLy8g44Oi44O844K344On44Oz566h55CGXG4gICAgcHJvdGVjdGVkIF9leHByZXNzaW9uTWFuYWdlcjogQ3ViaXNtTW90aW9uTWFuYWdlcjsgLy8g6KGo5oOF566h55CGXG4gICAgcHJvdGVjdGVkIF9leWVCbGluazogQ3ViaXNtRXllQmxpbms7IC8vIOiHquWLleOBvuOBsOOBn+OBjVxuICAgIHByb3RlY3RlZCBfYnJlYXRoOiBDdWJpc21CcmVhdGg7IC8vIOWRvOWQuFxuICAgIHByb3RlY3RlZCBfbW9kZWxNYXRyaXg6IEN1YmlzbU1vZGVsTWF0cml4OyAvLyDjg6Ljg4fjg6vooYzliJdcbiAgICBwcm90ZWN0ZWQgX3Bvc2U6IEN1YmlzbVBvc2U7IC8vIOODneODvOOCuueuoeeQhlxuICAgIHByb3RlY3RlZCBfZHJhZ01hbmFnZXI6IEN1YmlzbVRhcmdldFBvaW50OyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrBcbiAgICBwcm90ZWN0ZWQgX3BoeXNpY3M6IEN1YmlzbVBoeXNpY3M7IC8vIOeJqeeQhua8lOeul1xuICAgIHByb3RlY3RlZCBfbW9kZWxVc2VyRGF0YTogQ3ViaXNtTW9kZWxVc2VyRGF0YTsgLy8g44Om44O844K244O844OH44O844K/XG5cbiAgICBwcm90ZWN0ZWQgX2luaXRpYWxpemVkOiBib29sZWFuOyAvLyDliJ3mnJ/ljJbjgZXjgozjgZ/jgYvjganjgYbjgYtcbiAgICBwcm90ZWN0ZWQgX3VwZGF0aW5nOiBib29sZWFuOyAvLyDmm7TmlrDjgZXjgozjgZ/jgYvjganjgYbjgYtcbiAgICBwcm90ZWN0ZWQgX29wYWNpdHk6IG51bWJlcjsgLy8g5LiN6YCP5piO5bqmXG4gICAgcHJvdGVjdGVkIF9saXBzeW5jOiBib29sZWFuOyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgZnjgovjgYvjganjgYbjgYtcbiAgICBwcm90ZWN0ZWQgX2xhc3RMaXBTeW5jVmFsdWU6IG51bWJlcjsgLy8g5pyA5b6M44Gu44Oq44OD44OX44K344Oz44Kv44Gu5Yi25b6h5ZywXG4gICAgcHJvdGVjdGVkIF9kcmFnWDogbnVtYmVyOyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrDjga5Y5L2N572uXG4gICAgcHJvdGVjdGVkIF9kcmFnWTogbnVtYmVyOyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrDjga5Z5L2N572uXG4gICAgcHJvdGVjdGVkIF9hY2NlbGVyYXRpb25YOiBudW1iZXI7IC8vIFjou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICBwcm90ZWN0ZWQgX2FjY2VsZXJhdGlvblk6IG51bWJlcjsgLy8gWei7uOaWueWQkeOBruWKoOmAn+W6plxuICAgIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWjogbnVtYmVyOyAvLyBa6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAgcHJvdGVjdGVkIF9kZWJ1Z01vZGU6IGJvb2xlYW47IC8vIOODh+ODkOODg+OCsOODouODvOODieOBi+OBqeOBhuOBi1xuXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI6IEN1YmlzbVJlbmRlcmVyX1dlYkdMOyAvLyDjg6zjg7Pjg4Djg6lcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gY3ViaXNtbW90aW9ucXVldWVlbnRyeS5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5pbXBvcnQgQ3ViaXNtTWF0aCA9IGN1YmlzbW1hdGguQ3ViaXNtTWF0aDtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKiog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWw5a6a576pICovXG4gIGV4cG9ydCB0eXBlIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSAoc2VsZjogQUN1YmlzbU1vdGlvbikgPT4gdm9pZDtcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu5oq96LGh5Z+65bqV44Kv44Op44K5XG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruaKveixoeWfuuW6leOCr+ODqeOCueOAgk1vdGlvblF1ZXVlTWFuYWdlcuOBq+OCiOOBo+OBpuODouODvOOCt+ODp+ODs+OBruWGjeeUn+OCkueuoeeQhuOBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFDdWJpc21Nb3Rpb24ge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vdGlvbjogQUN1YmlzbU1vdGlvbik6IHZvaWQge1xuICAgICAgbW90aW9uLnJlbGVhc2UoKTtcbiAgICAgIG1vdGlvbiA9IHZvaWQgMDtcbiAgICAgIG1vdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IC0xLjA7XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IC0xLjA7XG4gICAgICB0aGlzLl93ZWlnaHQgPSAxLjA7XG4gICAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDlho3nlJ/jga7plovlp4vmmYLliLtcbiAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMgPSBuZXcgY3NtVmVjdG9yPGNzbVN0cmluZz4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3dlaWdodCA9IDAuMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr9cbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXG4gICAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSxcbiAgICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAoIW1vdGlvblF1ZXVlRW50cnkuaXNBdmFpbGFibGUoKSB8fCBtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc1N0YXJ0ZWQoKSkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzU3RhcnRlZCh0cnVlKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGFydFRpbWUodXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fb2Zmc2V0U2Vjb25kcyk7IC8vIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu+OCkuiomOmMslxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVJblN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtcblxuICAgICAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID0gdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDApIHtcbiAgICAgICAgICAvLyDplovlp4vjgZfjgabjgYTjgarjgYTjgYbjgaHjgavntYLkuoboqK3lrprjgZfjgabjgYTjgovloLTlkIjjgYzjgYLjgovjgIJcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEVuZFRpbWUoXG4gICAgICAgICAgICBkdXJhdGlvbiA8PSAwID8gLTEgOiBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpICsgZHVyYXRpb25cbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIGR1cmF0aW9uID09IC0xIOOBruWgtOWQiOOBr+ODq+ODvOODl+OBmeOCi1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBmYWRlV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQ7IC8vIOePvuWcqOOBruWApOOBqOaOm+OBkeWQiOOCj+OBm+OCi+WJsuWQiFxuXG4gICAgICAvLy0tLS0g44OV44Kn44O844OJ44Kk44Oz44O744Ki44Km44OI44Gu5Yem55CGIC0tLS1cbiAgICAgIC8vIOWNmOe0lOOBquOCteOCpOODs+mWouaVsOOBp+OCpOODvOOCuOODs+OCsOOBmeOCi1xuICAgICAgY29uc3QgZmFkZUluOiBudW1iZXIgPVxuICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID09IDAuMFxuICAgICAgICAgID8gMS4wXG4gICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZUluU2Vjb25kc1xuICAgICAgICAgICAgKTtcblxuICAgICAgY29uc3QgZmFkZU91dDogbnVtYmVyID1cbiAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPT0gMC4wIHx8IG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIDwgMC4wXG4gICAgICAgICAgPyAxLjBcbiAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICAgKG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIC0gdXNlclRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICAgICk7XG5cbiAgICAgIGZhZGVXZWlnaHQgPSBmYWRlV2VpZ2h0ICogZmFkZUluICogZmFkZU91dDtcblxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGF0ZSh1c2VyVGltZVNlY29uZHMsIGZhZGVXZWlnaHQpO1xuXG4gICAgICBDU01fQVNTRVJUKDAuMCA8PSBmYWRlV2VpZ2h0ICYmIGZhZGVXZWlnaHQgPD0gMS4wKTtcblxuICAgICAgLy8tLS0tIOWFqOOBpuOBruODkeODqeODoeODvOOCv0lE44KS44Or44O844OX44GZ44KLIC0tLS1cbiAgICAgIHRoaXMuZG9VcGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgICBtb2RlbCxcbiAgICAgICAgdXNlclRpbWVTZWNvbmRzLFxuICAgICAgICBmYWRlV2VpZ2h0LFxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5XG4gICAgICApO1xuXG4gICAgICAvLyDlvozlh6bnkIZcbiAgICAgIC8vIOe1guS6huaZguWIu+OCkumBjuOBjuOBn+OCiee1guS6huODleODqeOCsOOCkueri+OBpuOCiyhDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIpXG4gICAgICBpZiAoXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpID4gMCAmJlxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IHVzZXJUaW1lU2Vjb25kc1xuICAgICAgKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTsgLy8g57WC5LqGXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KLXG4gICAgICogQHBhcmFtIGZhZGVJblNlY29uZHMg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RmFkZUluVGltZShmYWRlSW5TZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPSBmYWRlSW5TZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCouOCpuODiOOBruaZgumWk+OCkuioreWumuOBmeOCi1xuICAgICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRGYWRlT3V0VGltZShmYWRlT3V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWRlT3V0U2Vjb25kcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpPjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldEZhZGVJblRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWRlSW5TZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruioreWumlxuICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAgICovXG4gICAgcHVibGljIHNldFdlaWdodCh3ZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fd2VpZ2h0ID0gd2VpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAgICovXG4gICAgcHVibGljIGdldFdlaWdodCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3dlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZXjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gICAgICpcbiAgICAgKiBAbm90ZSDjg6vjg7zjg5fjga7mmYLjga/jgIwtMeOAjeOAglxuICAgICAqICAgICAgIOODq+ODvOODl+OBp+OBquOBhOWgtOWQiOOBr+OAgeOCquODvOODkOODvOODqeOCpOODieOBmeOCi+OAglxuICAgICAqICAgICAgIOato+OBruWApOOBruaZguOBr+WPluW+l+OBleOCjOOCi+aZgumWk+OBp+e1guS6huOBmeOCi+OAglxuICAgICAqICAgICAgIOOAjC0x44CN44Gu5pmC44Gv5aSW6YOo44GL44KJ5YGc5q2i5ZG95Luk44GM44Gq44GE6ZmQ44KK57WC44KP44KJ44Gq44GE5Yem55CG44Go44Gq44KL44CCXG4gICAgICovXG4gICAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5cx5Zue5YiG44Gu6ZW344GV44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fkuIDlm57liIbjga7plbfjgZVb56eSXVxuICAgICAqXG4gICAgICogQG5vdGUg44Or44O844OX44GX44Gq44GE5aC05ZCI44Gv44CBZ2V0RHVyYXRpb24oKeOBqOWQjOOBmOWApOOCkui/lOOBmVxuICAgICAqICAgICAgIOODq+ODvOODl+S4gOWbnuWIhuOBrumVt+OBleOBjOWumue+qeOBp+OBjeOBquOBhOWgtOWQiCjjg5fjg63jgrDjg6njg6DnmoTjgavli5XjgY3ntprjgZHjgovjgrXjg5bjgq/jg6njgrnjgarjgakp44Gu5aC05ZCI44Gv44CMLTHjgI3jgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLliLvjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gb2Zmc2V0U2Vjb25kcyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLliLtb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRPZmZzZXRUaW1lKG9mZnNldFNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fb2Zmc2V0U2Vjb25kcyA9IG9mZnNldFNlY29uZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXG4gICAgICpcbiAgICAgKiDjgqTjg5njg7Pjg4jnmbrngavjga7jg4Hjgqfjg4Pjgq/jgIJcbiAgICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBiZWZvcmVDaGVja1RpbWVTZWNvbmRzIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXG4gICAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldEZpcmVkRXZlbnQoXG4gICAgICBiZWZvcmVDaGVja1RpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgICBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogY3NtVmVjdG9yPGNzbVN0cmluZz4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KLXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgYLjgopcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOODouODh+ODq+OBuOOBruODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBl++8iOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBl++8iVxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcbiAgICAgIHdlaWdodDogbnVtYmVyLFxuICAgICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICAgICk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jga7nmbvpjLJcbiAgICAgKlxuICAgICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OCkueZu+mMsuOBmeOCi+OAglxuICAgICAqIGlzRmluaXNoZWTjg5Xjg6njgrDjgpLoqK3lrprjgZnjgovjgr/jgqTjg5/jg7PjgrDjgaflkbzjgbPlh7rjgZXjgozjgovjgIJcbiAgICAgKiDku6XkuIvjga7nirbmhYvjga7pmpvjgavjga/lkbzjgbPlh7rjgZXjgozjgarjgYQ6XG4gICAgICogICAxLiDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7PjgYzjgIzjg6vjg7zjg5fjgI3jgajjgZfjgaboqK3lrprjgZXjgozjgabjgYTjgovjgajjgY1cbiAgICAgKiAgIDIuIOOCs+ODvOODq+ODkOODg+OCr+OBjOeZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaZglxuICAgICAqXG4gICAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIgPSAoXG4gICAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcjogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICAgICkgPT4gKHRoaXMuX29uRmluaXNoZWRNb3Rpb24gPSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jga7lj5blvpdcbiAgICAgKlxuICAgICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RmluaXNoZWRNb3Rpb25IYW5kbGVyID0gKCkgPT4gdGhpcy5fb25GaW5pc2hlZE1vdGlvbjtcblxuICAgIHB1YmxpYyBfZmFkZUluU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgIHB1YmxpYyBfZmFkZU91dFNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICBwdWJsaWMgX3dlaWdodDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cbiAgICBwdWJsaWMgX29mZnNldFNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC6ZaTW+enkl1cblxuICAgIHB1YmxpYyBfZmlyZWRFdmVudFZhbHVlczogY3NtVmVjdG9yPGNzbVN0cmluZz47XG5cbiAgICAvLyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICBwdWJsaWMgX29uRmluaXNoZWRNb3Rpb24/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtanNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9ucXVldWVlbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IEpzb25GbG9hdCA9IGN1YmlzbWpzb24uSnNvbkZsb2F0O1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21Kc29uID0gY3ViaXNtanNvbi5DdWJpc21Kc29uO1xuaW1wb3J0IFZhbHVlID0gY3ViaXNtanNvbi5WYWx1ZTtcbmltcG9ydCBBQ3ViaXNtTW90aW9uID0gYWN1YmlzbW1vdGlvbi5BQ3ViaXNtTW90aW9uO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8vIGV4cDMuanNvbuOBruOCreODvOOBqOODh+ODleOCqeODq+ODiFxuICBjb25zdCBFeHByZXNzaW9uS2V5RmFkZUluID0gJ0ZhZGVJblRpbWUnO1xuICBjb25zdCBFeHByZXNzaW9uS2V5RmFkZU91dCA9ICdGYWRlT3V0VGltZSc7XG4gIGNvbnN0IEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzID0gJ1BhcmFtZXRlcnMnO1xuICBjb25zdCBFeHByZXNzaW9uS2V5SWQgPSAnSWQnO1xuICBjb25zdCBFeHByZXNzaW9uS2V5VmFsdWUgPSAnVmFsdWUnO1xuICBjb25zdCBFeHByZXNzaW9uS2V5QmxlbmQgPSAnQmxlbmQnO1xuICBjb25zdCBCbGVuZFZhbHVlQWRkID0gJ0FkZCc7XG4gIGNvbnN0IEJsZW5kVmFsdWVNdWx0aXBseSA9ICdNdWx0aXBseSc7XG4gIGNvbnN0IEJsZW5kVmFsdWVPdmVyd3JpdGUgPSAnT3ZlcndyaXRlJztcbiAgY29uc3QgRGVmYXVsdEZhZGVUaW1lID0gMS4wO1xuXG4gIC8qKlxuICAgKiDooajmg4Xjga7jg6Ljg7zjgrfjg6fjg7NcbiAgICpcbiAgICog6KGo5oOF44Gu44Oi44O844K344On44Oz44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiBleHRlbmRzIEFDdWJpc21Nb3Rpb24ge1xuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBidWZmZXIgZXhw44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgICBzaXplOiBudW1iZXJcbiAgICApOiBDdWJpc21FeHByZXNzaW9uTW90aW9uIHtcbiAgICAgIGNvbnN0IGV4cHJlc3Npb246IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSBuZXcgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbigpO1xuXG4gICAgICBjb25zdCBqc29uOiBDdWJpc21Kc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgICAgIGNvbnN0IHJvb3Q6IFZhbHVlID0ganNvbi5nZXRSb290KCk7XG5cbiAgICAgIGV4cHJlc3Npb24uc2V0RmFkZUluVGltZShcbiAgICAgICAgcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlGYWRlSW4pLnRvRmxvYXQoRGVmYXVsdEZhZGVUaW1lKVxuICAgICAgKTsgLy8g44OV44Kn44O844OJ44Kk44OzXG4gICAgICBleHByZXNzaW9uLnNldEZhZGVPdXRUaW1lKFxuICAgICAgICByb290LmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUZhZGVPdXQpLnRvRmxvYXQoRGVmYXVsdEZhZGVUaW1lKVxuICAgICAgKTsgLy8g44OV44Kn44O844OJ44Ki44Km44OIXG5cbiAgICAgIC8vIOWQhOODkeODqeODoeODvOOCv+OBq+OBpOOBhOOBplxuICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQgPSByb290XG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKVxuICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgICAgZXhwcmVzc2lvbi5fcGFyYW1ldGVycy5wcmVwYXJlQ2FwYWNpdHkocGFyYW1ldGVyQ291bnQpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgICAgY29uc3QgcGFyYW06IFZhbHVlID0gcm9vdFxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlJZCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgKTsgLy8g44OR44Op44Oh44O844K/SURcblxuICAgICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gcGFyYW1cbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5VmFsdWUpXG4gICAgICAgICAgLnRvRmxvYXQoKTsgLy8g5YCkXG5cbiAgICAgICAgLy8g6KiI566X5pa55rOV44Gu6Kit5a6aXG4gICAgICAgIGxldCBibGVuZFR5cGU6IEV4cHJlc3Npb25CbGVuZFR5cGU7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5pc051bGwoKSB8fFxuICAgICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PVxuICAgICAgICAgICAgQmxlbmRWYWx1ZUFkZFxuICAgICAgICApIHtcbiAgICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PVxuICAgICAgICAgIEJsZW5kVmFsdWVNdWx0aXBseVxuICAgICAgICApIHtcbiAgICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09XG4gICAgICAgICAgQmxlbmRWYWx1ZU92ZXJ3cml0ZVxuICAgICAgICApIHtcbiAgICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfT3ZlcndyaXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIOOBneOBruS7liDku5Xmp5jjgavjgarjgYTlgKTjgpLoqK3lrprjgZfjgZ/mmYLjga/liqDnrpfjg6Ljg7zjg4njgavjgZnjgovjgZPjgajjgaflvqnml6dcbiAgICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6Kit5a6a44Kq44OW44K444Kn44Kv44OI44KS5L2c5oiQ44GX44Gm44Oq44K544OI44Gr6L+95Yqg44GZ44KLXG4gICAgICAgIGNvbnN0IGl0ZW06IEV4cHJlc3Npb25QYXJhbWV0ZXIgPSBuZXcgRXhwcmVzc2lvblBhcmFtZXRlcigpO1xuXG4gICAgICAgIGl0ZW0ucGFyYW1ldGVySWQgPSBwYXJhbWV0ZXJJZDtcbiAgICAgICAgaXRlbS5ibGVuZFR5cGUgPSBibGVuZFR5cGU7XG4gICAgICAgIGl0ZW0udmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBleHByZXNzaW9uLl9wYXJhbWV0ZXJzLnB1c2hCYWNrKGl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBDdWJpc21Kc29uLmRlbGV0ZShqc29uKTsgLy8gSlNPTuODh+ODvOOCv+OBr+S4jeimgeOBq+OBquOBo+OBn+OCieWJiumZpOOBmeOCi1xuICAgICAgcmV0dXJuIGV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05paw44Gu5a6f6KGMXG4gICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xuICAgICAqL1xuICAgIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcbiAgICAgIHdlaWdodDogbnVtYmVyLFxuICAgICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICAgICk6IHZvaWQge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJhbWV0ZXJzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcjogRXhwcmVzc2lvblBhcmFtZXRlciA9IHRoaXMuX3BhcmFtZXRlcnMuYXQoaSk7XG5cbiAgICAgICAgc3dpdGNoIChwYXJhbWV0ZXIuYmxlbmRUeXBlKSB7XG4gICAgICAgICAgY2FzZSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkOiB7XG4gICAgICAgICAgICBtb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICAgIHBhcmFtZXRlci5wYXJhbWV0ZXJJZCxcbiAgICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfTXVsdGlwbHk6IHtcbiAgICAgICAgICAgIG1vZGVsLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXG4gICAgICAgICAgICAgIHBhcmFtZXRlci52YWx1ZSxcbiAgICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZToge1xuICAgICAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXG4gICAgICAgICAgICAgIHBhcmFtZXRlci52YWx1ZSxcbiAgICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyDku5Xmp5jjgavjgarjgYTlgKTjgpLoqK3lrprjgZfjgZ/mmYLjga/jgZnjgafjgavliqDnrpfjg6Ljg7zjg4njgavjgarjgaPjgabjgYTjgotcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICB0aGlzLl9wYXJhbWV0ZXJzID0gbmV3IGNzbVZlY3RvcjxFeHByZXNzaW9uUGFyYW1ldGVyPigpO1xuICAgIH1cblxuICAgIF9wYXJhbWV0ZXJzOiBjc21WZWN0b3I8RXhwcmVzc2lvblBhcmFtZXRlcj47IC8vIOihqOaDheOBruODkeODqeODoeODvOOCv+aDheWgseODquOCueODiFxuICB9XG5cbiAgLyoqXG4gICAqIOihqOaDheODkeODqeODoeODvOOCv+WApOOBruioiOeul+aWueW8j1xuICAgKi9cbiAgZXhwb3J0IGVudW0gRXhwcmVzc2lvbkJsZW5kVHlwZSB7XG4gICAgRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQgPSAwLCAvLyDliqDnrpdcbiAgICBFeHByZXNzaW9uQmxlbmRUeXBlX011bHRpcGx5ID0gMSwgLy8g5LmX566XXG4gICAgRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGUgPSAyIC8vIOS4iuabuOOBjVxuICB9XG5cbiAgLyoqXG4gICAqIOihqOaDheOBruODkeODqeODoeODvOOCv+aDheWgsVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25QYXJhbWV0ZXIge1xuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SURcbiAgICBibGVuZFR5cGU6IEV4cHJlc3Npb25CbGVuZFR5cGU7IC8vIOODkeODqeODoeODvOOCv+OBrua8lOeul+eorumhnlxuICAgIHZhbHVlOiBudW1iZXI7IC8vIOWApFxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9uanNvbiB9IGZyb20gJy4vY3ViaXNtbW90aW9uanNvbic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9uaW50ZXJuYWwgfSBmcm9tICcuL2N1YmlzbW1vdGlvbmludGVybmFsJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBDdWJpc21Mb2dEZWJ1ZywgQ1NNX0FTU0VSVCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xuaW1wb3J0IEN1YmlzbU1vdGlvbkRhdGEgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25EYXRhO1xuaW1wb3J0IEN1YmlzbU1vdGlvblNlZ21lbnQgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25TZWdtZW50O1xuaW1wb3J0IEN1YmlzbU1vdGlvblBvaW50ID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uUG9pbnQ7XG5pbXBvcnQgQ3ViaXNtTW90aW9uRXZlbnQgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25FdmVudDtcbmltcG9ydCBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlO1xuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XG5pbXBvcnQgQ3ViaXNtTW90aW9uQ3VydmUgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25DdXJ2ZTtcbmltcG9ydCBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0O1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgQ3ViaXNtTWF0aCA9IGN1YmlzbW1hdGguQ3ViaXNtTWF0aDtcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gY3ViaXNtbW90aW9ucXVldWVlbnRyeS5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBBQ3ViaXNtTW90aW9uID0gYWN1YmlzbW1vdGlvbi5BQ3ViaXNtTW90aW9uO1xuaW1wb3J0IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSBhY3ViaXNtbW90aW9uLkZpbmlzaGVkTW90aW9uQ2FsbGJhY2s7XG5pbXBvcnQgQ3ViaXNtTW90aW9uSnNvbiA9IGN1YmlzbW1vdGlvbmpzb24uQ3ViaXNtTW90aW9uSnNvbjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBjb25zdCBFZmZlY3ROYW1lRXllQmxpbmsgPSAnRXllQmxpbmsnO1xuICBjb25zdCBFZmZlY3ROYW1lTGlwU3luYyA9ICdMaXBTeW5jJztcbiAgY29uc3QgVGFyZ2V0TmFtZU1vZGVsID0gJ01vZGVsJztcbiAgY29uc3QgVGFyZ2V0TmFtZVBhcmFtZXRlciA9ICdQYXJhbWV0ZXInO1xuICBjb25zdCBUYXJnZXROYW1lUGFydE9wYWNpdHkgPSAnUGFydE9wYWNpdHknO1xuXG4gIGZ1bmN0aW9uIGxlcnBQb2ludHMoXG4gICAgYTogQ3ViaXNtTW90aW9uUG9pbnQsXG4gICAgYjogQ3ViaXNtTW90aW9uUG9pbnQsXG4gICAgdDogbnVtYmVyXG4gICk6IEN1YmlzbU1vdGlvblBvaW50IHtcbiAgICBjb25zdCByZXN1bHQ6IEN1YmlzbU1vdGlvblBvaW50ID0gbmV3IEN1YmlzbU1vdGlvblBvaW50KCk7XG5cbiAgICByZXN1bHQudGltZSA9IGEudGltZSArIChiLnRpbWUgLSBhLnRpbWUpICogdDtcbiAgICByZXN1bHQudmFsdWUgPSBhLnZhbHVlICsgKGIudmFsdWUgLSBhLnZhbHVlKSAqIHQ7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFyRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCB0OiBudW1iZXIgPSAodGltZSAtIHBvaW50c1swXS50aW1lKSAvIChwb2ludHNbMV0udGltZSAtIHBvaW50c1swXS50aW1lKTtcblxuICAgIGlmICh0IDwgMC4wKSB7XG4gICAgICB0ID0gMC4wO1xuICAgIH1cblxuICAgIHJldHVybiBwb2ludHNbMF0udmFsdWUgKyAocG9pbnRzWzFdLnZhbHVlIC0gcG9pbnRzWzBdLnZhbHVlKSAqIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBiZXppZXJFdmFsdWF0ZShwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sIHRpbWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1szXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xuXG4gICAgaWYgKHQgPCAwLjApIHtcbiAgICAgIHQgPSAwLjA7XG4gICAgfVxuXG4gICAgY29uc3QgcDAxOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHQpO1xuICAgIGNvbnN0IHAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1sxXSwgcG9pbnRzWzJdLCB0KTtcbiAgICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgICBjb25zdCBwMDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDAxLCBwMTIsIHQpO1xuICAgIGNvbnN0IHAxMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMTIsIHAyMywgdCk7XG5cbiAgICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXBwZWRFdmFsdWF0ZShwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sIHRpbWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHBvaW50c1swXS52YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmVyc2VTdGVwcGVkRXZhbHVhdGUoXG4gICAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxuICAgIHRpbWU6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBwb2ludHNbMV0udmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBldmFsdWF0ZUN1cnZlKFxuICAgIG1vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGEsXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICB0aW1lOiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICAvLyBGaW5kIHNlZ21lbnQgdG8gZXZhbHVhdGUuXG4gICAgY29uc3QgY3VydmU6IEN1YmlzbU1vdGlvbkN1cnZlID0gbW90aW9uRGF0YS5jdXJ2ZXMuYXQoaW5kZXgpO1xuXG4gICAgbGV0IHRhcmdldCA9IC0xO1xuICAgIGNvbnN0IHRvdGFsU2VnbWVudENvdW50OiBudW1iZXIgPVxuICAgICAgY3VydmUuYmFzZVNlZ21lbnRJbmRleCArIGN1cnZlLnNlZ21lbnRDb3VudDtcbiAgICBsZXQgcG9pbnRQb3NpdGlvbiA9IDA7XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gY3VydmUuYmFzZVNlZ21lbnRJbmRleDsgaSA8IHRvdGFsU2VnbWVudENvdW50OyArK2kpIHtcbiAgICAgIC8vIEdldCBmaXJzdCBwb2ludCBvZiBuZXh0IHNlZ21lbnQuXG4gICAgICBwb2ludFBvc2l0aW9uID1cbiAgICAgICAgbW90aW9uRGF0YS5zZWdtZW50cy5hdChpKS5iYXNlUG9pbnRJbmRleCArXG4gICAgICAgIChtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLnNlZ21lbnRUeXBlID09XG4gICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllclxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogMSk7XG5cbiAgICAgIC8vIEJyZWFrIGlmIHRpbWUgbGllcyB3aXRoaW4gY3VycmVudCBzZWdtZW50LlxuICAgICAgaWYgKG1vdGlvbkRhdGEucG9pbnRzLmF0KHBvaW50UG9zaXRpb24pLnRpbWUgPiB0aW1lKSB7XG4gICAgICAgIHRhcmdldCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0YXJnZXQgPT0gLTEpIHtcbiAgICAgIHJldHVybiBtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS52YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWdtZW50OiBDdWJpc21Nb3Rpb25TZWdtZW50ID0gbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0YXJnZXQpO1xuXG4gICAgcmV0dXJuIHNlZ21lbnQuZXZhbHVhdGUoXG4gICAgICBtb3Rpb25EYXRhLnBvaW50cy5nZXQoc2VnbWVudC5iYXNlUG9pbnRJbmRleCksXG4gICAgICB0aW1lXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrlcbiAgICpcbiAgICog44Oi44O844K344On44Oz44Gu44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnVmZmVyIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcbiAgICAgIHNpemU6IG51bWJlcixcbiAgICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICAgICk6IEN1YmlzbU1vdGlvbiB7XG4gICAgICBjb25zdCByZXQgPSBuZXcgQ3ViaXNtTW90aW9uKCk7XG5cbiAgICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xuICAgICAgcmV0Ll9zb3VyY2VGcmFtZVJhdGUgPSByZXQuX21vdGlvbkRhdGEuZnBzO1xuICAgICAgcmV0Ll9sb29wRHVyYXRpb25TZWNvbmRzID0gcmV0Ll9tb3Rpb25EYXRhLmR1cmF0aW9uO1xuICAgICAgcmV0Ll9vbkZpbmlzaGVkTW90aW9uID0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI7XG5cbiAgICAgIC8vIE5PVEU6IEVkaXRvcuOBp+OBr+ODq+ODvOODl+OBguOCiuOBruODouODvOOCt+ODp+ODs+abuOOBjeWHuuOBl+OBr+mdnuWvvuW/nFxuICAgICAgLy8gcmV0LT5fbG9vcCA9IChyZXQtPl9tb3Rpb25EYXRhLT5Mb29wID4gMCk7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsOOBruWun+ihjFxuICAgICAqIEBwYXJhbSBtb2RlbCAgICAgICAgICAgICDlr77osaHjga7jg6Ljg4fjg6tcbiAgICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzICAg54++5Zyo44Gu5pmC5Yi7W+enkl1cbiAgICAgKiBAcGFyYW0gZmFkZVdlaWdodCAgICAgICAg44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xuICAgICAqL1xuICAgIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcbiAgICAgIGZhZGVXZWlnaHQ6IG51bWJlcixcbiAgICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlcbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIEVmZmVjdE5hbWVFeWVCbGlua1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgRWZmZWN0TmFtZUxpcFN5bmNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHRpbWVPZmZzZXRTZWNvbmRzOiBudW1iZXIgPVxuICAgICAgICB1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpO1xuXG4gICAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPCAwLjApIHtcbiAgICAgICAgdGltZU9mZnNldFNlY29uZHMgPSAwLjA7IC8vIOOCqOODqeODvOWbnumBv1xuICAgICAgfVxuXG4gICAgICBsZXQgbGlwU3luY1ZhbHVlOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgbGV0IGV5ZUJsaW5rVmFsdWU6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAgIC8v44G+44Gw44Gf44GN44CB44Oq44OD44OX44K344Oz44Kv44Gu44GG44Gh44Oi44O844K344On44Oz44Gu6YGp55So44KS5qSc5Ye644GZ44KL44Gf44KB44Gu44OT44OD44OI77yIbWF4RmxhZ0NvdW505YCL44G+44GnXG4gICAgICBjb25zdCBNYXhUYXJnZXRTaXplID0gNjQ7XG4gICAgICBsZXQgbGlwU3luY0ZsYWdzID0gMDtcbiAgICAgIGxldCBleWVCbGlua0ZsYWdzID0gMDtcblxuICAgICAgLy/nnqzjgY3jgIHjg6rjg4Pjg5fjgrfjg7Pjgq/jga7jgr/jg7zjgrLjg4Pjg4jmlbDjgYzkuIrpmZDjgpLotoXjgYjjgabjgYTjgovloLTlkIhcbiAgICAgIGlmICh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XG4gICAgICAgIEN1YmlzbUxvZ0RlYnVnKFxuICAgICAgICAgICd0b28gbWFueSBleWUgYmxpbmsgdGFyZ2V0cyA6IHswfScsXG4gICAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XG4gICAgICAgIEN1YmlzbUxvZ0RlYnVnKFxuICAgICAgICAgICd0b28gbWFueSBsaXAgc3luYyB0YXJnZXRzIDogezB9JyxcbiAgICAgICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0bXBGYWRlSW46IG51bWJlciA9XG4gICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPD0gMC4wXG4gICAgICAgICAgPyAxLjBcbiAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICAgKHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0RmFkZUluU3RhcnRUaW1lKCkpIC9cbiAgICAgICAgICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzXG4gICAgICAgICAgICApO1xuXG4gICAgICBjb25zdCB0bXBGYWRlT3V0OiBudW1iZXIgPVxuICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA8PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgICA/IDEuMFxuICAgICAgICAgIDogQ3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKFxuICAgICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kc1xuICAgICAgICAgICAgKTtcbiAgICAgIGxldCB2YWx1ZTogbnVtYmVyO1xuICAgICAgbGV0IGM6IG51bWJlciwgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcblxuICAgICAgLy8gJ1JlcGVhdCcgdGltZSBhcyBuZWNlc3NhcnkuXG4gICAgICBsZXQgdGltZTogbnVtYmVyID0gdGltZU9mZnNldFNlY29uZHM7XG5cbiAgICAgIGlmICh0aGlzLl9pc0xvb3ApIHtcbiAgICAgICAgd2hpbGUgKHRpbWUgPiB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uKSB7XG4gICAgICAgICAgdGltZSAtPSB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgICAvLyBFdmFsdWF0ZSBtb2RlbCBjdXJ2ZXMuXG4gICAgICBmb3IgKFxuICAgICAgICBjID0gMDtcbiAgICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxuICAgICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgICAgICArK2NcbiAgICAgICkge1xuICAgICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgY2FsbCBoYW5kbGVyLlxuICAgICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgICAgaWYgKGN1cnZlcy5hdChjKS5pZCA9PSB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluaykge1xuICAgICAgICAgIGV5ZUJsaW5rVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYykge1xuICAgICAgICAgIGxpcFN5bmNWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXJhbWV0ZXJNb3Rpb25DdXJ2ZUNvdW50ID0gMDtcblxuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXG4gICAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XG4gICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyO1xuICAgICAgICArK2NcbiAgICAgICkge1xuICAgICAgICBwYXJhbWV0ZXJNb3Rpb25DdXJ2ZUNvdW50Kys7XG5cbiAgICAgICAgLy8gRmluZCBwYXJhbWV0ZXIgaW5kZXguXG4gICAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcblxuICAgICAgICAvLyBTa2lwIGN1cnZlIGV2YWx1YXRpb24gaWYgbm8gdmFsdWUgaW4gc2luay5cbiAgICAgICAgaWYgKHBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID0gbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgICAgICAgIHBhcmFtZXRlckluZGV4XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGFwcGx5IHZhbHVlLlxuICAgICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgICAgaWYgKGV5ZUJsaW5rVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBpIDwgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xuICAgICAgICAgICAgKytpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSkgPT0gY3VydmVzLmF0KGMpLmlkKSB7XG4gICAgICAgICAgICAgIHZhbHVlICo9IGV5ZUJsaW5rVmFsdWU7XG4gICAgICAgICAgICAgIGV5ZUJsaW5rRmxhZ3MgfD0gMSA8PCBpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlwU3luY1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgaSA8IHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xuICAgICAgICAgICAgKytpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKSA9PSBjdXJ2ZXMuYXQoYykuaWQpIHtcbiAgICAgICAgICAgICAgdmFsdWUgKz0gbGlwU3luY1ZhbHVlO1xuICAgICAgICAgICAgICBsaXBTeW5jRmxhZ3MgfD0gMSA8PCBpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdjogbnVtYmVyO1xuXG4gICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBlOOBqOOBruODleOCp+ODvOODiVxuICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjAgJiYgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKSB7XG4gICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44KS6YGp55SoXG4gICAgICAgICAgdiA9IHNvdXJjZVZhbHVlICsgKHZhbHVlIC0gc291cmNlVmFsdWUpICogZmFkZVdlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgabjg5Xjgqfjg7zjg4njgqTjg7PjgYvjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgYzoqK3lrprjgZfjgabjgYLjgovloLTlkIjjga/jgZ3jgaHjgonjgpLpgannlKhcbiAgICAgICAgICBsZXQgZmluOiBudW1iZXI7XG4gICAgICAgICAgbGV0IGZvdXQ6IG51bWJlcjtcblxuICAgICAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA8IDAuMCkge1xuICAgICAgICAgICAgZmluID0gdG1wRmFkZUluO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaW4gPVxuICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA9PSAwLjBcbiAgICAgICAgICAgICAgICA/IDEuMFxuICAgICAgICAgICAgICAgIDogQ3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKFxuICAgICAgICAgICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWUgPCAwLjApIHtcbiAgICAgICAgICAgIGZvdXQgPSB0bXBGYWRlT3V0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3V0ID1cbiAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lID09IDAuMCB8fFxuICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxuICAgICAgICAgICAgICAgID8gMS4wXG4gICAgICAgICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAgICAgICAgIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSAtIHVzZXJUaW1lU2Vjb25kcykgL1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwYXJhbVdlaWdodDogbnVtYmVyID0gdGhpcy5fd2VpZ2h0ICogZmluICogZm91dDtcblxuICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBlOOBqOOBruODleOCp+ODvOODieOCkumBqeeUqFxuICAgICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIHBhcmFtV2VpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4LCB2LCAxLjApO1xuICAgICAgfVxuXG4gICAgICB7XG4gICAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICAgICsraVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBp+OBruS4iuabuOOBjeOBjOOBguOBo+OBn+aZguOBq+OBr+OBvuOBsOOBn+OBjeOBr+mBqeeUqOOBl+OBquOBhFxuICAgICAgICAgICAgaWYgKChleWVCbGlua0ZsYWdzID4+IGkpICYgMHgwMSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdjogbnVtYmVyID1cbiAgICAgICAgICAgICAgc291cmNlVmFsdWUgKyAoZXllQmxpbmtWYWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XG5cbiAgICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5hdChpKSwgdik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpcFN5bmNWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGkgPCB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICAgICsraVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9IG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gn44Gu5LiK5pu444GN44GM44GC44Gj44Gf5pmC44Gr44Gv44Oq44OD44OX44K344Oz44Kv44Gv6YGp55So44GX44Gq44GEXG4gICAgICAgICAgICBpZiAoKGxpcFN5bmNGbGFncyA+PiBpKSAmIDB4MDEpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9XG4gICAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGxpcFN5bmNWYWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XG5cbiAgICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpLCB2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXG4gICAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XG4gICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHk7XG4gICAgICAgICsrY1xuICAgICAgKSB7XG4gICAgICAgIC8vIEZpbmQgcGFyYW1ldGVyIGluZGV4LlxuICAgICAgICBwYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnZlcy5hdChjKS5pZCk7XG5cbiAgICAgICAgLy8gU2tpcCBjdXJ2ZSBldmFsdWF0aW9uIGlmIG5vIHZhbHVlIGluIHNpbmsuXG4gICAgICAgIGlmIChwYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGFwcGx5IHZhbHVlLlxuICAgICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4LCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lT2Zmc2V0U2Vjb25kcyA+PSB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0xvb3ApIHtcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldFN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpOyAvLyDmnIDliJ3jga7nirbmhYvjgbhcbiAgICAgICAgICBpZiAodGhpcy5faXNMb29wRmFkZUluKSB7XG4gICAgICAgICAgICAvLyDjg6vjg7zjg5flhoXjgafjg6vjg7zjg5fnlKjjg5Xjgqfjg7zjg4njgqTjg7PjgYzmnInlirnjga7mmYLjga/jgIHjg5Xjgqfjg7zjg4njgqTjg7PoqK3lrprjgZfnm7TjgZdcbiAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZUluU3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLl9vbkZpbmlzaGVkTW90aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkZpbmlzaGVkTW90aW9uKHRoaXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fbGFzdFdlaWdodCA9IGZhZGVXZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Or44O844OX5oOF5aCx44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGxvb3Ag44Or44O844OX5oOF5aCxXG4gICAgICovXG4gICAgcHVibGljIHNldElzTG9vcChsb29wOiBib29sZWFuKTogdm9pZCB7XG4gICAgICB0aGlzLl9pc0xvb3AgPSBsb29wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODq+ODvOODl+aDheWgseOBruWPluW+l1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6vjg7zjg5fjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOODq+ODvOODl+OBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0xvb3AoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5faXNMb29wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODq+ODvOODl+aZguOBruODleOCp+ODvOODieOCpOODs+aDheWgseOBruioreWumlxuICAgICAqIEBwYXJhbSBsb29wRmFkZUluICDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLFcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0SXNMb29wRmFkZUluKGxvb3BGYWRlSW46IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IGxvb3BGYWRlSW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCx44Gu5Y+W5b6XXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB0cnVlICAgIOOBmeOCi1xuICAgICAqIEByZXR1cm4gIGZhbHNlICAg44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzTG9vcEZhZGVJbigpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc0xvb3BGYWRlSW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREdXJhdGlvbigpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzTG9vcCA/IC0xLjAgOiB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aZguOBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu44Or44O844OX5pmC44Gu6ZW344GVW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqTjg7Pjga7mmYLplpPjgpLoqK3lrprjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcbiAgICAgKiBAcGFyYW0gdmFsdWUgICAgICAgICAgIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIHNldFBhcmFtZXRlckZhZGVJblRpbWUoXG4gICAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgICB2YWx1ZTogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgICAgY3VydmVzLmF0KGkpLmZhZGVJblRpbWUgPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7mmYLplpPjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJGYWRlT3V0VGltZShcbiAgICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcbiAgICAgIHZhbHVlOiBudW1iZXJcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcbiAgICAgICAgICBjdXJ2ZXMuYXQoaSkuZmFkZU91dFRpbWUgPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqTjg7Pjga7mmYLplpPjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gICAgcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAgICogQHJldHVybiAgIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlckZhZGVJblRpbWUocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcbiAgICAgICAgICByZXR1cm4gY3VydmVzLmF0KGkpLmZhZGVJblRpbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCouOCpuODiOOBruaZgumWk+OCkuWPluW+l1xuICAgICAqXG4gICAgICogQHBhcmFtICAgcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAgICogQHJldHVybiAgIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcmFtZXRlckZhZGVPdXRUaW1lKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6Ieq5YuV44Ko44OV44Kn44Kv44OI44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gZXllQmxpbmtQYXJhbWV0ZXJJZHMgICAg6Ieq5YuV44G+44Gw44Gf44GN44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcbiAgICAgKiBAcGFyYW0gbGlwU3luY1BhcmFtZXRlcklkcyAgICAg44Oq44OD44OX44K344Oz44Kv44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RWZmZWN0SWRzKFxuICAgICAgZXllQmxpbmtQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4sXG4gICAgICBsaXBTeW5jUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+XG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcyA9IGV5ZUJsaW5rUGFyYW1ldGVySWRzO1xuICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcyA9IGxpcFN5bmNQYXJhbWV0ZXJJZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX3NvdXJjZUZyYW1lUmF0ZSA9IDMwLjA7XG4gICAgICB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzID0gLTEuMDtcbiAgICAgIHRoaXMuX2lzTG9vcCA9IGZhbHNlOyAvLyB0cnVl44GL44KJIGZhbHNlIOOBuOODh+ODleOCqeODq+ODiOOCkuWkieabtFxuICAgICAgdGhpcy5faXNMb29wRmFkZUluID0gdHJ1ZTsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44KwXG4gICAgICB0aGlzLl9sYXN0V2VpZ2h0ID0gMC4wO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IG51bGw7XG4gICAgICB0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID0gbnVsbDtcbiAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzID0gbnVsbDtcbiAgICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgdGhpcy5fbW90aW9uRGF0YSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG1vdGlvbjMuanNvbuOCkuODkeODvOOCueOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIG1vdGlvbkpzb24gIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplICAgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgcGFyc2UobW90aW9uSnNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fbW90aW9uRGF0YSA9IG5ldyBDdWJpc21Nb3Rpb25EYXRhKCk7XG5cbiAgICAgIGxldCBqc29uOiBDdWJpc21Nb3Rpb25Kc29uID0gbmV3IEN1YmlzbU1vdGlvbkpzb24obW90aW9uSnNvbiwgc2l6ZSk7XG5cbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24gPSBqc29uLmdldE1vdGlvbkR1cmF0aW9uKCk7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmxvb3AgPSBqc29uLmlzTW90aW9uTG9vcCgpO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ID0ganNvbi5nZXRNb3Rpb25DdXJ2ZUNvdW50KCk7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmZwcyA9IGpzb24uZ2V0TW90aW9uRnBzKCk7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQgPSBqc29uLmdldEV2ZW50Q291bnQoKTtcblxuICAgICAgaWYgKGpzb24uaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUoKSkge1xuICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID1cbiAgICAgICAgICBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZUluVGltZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IDEuMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGpzb24uaXNFeGlzdE1vdGlvbkZhZGVPdXRUaW1lKCkpIHtcbiAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPVxuICAgICAgICAgIGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID0gMS4wO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy51cGRhdGVTaXplKFxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQsXG4gICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy51cGRhdGVTaXplKFxuICAgICAgICBqc29uLmdldE1vdGlvblRvdGFsU2VnbWVudENvdW50KCksXG4gICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnQsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy51cGRhdGVTaXplKFxuICAgICAgICBqc29uLmdldE1vdGlvblRvdGFsUG9pbnRDb3VudCgpLFxuICAgICAgICBDdWJpc21Nb3Rpb25Qb2ludCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLnVwZGF0ZVNpemUoXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudCxcbiAgICAgICAgQ3ViaXNtTW90aW9uRXZlbnQsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG5cbiAgICAgIGxldCB0b3RhbFBvaW50Q291bnQgPSAwO1xuICAgICAgbGV0IHRvdGFsU2VnbWVudENvdW50ID0gMDtcblxuICAgICAgLy8gQ3VydmVzXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgY3VydmVDb3VudCA9IDA7XG4gICAgICAgIGN1cnZlQ291bnQgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7XG4gICAgICAgICsrY3VydmVDb3VudFxuICAgICAgKSB7XG4gICAgICAgIGlmIChqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVNb2RlbCkge1xuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUNvdW50KSA9PSBUYXJnZXROYW1lUGFyYW1ldGVyXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZVBhcnRPcGFjaXR5XG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5pZCA9IGpzb24uZ2V0TW90aW9uQ3VydmVJZChcbiAgICAgICAgICBjdXJ2ZUNvdW50XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoXG4gICAgICAgICAgY3VydmVDb3VudFxuICAgICAgICApLmJhc2VTZWdtZW50SW5kZXggPSB0b3RhbFNlZ21lbnRDb3VudDtcblxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChcbiAgICAgICAgICBjdXJ2ZUNvdW50XG4gICAgICAgICkuZmFkZUluVGltZSA9IGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgID8ganNvbi5nZXRNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVDb3VudClcbiAgICAgICAgICA6IC0xLjA7XG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KFxuICAgICAgICAgIGN1cnZlQ291bnRcbiAgICAgICAgKS5mYWRlT3V0VGltZSA9IGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVDb3VudClcbiAgICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgIDogLTEuMDtcblxuICAgICAgICAvLyBTZWdtZW50c1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBzZWdtZW50UG9zaXRpb24gPSAwO1xuICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiA8IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50Q291bnQoY3VydmVDb3VudCk7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHNlZ21lbnRQb3NpdGlvbiA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxuICAgICAgICAgICAgKS5iYXNlUG9pbnRJbmRleCA9IHRvdGFsUG9pbnRDb3VudDtcblxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuYmFzZVBvaW50SW5kZXggPVxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgLSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHNlZ21lbnQ6IG51bWJlciA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvblxuICAgICAgICAgICk7XG4gICAgICAgICAgc3dpdGNoIChzZWdtZW50KSB7XG4gICAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhcjoge1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsU2VnbWVudENvdW50XG4gICAgICAgICAgICAgICkuZXZhbHVhdGUgPSBsaW5lYXJFdmFsdWF0ZTtcblxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAxXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxuICAgICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAyXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXI6IHtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllcjtcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxuICAgICAgICAgICAgICApLmV2YWx1YXRlID0gYmV6aWVyRXZhbHVhdGU7XG5cbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMlxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArIDFcbiAgICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArIDFcbiAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgNFxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArIDJcbiAgICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgICAgICAgICAgICAgY3VydmVDb3VudCxcbiAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyA1XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArIDJcbiAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgNlxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAzO1xuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gNztcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkOiB7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLnNlZ21lbnRUeXBlID1cbiAgICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxuICAgICAgICAgICAgICAgIHRvdGFsU2VnbWVudENvdW50XG4gICAgICAgICAgICAgICkuZXZhbHVhdGUgPSBzdGVwcGVkRXZhbHVhdGU7XG5cbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMlxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZDoge1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfSW52ZXJzZVN0ZXBwZWQ7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcbiAgICAgICAgICAgICAgKS5ldmFsdWF0ZSA9IGludmVyc2VTdGVwcGVkRXZhbHVhdGU7XG5cbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XG4gICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcbiAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMlxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgQ1NNX0FTU0VSVCgwKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgKyt0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5zZWdtZW50Q291bnQ7XG4gICAgICAgICAgKyt0b3RhbFNlZ21lbnRDb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgdXNlcmRhdGFjb3VudCA9IDA7XG4gICAgICAgIHVzZXJkYXRhY291bnQgPCBqc29uLmdldEV2ZW50Q291bnQoKTtcbiAgICAgICAgKyt1c2VyZGF0YWNvdW50XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodXNlcmRhdGFjb3VudCkuZmlyZVRpbWUgPSBqc29uLmdldEV2ZW50VGltZShcbiAgICAgICAgICB1c2VyZGF0YWNvdW50XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHVzZXJkYXRhY291bnQpLnZhbHVlID0ganNvbi5nZXRFdmVudFZhbHVlKFxuICAgICAgICAgIHVzZXJkYXRhY291bnRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAganNvbi5yZWxlYXNlKCk7XG4gICAgICBqc29uID0gdm9pZCAwO1xuICAgICAganNvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXG4gICAgICpcbiAgICAgKiDjgqTjg5njg7Pjg4jnmbrngavjga7jg4Hjgqfjg4Pjgq/jgIJcbiAgICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBiZWZvcmVDaGVja1RpbWVTZWNvbmRzICAg5YmN5Zue44Gu44Kk44OZ44Oz44OI44OB44Kn44OD44Kv5pmC6ZaTW+enkl1cbiAgICAgKiBAcGFyYW0gbW90aW9uVGltZVNlY29uZHMgICAgICAgIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldEZpcmVkRXZlbnQoXG4gICAgICBiZWZvcmVDaGVja1RpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgICBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogY3NtVmVjdG9yPGNzbVN0cmluZz4ge1xuICAgICAgdGhpcy5fZmlyZWRFdmVudFZhbHVlcy51cGRhdGVTaXplKDApO1xuXG4gICAgICAvLyDjgqTjg5njg7Pjg4jjga7nmbrngavjg4Hjgqfjg4Pjgq9cbiAgICAgIGZvciAobGV0IHUgPSAwOyB1IDwgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50OyArK3UpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lID4gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAmJlxuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lIDw9IG1vdGlvblRpbWVTZWNvbmRzXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMucHVzaEJhY2soXG4gICAgICAgICAgICBuZXcgY3NtU3RyaW5nKHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLnZhbHVlLnMpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fZmlyZWRFdmVudFZhbHVlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgX3NvdXJjZUZyYW1lUmF0ZTogbnVtYmVyOyAvLyDjg63jg7zjg4njgZfjgZ/jg5XjgqHjgqTjg6vjga5GUFPjgILoqJjov7DjgYznhKHjgZHjgozjgbDjg4fjg5Xjgqnjg6vjg4jlgKQxNWZwc+OBqOOBquOCi1xuICAgIHB1YmxpYyBfbG9vcER1cmF0aW9uU2Vjb25kczogbnVtYmVyOyAvLyBtdG7jg5XjgqHjgqTjg6vjgaflrprnvqnjgZXjgozjgovkuIDpgKPjga7jg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVcbiAgICBwdWJsaWMgX2lzTG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GLP1xuICAgIHB1YmxpYyBfaXNMb29wRmFkZUluOiBib29sZWFuOyAvLyDjg6vjg7zjg5fmmYLjgavjg5Xjgqfjg7zjg4njgqTjg7PjgYzmnInlirnjgYvjganjgYbjgYvjga7jg5Xjg6njgrDjgILliJ3mnJ/lgKTjgafjga/mnInlirnjgIJcbiAgICBwdWJsaWMgX2xhc3RXZWlnaHQ6IG51bWJlcjsgLy8g5pyA5b6M44Gr6Kit5a6a44GV44KM44Gf6YeN44G/XG5cbiAgICBwdWJsaWMgX21vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGE7IC8vIOWun+mam+OBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+acrOS9k1xuXG4gICAgcHVibGljIF9leWVCbGlua1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g6Ieq5YuV44G+44Gw44Gf44GN44KS6YGp55So44GZ44KL44OR44Op44Oh44O844K/SUTjg4/jg7Pjg4njg6vjga7jg6rjgrnjg4jjgIIgIOODouODh+ODq++8iOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsO+8ieOBqOODkeODqeODoeODvOOCv+OCkuWvvuW/nOS7mOOBkeOCi+OAglxuICAgIHB1YmxpYyBfbGlwU3luY1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g44Oq44OD44OX44K344Oz44Kv44KS6YGp55So44GZ44KL44OR44Op44Oh44O844K/SUTjg4/jg7Pjg4njg6vjga7jg6rjgrnjg4jjgIIgIOODouODh+ODq++8iOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsO+8ieOBqOODkeODqeODoeODvOOCv+OCkuWvvuW/nOS7mOOBkeOCi+OAglxuXG4gICAgcHVibGljIF9tb2RlbEN1cnZlSWRFeWVCbGluazogQ3ViaXNtSWRIYW5kbGU7IC8vIOODouODh+ODq+OBjOaMgeOBpOiHquWLleOBvuOBsOOBn+OBjeeUqOODkeODqeODoeODvOOCv0lE44Gu44OP44Oz44OJ44Or44CCICDjg6Ljg4fjg6vjgajjg6Ljg7zjgrfjg6fjg7PjgpLlr77lv5zku5jjgZHjgovjgIJcbiAgICBwdWJsaWMgX21vZGVsQ3VydmVJZExpcFN5bmM6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6Ljg4fjg6vjgYzmjIHjgaTjg6rjg4Pjg5fjgrfjg7Pjgq/nlKjjg5Hjg6njg6Hjg7zjgr9JROOBruODj+ODs+ODieODq+OAgiAg44Oi44OH44Or44Go44Oi44O844K344On44Oz44KS5a++5b+c5LuY44GR44KL44CCXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu56iu6aGeXG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnuOAglxuICAgKi9cbiAgZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQge1xuICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsLCAvLyDjg6Ljg4fjg6vjgavlr77jgZfjgaZcbiAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJhbWV0ZXIsIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBplxuICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5IC8vIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBq+WvvuOBl+OBplxuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ5cbiAgICpcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu56iu6aGe44CCXG4gICAqL1xuICBleHBvcnQgZW51bSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSB7XG4gICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyID0gMCwgLy8g44Oq44OL44KiXG4gICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyID0gMSwgLy8g44OZ44K444Kn5puy57eaXG4gICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCA9IDIsIC8vIOOCueODhuODg+ODl1xuICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkID0gMyAvLyDjgqTjg7Pjg5Djg7zjgrnjgrnjg4bjg4Pjg5dcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K5XG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblBvaW50IHtcbiAgICB0aW1lID0gMC4wOyAvLyDmmYLplpNb56eSXVxuICAgIHZhbHVlID0gMC4wOyAvLyDlgKRcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7oqZXkvqHplqLmlbBcbiAgICpcbiAgICogQHBhcmFtICAgcG9pbnRzICAgICAg44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K544Oq44K544OIXG4gICAqIEBwYXJhbSAgIHRpbWUgICAgICAgIOipleS+oeOBmeOCi+aZgumWk1vnp5JdXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb24ge1xuICAgIChwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sIHRpbWU6IG51bWJlcik6IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OIXG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblNlZ21lbnQge1xuICAgIC8qKlxuICAgICAqIEBicmllZiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OAglxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuZXZhbHVhdGUgPSBudWxsO1xuICAgICAgdGhpcy5iYXNlUG9pbnRJbmRleCA9IDA7XG4gICAgICB0aGlzLnNlZ21lbnRUeXBlID0gMDtcbiAgICB9XG5cbiAgICBldmFsdWF0ZTogY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbjsgLy8g5L2/55So44GZ44KL6KmV5L6h6Zai5pWwXG4gICAgYmFzZVBvaW50SW5kZXg6IG51bWJlcjsgLy8g5pyA5Yid44Gu44K744Kw44Oh44Oz44OI44G444Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgc2VnbWVudFR5cGU6IG51bWJlcjsgLy8g44K744Kw44Oh44Oz44OI44Gu56iu6aGeXG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODllxuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25DdXJ2ZSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy50eXBlID0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XG4gICAgICB0aGlzLnNlZ21lbnRDb3VudCA9IDA7XG4gICAgICB0aGlzLmJhc2VTZWdtZW50SW5kZXggPSAwO1xuICAgICAgdGhpcy5mYWRlSW5UaW1lID0gMC4wO1xuICAgICAgdGhpcy5mYWRlT3V0VGltZSA9IDAuMDtcbiAgICB9XG5cbiAgICB0eXBlOiBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDsgLy8g44Kr44O844OW44Gu56iu6aGeXG4gICAgaWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjgqvjg7zjg5bjga5JRFxuICAgIHNlZ21lbnRDb3VudDogbnVtYmVyOyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbBcbiAgICBiYXNlU2VnbWVudEluZGV4OiBudW1iZXI7IC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgIGZhZGVJblRpbWU6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICBmYWRlT3V0VGltZTogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkV2ZW50IHtcbiAgICBmaXJlVGltZSA9IDAuMDtcbiAgICB2YWx1ZTogY3NtU3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr9cbiAgICpcbiAgICog44Oi44O844K344On44Oz44OH44O844K/44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uRGF0YSB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5kdXJhdGlvbiA9IDAuMDtcbiAgICAgIHRoaXMubG9vcCA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJ2ZUNvdW50ID0gMDtcbiAgICAgIHRoaXMuZXZlbnRDb3VudCA9IDA7XG4gICAgICB0aGlzLmZwcyA9IDAuMDtcblxuICAgICAgdGhpcy5jdXJ2ZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPigpO1xuICAgICAgdGhpcy5zZWdtZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD4oKTtcbiAgICAgIHRoaXMucG9pbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25Qb2ludD4oKTtcbiAgICAgIHRoaXMuZXZlbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD4oKTtcbiAgICB9XG5cbiAgICBkdXJhdGlvbjogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxuICAgIGxvb3A6IGJvb2xlYW47IC8vIOODq+ODvOODl+OBmeOCi+OBi+OBqeOBhuOBi1xuICAgIGN1cnZlQ291bnQ6IG51bWJlcjsgLy8g44Kr44O844OW44Gu5YCL5pWwXG4gICAgZXZlbnRDb3VudDogbnVtYmVyOyAvLyBVc2VyRGF0YeOBruWAi+aVsFxuICAgIGZwczogbnVtYmVyOyAvLyDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hcbiAgICBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT47IC8vIOOCq+ODvOODluOBruODquOCueODiFxuICAgIHNlZ21lbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD47IC8vIOOCu+OCsOODoeODs+ODiOOBruODquOCueODiFxuICAgIHBvaW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblBvaW50PjsgLy8g44Od44Kk44Oz44OI44Gu44Oq44K544OIXG4gICAgZXZlbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uRXZlbnQ+OyAvLyDjgqTjg5njg7Pjg4jjga7jg6rjgrnjg4hcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb24gfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcbmltcG9ydCBDdWJpc21Kc29uID0gY3ViaXNtanNvbi5DdWJpc21Kc29uO1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8vIEpTT04ga2V5c1xuICBjb25zdCBNZXRhID0gJ01ldGEnO1xuICBjb25zdCBEdXJhdGlvbiA9ICdEdXJhdGlvbic7XG4gIGNvbnN0IExvb3AgPSAnTG9vcCc7XG4gIGNvbnN0IEN1cnZlQ291bnQgPSAnQ3VydmVDb3VudCc7XG4gIGNvbnN0IEZwcyA9ICdGcHMnO1xuICBjb25zdCBUb3RhbFNlZ21lbnRDb3VudCA9ICdUb3RhbFNlZ21lbnRDb3VudCc7XG4gIGNvbnN0IFRvdGFsUG9pbnRDb3VudCA9ICdUb3RhbFBvaW50Q291bnQnO1xuICBjb25zdCBDdXJ2ZXMgPSAnQ3VydmVzJztcbiAgY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XG4gIGNvbnN0IElkID0gJ0lkJztcbiAgY29uc3QgRmFkZUluVGltZSA9ICdGYWRlSW5UaW1lJztcbiAgY29uc3QgRmFkZU91dFRpbWUgPSAnRmFkZU91dFRpbWUnO1xuICBjb25zdCBTZWdtZW50cyA9ICdTZWdtZW50cyc7XG4gIGNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcbiAgY29uc3QgVXNlckRhdGFDb3VudCA9ICdVc2VyRGF0YUNvdW50JztcbiAgY29uc3QgVG90YWxVc2VyRGF0YVNpemUgPSAnVG90YWxVc2VyRGF0YVNpemUnO1xuICBjb25zdCBUaW1lID0gJ1RpbWUnO1xuICBjb25zdCBWYWx1ZSA9ICdWYWx1ZSc7XG5cbiAgLyoqXG4gICAqIG1vdGlvbjMuanNvbuOBruOCs+ODs+ODhuODiuOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkpzb24ge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBidWZmZXIgbW90aW9uMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZXjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkR1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKER1cmF0aW9uKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aDheWgseOBruWPluW+l1xuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6vjg7zjg5fjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOODq+ODvOODl+OBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc01vdGlvbkxvb3AoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKExvb3ApXG4gICAgICAgIC50b0Jvb2xlYW4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7lgIvmlbDjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUNvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlQ291bnQpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruODleODrOODvOODoOODrOODvOODiOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OV44Os44O844Og44Os44O844OIW0ZQU11cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uRnBzKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZwcylcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgrvjgrDjg6Hjg7Pjg4jjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCu+OCsOODoeODs+ODiOOBruWPluW+l1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFNlZ21lbnRDb3VudClcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu5Yi25b6h5bqX44Gu57eP5ZCI6KiI44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7liLblvqHngrnjga7nt4/lkIjoqIhcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uVG90YWxQb2ludENvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsUG9pbnRDb3VudClcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5a2Y5ZyoXG4gICAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRXhpc3RNb3Rpb25GYWRlSW5UaW1lKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgICAgLmlzTnVsbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWtmOWcqFxuICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0V4aXN0TW90aW9uRmFkZU91dFRpbWUoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgICAgLmlzTnVsbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uRmFkZUluVGltZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uRmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu56iu6aGe44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjgqvjg7zjg5bjga7nqK7poZ5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRhcmdldClcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBrklE44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjgqvjg7zjg5bjga5JRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUlkKGN1cnZlSW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5a2Y5ZyoXG4gICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAgICovXG4gICAgcHVibGljIGlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgICAgLmlzTnVsbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWtmOWcqFxuICAgICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0V4aXN0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAhdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgICAgLmlzTnVsbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWPluW+l1xuICAgICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xuICAgICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu5YCL5pWw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVTZWdtZW50Q291bnQoY3VydmVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNlZ21lbnRzKVxuICAgICAgICAuZ2V0VmVjdG9yKClcbiAgICAgICAgLmdldFNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gc2VnbWVudEluZGV4IOOCu+OCsOODoeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g44K744Kw44Oh44Oz44OI44Gu5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE1vdGlvbkN1cnZlU2VnbWVudChcbiAgICAgIGN1cnZlSW5kZXg6IG51bWJlcixcbiAgICAgIHNlZ21lbnRJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNlZ21lbnRzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHNlZ21lbnRJbmRleClcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqTjg5njg7Pjg4jjga7lgIvmlbDjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruWAi+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFdmVudENvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICDjgqTjg5njg7Pjg4jjga7nt4/mloflrZfmlbDjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBrue3j+aWh+Wtl+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUb3RhbEV2ZW50VmFsdWVTaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsVXNlckRhdGFTaXplKVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqTjg5njg7Pjg4jjga7mmYLplpPjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gdXNlckRhdGFJbmRleCDjgqTjg5njg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruaZgumWk1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldEV2ZW50VGltZSh1c2VyRGF0YUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleCh1c2VyRGF0YUluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUaW1lKVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqTjg5njg7Pjg4jjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gdXNlckRhdGFJbmRleCDjgqTjg5njg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruaWh+Wtl+WIl1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFdmVudFZhbHVlKHVzZXJEYXRhSW5kZXg6IG51bWJlcik6IGNzbVN0cmluZyB7XG4gICAgICByZXR1cm4gbmV3IGNzbVN0cmluZyhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHVzZXJEYXRhSW5kZXgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmFsdWUpXG4gICAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgICApO1xuICAgIH1cblxuICAgIF9qc29uOiBDdWJpc21Kc29uOyAvLyBtb3Rpb24zLmpzb27jga7jg4fjg7zjgr9cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlciB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLkN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBBQ3ViaXNtTW90aW9uID0gYWN1YmlzbW1vdGlvbi5BQ3ViaXNtTW90aW9uO1xuaW1wb3J0IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhlxuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrlcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25NYW5hZ2VyIGV4dGVuZHMgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gMDtcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAgICovXG4gICAgcHVibGljIGdldEN1cnJlbnRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRQcmlvcml0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmVzZXJ2ZVByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS6iOe0hOS4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuioreWumuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSAgIHZhbCAgICAg5YSq5YWI5bqmXG4gICAgICovXG4gICAgcHVibGljIHNldFJlc2VydmVQcmlvcml0eSh2YWw6IG51bWJlcik6IHZvaWQge1xuICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWEquWFiOW6puOCkuioreWumuOBl+OBpuODouODvOOCt+ODp+ODs+OCkumWi+Wni+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIG1vdGlvbiAgICAgICAgICDjg6Ljg7zjgrfjg6fjg7NcbiAgICAgKiBAcGFyYW0gYXV0b0RlbGV0ZSAgICAgIOWGjeeUn+OBjOeLqeeMn+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWJiumZpOOBmeOCi+OBquOCiXRydWVcbiAgICAgKiBAcGFyYW0gcHJpb3JpdHkgICAgICAgIOWEquWFiOW6plxuICAgICAqIEByZXR1cm4gICAgICAgICAgICAgICAg6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLSXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44Gv44CMLTHjgI1cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICAgIG1vdGlvbjogQUN1YmlzbU1vdGlvbixcbiAgICAgIGF1dG9EZWxldGU6IGJvb2xlYW4sXG4gICAgICBwcmlvcml0eTogbnVtYmVyXG4gICAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgICBpZiAocHJpb3JpdHkgPT0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7IC8vIOS6iOe0hOOCkuino+mZpFxuICAgICAgfVxuXG4gICAgICB0aGlzLl9jdXJyZW50UHJpb3JpdHkgPSBwcmlvcml0eTsgLy8g5YaN55Sf5Lit44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS6Kit5a6aXG5cbiAgICAgIHJldHVybiBzdXBlci5zdGFydE1vdGlvbihtb3Rpb24sIGF1dG9EZWxldGUsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZWwgICDlr77osaHjga7jg6Ljg4fjg6tcbiAgICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyAgICDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgICAqIEByZXR1cm4gIHRydWUgICAg5pu05paw44GV44KM44Gm44GE44KLXG4gICAgICogQHJldHVybiAgZmFsc2UgICDmm7TmlrDjgZXjgozjgabjgYTjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlTW90aW9uKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgICAgY29uc3QgdXBkYXRlZDogYm9vbGVhbiA9IHN1cGVyLmRvVXBkYXRlTW90aW9uKFxuICAgICAgICBtb2RlbCxcbiAgICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzXG4gICAgICApO1xuXG4gICAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gMDsgLy8g5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS6Kej6ZmkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OCkuS6iOe0hOOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtICAgcHJpb3JpdHkgICAg5YSq5YWI5bqmXG4gICAgICogQHJldHVybiAgdHJ1ZSAgICDkuojntITjgafjgY3jgZ9cbiAgICAgKiBAcmV0dXJuICBmYWxzZSAgIOS6iOe0hOOBp+OBjeOBquOBi+OBo+OBn1xuICAgICAqL1xuICAgIHB1YmxpYyByZXNlcnZlTW90aW9uKHByaW9yaXR5OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgIGlmIChcbiAgICAgICAgcHJpb3JpdHkgPD0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5IHx8XG4gICAgICAgIHByaW9yaXR5IDw9IHRoaXMuX2N1cnJlbnRQcmlvcml0eVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIF9jdXJyZW50UHJpb3JpdHk6IG51bWJlcjsgLy8g54++5Zyo5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAgX3Jlc2VydmVQcmlvcml0eTogbnVtYmVyOyAvLyDlho3nlJ/kuojlrprjga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgILlho3nlJ/kuK3jga8w44Gr44Gq44KL44CC44Oi44O844K344On44Oz44OV44Kh44Kk44Or44KS5Yil44K544Os44OD44OJ44Gn6Kqt44G/6L6844KA44Go44GN44Gu5qmf6IO944CCXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xuaW1wb3J0IEFDdWJpc21Nb3Rpb24gPSBhY3ViaXNtbW90aW9uLkFDdWJpc21Nb3Rpb247XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+WGjeeUn+OBl+OBpuOBhOOCi+WQhOODouODvOOCt+ODp+ODs+OBrueuoeeQhuOCr+ODqeOCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblF1ZXVlRW50cnkge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX2F1dG9EZWxldGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX21vdGlvbiA9IG51bGw7XG4gICAgICB0aGlzLl9hdmFpbGFibGUgPSB0cnVlO1xuICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3N0YXJ0VGltZVNlY29uZHMgPSAtMS4wO1xuICAgICAgdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gLTEuMDtcbiAgICAgIHRoaXMuX3N0YXRlVGltZVNlY29uZHMgPSAwLjA7XG4gICAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IDAuMDtcbiAgICAgIHRoaXMuX2xhc3RFdmVudENoZWNrU2Vjb25kcyA9IDAuMDtcbiAgICAgIHRoaXMuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgaWYgKHRoaXMuX2F1dG9EZWxldGUgJiYgdGhpcy5fbW90aW9uKSB7XG4gICAgICAgIEFDdWJpc21Nb3Rpb24uZGVsZXRlKHRoaXMuX21vdGlvbik7IC8vXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gu6ZaL5aeLXG4gICAgICogQHBhcmFtIGZhZGVPdXRTZWNvbmRzIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFydEZhZGVvdXQoZmFkZW91dFNlY29uZHM6IG51bWJlciwgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IG5ld0VuZFRpbWVTZWNvbmRzOiBudW1iZXIgPSB1c2VyVGltZVNlY29uZHMgKyBmYWRlb3V0U2Vjb25kcztcblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA8IDAuMCB8fFxuICAgICAgICBuZXdFbmRUaW1lU2Vjb25kcyA8IHRoaXMuX2VuZFRpbWVTZWNvbmRzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPSBuZXdFbmRUaW1lU2Vjb25kcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7norroqo1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ9cbiAgICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZpbmlzaGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+OBrueiuuiqjVxuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzplovlp4vjgZfjgZ9cbiAgICAgKiBAcmV0dXJuIGZhbHNlIOmWi+Wni+OBl+OBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N0YXJ0ZWQoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhcnRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldFN0YXJ0VGltZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0VGltZVNlY29uZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGYWRlSW5TdGFydFRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWRlSW5TdGFydFRpbWVTZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu5Y+W5b6XXG4gICAgICovXG4gICAgcHVibGljIGdldEVuZFRpbWUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbmRUaW1lU2Vjb25kcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gc3RhcnRUaW1lIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRTdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3N0YXJ0VGltZVNlY29uZHMgPSBzdGFydFRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXG4gICAgICogQHBhcmFtIHN0YXJ0VGltZSDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRGYWRlSW5TdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2ZhZGVJblN0YXJ0VGltZVNlY29uZHMgPSBzdGFydFRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGVuZFRpbWUg44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi7W+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RW5kVGltZShlbmRUaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gZW5kVGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gZiB0cnVl44Gq44KJ44Oi44O844K344On44Oz44Gu57WC5LqGXG4gICAgICovXG4gICAgcHVibGljIHNldElzRmluaXNoZWQoZjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5fZmluaXNoZWQgPSBmO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+OBruioreWumlxuICAgICAqIEBwYXJhbSBmIHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4tcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0SXNTdGFydGVkKGY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruacieWKueaAp+OBrueiuuiqjVxuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7Pjga/mnInlirlcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOODouODvOOCt+ODp+ODs+OBr+eEoeWKuVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9hdmFpbGFibGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu5pyJ5Yq55oCn44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIHYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBr+acieWKuVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRJc0F2YWlsYWJsZSh2OiBib29sZWFuKTogdm9pZCB7XG4gICAgICB0aGlzLl9hdmFpbGFibGUgPSB2O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODvOOCt+ODp+ODs+OBrueKtuaFi+OBruioreWumlxuICAgICAqIEBwYXJhbSB0aW1lU2Vjb25kcyDnj77lnKjmmYLliLtb56eSXVxuICAgICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz5bC+6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIHNldFN0YXRlKHRpbWVTZWNvbmRzOiBudW1iZXIsIHdlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzID0gdGltZVNlY29uZHM7XG4gICAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IHdlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nj77lnKjmmYLliLvjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruePvuWcqOaZguWIu1vnp5JdXG4gICAgICovXG4gICAgcHVibGljIGdldFN0YXRlVGltZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlVGltZVNlY29uZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44Gu6YeN44G/44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3RhdGVXZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0ZVdlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmnIDlvozjgavjgqTjg5njg7Pjg4jjga7nmbrngavjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpPjgpLlj5blvpdcbiAgICAgKlxuICAgICAqIEByZXR1cm4g5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGFzdENoZWNrRXZlbnRUaW1lKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOacgOW+jOOBq+OCpOODmeODs+ODiOOCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk+OCkuioreWumlxuICAgICAqIEBwYXJhbSBjaGVja1RpbWUg5pyA5b6M44Gr44Kk44OZ44Oz44OI44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TGFzdENoZWNrRXZlbnRUaW1lKGNoZWNrVGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB0aGlzLl9sYXN0RXZlbnRDaGVja1NlY29uZHMgPSBjaGVja1RpbWU7XG4gICAgfVxuXG4gICAgX2F1dG9EZWxldGU6IGJvb2xlYW47IC8vIOiHquWLleWJiumZpFxuICAgIF9tb3Rpb246IEFDdWJpc21Nb3Rpb247IC8vIOODouODvOOCt+ODp+ODs1xuXG4gICAgX2F2YWlsYWJsZTogYm9vbGVhbjsgLy8g5pyJ5Yq55YyW44OV44Op44KwXG4gICAgX2ZpbmlzaGVkOiBib29sZWFuOyAvLyDntYLkuobjg5Xjg6njgrBcbiAgICBfc3RhcnRlZDogYm9vbGVhbjsgLy8g6ZaL5aeL44OV44Op44KwXG4gICAgX3N0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf6ZaL5aeL5pmC5Yi7W+enkl1cbiAgICBfZmFkZUluU3RhcnRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7Pplovlp4vmmYLliLvvvIjjg6vjg7zjg5fjga7mmYLjga/liJ3lm57jga7jgb/vvIlb56eSXVxuICAgIF9lbmRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDntYLkuobkuojlrprmmYLliLtb56eSXVxuICAgIF9zdGF0ZVRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOaZguWIu+OBrueKtuaFi1vnp5JdXG4gICAgX3N0YXRlV2VpZ2h0OiBudW1iZXI7IC8vIOmHjeOBv+OBrueKtuaFi1xuICAgIF9sYXN0RXZlbnRDaGVja1NlY29uZHM6IG51bWJlcjsgLy8g5pyA57WC44GuTW90aW9u5YG044Gu44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTXG5cbiAgICBfbW90aW9uUXVldWVFbnRyeUhhbmRsZTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZTsgLy8g44Kk44Oz44K544K/44Oz44K544GU44Go44Gr5LiA5oSP44Gu5YCk44KS5oyB44Gk6K2Y5Yil55Wq5Y+3XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZWVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IGl0ZXJhdG9yID0gY3NtdmVjdG9yLml0ZXJhdG9yO1xuaW1wb3J0IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBjdWJpc21tb3Rpb25xdWV1ZWVudHJ5LkN1YmlzbU1vdGlvblF1ZXVlRW50cnk7XG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44Oi44O844K344On44Oz5YaN55Sf44Gu566h55CGXG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrueuoeeQhueUqOOCr+ODqeOCueOAgkN1YmlzbU1vdGlvbuODouODvOOCt+ODp+ODs+OBquOBqUFDdWJpc21Nb3Rpb27jga7jgrXjg5bjgq/jg6njgrnjgpLlho3nlJ/jgZnjgovjgZ/jgoHjgavkvb/nlKjjgZnjgovjgIJcbiAgICpcbiAgICogQG5vdGUg5YaN55Sf5Lit44Gr5Yil44Gu44Oi44O844K344On44Oz44GMIFN0YXJ0TW90aW9uKCnjgZXjgozjgZ/loLTlkIjjga/jgIHmlrDjgZfjgYTjg6Ljg7zjgrfjg6fjg7Pjgavmu5HjgonjgYvjgavlpInljJbjgZfml6fjg6Ljg7zjgrfjg6fjg7Pjga/kuK3mlq3jgZnjgovjgIJcbiAgICogICAgICAg6KGo5oOF55So44Oi44O844K344On44Oz44CB5L2T55So44Oi44O844K344On44Oz44Gq44Gp44KS5YiG44GR44Gm44Oi44O844K344On44Oz5YyW44GX44Gf5aC05ZCI44Gq44Gp44CBXG4gICAqICAgICAgIOikh+aVsOOBruODouODvOOCt+ODp+ODs+OCkuWQjOaZguOBq+WGjeeUn+OBleOBm+OCi+WgtOWQiOOBr+OAgeikh+aVsOOBrkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOCpOODs+OCueOCv+ODs+OCueOCkuS9v+eUqOOBmeOCi+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICAgICAgdGhpcy5fZXZlbnRDYWxsQmFjayA9IG51bGw7XG4gICAgICB0aGlzLl9ldmVudEN1c3RvbURhdGEgPSBudWxsO1xuICAgICAgdGhpcy5fbW90aW9ucyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9ucy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICBpZiAodGhpcy5fbW90aW9ucy5hdChpKSkge1xuICAgICAgICAgIHRoaXMuX21vdGlvbnMuYXQoaSkucmVsZWFzZSgpO1xuICAgICAgICAgIHRoaXMuX21vdGlvbnMuc2V0KGksIHZvaWQgMCk7XG4gICAgICAgICAgdGhpcy5fbW90aW9ucy5zZXQoaSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW90aW9ucyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu6ZaL5aeLXG4gICAgICpcbiAgICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgILlkIzjgZjjgr/jgqTjg5fjga7jg6Ljg7zjgrfjg6fjg7PjgYzml6LjgavjgYLjgovloLTlkIjjga/jgIHml6LlrZjjga7jg6Ljg7zjgrfjg6fjg7PjgavntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgIHjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgpLplovlp4vjgZXjgZvjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIG1vdGlvbiAgICAgICAgICDplovlp4vjgZnjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICAgKiBAcGFyYW0gICBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM57WC5LqG44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJIHRydWVcbiAgICAgKiBAcGFyYW0gICB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0TW90aW9uKFxuICAgICAgbW90aW9uOiBBQ3ViaXNtTW90aW9uLFxuICAgICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcbiAgICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXG4gICAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcblxuICAgICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbnMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IHRoaXMuX21vdGlvbnMuYXQoaSk7XG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc3RhcnRGYWRlb3V0KFxuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbi5nZXRGYWRlT3V0VGltZSgpLFxuICAgICAgICAgIHVzZXJUaW1lU2Vjb25kc1xuICAgICAgICApOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgpLplovlp4vjgZfntYLkuobjgZnjgotcbiAgICAgIH1cblxuICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG5ldyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5KCk7IC8vIOe1guS6huaZguOBq+egtOajhOOBmeOCi1xuICAgICAgbW90aW9uUXVldWVFbnRyeS5fYXV0b0RlbGV0ZSA9IGF1dG9EZWxldGU7XG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb24gPSBtb3Rpb247XG5cbiAgICAgIHRoaXMuX21vdGlvbnMucHVzaEJhY2sobW90aW9uUXVldWVFbnRyeSk7XG5cbiAgICAgIHJldHVybiBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxuICAgICAqIEByZXR1cm4gdHJ1ZSDlhajjgabntYLkuobjgZfjgabjgYTjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xuICAgICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG5cbiAgICAgICkge1xuICAgICAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbjtcblxuICAgICAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdm9pZCAwO1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAtLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXG4gICAgICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxuICAgICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xuICAgICAqIEByZXR1cm4gdHJ1ZSDlhajjgabntYLkuobjgZfjgabjgYTjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0ZpbmlzaGVkQnlIYW5kbGUoXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG4gICAgICAgIGl0ZS5pbmNyZW1lbnQoKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPT0gbW90aW9uUXVldWVFbnRyeU51bWJlciAmJlxuICAgICAgICAgICFtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OCkuWBnOatouOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBzdG9wQWxsTW90aW9ucygpOiB2b2lkIHtcbiAgICAgIC8vIC0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS1cbiAgICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuXG4gICAgICApIHtcbiAgICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTtcblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gLS0tLS0g57WC5LqG5riI44G/44Gu5Yem55CG44GM44GC44KM44Gw5YmK6Zmk44GZ44KLIC0tLS0tLVxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IHZvaWQgMDtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICAgICAqIOaMh+WumuOBl+OBn0N1YmlzbU1vdGlvblF1ZXVlRW50cnnjga7lj5blvpdcblxuICAgICAgICAgKiBAcGFyYW0gICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyICDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7dcbiAgICAgICAgICogQHJldHVybiAg5oyH5a6a44GX44GfQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICAgICAgICAgKiBAcmV0dXJuICBudWxsICAg6KaL44Gk44GL44KJ44Gq44GL44Gj44GfXG4gICAgICAgICAqL1xuICAgIHB1YmxpYyBnZXRDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5KFxuICAgICAgbW90aW9uUXVldWVFbnRyeU51bWJlcjogYW55XG4gICAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB7XG4gICAgICAvLy0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS1cbiAgICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9PSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBtb3Rpb25RdWV1ZUVudHJ5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODmeODs+ODiOOCkuWPl+OBkeWPluOCi0NhbGxiYWNr44Gu55m76YyyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sg44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAgICogQHBhcmFtIGN1c3RvbURhdGEg44Kz44O844Or44OQ44OD44Kv44Gr6L+U44GV44KM44KL44OH44O844K/XG4gICAgICovXG4gICAgcHVibGljIHNldEV2ZW50Q2FsbGJhY2soXG4gICAgICBjYWxsYmFjazogQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbixcbiAgICAgIGN1c3RvbURhdGE6IGFueSA9IG51bGxcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMuX2V2ZW50Q2FsbEJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IGN1c3RvbURhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICBtb2RlbCAgIOWvvuixoeOBruODouODh+ODq1xuICAgICAqIEBwYXJhbSAgIHVzZXJUaW1lU2Vjb25kcyAgIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAgICogQHJldHVybiAgdHJ1ZSAgICDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgYLjgopcbiAgICAgKiBAcmV0dXJuICBmYWxzZSAgIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBlyjjg6Ljg7zjgrfjg6fjg7Pjga7lpInljJbjgarjgZcpXG4gICAgICovXG4gICAgcHVibGljIGRvVXBkYXRlTW90aW9uKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXJcbiAgICApOiBib29sZWFuIHtcbiAgICAgIGxldCB1cGRhdGVkID0gZmFsc2U7XG5cbiAgICAgIC8vIC0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS0tXG4gICAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcblxuICAgICAgKSB7XG4gICAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gbW90aW9uUXVldWVFbnRyeS5fbW90aW9uO1xuXG4gICAgICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSB2b2lkIDA7XG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gLS0tLS0tIOWApOOCkuWPjeaYoOOBmeOCiyAtLS0tLS1cbiAgICAgICAgbW90aW9uLnVwZGF0ZVBhcmFtZXRlcnMobW9kZWwsIG1vdGlvblF1ZXVlRW50cnksIHVzZXJUaW1lU2Vjb25kcyk7XG4gICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIC0tLS0tLSDjg6bjg7zjgrbjg4jjg6rjgqzjg7zjgqTjg5njg7Pjg4jjgpLmpJzmn7vjgZnjgosgLS0tLVxuICAgICAgICBjb25zdCBmaXJlZExpc3Q6IGNzbVZlY3Rvcjxjc21TdHJpbmc+ID0gbW90aW9uLmdldEZpcmVkRXZlbnQoXG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRMYXN0Q2hlY2tFdmVudFRpbWUoKSAtXG4gICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpLFxuICAgICAgICAgIHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKClcbiAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpcmVkTGlzdC5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50Q2FsbEJhY2sodGhpcywgZmlyZWRMaXN0LmF0KGkpLCB0aGlzLl9ldmVudEN1c3RvbURhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRMYXN0Q2hlY2tFdmVudFRpbWUodXNlclRpbWVTZWNvbmRzKTtcblxuICAgICAgICAvLyAtLS0tLS0g57WC5LqG5riI44G/44Gu5Yem55CG44GM44GC44KM44Gw5YmK6Zmk44GZ44KLIC0tLS0tLVxuICAgICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdm9pZCAwO1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH1cbiAgICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG5cbiAgICBfbW90aW9uczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+OyAvLyDjg6Ljg7zjgrfjg6fjg7NcbiAgICBfZXZlbnRDYWxsQmFjazogQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbjsgLy8g44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAgX2V2ZW50Q3VzdG9tRGF0YTogYW55OyAvLyDjgrPjg7zjg6vjg5Djg4Pjgq/jgavmiLvjgZXjgozjgovjg4fjg7zjgr9cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7jgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgpLlrprnvqlcbiAgICpcbiAgICog44Kk44OZ44Oz44OI44Gu44Kz44O844Or44OQ44OD44Kv44Gr55m76Yyy44Gn44GN44KL6Zai5pWw44Gu5Z6L5oOF5aCxXG4gICAqIEBwYXJhbSBjYWxsZXIgICAgICAgIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOCkuWGjeeUn+OBleOBm+OBn0N1YmlzbU1vdGlvblF1ZXVlTWFuYWdlclxuICAgKiBAcGFyYW0gZXZlbnRWYWx1ZSAgICDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjga7mloflrZfliJfjg4fjg7zjgr9cbiAgICogQHBhcmFtIGN1c3RvbURhdGEgICDjgrPjg7zjg6vjg5Djg4Pjgq/jgavov5TjgZXjgozjgovnmbvpjLLmmYLjgavmjIflrprjgZXjgozjgZ/jg4fjg7zjgr9cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbiB7XG4gICAgKFxuICAgICAgY2FsbGVyOiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIsXG4gICAgICBldmVudFZhbHVlOiBjc21TdHJpbmcsXG4gICAgICBjdXN0b21EYXRhOiBhbnlcbiAgICApOiB2b2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjga7lrprnvqlcbiAgICovXG4gIGV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGFueTtcbiAgZXhwb3J0IGNvbnN0IEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSAtMTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21waHlzaWNzaW50ZXJuYWwgfSBmcm9tICcuL2N1YmlzbXBoeXNpY3NpbnRlcm5hbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtdmVjdG9yMiB9IGZyb20gJy4uL21hdGgvY3ViaXNtdmVjdG9yMic7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0aCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0aCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcGh5c2ljc2pzb24gfSBmcm9tICcuL2N1YmlzbXBoeXNpY3Nqc29uJztcbmltcG9ydCBDdWJpc21QaHlzaWNzSnNvbiA9IGN1YmlzbXBoeXNpY3Nqc29uLkN1YmlzbVBoeXNpY3NKc29uO1xuaW1wb3J0IEN1YmlzbU1hdGggPSBjdWJpc21tYXRoLkN1YmlzbU1hdGg7XG5pbXBvcnQgQ3ViaXNtUGh5c2ljc1JpZyA9IGN1YmlzbXBoeXNpY3NpbnRlcm5hbC5DdWJpc21QaHlzaWNzUmlnO1xuaW1wb3J0IEN1YmlzbVBoeXNpY3NTdWJSaWcgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc1N1YlJpZztcbmltcG9ydCBDdWJpc21QaHlzaWNzSW5wdXQgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc0lucHV0O1xuaW1wb3J0IEN1YmlzbVBoeXNpY3NPdXRwdXQgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc091dHB1dDtcbmltcG9ydCBDdWJpc21QaHlzaWNzUGFydGljbGUgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc1BhcnRpY2xlO1xuaW1wb3J0IEN1YmlzbVBoeXNpY3NTb3VyY2UgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc1NvdXJjZTtcbmltcG9ydCBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSA9IGN1YmlzbXBoeXNpY3NpbnRlcm5hbC5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZTtcbmltcG9ydCBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbiA9IGN1YmlzbXBoeXNpY3NpbnRlcm5hbC5DdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjtcbmltcG9ydCBDdWJpc21WZWN0b3IyID0gY3ViaXNtdmVjdG9yMi5DdWJpc21WZWN0b3IyO1xuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLy8gcGh5c2ljcyB0eXBlcyB0YWdzLlxuICBjb25zdCBQaHlzaWNzVHlwZVRhZ1ggPSAnWCc7XG4gIGNvbnN0IFBoeXNpY3NUeXBlVGFnWSA9ICdZJztcbiAgY29uc3QgUGh5c2ljc1R5cGVUYWdBbmdsZSA9ICdBbmdsZSc7XG5cbiAgLy8gQ29uc3RhbnQgb2YgYWlyIHJlc2lzdGFuY2UuXG4gIGNvbnN0IEFpclJlc2lzdGFuY2UgPSA1LjA7XG5cbiAgLy8gQ29uc3RhbnQgb2YgbWF4aW11bSB3ZWlnaHQgb2YgaW5wdXQgYW5kIG91dHB1dCByYXRpby5cbiAgY29uc3QgTWF4aW11bVdlaWdodCA9IDEwMC4wO1xuXG4gIC8vIENvbnN0YW50IG9mIHRocmVzaG9sZCBvZiBtb3ZlbWVudC5cbiAgY29uc3QgTW92ZW1lbnRUaHJlc2hvbGQgPSAwLjAwMTtcblxuICAvKipcbiAgICog54mp55CG5ryU566X44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljcyB7XG4gICAgLyoqXG4gICAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAgICogQHBhcmFtIGJ1ZmZlciAgICBwaHlzaWNzMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IEN1YmlzbVBoeXNpY3Mge1xuICAgICAgY29uc3QgcmV0OiBDdWJpc21QaHlzaWNzID0gbmV3IEN1YmlzbVBoeXNpY3MoKTtcblxuICAgICAgcmV0LnBhcnNlKGJ1ZmZlciwgc2l6ZSk7XG4gICAgICByZXQuX3BoeXNpY3NSaWcuZ3Jhdml0eS55ID0gMDtcblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcbiAgICAgKiBAcGFyYW0gcGh5c2ljcyDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShwaHlzaWNzOiBDdWJpc21QaHlzaWNzKTogdm9pZCB7XG4gICAgICBpZiAocGh5c2ljcyAhPSBudWxsKSB7XG4gICAgICAgIHBoeXNpY3MucmVsZWFzZSgpO1xuICAgICAgICBwaHlzaWNzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDniannkIbmvJTnrpfjga7oqZXkvqFcbiAgICAgKiBAcGFyYW0gbW9kZWwg54mp55CG5ryU566X44Gu57WQ5p6c44KS6YGp55So44GZ44KL44Oi44OH44OrXG4gICAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICAgKi9cbiAgICBwdWJsaWMgZXZhbHVhdGUobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGxldCB0b3RhbEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfTtcbiAgICAgIGxldCB3ZWlnaHQ6IG51bWJlcjtcbiAgICAgIGxldCByYWRBbmdsZTogbnVtYmVyO1xuICAgICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXI7XG4gICAgICBjb25zdCB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcbiAgICAgIGxldCBjdXJyZW50U2V0dGluZzogQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgICAgIGxldCBjdXJyZW50SW5wdXQ6IEN1YmlzbVBoeXNpY3NJbnB1dFtdO1xuICAgICAgbGV0IGN1cnJlbnRPdXRwdXQ6IEN1YmlzbVBoeXNpY3NPdXRwdXRbXTtcbiAgICAgIGxldCBjdXJyZW50UGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcblxuICAgICAgbGV0IHBhcmFtZXRlclZhbHVlOiBGbG9hdDMyQXJyYXk7XG4gICAgICBsZXQgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBGbG9hdDMyQXJyYXk7XG4gICAgICBsZXQgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBGbG9hdDMyQXJyYXk7XG4gICAgICBsZXQgcGFyYW1ldGVyRGVmYXVsdFZhbHVlOiBGbG9hdDMyQXJyYXk7XG5cbiAgICAgIHBhcmFtZXRlclZhbHVlID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLnZhbHVlcztcbiAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXM7XG4gICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMuZGVmYXVsdFZhbHVlcztcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XG4gICAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgICApIHtcbiAgICAgICAgdG90YWxBbmdsZSA9IHsgYW5nbGU6IDAuMCB9O1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPSAwLjA7XG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9IDAuMDtcbiAgICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICAgIGN1cnJlbnRJbnB1dCA9IHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlSW5wdXRJbmRleFxuICAgICAgICApO1xuICAgICAgICBjdXJyZW50T3V0cHV0ID0gdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlT3V0cHV0SW5kZXhcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudFBhcnRpY2xlcyA9IHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlUGFydGljbGVJbmRleFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIExvYWQgaW5wdXQgcGFyYW1ldGVyc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLmlucHV0Q291bnQ7ICsraSkge1xuICAgICAgICAgIHdlaWdodCA9IGN1cnJlbnRJbnB1dFtpXS53ZWlnaHQgLyBNYXhpbXVtV2VpZ2h0O1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgY3VycmVudElucHV0W2ldLnNvdXJjZVBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoXG4gICAgICAgICAgICAgIGN1cnJlbnRJbnB1dFtpXS5zb3VyY2UuaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudElucHV0W2ldLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXG4gICAgICAgICAgICB0b3RhbEFuZ2xlLFxuICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWVbY3VycmVudElucHV0W2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlW2N1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWVbY3VycmVudElucHV0W2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbixcbiAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25BbmdsZSxcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dFswXS5yZWZsZWN0LFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJhZEFuZ2xlID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4oLXRvdGFsQW5nbGUuYW5nbGUpO1xuXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCA9XG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpIC1cbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSk7XG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9XG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpICtcbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHBhcnRpY2xlcyBwb3NpdGlvbi5cbiAgICAgICAgdXBkYXRlUGFydGljbGVzKFxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXG4gICAgICAgICAgY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudCxcbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLFxuICAgICAgICAgIHRvdGFsQW5nbGUuYW5nbGUsXG4gICAgICAgICAgdGhpcy5fb3B0aW9ucy53aW5kLFxuICAgICAgICAgIE1vdmVtZW50VGhyZXNob2xkICogY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0sXG4gICAgICAgICAgZGVsdGFUaW1lU2Vjb25kcyxcbiAgICAgICAgICBBaXJSZXNpc3RhbmNlXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gVXBkYXRlIG91dHB1dCBwYXJhbWV0ZXJzLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLm91dHB1dENvdW50OyArK2kpIHtcbiAgICAgICAgICBjb25zdCBwYXJ0aWNsZUluZGV4ID0gY3VycmVudE91dHB1dFtpXS52ZXJ0ZXhJbmRleDtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXggPCAxIHx8XG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4ID49IGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJyZW50T3V0cHV0W2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRbXG4gICAgICAgICAgICAgIGlcbiAgICAgICAgICAgIF0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KFxuICAgICAgICAgICAgICBjdXJyZW50T3V0cHV0W2ldLmRlc3RpbmF0aW9uLmlkXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcbiAgICAgICAgICB0cmFuc2xhdGlvbi54ID1cbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleF0ucG9zaXRpb24ueCAtXG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi54O1xuICAgICAgICAgIHRyYW5zbGF0aW9uLnkgPVxuICAgICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4XS5wb3NpdGlvbi55IC1cbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDFdLnBvc2l0aW9uLnk7XG5cbiAgICAgICAgICBvdXRwdXRWYWx1ZSA9IGN1cnJlbnRPdXRwdXRbaV0uZ2V0VmFsdWUoXG4gICAgICAgICAgICB0cmFuc2xhdGlvbixcbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4LFxuICAgICAgICAgICAgY3VycmVudE91dHB1dFtpXS5yZWZsZWN0LFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ncmF2aXR5XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg6IG51bWJlciA9XG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0W2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg7XG4gICAgICAgICAgY29uc3Qgb3V0UGFyYW1ldGVyVmFsdWU6IEZsb2F0MzJBcnJheSA9XG4gICAgICAgICAgICAhRmxvYXQzMkFycmF5LnByb3RvdHlwZS5zbGljZSAmJlxuICAgICAgICAgICAgJ3N1YmFycmF5JyBpbiBGbG9hdDMyQXJyYXkucHJvdG90eXBlXG4gICAgICAgICAgICAgID8gSlNPTi5wYXJzZShcbiAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZS5zdWJhcnJheShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkgLy8g5YCk5rih44GX44GZ44KL44Gf44KB44CBSlNPTi5wYXJzZSwgSlNPTi5zdHJpbmdpZnlcbiAgICAgICAgICAgICAgOiBwYXJhbWV0ZXJWYWx1ZS5zbGljZShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KTtcblxuICAgICAgICAgIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxuICAgICAgICAgICAgb3V0UGFyYW1ldGVyVmFsdWUsXG4gICAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBvdXRwdXRWYWx1ZSxcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRbaV1cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8g5YCk44KS5Y+N5pigXG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBvZmZzZXQ6IG51bWJlciA9IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgsIG91dFBhcmFtSW5kZXggPSAwO1xuICAgICAgICAgICAgb2Zmc2V0IDwgcGFyYW1ldGVyVmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgb2Zmc2V0KyssIG91dFBhcmFtSW5kZXgrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWVbb2Zmc2V0XSA9IG91dFBhcmFtZXRlclZhbHVlW291dFBhcmFtSW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCquODl+OCt+ODp+ODs+OBruioreWumlxuICAgICAqIEBwYXJhbSBvcHRpb25zIOOCquODl+OCt+ODp+ODs1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpOiB2b2lkIHtcbiAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCquODl+OCt+ODp+ODs+OBruWPluW+l1xuICAgICAqIEByZXR1cm4g44Kq44OX44K344On44OzXG4gICAgICovXG4gICAgcHVibGljIGdldE9wdGlvbigpOiBPcHRpb25zIHtcbiAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcgPSBudWxsO1xuXG4gICAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICB0aGlzLl9vcHRpb25zID0gbmV3IE9wdGlvbnMoKTtcbiAgICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eS55ID0gLTEuMDtcbiAgICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eS54ID0gMDtcbiAgICAgIHRoaXMuX29wdGlvbnMud2luZC54ID0gMDtcbiAgICAgIHRoaXMuX29wdGlvbnMud2luZC55ID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwaHlzaWNzMy5qc29u44KS44OR44O844K544GZ44KL44CCXG4gICAgICogQHBhcmFtIHBoeXNpY3NKc29uIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgcGFyc2UocGh5c2ljc0pzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcgPSBuZXcgQ3ViaXNtUGh5c2ljc1JpZygpO1xuXG4gICAgICBsZXQganNvbjogQ3ViaXNtUGh5c2ljc0pzb24gPSBuZXcgQ3ViaXNtUGh5c2ljc0pzb24ocGh5c2ljc0pzb24sIHNpemUpO1xuXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLmdyYXZpdHkgPSBqc29uLmdldEdyYXZpdHkoKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcud2luZCA9IGpzb24uZ2V0V2luZCgpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudCA9IGpzb24uZ2V0U3ViUmlnQ291bnQoKTtcblxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy51cGRhdGVTaXplKFxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50LFxuICAgICAgICBDdWJpc21QaHlzaWNzU3ViUmlnLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMudXBkYXRlU2l6ZShcbiAgICAgICAganNvbi5nZXRUb3RhbElucHV0Q291bnQoKSxcbiAgICAgICAgQ3ViaXNtUGh5c2ljc0lucHV0LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLnVwZGF0ZVNpemUoXG4gICAgICAgIGpzb24uZ2V0VG90YWxPdXRwdXRDb3VudCgpLFxuICAgICAgICBDdWJpc21QaHlzaWNzT3V0cHV0LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMudXBkYXRlU2l6ZShcbiAgICAgICAganNvbi5nZXRWZXJ0ZXhDb3VudCgpLFxuICAgICAgICBDdWJpc21QaHlzaWNzUGFydGljbGUsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG5cbiAgICAgIGxldCBpbnB1dEluZGV4ID0gMCxcbiAgICAgICAgb3V0cHV0SW5kZXggPSAwLFxuICAgICAgICBwYXJ0aWNsZUluZGV4ID0gMDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXG4gICAgICAgICAgaVxuICAgICAgICApLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtID0ganNvbi5nZXROb3JtYWxpemF0aW9uUG9zaXRpb25NaW5pbXVtVmFsdWUoXG4gICAgICAgICAgaVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxuICAgICAgICAgIGlcbiAgICAgICAgKS5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKFxuICAgICAgICAgIGlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcbiAgICAgICAgICBpXG4gICAgICAgICkubm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQgPSBqc29uLmdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbkRlZmF1bHRWYWx1ZShcbiAgICAgICAgICBpXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChcbiAgICAgICAgICBpXG4gICAgICAgICkubm9ybWFsaXphdGlvbkFuZ2xlLm1pbmltdW0gPSBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZShcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoXG4gICAgICAgICAgaVxuICAgICAgICApLm5vcm1hbGl6YXRpb25BbmdsZS5tYXhpbXVtID0ganNvbi5nZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUoXG4gICAgICAgICAgaVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KFxuICAgICAgICAgIGlcbiAgICAgICAgKS5ub3JtYWxpemF0aW9uQW5nbGUuZGVmYWx1dCA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlRGVmYXVsdFZhbHVlKFxuICAgICAgICAgIGlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBJbnB1dFxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmlucHV0Q291bnQgPSBqc29uLmdldElucHV0Q291bnQoaSk7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuYmFzZUlucHV0SW5kZXggPSBpbnB1dEluZGV4O1xuXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50OyArK2opIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikuc291cmNlUGFyYW1ldGVySW5kZXggPSAtMTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgKS53ZWlnaHQgPSBqc29uLmdldElucHV0V2VpZ2h0KGksIGopO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICApLnJlZmxlY3QgPSBqc29uLmdldElucHV0UmVmbGVjdChpLCBqKTtcblxuICAgICAgICAgIGlmIChqc29uLmdldElucHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1gpIHtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdZKSB7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdBbmdsZSkge1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGU7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRBbmdsZUZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnNvdXJjZS50YXJnZXRUeXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlcjtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5zb3VyY2UuaWQgPSBqc29uLmdldElucHV0U291cmNlSWQoaSwgaik7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXRJbmRleCArPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmlucHV0Q291bnQ7XG5cbiAgICAgICAgLy8gT3V0cHV0XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnQgPSBqc29uLmdldE91dHB1dENvdW50KGkpO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VPdXRwdXRJbmRleCA9IG91dHB1dEluZGV4O1xuXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudDsgKytqKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID0gLTE7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS52ZXJ0ZXhJbmRleCA9IGpzb24uZ2V0T3V0cHV0VmVydGV4SW5kZXgoaSwgaik7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5hbmdsZVNjYWxlID0ganNvbi5nZXRPdXRwdXRBbmdsZVNjYWxlKGksIGopO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgIG91dHB1dEluZGV4ICsgalxuICAgICAgICAgICkud2VpZ2h0ID0ganNvbi5nZXRPdXRwdXRXZWlnaHQoaSwgaik7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZGVzdGluYXRpb24udGFyZ2V0VHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZS5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXI7XG5cbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgICApLmRlc3RpbmF0aW9uLmlkID0ganNvbi5nZXRPdXRwdXREZXN0aW5hdGlvbklkKGksIGopO1xuXG4gICAgICAgICAgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1gpIHtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWDtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldFZhbHVlID0gZ2V0T3V0cHV0VHJhbnNsYXRpb25YO1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgICAgICkuZ2V0U2NhbGUgPSBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1kpIHtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWTtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldFZhbHVlID0gZ2V0T3V0cHV0VHJhbnNsYXRpb25ZO1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgICAgICkuZ2V0U2NhbGUgPSBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ0FuZ2xlKSB7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlO1xuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KFxuICAgICAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgICAgICkuZ2V0VmFsdWUgPSBnZXRPdXRwdXRBbmdsZTtcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChcbiAgICAgICAgICAgICAgb3V0cHV0SW5kZXggKyBqXG4gICAgICAgICAgICApLmdldFNjYWxlID0gZ2V0T3V0cHV0U2NhbGVBbmdsZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQoXG4gICAgICAgICAgICBvdXRwdXRJbmRleCArIGpcbiAgICAgICAgICApLnJlZmxlY3QgPSBqc29uLmdldE91dHB1dFJlZmxlY3QoaSwgaik7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0SW5kZXggKz0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudDtcblxuICAgICAgICAvLyBQYXJ0aWNsZVxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLnBhcnRpY2xlQ291bnQgPSBqc29uLmdldFBhcnRpY2xlQ291bnQoXG4gICAgICAgICAgaVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VQYXJ0aWNsZUluZGV4ID0gcGFydGljbGVJbmRleDtcblxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBqID0gMDtcbiAgICAgICAgICBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50O1xuICAgICAgICAgICsralxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXggKyBqXG4gICAgICAgICAgKS5tb2JpbGl0eSA9IGpzb24uZ2V0UGFydGljbGVNb2JpbGl0eShpLCBqKTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXggKyBqXG4gICAgICAgICAgKS5kZWxheSA9IGpzb24uZ2V0UGFydGljbGVEZWxheShpLCBqKTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXggKyBqXG4gICAgICAgICAgKS5hY2NlbGVyYXRpb24gPSBqc29uLmdldFBhcnRpY2xlQWNjZWxlcmF0aW9uKGksIGopO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KFxuICAgICAgICAgICAgcGFydGljbGVJbmRleCArIGpcbiAgICAgICAgICApLnJhZGl1cyA9IGpzb24uZ2V0UGFydGljbGVSYWRpdXMoaSwgaik7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQoXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4ICsgalxuICAgICAgICAgICkucG9zaXRpb24gPSBqc29uLmdldFBhcnRpY2xlUG9zaXRpb24oaSwgaik7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJ0aWNsZUluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG5cbiAgICAgIGpzb24ucmVsZWFzZSgpO1xuICAgICAganNvbiA9IHZvaWQgMDtcbiAgICAgIGpzb24gPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWIneacn+WMluOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgICAgbGV0IHN0cmFuZDogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW107XG4gICAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gICAgICBsZXQgcmFkaXVzOiBDdWJpc21WZWN0b3IyO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2V0dGluZ0luZGV4ID0gMDtcbiAgICAgICAgc2V0dGluZ0luZGV4IDwgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudDtcbiAgICAgICAgKytzZXR0aW5nSW5kZXhcbiAgICAgICkge1xuICAgICAgICBjdXJyZW50U2V0dGluZyA9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoc2V0dGluZ0luZGV4KTtcbiAgICAgICAgc3RyYW5kID0gdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuZ2V0KFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VQYXJ0aWNsZUluZGV4XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdG9wIG9mIHBhcnRpY2xlLlxuICAgICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgICBzdHJhbmRbMF0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgc3RyYW5kWzBdLmluaXRpYWxQb3NpdGlvbi54LFxuICAgICAgICAgIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24ueVxuICAgICAgICApO1xuICAgICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIC0xLjApO1xuICAgICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkueSAqPSAtMS4wO1xuICAgICAgICBzdHJhbmRbMF0udmVsb2NpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICAgIHN0cmFuZFswXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcblxuICAgICAgICAvLyBJbml0aWFsaXplIHBhcml0Y2xlcy5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50OyArK2kpIHtcbiAgICAgICAgICByYWRpdXMgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICAgICAgcmFkaXVzLnkgPSBzdHJhbmRbaV0ucmFkaXVzO1xuICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgICAgIHN0cmFuZFtpIC0gMV0uaW5pdGlhbFBvc2l0aW9uLnggKyByYWRpdXMueCxcbiAgICAgICAgICAgIHN0cmFuZFtpIC0gMV0uaW5pdGlhbFBvc2l0aW9uLnkgKyByYWRpdXMueVxuICAgICAgICAgICk7XG4gICAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLnlcbiAgICAgICAgICApO1xuICAgICAgICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueCxcbiAgICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueVxuICAgICAgICAgICk7XG4gICAgICAgICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAtMS4wKTtcbiAgICAgICAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkueSAqPSAtMS4wO1xuICAgICAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgICAgICBzdHJhbmRbaV0uZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfcGh5c2ljc1JpZzogQ3ViaXNtUGh5c2ljc1JpZzsgLy8g54mp55CG5ryU566X44Gu44OH44O844K/XG4gICAgX29wdGlvbnM6IE9wdGlvbnM7IC8vIOOCquODl+OCt+ODp+ODs1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruOCquODl+OCt+ODp+ODs1xuICAgKi9cbiAgZXhwb3J0IGNsYXNzIE9wdGlvbnMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB9XG5cbiAgICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43lipvmlrnlkJFcbiAgICB3aW5kOiBDdWJpc21WZWN0b3IyOyAvLyDpoqjjga7mlrnlkJFcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHNpZ24uXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBFdmFsdWF0aW9uIHRhcmdldCB2YWx1ZS5cbiAgICpcbiAgICogQHJldHVybiBTaWduIG9mIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gc2lnbih2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgcmV0ID0gMDtcblxuICAgIGlmICh2YWx1ZSA+IDAuMCkge1xuICAgICAgcmV0ID0gMTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIDwgMC4wKSB7XG4gICAgICByZXQgPSAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHdlaWdodDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRhcmdldFRyYW5zbGF0aW9uLnggKz1cbiAgICAgIG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUsXG4gICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXG4gICAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtLFxuICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcbiAgICAgICAgaXNJbnZlcnRlZFxuICAgICAgKSAqIHdlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlKFxuICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHdlaWdodDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRhcmdldFRyYW5zbGF0aW9uLnkgKz1cbiAgICAgIG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUsXG4gICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXG4gICAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtLFxuICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcbiAgICAgICAgaXNJbnZlcnRlZFxuICAgICAgKSAqIHdlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICAgIG5vcm1hbGl6YWl0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICB3ZWlnaHQ6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0YXJnZXRBbmdsZS5hbmdsZSArPVxuICAgICAgbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWUsXG4gICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZSxcbiAgICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlLFxuICAgICAgICBub3JtYWxpemF0aW9uQW5nbGUubWluaW11bSxcbiAgICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLm1heGltdW0sXG4gICAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5kZWZhbHV0LFxuICAgICAgICBpc0ludmVydGVkXG4gICAgICApICogd2VpZ2h0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3V0cHV0VHJhbnNsYXRpb25YKFxuICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gICAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuICApOiBudW1iZXIge1xuICAgIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyID0gdHJhbnNsYXRpb24ueDtcblxuICAgIGlmIChpc0ludmVydGVkKSB7XG4gICAgICBvdXRwdXRWYWx1ZSAqPSAtMS4wO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE91dHB1dFRyYW5zbGF0aW9uWShcbiAgICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICAgIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbiAgKTogbnVtYmVyIHtcbiAgICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlciA9IHRyYW5zbGF0aW9uLnk7XG5cbiAgICBpZiAoaXNJbnZlcnRlZCkge1xuICAgICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dFZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3V0cHV0QW5nbGUoXG4gICAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gICAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXG4gICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXG4gICk6IG51bWJlciB7XG4gICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXI7XG5cbiAgICBpZiAocGFydGljbGVJbmRleCA+PSAyKSB7XG4gICAgICBwYXJlbnRHcmF2aXR5ID0gcGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi5zdWJzdHJhY3QoXG4gICAgICAgIHBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMl0ucG9zaXRpb25cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudEdyYXZpdHkgPSBwYXJlbnRHcmF2aXR5Lm11bHRpcGx5QnlTY2FsZXIoLTEuMCk7XG4gICAgfVxuXG4gICAgb3V0cHV0VmFsdWUgPSBDdWJpc21NYXRoLmRpcmVjdGlvblRvUmFkaWFuKHBhcmVudEdyYXZpdHksIHRyYW5zbGF0aW9uKTtcblxuICAgIGlmIChpc0ludmVydGVkKSB7XG4gICAgICBvdXRwdXRWYWx1ZSAqPSAtMS4wO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhbmdlVmFsdWUobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBtYXhWYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgobWluLCBtYXgpO1xuICAgIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihtaW4sIG1heCk7XG5cbiAgICByZXR1cm4gQ3ViaXNtTWF0aC5hYnMobWF4VmFsdWUgLSBtaW5WYWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4obWluLCBtYXgpO1xuICAgIHJldHVybiBtaW5WYWx1ZSArIGdldFJhbmdlVmFsdWUobWluLCBtYXgpIC8gMi4wO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblgoXG4gICAgdHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMixcbiAgICBhbmdsZVNjYWxlOiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGlvblNjYWxlLngpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25ZKFxuICAgIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gICAgYW5nbGVTY2FsZTogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRpb25TY2FsZS55KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPdXRwdXRTY2FsZUFuZ2xlKFxuICAgIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gICAgYW5nbGVTY2FsZTogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYW5nbGVTY2FsZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgcGFydGljbGVzLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyYW5kICAgICAgICAgICAgICAgIFRhcmdldCBhcnJheSBvZiBwYXJ0aWNsZS5cbiAgICogQHBhcmFtIHN0cmFuZENvdW50ICAgICAgICAgICBDb3VudCBvZiBwYXJ0aWNsZS5cbiAgICogQHBhcmFtIHRvdGFsVHJhbnNsYXRpb24gICAgICBUb3RhbCB0cmFuc2xhdGlvbiB2YWx1ZS5cbiAgICogQHBhcmFtIHRvdGFsQW5nbGUgICAgICAgICAgICBUb3RhbCBhbmdsZS5cbiAgICogQHBhcmFtIHdpbmREaXJlY3Rpb24gICAgICAgICBEaXJlY3Rpb24gb2YgV2luZC5cbiAgICogQHBhcmFtIHRocmVzaG9sZFZhbHVlICAgICAgICBUaHJlc2hvbGQgb2YgbW92ZW1lbnQuXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgICAgRGVsdGEgdGltZS5cbiAgICogQHBhcmFtIGFpclJlc2lzdGFuY2UgICAgICAgICBBaXIgcmVzaXN0YW5jZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZVBhcnRpY2xlcyhcbiAgICBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICAgIHN0cmFuZENvdW50OiBudW1iZXIsXG4gICAgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICB0b3RhbEFuZ2xlOiBudW1iZXIsXG4gICAgd2luZERpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgICB0aHJlc2hvbGRWYWx1ZTogbnVtYmVyLFxuICAgIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcixcbiAgICBhaXJSZXNpc3RhbmNlOiBudW1iZXJcbiAgKSB7XG4gICAgbGV0IHRvdGFsUmFkaWFuOiBudW1iZXI7XG4gICAgbGV0IGRlbGF5OiBudW1iZXI7XG4gICAgbGV0IHJhZGlhbjogbnVtYmVyO1xuICAgIGxldCBjdXJyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjtcbiAgICBsZXQgZGlyZWN0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIGxldCB2ZWxvY2l0eTogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICBsZXQgZm9yY2U6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgbGV0IG5ld0RpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcblxuICAgIHN0cmFuZFswXS5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgdG90YWxUcmFuc2xhdGlvbi54LFxuICAgICAgdG90YWxUcmFuc2xhdGlvbi55XG4gICAgKTtcblxuICAgIHRvdGFsUmFkaWFuID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4odG90YWxBbmdsZSk7XG4gICAgY3VycmVudEdyYXZpdHkgPSBDdWJpc21NYXRoLnJhZGlhblRvRGlyZWN0aW9uKHRvdGFsUmFkaWFuKTtcbiAgICBjdXJyZW50R3Jhdml0eS5ub3JtYWxpemUoKTtcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3RyYW5kQ291bnQ7ICsraSkge1xuICAgICAgc3RyYW5kW2ldLmZvcmNlID0gY3VycmVudEdyYXZpdHlcbiAgICAgICAgLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLmFjY2VsZXJhdGlvbilcbiAgICAgICAgLmFkZCh3aW5kRGlyZWN0aW9uKTtcblxuICAgICAgc3RyYW5kW2ldLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueCxcbiAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnlcbiAgICAgICk7XG5cbiAgICAgIGRlbGF5ID0gc3RyYW5kW2ldLmRlbGF5ICogZGVsdGFUaW1lU2Vjb25kcyAqIDMwLjA7XG5cbiAgICAgIGRpcmVjdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2kgLSAxXS5wb3NpdGlvbik7XG5cbiAgICAgIHJhZGlhbiA9XG4gICAgICAgIEN1YmlzbU1hdGguZGlyZWN0aW9uVG9SYWRpYW4oc3RyYW5kW2ldLmxhc3RHcmF2aXR5LCBjdXJyZW50R3Jhdml0eSkgL1xuICAgICAgICBhaXJSZXNpc3RhbmNlO1xuXG4gICAgICBkaXJlY3Rpb24ueCA9XG4gICAgICAgIEN1YmlzbU1hdGguY29zKHJhZGlhbikgKiBkaXJlY3Rpb24ueCAtXG4gICAgICAgIGRpcmVjdGlvbi55ICogQ3ViaXNtTWF0aC5zaW4ocmFkaWFuKTtcbiAgICAgIGRpcmVjdGlvbi55ID1cbiAgICAgICAgQ3ViaXNtTWF0aC5zaW4ocmFkaWFuKSAqIGRpcmVjdGlvbi54ICtcbiAgICAgICAgZGlyZWN0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRpYW4pO1xuXG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBzdHJhbmRbaSAtIDFdLnBvc2l0aW9uLmFkZChkaXJlY3Rpb24pO1xuXG4gICAgICB2ZWxvY2l0eSA9IHN0cmFuZFtpXS52ZWxvY2l0eS5tdWx0aXBseUJ5U2NhbGVyKGRlbGF5KTtcbiAgICAgIGZvcmNlID0gc3RyYW5kW2ldLmZvcmNlLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpO1xuXG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uYWRkKHZlbG9jaXR5KS5hZGQoZm9yY2UpO1xuXG4gICAgICBuZXdEaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xuICAgICAgbmV3RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuXG4gICAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBzdHJhbmRbaSAtIDFdLnBvc2l0aW9uLmFkZChcbiAgICAgICAgbmV3RGlyZWN0aW9uLm11bHRpcGx5QnlTY2FsZXIoc3RyYW5kW2ldLnJhZGl1cylcbiAgICAgICk7XG5cbiAgICAgIGlmIChDdWJpc21NYXRoLmFicyhzdHJhbmRbaV0ucG9zaXRpb24ueCkgPCB0aHJlc2hvbGRWYWx1ZSkge1xuICAgICAgICBzdHJhbmRbaV0ucG9zaXRpb24ueCA9IDAuMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlbGF5ICE9IDAuMCkge1xuICAgICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KFxuICAgICAgICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb25cbiAgICAgICAgKTtcbiAgICAgICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5LmRpdmlzaW9uQnlTY2FsYXIoZGVsYXkpO1xuICAgICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkubXVsdGlwbHlCeVNjYWxlcihcbiAgICAgICAgICBzdHJhbmRbaV0ubW9iaWxpdHlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgc3RyYW5kW2ldLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgIGN1cnJlbnRHcmF2aXR5LngsXG4gICAgICAgIGN1cnJlbnRHcmF2aXR5LnlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgb3V0cHV0IHBhcmFtZXRlciB2YWx1ZS5cbiAgICogQHBhcmFtIHBhcmFtZXRlclZhbHVlICAgICAgICAgICAgVGFyZ2V0IHBhcmFtZXRlciB2YWx1ZS5cbiAgICogQHBhcmFtIHBhcmFtZXRlclZhbHVlTWluaW11bSAgICAgTWluaW11bSBvZiBwYXJhbWV0ZXIgdmFsdWUuXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZU1heGltdW0gICAgIE1heGltdW0gb2YgcGFyYW1ldGVyIHZhbHVlLlxuICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gICAgICAgICAgICAgICBUcmFuc2xhdGlvbiB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxuICAgIHBhcmFtZXRlclZhbHVlOiBGbG9hdDMyQXJyYXksXG4gICAgcGFyYW1ldGVyVmFsdWVNaW5pbXVtOiBudW1iZXIsXG4gICAgcGFyYW1ldGVyVmFsdWVNYXhpbXVtOiBudW1iZXIsXG4gICAgdHJhbnNsYXRpb246IG51bWJlcixcbiAgICBvdXRwdXQ6IEN1YmlzbVBoeXNpY3NPdXRwdXRcbiAgKTogdm9pZCB7XG4gICAgbGV0IG91dHB1dFNjYWxlOiBudW1iZXI7XG4gICAgbGV0IHZhbHVlOiBudW1iZXI7XG4gICAgbGV0IHdlaWdodDogbnVtYmVyO1xuXG4gICAgb3V0cHV0U2NhbGUgPSBvdXRwdXQuZ2V0U2NhbGUob3V0cHV0LnRyYW5zbGF0aW9uU2NhbGUsIG91dHB1dC5hbmdsZVNjYWxlKTtcblxuICAgIHZhbHVlID0gdHJhbnNsYXRpb24gKiBvdXRwdXRTY2FsZTtcblxuICAgIGlmICh2YWx1ZSA8IHBhcmFtZXRlclZhbHVlTWluaW11bSkge1xuICAgICAgaWYgKHZhbHVlIDwgb3V0cHV0LnZhbHVlQmVsb3dNaW5pbXVtKSB7XG4gICAgICAgIG91dHB1dC52YWx1ZUJlbG93TWluaW11bSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlTWluaW11bTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID4gcGFyYW1ldGVyVmFsdWVNYXhpbXVtKSB7XG4gICAgICBpZiAodmFsdWUgPiBvdXRwdXQudmFsdWVFeGNlZWRlZE1heGltdW0pIHtcbiAgICAgICAgb3V0cHV0LnZhbHVlRXhjZWVkZWRNYXhpbXVtID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gcGFyYW1ldGVyVmFsdWVNYXhpbXVtO1xuICAgIH1cblxuICAgIHdlaWdodCA9IG91dHB1dC53ZWlnaHQgLyBNYXhpbXVtV2VpZ2h0O1xuXG4gICAgaWYgKHdlaWdodCA+PSAxLjApIHtcbiAgICAgIHBhcmFtZXRlclZhbHVlWzBdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gcGFyYW1ldGVyVmFsdWVbMF0gKiAoMS4wIC0gd2VpZ2h0KSArIHZhbHVlICogd2VpZ2h0O1xuICAgICAgcGFyYW1ldGVyVmFsdWVbMF0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1pbmltdW06IG51bWJlcixcbiAgICBwYXJhbWV0ZXJNYXhpbXVtOiBudW1iZXIsXG4gICAgcGFyYW1ldGVyRGVmYXVsdDogbnVtYmVyLFxuICAgIG5vcm1hbGl6ZWRNaW5pbXVtOiBudW1iZXIsXG4gICAgbm9ybWFsaXplZE1heGltdW06IG51bWJlcixcbiAgICBub3JtYWxpemVkRGVmYXVsdDogbnVtYmVyLFxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW5cbiAgKSB7XG4gICAgbGV0IHJlc3VsdCA9IDAuMDtcblxuICAgIGNvbnN0IG1heFZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1heChwYXJhbWV0ZXJNYXhpbXVtLCBwYXJhbWV0ZXJNaW5pbXVtKTtcblxuICAgIGlmIChtYXhWYWx1ZSA8IHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IG1heFZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihwYXJhbWV0ZXJNYXhpbXVtLCBwYXJhbWV0ZXJNaW5pbXVtKTtcblxuICAgIGlmIChtaW5WYWx1ZSA+IHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IG1pblZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1pbk5vcm1WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4oXG4gICAgICBub3JtYWxpemVkTWluaW11bSxcbiAgICAgIG5vcm1hbGl6ZWRNYXhpbXVtXG4gICAgKTtcbiAgICBjb25zdCBtYXhOb3JtVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KFxuICAgICAgbm9ybWFsaXplZE1pbmltdW0sXG4gICAgICBub3JtYWxpemVkTWF4aW11bVxuICAgICk7XG4gICAgY29uc3QgbWlkZGxlTm9ybVZhbHVlOiBudW1iZXIgPSBub3JtYWxpemVkRGVmYXVsdDtcblxuICAgIGNvbnN0IG1pZGRsZVZhbHVlOiBudW1iZXIgPSBnZXREZWZhdWx0VmFsdWUobWluVmFsdWUsIG1heFZhbHVlKTtcbiAgICBjb25zdCBwYXJhbVZhbHVlOiBudW1iZXIgPSB2YWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gICAgc3dpdGNoIChzaWduKHBhcmFtVmFsdWUpKSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgY29uc3Qgbkxlbmd0aDogbnVtYmVyID0gbWF4Tm9ybVZhbHVlIC0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtYXhWYWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gICAgICAgIGlmIChwTGVuZ3RoICE9IDAuMCkge1xuICAgICAgICAgIHJlc3VsdCA9IHBhcmFtVmFsdWUgKiAobkxlbmd0aCAvIHBMZW5ndGgpO1xuICAgICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgLTE6IHtcbiAgICAgICAgY29uc3Qgbkxlbmd0aDogbnVtYmVyID0gbWluTm9ybVZhbHVlIC0gbWlkZGxlTm9ybVZhbHVlO1xuICAgICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtaW5WYWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gICAgICAgIGlmIChwTGVuZ3RoICE9IDAuMCkge1xuICAgICAgICAgIHJlc3VsdCA9IHBhcmFtVmFsdWUgKiAobkxlbmd0aCAvIHBMZW5ndGgpO1xuICAgICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMDoge1xuICAgICAgICByZXN1bHQgPSBtaWRkbGVOb3JtVmFsdWU7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpc0ludmVydGVkID8gcmVzdWx0IDogcmVzdWx0ICogLTEuMDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XG5pbXBvcnQgQ3ViaXNtVmVjdG9yMiA9IGN1YmlzbXZlY3RvcjIuQ3ViaXNtVmVjdG9yMjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog54mp55CG5ryU566X44Gu6YGp55So5YWI44Gu56iu6aGeXG4gICAqL1xuICBleHBvcnQgZW51bSBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSB7XG4gICAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBpumBqeeUqFxuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruWFpeWKm+OBrueorumhnlxuICAgKi9cbiAgZXhwb3J0IGVudW0gQ3ViaXNtUGh5c2ljc1NvdXJjZSB7XG4gICAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9YLCAvLyBY6Lu444Gu5L2N572u44GL44KJXG4gICAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZLCAvLyBZ6Lu444Gu5L2N572u44GL44KJXG4gICAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZSAvLyDop5LluqbjgYvjgolcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg54mp55CG5ryU566X44Gn5L2/55So44GZ44KL5aSW6YOo44Gu5YqbXG4gICAqXG4gICAqIOeJqeeQhua8lOeul+OBp+S9v+eUqOOBmeOCi+WklumDqOOBruWKm+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgfVxuICAgIGdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOmHjeWKm1xuICAgIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqFxuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruODkeODqeODoeODvOOCv+aDheWgsVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIge1xuICAgIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/XG4gICAgdGFyZ2V0VHlwZTogQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGU7IC8vIOmBqeeUqOWFiOOBrueorumhnlxuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruato+imj+WMluaDheWgsVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uIHtcbiAgICBtaW5pbXVtOiBudW1iZXI7IC8vIOacgOWkp+WApFxuICAgIG1heGltdW06IG51bWJlcjsgLy8g5pyA5bCP5YCkXG4gICAgZGVmYWx1dDogbnVtYmVyOyAvLyDjg4fjg5Xjgqnjg6vjg4jlgKRcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7mvJTnrpflp5Tkvb/nlKjjgZnjgovniannkIbngrnjga7mg4XloLFcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzUGFydGljbGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICAgIHRoaXMubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICB0aGlzLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICB0aGlzLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgfVxuXG4gICAgaW5pdGlhbFBvc2l0aW9uOiBDdWJpc21WZWN0b3IyOyAvLyDliJ3mnJ/kvY3nva5cbiAgICBtb2JpbGl0eTogbnVtYmVyOyAvLyDli5XjgY3jgoTjgZnjgZVcbiAgICBkZWxheTogbnVtYmVyOyAvLyDpgYXjgoxcbiAgICBhY2NlbGVyYXRpb246IG51bWJlcjsgLy8g5Yqg6YCf5bqmXG4gICAgcmFkaXVzOiBudW1iZXI7IC8vIOi3nembolxuICAgIHBvc2l0aW9uOiBDdWJpc21WZWN0b3IyOyAvLyDnj77lnKjjga7kvY3nva5cbiAgICBsYXN0UG9zaXRpb246IEN1YmlzbVZlY3RvcjI7IC8vIOacgOW+jOOBruS9jee9rlxuICAgIGxhc3RHcmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDmnIDlvozjga7ph43liptcbiAgICBmb3JjZTogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44GL44GL44Gj44Gm44GE44KL5YqbXG4gICAgdmVsb2NpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBrumAn+W6plxuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBrueuoeeQhlxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NTdWJSaWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5ub3JtYWxpemF0aW9uUG9zaXRpb24gPSBuZXcgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24oKTtcbiAgICAgIHRoaXMubm9ybWFsaXphdGlvbkFuZ2xlID0gbmV3IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uKCk7XG4gICAgfVxuICAgIGlucHV0Q291bnQ6IG51bWJlcjsgLy8g5YWl5Yqb44Gu5YCL5pWwXG4gICAgb3V0cHV0Q291bnQ6IG51bWJlcjsgLy8g5Ye65Yqb44Gu5YCL5pWwXG4gICAgcGFydGljbGVDb3VudDogbnVtYmVyOyAvLyDniannkIbngrnjga7lgIvmlbBcbiAgICBiYXNlSW5wdXRJbmRleDogbnVtYmVyOyAvLyDlhaXlipvjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICBiYXNlT3V0cHV0SW5kZXg6IG51bWJlcjsgLy8g5Ye65Yqb44Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgYmFzZVBhcnRpY2xlSW5kZXg6IG51bWJlcjsgLy8g54mp55CG54K544Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXG4gICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgLy8g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqmXG4gIH1cblxuICAvKipcbiAgICog5q2j6KaP5YyW44GV44KM44Gf44OR44Op44Oh44O844K/44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gICAqIEBwYXJhbSB0YXJnZXRUcmFuc2xhdGlvbiAgICAgLy8g5ryU566X57WQ5p6c44Gu56e75YuV5YCkXG4gICAqIEBwYXJhbSB0YXJnZXRBbmdsZSAgICAgICAgICAgLy8g5ryU566X57WQ5p6c44Gu6KeS5bqmXG4gICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgICAgICAgICAgLy8g44OR44Op44Oh44O844K/44Gu5YCkXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJNaW5pbXVuVmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu5pyA5bCP5YCkXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCkXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAqIEBwYXJhbSBub3JtYWxpemF0aW9uUG9zaXRpb24gLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXG4gICAqIEBwYXJhbSBub3JtYWxpemF0aW9uQW5nbGUgICAgLy8g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqmXG4gICAqIEBwYXJhbSBpc0ludmVydGVkICAgICAgICAgICAgLy8g5YCk44GM5Y+N6Lui44GV44KM44Gm44GE44KL44GL77yfXG4gICAqIEBwYXJhbSB3ZWlnaHQgICAgICAgICAgICAgICAgLy8g6YeN44G/XG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIG5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXIge1xuICAgIChcbiAgICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgICAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxuICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgIHBhcmFtZXRlck1pbmltdW5WYWx1ZTogbnVtYmVyLFxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXG4gICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICAgICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICAgIHdlaWdodDogbnVtYmVyXG4gICAgKTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7lgKTjga7lj5blvpfplqLmlbDjga7lrqPoqIBcbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uIOenu+WLleWApFxuICAgKiBAcGFyYW0gcGFydGljbGVzIOeJqeeQhueCueOBruODquOCueODiFxuICAgKiBAcGFyYW0gaXNJbnZlcnRlZCDlgKTjgYzlj43mmKDjgZXjgozjgabjgYTjgovjgYtcbiAgICogQHBhcmFtIHBhcmVudEdyYXZpdHkg6YeN5YqbXG4gICAqIEByZXR1cm4g5YCkXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIHBoeXNpY3NWYWx1ZUdldHRlciB7XG4gICAgKFxuICAgICAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gICAgICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICAgICAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICAgICAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgICAgIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbiAgICApOiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X44Gu44K544Kx44O844Or44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gICAqIEBwYXJhbSB0cmFuc2xhdGlvblNjYWxlIOenu+WLleWApOOBruOCueOCseODvOODq1xuICAgKiBAcGFyYW0gYW5nbGVTY2FsZSAgICDop5Lluqbjga7jgrnjgrHjg7zjg6tcbiAgICogQHJldHVybiDjgrnjgrHjg7zjg6vlgKRcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgcGh5c2ljc1NjYWxlR2V0dGVyIHtcbiAgICAodHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMiwgYW5nbGVTY2FsZTogbnVtYmVyKTogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+OBruWFpeWKm+aDheWgsVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NJbnB1dCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IG5ldyBDdWJpc21QaHlzaWNzUGFyYW1ldGVyKCk7XG4gICAgfVxuICAgIHNvdXJjZTogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgLy8g5YWl5Yqb5YWD44Gu44OR44Op44Oh44O844K/XG4gICAgc291cmNlUGFyYW1ldGVySW5kZXg6IG51bWJlcjsgLy8g5YWl5Yqb5YWD44Gu44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgd2VpZ2h0OiBudW1iZXI7IC8vIOmHjeOBv1xuICAgIHR5cGU6IG51bWJlcjsgLy8g5YWl5Yqb44Gu56iu6aGeXG4gICAgcmVmbGVjdDogYm9vbGVhbjsgLy8g5YCk44GM5Y+N6Lui44GV44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gICAgZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlOiBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyOyAvLyDmraPopo/ljJbjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr/lgKTjga7lj5blvpfplqLmlbBcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg54mp55CG5ryU566X44Gu5Ye65Yqb5oOF5aCxXG4gICAqXG4gICAqIOeJqeeQhua8lOeul+OBruWHuuWKm+aDheWgseOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NPdXRwdXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDdWJpc21QaHlzaWNzUGFyYW1ldGVyKCk7XG4gICAgICB0aGlzLnRyYW5zbGF0aW9uU2NhbGUgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB9XG5cbiAgICBkZXN0aW5hdGlvbjogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgLy8g5Ye65Yqb5YWI44Gu44OR44Op44Oh44O844K/XG4gICAgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICB2ZXJ0ZXhJbmRleDogbnVtYmVyOyAvLyDmjK/jgorlrZDjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyOyAvLyDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcbiAgICBhbmdsZVNjYWxlOiBudW1iZXI7IC8vIOinkuW6puOBruOCueOCseODvOODq1xuICAgIHdlaWdodDogbnVtYmVyOyAvLyDph43jgb9cbiAgICB0eXBlOiBDdWJpc21QaHlzaWNzU291cmNlOyAvLyDlh7rlipvjga7nqK7poZ5cbiAgICByZWZsZWN0OiBib29sZWFuOyAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICB2YWx1ZUJlbG93TWluaW11bTogbnVtYmVyOyAvLyDmnIDlsI/lgKTjgpLkuIvlm57jgaPjgZ/mmYLjga7lgKRcbiAgICB2YWx1ZUV4Y2VlZGVkTWF4aW11bTogbnVtYmVyOyAvLyDmnIDlpKflgKTjgpLjgZPjgYjjgZ/mmYLjga7lgKRcbiAgICBnZXRWYWx1ZTogcGh5c2ljc1ZhbHVlR2V0dGVyOyAvLyDniannkIbmvJTnrpfjga7lgKTjga7lj5blvpfplqLmlbBcbiAgICBnZXRTY2FsZTogcGh5c2ljc1NjYWxlR2V0dGVyOyAvLyDniannkIbmvJTnrpfjga7jgrnjgrHjg7zjg6vlgKTjga7lj5blvpfplqLmlbBcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg54mp55CG5ryU566X44Gu44OH44O844K/XG4gICAqXG4gICAqIOeJqeeQhua8lOeul+OBruODh+ODvOOCv+OAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NSaWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5zZXR0aW5ncyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc1N1YlJpZz4oKTtcbiAgICAgIHRoaXMuaW5wdXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzSW5wdXQ+KCk7XG4gICAgICB0aGlzLm91dHB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NPdXRwdXQ+KCk7XG4gICAgICB0aGlzLnBhcnRpY2xlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc1BhcnRpY2xlPigpO1xuICAgICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB9XG5cbiAgICBzdWJSaWdDb3VudDogbnVtYmVyOyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7lgIvmlbBcbiAgICBzZXR0aW5nczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+OyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7nrqHnkIbjga7jg6rjgrnjg4hcbiAgICBpbnB1dHM6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzSW5wdXQ+OyAvLyDniannkIbmvJTnrpfjga7lhaXlipvjga7jg6rjgrnjg4hcbiAgICBvdXRwdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc091dHB1dD47IC8vIOeJqeeQhua8lOeul+OBruWHuuWKm+OBruODquOCueODiFxuICAgIHBhcnRpY2xlczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT47IC8vIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBruODquOCueODiFxuICAgIGdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOmHjeWKm1xuICAgIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqFxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtanNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xuaW1wb3J0IEN1YmlzbVZlY3RvcjIgPSBjdWJpc212ZWN0b3IyLkN1YmlzbVZlY3RvcjI7XG5pbXBvcnQgQ3ViaXNtSnNvbiA9IGN1YmlzbWpzb24uQ3ViaXNtSnNvbjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvLyBKU09OIGtleXNcbiAgY29uc3QgUG9zaXRpb24gPSAnUG9zaXRpb24nO1xuICBjb25zdCBYID0gJ1gnO1xuICBjb25zdCBZID0gJ1knO1xuICBjb25zdCBBbmdsZSA9ICdBbmdsZSc7XG4gIGNvbnN0IFR5cGUgPSAnVHlwZSc7XG4gIGNvbnN0IElkID0gJ0lkJztcblxuICAvLyBNZXRhXG4gIGNvbnN0IE1ldGEgPSAnTWV0YSc7XG4gIGNvbnN0IEVmZmVjdGl2ZUZvcmNlcyA9ICdFZmZlY3RpdmVGb3JjZXMnO1xuICBjb25zdCBUb3RhbElucHV0Q291bnQgPSAnVG90YWxJbnB1dENvdW50JztcbiAgY29uc3QgVG90YWxPdXRwdXRDb3VudCA9ICdUb3RhbE91dHB1dENvdW50JztcbiAgY29uc3QgUGh5c2ljc1NldHRpbmdDb3VudCA9ICdQaHlzaWNzU2V0dGluZ0NvdW50JztcbiAgY29uc3QgR3Jhdml0eSA9ICdHcmF2aXR5JztcbiAgY29uc3QgV2luZCA9ICdXaW5kJztcbiAgY29uc3QgVmVydGV4Q291bnQgPSAnVmVydGV4Q291bnQnO1xuXG4gIC8vIFBoeXNpY3NTZXR0aW5nc1xuICBjb25zdCBQaHlzaWNzU2V0dGluZ3MgPSAnUGh5c2ljc1NldHRpbmdzJztcbiAgY29uc3QgTm9ybWFsaXphdGlvbiA9ICdOb3JtYWxpemF0aW9uJztcbiAgY29uc3QgTWluaW11bSA9ICdNaW5pbXVtJztcbiAgY29uc3QgTWF4aW11bSA9ICdNYXhpbXVtJztcbiAgY29uc3QgRGVmYXVsdCA9ICdEZWZhdWx0JztcbiAgY29uc3QgUmVmbGVjdCA9ICdSZWZsZWN0JztcbiAgY29uc3QgV2VpZ2h0ID0gJ1dlaWdodCc7XG5cbiAgLy8gSW5wdXRcbiAgY29uc3QgSW5wdXQgPSAnSW5wdXQnO1xuICBjb25zdCBTb3VyY2UgPSAnU291cmNlJztcblxuICAvLyBPdXRwdXRcbiAgY29uc3QgT3V0cHV0ID0gJ091dHB1dCc7XG4gIGNvbnN0IFNjYWxlID0gJ1NjYWxlJztcbiAgY29uc3QgVmVydGV4SW5kZXggPSAnVmVydGV4SW5kZXgnO1xuICBjb25zdCBEZXN0aW5hdGlvbiA9ICdEZXN0aW5hdGlvbic7XG5cbiAgLy8gUGFydGljbGVcbiAgY29uc3QgVmVydGljZXMgPSAnVmVydGljZXMnO1xuICBjb25zdCBNb2JpbGl0eSA9ICdNb2JpbGl0eSc7XG4gIGNvbnN0IERlbGF5ID0gJ0RlbGF5JztcbiAgY29uc3QgUmFkaXVzID0gJ1JhZGl1cyc7XG4gIGNvbnN0IEFjY2VsZXJhdGlvbiA9ICdBY2NlbGVyYXRpb24nO1xuXG4gIC8qKlxuICAgKiBwaHlzaWNzMy5qc29u44Gu44Kz44Oz44OG44OK44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc0pzb24ge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBidWZmZXIgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YeN5Yqb44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDph43liptcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0R3Jhdml0eSgpOiBDdWJpc21WZWN0b3IyIHtcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgICAgcmV0LnggPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhHcmF2aXR5KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRWZmZWN0aXZlRm9yY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhHcmF2aXR5KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhZKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDpoqjjga7lj5blvpdcbiAgICAgKiBAcmV0dXJuIOmiqFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRXaW5kKCk6IEN1YmlzbVZlY3RvcjIge1xuICAgICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdpbmQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFgpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgICByZXQueSA9IHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdpbmQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhuW6l+OBrueuoeeQhuOBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldFN1YlJpZ0NvdW50KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5nQ291bnQpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFpeWKm+OBrue3j+WQiOioiOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g5YWl5Yqb44Gu57eP5ZCI6KiIXG4gICAgICovXG4gICAgcHVibGljIGdldFRvdGFsSW5wdXRDb3VudCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbElucHV0Q291bnQpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+OBrue3j+WQiOioiOOBruWPluW+l1xuICAgICAqIEByZXR1cm4g5Ye65Yqb44Gu57eP5ZCI6KiIXG4gICAgICovXG4gICAgcHVibGljIGdldFRvdGFsT3V0cHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxPdXRwdXRDb3VudClcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmVydGV4Q291bnQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGV4Q291bnQpXG4gICAgICAgIC50b0ludCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruacgOWwj+WApOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5bCP5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1pbmltdW1WYWx1ZShcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWluaW11bSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruacgOWkp+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uUG9zaXRpb25NYXhpbXVtVmFsdWUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1heGltdW0pXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCk44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7jg4fjg5Xjgqnjg6vjg4jlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWZhdWx0KVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruacgOWwj+WApOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5bCP5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZShcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWluaW11bSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleFxuICAgICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5aSn5YCkXG4gICAgICovXG4gICAgcHVibGljIGdldE5vcm1hbGl6YXRpb25BbmdsZU1heGltdW1WYWx1ZShcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWF4aW11bSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruODh+ODleOCqeODq+ODiOWApFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTm9ybWFsaXphdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKERlZmF1bHQpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YWl5Yqb44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDlhaXlipvjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5wdXRDb3VudChwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAgIC5nZXRWZWN0b3IoKVxuICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFpeWKm+OBrumHjeOBv+OBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBpbnB1dEluZGV4IOWFpeWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5YWl5Yqb44Gu6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIGdldElucHV0V2VpZ2h0KFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgaW5wdXRJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdlaWdodClcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlhaXlipvjga7lj43ou6Ljga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWFpeWKm+OBruWPjei7olxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbnB1dFJlZmxlY3QoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICBpbnB1dEluZGV4OiBudW1iZXJcbiAgICApOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFJlZmxlY3QpXG4gICAgICAgIC50b0Jvb2xlYW4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlhaXlipvjga7nqK7poZ7jga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWFpeWKm+OBrueorumhnlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbnB1dFR5cGUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICBpbnB1dEluZGV4OiBudW1iZXJcbiAgICApOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVHlwZSlcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFpeWKm+WFg+OBrklE44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDlhaXlipvlhYPjga5JRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbnB1dFNvdXJjZUlkKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgaW5wdXRJbmRleDogbnVtYmVyXG4gICAgKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTb3VyY2UpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+OBruWAi+aVsOOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5Ye65Yqb44Gu5YCL5pWwXG4gICAgICovXG4gICAgcHVibGljIGdldE91dHB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXG4gICAgICAgIC5nZXRWZWN0b3IoKVxuICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPdXRwdXRWZXJ0ZXhJbmRleChcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KG91dHB1dEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0ZXhJbmRleClcbiAgICAgICAgLnRvSW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Ye65Yqb44Gu6KeS5bqm44Gu44K544Kx44O844Or44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5Ye65Yqb44Gu6KeS5bqm44Gu44K544Kx44O844OrXG4gICAgICovXG4gICAgcHVibGljIGdldE91dHB1dEFuZ2xlU2NhbGUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU2NhbGUpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Ye65Yqb44Gu6YeN44G/44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5Ye65Yqb44Gu6YeN44G/XG4gICAgICovXG4gICAgcHVibGljIGdldE91dHB1dFdlaWdodChcbiAgICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgICApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KG91dHB1dEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXZWlnaHQpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Ye65Yqb5YWI44GuSUTjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDlh7rlipvlhYjjga5JRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPdXRwdXREZXN0aW5hdGlvbklkKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICAgICk6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhPdXRwdXQpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZXN0aW5hdGlvbilcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Ye65Yqb44Gu56iu6aGe44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g5Ye65Yqb44Gu56iu6aGeXG4gICAgICovXG4gICAgcHVibGljIGdldE91dHB1dFR5cGUoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICAgKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVHlwZSlcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWHuuWKm+OBruWPjei7ouOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOWHuuWKm+OBruWPjei7olxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPdXRwdXRSZWZsZWN0KFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KG91dHB1dEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSZWZsZWN0KVxuICAgICAgICAudG9Cb29sZWFuKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X55S36Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFydGljbGVDb3VudChwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAgIC5nZXRWZWN0b3IoKVxuICAgICAgICAuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeJqeeQhueCueOBruWLleOBjeOChOOBmeOBleOBruWPluW+l1xuICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWLleOBjeOChOOBmeOBlVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJ0aWNsZU1vYmlsaXR5KFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgdmVydGV4SW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTW9iaWxpdHkpXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG54K544Gu6YGF44KM44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g54mp55CG54K544Gu6YGF44KMXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcnRpY2xlRGVsYXkoXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICB2ZXJ0ZXhJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWxheSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDniannkIbngrnjga7liqDpgJ/luqbjga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHJldHVybiDniannkIbngrnjga7liqDpgJ/luqZcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFydGljbGVBY2NlbGVyYXRpb24oXG4gICAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgICB2ZXJ0ZXhJbmRleDogbnVtYmVyXG4gICAgKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBY2NlbGVyYXRpb24pXG4gICAgICAgIC50b0Zsb2F0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54mp55CG54K544Gu6Led6Zui44Gu5Y+W5b6XXG4gICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgICAqIEByZXR1cm4g54mp55CG54K544Gu6Led6ZuiXG4gICAgICovXG4gICAgcHVibGljIGdldFBhcnRpY2xlUmFkaXVzKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgdmVydGV4SW5kZXg6IG51bWJlclxuICAgICk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUmFkaXVzKVxuICAgICAgICAudG9JbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDniannkIbngrnjga7kvY3nva7jga7lj5blvpdcbiAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gdmVydGV4SW5kZSDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruS9jee9rlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQYXJ0aWNsZVBvc2l0aW9uKFxuICAgICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgICAgdmVydGV4SW5kZXg6IG51bWJlclxuICAgICk6IEN1YmlzbVZlY3RvcjIge1xuICAgICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxuICAgICAgICAudG9GbG9hdCgpO1xuICAgICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWSlcbiAgICAgICAgLnRvRmxvYXQoKTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgX2pzb246IEN1YmlzbUpzb247IC8vIHBoeXNpY3MzLmpzb27jg4fjg7zjgr9cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdHJpeDQ0IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBDdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xuXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vmj4/nlLvjgpLlh6bnkIbjgZnjgovjg6zjg7Pjg4Djg6lcbiAgICpcbiAgICog44K144OW44Kv44Op44K544Gr55Kw5aKD5L6d5a2Y44Gu5o+P55S75ZG95Luk44KS6KiY6L+w44GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3ViaXNtUmVuZGVyZXIge1xuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBl+OBpuWPluW+l+OBmeOCi1xuICAgICAqXG4gICAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21SZW5kZXJlciB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLop6PmlL7jgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShyZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXIpOiB2b2lkIHtcbiAgICAgIHJlbmRlcmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcbiAgICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBkcmF3TW9kZWwoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5nZXRNb2RlbCgpID09IG51bGwpIHJldHVybjtcblxuICAgICAgdGhpcy5kb0RyYXdNb2RlbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKiDphY3liJfjga/opIfoo73jgZXjgozjgovjga7jgafjgIHlhYPjga7phY3liJfjga/lpJbjgafnoLTmo4TjgZfjgaboia/jgYRcbiAgICAgKiBAcGFyYW0gbWF0cml4NDQgTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNdnBNYXRyaXgobWF0cml4NDQ6IEN1YmlzbU1hdHJpeDQ0KTogdm9pZCB7XG4gICAgICB0aGlzLl9tdnBNYXRyaXg0eDQuc2V0TWF0cml4KG1hdHJpeDQ0LmdldEFycmF5KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TXZwTWF0cml4KCk6IEN1YmlzbU1hdHJpeDQ0IHtcbiAgICAgIHJldHVybiB0aGlzLl9tdnBNYXRyaXg0eDQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu6Imy44KS44K744OD44OI44GZ44KLXG4gICAgICog5ZCE6ImyMC4wfjEuMOOBrumWk+OBp+aMh+WumuOBmeOCi++8iDEuMOOBjOaomea6luOBrueKtuaFi++8iVxuICAgICAqIEBwYXJhbSByZWQg6LWk44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAgICogQHBhcmFtIGdyZWVuIOe3keODgeODo+ODs+ODjeODq+OBruWApFxuICAgICAqIEBwYXJhbSBibHVlIOmdkuODgeODo+ODs+ODjeODq+OBruWApFxuICAgICAqIEBwYXJhbSBhbHBoYSDOseODgeODo+ODs+ODjeODq+OBruWApFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNb2RlbENvbG9yKFxuICAgICAgcmVkOiBudW1iZXIsXG4gICAgICBncmVlbjogbnVtYmVyLFxuICAgICAgYmx1ZTogbnVtYmVyLFxuICAgICAgYWxwaGE6IG51bWJlclxuICAgICk6IHZvaWQge1xuICAgICAgaWYgKHJlZCA8IDAuMCkge1xuICAgICAgICByZWQgPSAwLjA7XG4gICAgICB9IGVsc2UgaWYgKHJlZCA+IDEuMCkge1xuICAgICAgICByZWQgPSAxLjA7XG4gICAgICB9XG5cbiAgICAgIGlmIChncmVlbiA8IDAuMCkge1xuICAgICAgICBncmVlbiA9IDAuMDtcbiAgICAgIH0gZWxzZSBpZiAoZ3JlZW4gPiAxLjApIHtcbiAgICAgICAgZ3JlZW4gPSAxLjA7XG4gICAgICB9XG5cbiAgICAgIGlmIChibHVlIDwgMC4wKSB7XG4gICAgICAgIGJsdWUgPSAwLjA7XG4gICAgICB9IGVsc2UgaWYgKGJsdWUgPiAxLjApIHtcbiAgICAgICAgYmx1ZSA9IDEuMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGFscGhhIDwgMC4wKSB7XG4gICAgICAgIGFscGhhID0gMC4wO1xuICAgICAgfSBlbHNlIGlmIChhbHBoYSA+IDEuMCkge1xuICAgICAgICBhbHBoYSA9IDEuMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW9kZWxDb2xvci5SID0gcmVkO1xuICAgICAgdGhpcy5fbW9kZWxDb2xvci5HID0gZ3JlZW47XG4gICAgICB0aGlzLl9tb2RlbENvbG9yLkIgPSBibHVlO1xuICAgICAgdGhpcy5fbW9kZWxDb2xvci5BID0gYWxwaGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXG4gICAgICog5ZCE6ImyMC4wfjEuMOOBrumWk+OBp+aMh+WumuOBmeOCiygxLjDjgYzmqJnmupbjga7nirbmhYspXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFJHQkHjga7jgqvjg6njg7zmg4XloLFcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW9kZWxDb2xvcigpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fbW9kZWxDb2xvcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS44K744OD44OI44GZ44KLXG4gICAgICog5pyJ5Yq544Gr44GZ44KL44Gq44KJdHJ1ZeOAgeeEoeWKueOBq+OBmeOCi+OBquOCiWZhbHNl44KS44K744OD44OI44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHNldElzUHJlbXVsdGlwbGllZEFscGhhKGVuYWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5faXNQcmVtdWx0aXBsaWVkQWxwaGEgPSBlbmFibGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5LmX566X5riI44G/zrHjga7mnInlirnjg7vnhKHlirnjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIHRydWUg5LmX566X5riI44G/44GuzrHmnInlirlcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOS5l+eul+a4iOOBv+OBrs6x54Sh5Yq5XG4gICAgICovXG4gICAgcHVibGljIGlzUHJlbXVsdGlwbGllZEFscGhhKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi+OAglxuICAgICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRJc0N1bGxpbmcoY3VsbGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgdGhpcy5faXNDdWxsaW5nID0gY3VsbGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqvjg6rjg7PjgrDvvIjniYfpnaLmj4/nlLvvvInjga7mnInlirnjg7vnhKHlirnjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kr44Oq44Oz44Kw5pyJ5Yq5XG4gICAgICogQHJldHVybiBmYWxzZSDjgqvjg6rjg7PjgrDnhKHlirlcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNDdWxsaW5nKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzQ3VsbGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/lgKTjga7lvbHpn7/luqbjga/jg6zjg7Pjg4Djg6njga7lrp/oo4Xjgavkvp3lrZjjgZnjgotcbiAgICAgKiBAcGFyYW0gbiDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0QW5pc290cm9weShuOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2FuaXNvcnRvcHkgPSBuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gICAgICovXG4gICAgcHVibGljIGdldEFuaXNvdHJvcHkoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9hbmlzb3J0b3B5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Os44Oz44OA44Oq44Oz44Kw44GZ44KL44Oi44OH44OrXG4gICAgICovXG4gICAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9pc0N1bGxpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG4gICAgICB0aGlzLl9hbmlzb3J0b3B5ID0gMC4wO1xuICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgICAgdGhpcy5fbW9kZWxDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcblxuICAgICAgLy8g5Y2Y5L2N6KGM5YiX44Gr5Yid5pyf5YyWXG4gICAgICB0aGlzLl9tdnBNYXRyaXg0eDQgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICAgIHRoaXMuX212cE1hdHJpeDR4NC5sb2FkSWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vmj4/nlLvjga7lrp/oo4VcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZG9EcmF3TW9kZWwoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8iOOCouODvOODiOODoeODg+OCt+ODpe+8ieOCkuaPj+eUu+OBmeOCi1xuICAgICAqIOODneODquOCtOODs+ODoeODg+OCt+ODpeOBqOODhuOCr+OCueODgeODo+eVquWPt+OCkuOCu+ODg+ODiOOBp+a4oeOBmeOAglxuICAgICAqIEBwYXJhbSB0ZXh0dXJlTm8g5o+P55S744GZ44KL44OG44Kv44K544OB44Oj55Wq5Y+3XG4gICAgICogQHBhcmFtIGluZGV4Q291bnQg5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHBhcmFtIHZlcnRleENvdW50IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCueaVsFxuICAgICAqIEBwYXJhbSBpbmRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpemggueCueOBruOCpOODs+ODh+ODg+OCr+OCuemFjeWIl1xuICAgICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcbiAgICAgKiBAcGFyYW0gdXZBcnJheSB1dumFjeWIl1xuICAgICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjga7jgr/jgqTjg5dcbiAgICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+S9v+eUqOaZguOBruODnuOCueOCr+OBruWPjei7ouS9v+eUqFxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBkcmF3TWVzaChcbiAgICAgIHRleHR1cmVObzogbnVtYmVyLFxuICAgICAgaW5kZXhDb3VudDogbnVtYmVyLFxuICAgICAgdmVydGV4Q291bnQ6IG51bWJlcixcbiAgICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICAgIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgICApOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlOiBGdW5jdGlvbjtcblxuICAgIHByb3RlY3RlZCBfbXZwTWF0cml4NHg0OiBDdWJpc21NYXRyaXg0NDsgLy8gTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xuICAgIHByb3RlY3RlZCBfbW9kZWxDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yOyAvLyDjg6Ljg4fjg6voh6rkvZPjga7jgqvjg6njg7zvvIhSR0JB77yJXG4gICAgcHJvdGVjdGVkIF9pc0N1bGxpbmc6IGJvb2xlYW47IC8vIOOCq+ODquODs+OCsOOBjOacieWKueOBquOCiXRydWVcbiAgICBwcm90ZWN0ZWQgX2lzUHJlbXVsdGlwbGllZEFscGhhOiBib29sZWFuOyAvLyDkuZfnrpfmuIjjgb/OseOBquOCiXRydWVcbiAgICBwcm90ZWN0ZWQgX2FuaXNvcnRvcHk6IGFueTsgLy8g44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gICAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOODrOODs+ODgOODquODs+OCsOWvvuixoeOBruODouODh+ODq1xuICB9XG5cbiAgZXhwb3J0IGVudW0gQ3ViaXNtQmxlbmRNb2RlIHtcbiAgICBDdWJpc21CbGVuZE1vZGVfTm9ybWFsID0gMCwgLy8g6YCa5bi4XG4gICAgQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlID0gMSwgLy8g5Yqg566XXG4gICAgQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlID0gMiAvLyDkuZfnrpdcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7oibLjgpJSR0JB44Gn5omx44GG44Gf44KB44Gu44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuUiA9IDEuMDtcbiAgICAgIHRoaXMuRyA9IDEuMDtcbiAgICAgIHRoaXMuQiA9IDEuMDtcbiAgICAgIHRoaXMuQSA9IDEuMDtcbiAgICB9XG5cbiAgICBSOiBudW1iZXI7IC8vIOi1pOODgeODo+ODs+ODjeODq1xuICAgIEc6IG51bWJlcjsgLy8g57eR44OB44Oj44Oz44ON44OrXG4gICAgQjogbnVtYmVyOyAvLyDpnZLjg4Hjg6Pjg7Pjg43jg6tcbiAgICBBOiBudW1iZXI7IC8vIM6x44OB44Oj44Oz44ON44OrXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXJlY3QgfSBmcm9tICcuLi90eXBlL2NzbXJlY3RmJztcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlciB9IGZyb20gJy4vY3ViaXNtcmVuZGVyZXInO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YnNpbW1hdHJpeDQ0IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtbWFwIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IENvbnN0YW50ID0gY3ViaXNtZnJhbWV3b3JrLkNvbnN0YW50O1xuaW1wb3J0IEN1YmlzbU1hdHJpeDQ0ID0gY3Vic2ltbWF0cml4NDQuQ3ViaXNtTWF0cml4NDQ7XG5pbXBvcnQgY3NtUmVjdCA9IGNzbXJlY3QuY3NtUmVjdDtcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcbmltcG9ydCBDdWJpc21SZW5kZXJlciA9IGN1YmlzbXJlbmRlcmVyLkN1YmlzbVJlbmRlcmVyO1xuaW1wb3J0IEN1YmlzbUJsZW5kTW9kZSA9IGN1YmlzbXJlbmRlcmVyLkN1YmlzbUJsZW5kTW9kZTtcbmltcG9ydCBDdWJpc21UZXh0dXJlQ29sb3IgPSBjdWJpc21yZW5kZXJlci5DdWJpc21UZXh0dXJlQ29sb3I7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgY29uc3QgQ29sb3JDaGFubmVsQ291bnQgPSA0OyAvLyDlrp/pqJPmmYLjgasx44OB44Oj44Oz44ON44Or44Gu5aC05ZCI44GvMeOAgVJHQuOBoOOBkeOBruWgtOWQiOOBrzPjgIHjgqLjg6vjg5XjgqHjgoLlkKvjgoHjgovloLTlkIjjga80XG5cbiAgY29uc3Qgc2hhZGVyQ291bnQgPSAxMDsgLy8g44K344Kn44O844OA44O844Gu5pWwID0g44Oe44K544Kv55Sf5oiQ55SoICsgKOmAmuW4uOeUqCArIOWKoOeulyArIOS5l+eulykgKiAo44Oe44K544Kv54Sh44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIICsg44Oe44K544Kv5pyJ44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIICsg44Oe44K544Kv5pyJ5Y+N6Lui44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIKVxuICBsZXQgc19pbnN0YW5jZTogQ3ViaXNtU2hhZGVyX1dlYkdMO1xuICBsZXQgc192aWV3cG9ydDogbnVtYmVyW107XG4gIGxldCBzX2ZibzogV2ViR0xGcmFtZWJ1ZmZlcjtcblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5Yem55CG44KS5a6f6KGM44GZ44KL44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMIHtcbiAgICAvKipcbiAgICAgKiDjgqvjg6njg7zjg4Hjg6Pjg7Pjg43jg6vvvIhSR0JB77yJ44Gu44OV44Op44Kw44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIGNoYW5uZWxObyDjgqvjg6njg7zjg4Hjg6Pjg7Pjg43jg6vvvIhSR0JB77yJ44Gu55Wq5Y+377yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAgICovXG4gICAgcHVibGljIGdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm86IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hhbm5lbENvbG9ycy5hdChjaGFubmVsTm8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODhuODs+ODneODqeODquOBruODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCueOCkuWPluW+l+OBmeOCi1xuICAgICAqIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYXNrUmVuZGVyVGV4dHVyZSgpOiBXZWJHTEZyYW1lYnVmZmVyIHtcbiAgICAgIGxldCByZXQ6IFdlYkdMRnJhbWVidWZmZXIgPSAwO1xuXG4gICAgICAvLyDjg4bjg7Pjg53jg6njg6rjga5SZW5kZXJUZXh0dXJl44KS5Y+W5b6X44GZ44KLXG4gICAgICBpZiAodGhpcy5fbWFza1RleHR1cmUgJiYgdGhpcy5fbWFza1RleHR1cmUudGV4dHVyZSAhPSAwKSB7XG4gICAgICAgIC8vIOWJjeWbnuS9v+OBo+OBn+OCguOBruOCkui/lOOBmVxuICAgICAgICB0aGlzLl9tYXNrVGV4dHVyZS5mcmFtZU5vID0gdGhpcy5fY3VycmVudEZyYW1lTm87XG4gICAgICAgIHJldCA9IHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXQgPT0gMCkge1xuICAgICAgICAvLyBGcmFtZUJ1ZmZlck9iamVjdOOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+eUn+aIkOOBmeOCi1xuXG4gICAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODkOODg+ODleOCoeOCteOCpOOCuuOCkuWPluW+l1xuICAgICAgICBjb25zdCBzaXplOiBudW1iZXIgPSB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xuXG4gICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gdGhpcy5nbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLl9jb2xvckJ1ZmZlcik7XG4gICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgICBzaXplLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgdGhpcy5nbC5SR0JBLFxuICAgICAgICAgIHRoaXMuZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFX1dSQVBfUyxcbiAgICAgICAgICB0aGlzLmdsLkNMQU1QX1RPX0VER0VcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULFxuICAgICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxuICAgICAgICAgIHRoaXMuZ2wuTElORUFSXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFX01BR19GSUxURVIsXG4gICAgICAgICAgdGhpcy5nbC5MSU5FQVJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICAgIHJldCA9IHRoaXMuZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgcmV0KTtcbiAgICAgICAgdGhpcy5nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgICAgICB0aGlzLmdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgIHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDAsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyLFxuICAgICAgICAgIDBcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pO1xuXG4gICAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbmV3IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZShcbiAgICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVObyxcbiAgICAgICAgICByZXRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuioreWumuOBmeOCi1xuICAgICAqIEBwYXJhbSBnbCBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRHTChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgICB0aGlzLmdsID0gZ2w7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oe44K544Kv44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI576k5YWo5L2T44KS5Zuy44KA55+p5b2i77yI44Oi44OH44Or5bqn5qiZ57O777yJ44KS6KiI566X44GZ44KLXG4gICAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqIEBwYXJhbSBjbGlwcGluZ0NvbnRleHQg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXG4gICAgICovXG4gICAgcHVibGljIGNhbGNDbGlwcGVkRHJhd1RvdGFsQm91bmRzKFxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgICAgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHRcbiAgICApOiB2b2lkIHtcbiAgICAgIC8vIOiiq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr++8iOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8ieOBruWFqOS9k+OBruefqeW9olxuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5ZOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhYOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuXG4gICAgICAvLyDjgZPjga7jg57jgrnjgq/jgYzlrp/pmpvjgavlv4XopoHjgYvliKTlrprjgZnjgotcbiAgICAgIC8vIOOBk+OBruOCr+ODquODg+ODlOODs+OCsOOCkuWIqeeUqOOBmeOCi+OAjOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOAjeOBjOOBsuOBqOOBpOOBp+OCguS9v+eUqOWPr+iDveOBp+OBguOCjOOBsOODnuOCueOCr+OCkueUn+aIkOOBmeOCi+W/heimgeOBjOOBguOCi1xuICAgICAgY29uc3QgY2xpcHBlZERyYXdDb3VudDogbnVtYmVyID1cbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QubGVuZ3RoO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgY2xpcHBlZERyYXdhYmxlSW5kZXggPSAwO1xuICAgICAgICBjbGlwcGVkRHJhd2FibGVJbmRleCA8IGNsaXBwZWREcmF3Q291bnQ7XG4gICAgICAgIGNsaXBwZWREcmF3YWJsZUluZGV4KytcbiAgICAgICkge1xuICAgICAgICAvLyDjg57jgrnjgq/jgpLkvb/nlKjjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mj4/nlLvjgZXjgozjgovnn6nlvaLjgpLmsYLjgoHjgotcbiAgICAgICAgY29uc3QgZHJhd2FibGVJbmRleDogbnVtYmVyID1cbiAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdFtjbGlwcGVkRHJhd2FibGVJbmRleF07XG5cbiAgICAgICAgY29uc3QgZHJhd2FibGVWZXJ0ZXhDb3VudDogbnVtYmVyID0gbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChcbiAgICAgICAgICBkcmF3YWJsZUluZGV4XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRyYXdhYmxlVmVydGV4ZXM6IEZsb2F0MzJBcnJheSA9IG1vZGVsLmdldERyYXdhYmxlVmVydGljZXMoXG4gICAgICAgICAgZHJhd2FibGVJbmRleFxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBtaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICBsZXQgbWluWTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgbGV0IG1heFg6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgIGxldCBtYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuXG4gICAgICAgIGNvbnN0IGxvb3A6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4Q291bnQgKiBDb25zdGFudC52ZXJ0ZXhTdGVwO1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBwaTogbnVtYmVyID0gQ29uc3RhbnQudmVydGV4T2Zmc2V0O1xuICAgICAgICAgIHBpIDwgbG9vcDtcbiAgICAgICAgICBwaSArPSBDb25zdGFudC52ZXJ0ZXhTdGVwXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHg6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGldO1xuICAgICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGkgKyAxXTtcblxuICAgICAgICAgIGlmICh4IDwgbWluWCkge1xuICAgICAgICAgICAgbWluWCA9IHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh4ID4gbWF4WCkge1xuICAgICAgICAgICAgbWF4WCA9IHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgICAgbWluWSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh5ID4gbWF4WSkge1xuICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g5pyJ5Yq544Gq54K544GM5LiA44Gk44KC5Y+W44KM44Gq44GL44Gj44Gf44Gu44Gn44K544Kt44OD44OXXG4gICAgICAgIGlmIChtaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWFqOS9k+OBruefqeW9ouOBq+WPjeaYoFxuICAgICAgICBpZiAobWluWCA8IGNsaXBwZWREcmF3VG90YWxNaW5YKSB7XG4gICAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1pblggPSBtaW5YO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaW5ZIDwgY2xpcHBlZERyYXdUb3RhbE1pblkpIHtcbiAgICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWluWSA9IG1pblk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heFggPiBjbGlwcGVkRHJhd1RvdGFsTWF4WCkge1xuICAgICAgICAgIGNsaXBwZWREcmF3VG90YWxNYXhYID0gbWF4WDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4WSA+IGNsaXBwZWREcmF3VG90YWxNYXhZKSB7XG4gICAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1heFkgPSBtYXhZO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsaXBwZWREcmF3VG90YWxNaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC54ID0gMC4wO1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnkgPSAwLjA7XG4gICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Qud2lkdGggPSAwLjA7XG4gICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0ID0gMC4wO1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IHRydWU7XG4gICAgICAgICAgY29uc3QgdzogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFggLSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgICBjb25zdCBoOiBudW1iZXIgPSBjbGlwcGVkRHJhd1RvdGFsTWF4WSAtIGNsaXBwZWREcmF3VG90YWxNaW5ZO1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC55ID0gY2xpcHBlZERyYXdUb3RhbE1pblk7XG4gICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Qud2lkdGggPSB3O1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LmhlaWdodCA9IGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9tYXNrUmVuZGVyVGV4dHVyZSA9IG51bGw7XG4gICAgICB0aGlzLl9jb2xvckJ1ZmZlciA9IG51bGw7XG4gICAgICB0aGlzLl9jdXJyZW50RnJhbWVObyA9IDA7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplID0gMjU2O1xuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2sgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD4oKTtcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbmV3IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+KCk7XG4gICAgICB0aGlzLl9jaGFubmVsQ29sb3JzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21UZXh0dXJlQ29sb3I+KCk7XG4gICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsID0gbmV3IGNzbVJlY3QoKTtcbiAgICAgIHRoaXMuX3RtcE1hdHJpeCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yTWFzayA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yRHJhdyA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgICAgdGhpcy5fbWFza1RleHR1cmUgPSBudWxsO1xuXG4gICAgICBsZXQgdG1wOiBDdWJpc21UZXh0dXJlQ29sb3IgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgICB0bXAuUiA9IDEuMDtcbiAgICAgIHRtcC5HID0gMC4wO1xuICAgICAgdG1wLkIgPSAwLjA7XG4gICAgICB0bXAuQSA9IDAuMDtcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcblxuICAgICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgICAgdG1wLlIgPSAwLjA7XG4gICAgICB0bXAuRyA9IDEuMDtcbiAgICAgIHRtcC5CID0gMC4wO1xuICAgICAgdG1wLkEgPSAwLjA7XG4gICAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XG5cbiAgICAgIHRtcCA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICAgIHRtcC5SID0gMC4wO1xuICAgICAgdG1wLkcgPSAwLjA7XG4gICAgICB0bXAuQiA9IDEuMDtcbiAgICAgIHRtcC5BID0gMC4wO1xuICAgICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xuXG4gICAgICB0bXAgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgICB0bXAuUiA9IDAuMDtcbiAgICAgIHRtcC5HID0gMC4wO1xuICAgICAgdG1wLkIgPSAwLjA7XG4gICAgICB0bXAuQSA9IDEuMDtcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpKSB7XG4gICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaSkucmVsZWFzZSgpO1xuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCB2b2lkIDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrID0gbnVsbDtcblxuICAgICAgLy8gX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF344GvX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNr44Gr44GC44KL44Kk44Oz44K544K/44Oz44K544KS5oyH44GX44Gm44GE44KL44CC5LiK6KiY44Gu5Yem55CG44Gr44KI44KK6KaB57Sg44GU44Go44GuREVMRVRF44Gv5LiN6KaB44CCXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnNldChpLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX21hc2tUZXh0dXJlKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5fbWFza1RleHR1cmUudGV4dHVyZSk7XG4gICAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jaGFubmVsQ29sb3JzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMuc2V0KGksIG51bGwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jaGFubmVsQ29sb3JzID0gbnVsbDtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6Kej5pS+XG4gICAgICB0aGlzLmdsLmRlbGV0ZVRleHR1cmUodGhpcy5fY29sb3JCdWZmZXIpO1xuICAgICAgdGhpcy5fY29sb3JCdWZmZXIgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODnuODjeODvOOCuOODo+OBruWIneacn+WMluWHpueQhlxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBrueZu+mMsuOCkuihjOOBhlxuICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudCDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7jg6rjgrnjg4hcbiAgICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudHMg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5pWwXG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUoXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgICBkcmF3YWJsZUNvdW50OiBudW1iZXIsXG4gICAgICBkcmF3YWJsZU1hc2tzOiBJbnQzMkFycmF5W10sXG4gICAgICBkcmF3YWJsZU1hc2tDb3VudHM6IEludDMyQXJyYXlcbiAgICApOiB2b2lkIHtcbiAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuOBmeOBueOBpueZu+mMsuOBmeOCi1xuICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gv44CB6YCa5bi45pWw5YCL56iL5bqm44Gr6ZmQ5a6a44GX44Gm5L2/44GG44KC44Gu44Go44GZ44KLXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7IGkrKykge1xuICAgICAgICBpZiAoZHJhd2FibGVNYXNrQ291bnRzW2ldIDw9IDApIHtcbiAgICAgICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzkvb/nlKjjgZXjgozjgabjgYTjgarjgYTjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvIjlpJrjgY/jga7loLTlkIjkvb/nlKjjgZfjgarjgYTvvIlcbiAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5wdXNoQmFjayhudWxsKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOaXouOBq+OBguOCi0NsaXBDb250ZXh044Go5ZCM44GY44GL44OB44Kn44OD44Kv44GZ44KLXG4gICAgICAgIGxldCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuZmluZFNhbWVDbGlwKFxuICAgICAgICAgIGRyYXdhYmxlTWFza3NbaV0sXG4gICAgICAgICAgZHJhd2FibGVNYXNrQ291bnRzW2ldXG4gICAgICAgICk7XG4gICAgICAgIGlmIChjbGlwcGluZ0NvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICAgIC8vIOWQjOS4gOOBruODnuOCueOCr+OBjOWtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOBr+eUn+aIkOOBmeOCi1xuICAgICAgICAgIGNsaXBwaW5nQ29udGV4dCA9IG5ldyBDdWJpc21DbGlwcGluZ0NvbnRleHQoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgZHJhd2FibGVNYXNrc1tpXSxcbiAgICAgICAgICAgIGRyYXdhYmxlTWFza0NvdW50c1tpXVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2sucHVzaEJhY2soY2xpcHBpbmdDb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5hZGRDbGlwcGVkRHJhd2FibGUoaSk7XG5cbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcucHVzaEJhY2soY2xpcHBpbmdDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLkvZzmiJDjgZnjgovjgILjg6Ljg4fjg6vmj4/nlLvmmYLjgavlrp/ooYzjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXR1cENsaXBwaW5nQ29udGV4dChcbiAgICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICAgIHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTFxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5fY3VycmVudEZyYW1lTm8rKztcblxuICAgICAgLy8g5YWo44Gm44Gu44Kv44Oq44OD44OU44Oz44Kw44KS55So5oSP44GZ44KLXG4gICAgICAvLyDlkIzjgZjjgq/jg6rjg4Pjg5fvvIjopIfmlbDjga7loLTlkIjjga/jgb7jgajjgoHjgabkuIDjgaTjga7jgq/jg6rjg4Pjg5fvvInjgpLkvb/jgYbloLTlkIjjga8x5bqm44Gg44GR6Kit5a6a44GZ44KLXG4gICAgICBsZXQgdXNpbmdDbGlwQ291bnQgPSAwO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGNsaXBJbmRleCA9IDA7XG4gICAgICAgIGNsaXBJbmRleCA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmdldFNpemUoKTtcbiAgICAgICAgY2xpcEluZGV4KytcbiAgICAgICkge1xuICAgICAgICAvLyAx44Gk44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gr6Zai44GX44GmXG4gICAgICAgIGNvbnN0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICBjbGlwSW5kZXhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDjgZPjga7jgq/jg6rjg4Pjg5fjgpLliKnnlKjjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jnvqTlhajkvZPjgpLlm7LjgoDnn6nlvaLjgpLoqIjnrpdcbiAgICAgICAgdGhpcy5jYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyhtb2RlbCwgY2MpO1xuXG4gICAgICAgIGlmIChjYy5faXNVc2luZykge1xuICAgICAgICAgIHVzaW5nQ2xpcENvdW50Kys7IC8vIOS9v+eUqOS4reOBqOOBl+OBpuOCq+OCpuODs+ODiFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOODnuOCueOCr+S9nOaIkOWHpueQhlxuICAgICAgaWYgKHVzaW5nQ2xpcENvdW50ID4gMCkge1xuICAgICAgICAvLyDnlJ/miJDjgZfjgZ9GcmFtZUJ1ZmZlcuOBqOWQjOOBmOOCteOCpOOCuuOBp+ODk+ODpeODvOODneODvOODiOOCkuioreWumlxuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplLFxuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemVcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDjg57jgrnjgq/jgpJhY3RpdmXjgavjgZnjgotcbiAgICAgICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmUgPSB0aGlzLmdldE1hc2tSZW5kZXJUZXh0dXJlKCk7XG5cbiAgICAgICAgLy8g44Oi44OH44Or5o+P55S75pmC44GrRHJhd01lc2hOb3fjgavmuKHjgZXjgozjgovlpInmj5so44Oi44OH44OrdG/jg6/jg7zjg6vjg4nluqfmqJnlpInmj5spXG4gICAgICAgIGNvbnN0IG1vZGVsVG9Xb3JsZEY6IEN1YmlzbU1hdHJpeDQ0ID0gcmVuZGVyZXIuZ2V0TXZwTWF0cml4KCk7XG5cbiAgICAgICAgcmVuZGVyZXIucHJlRHJhdygpOyAvLyDjg5Djg4Pjg5XjgqHjgpLjgq/jg6rjgqLjgZnjgotcblxuICAgICAgICAvLyDlkITjg57jgrnjgq/jga7jg6zjgqTjgqLjgqbjg4jjgpLmsbrlrprjgZfjgabjgYTjgY9cbiAgICAgICAgdGhpcy5zZXR1cExheW91dEJvdW5kcyh1c2luZ0NsaXBDb3VudCk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLSDjg57jgrnjgq/mj4/nlLvlh6bnkIYgLS0tLS0tLS0tLVxuICAgICAgICAvLyDjg57jgrnjgq/nlKhSZW5kZXJUZXh0dXJl44KSYWN0aXZl44Gr44K744OD44OIXG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlKTtcblxuICAgICAgICAvLyDjg57jgrnjgq/jgpLjgq/jg6rjgqLjgZnjgotcbiAgICAgICAgLy8gKOS7ruS7leanmCkgMeOBjOeEoeWKue+8iOaPj+OBi+OCjOOBquOBhO+8iemgmOWfn+OAgTDjgYzmnInlirnvvIjmj4/jgYvjgozjgovvvInpoJjln5/jgILvvIjjgrfjgqfjg7zjg4Djg7xDZCpDc+OBpzDjgavov5HjgYTlgKTjgpLjgYvjgZHjgabjg57jgrnjgq/jgpLkvZzjgovjgIIx44KS44GL44GR44KL44Go5L2V44KC6LW344GT44KJ44Gq44GE77yJXG4gICAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgICAgICB0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cbiAgICAgICAgLy8g5a6f6Zqb44Gr44Oe44K544Kv44KS55Sf5oiQ44GZ44KLXG4gICAgICAgIC8vIOWFqOOBpuOBruODnuOCueOCr+OCkuOBqeOBruOCiOOBhuOBq+ODrOOCpOOCouOCpuODiOOBl+OBpuaPj+OBj+OBi+OCkuaxuuWumuOBl+OAgUNsaXBDb250ZXh0LCBDbGlwcGVkRHJhd0NvbnRleHTjgavoqJjmhrbjgZnjgotcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgY2xpcEluZGV4ID0gMDtcbiAgICAgICAgICBjbGlwSW5kZXggPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7XG4gICAgICAgICAgY2xpcEluZGV4KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gLS0tIOWun+mam+OBqzHjgaTjga7jg57jgrnjgq/jgpLmj4/jgY8gLS0tXG4gICAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgICAgY2xpcEluZGV4XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBhbGxDbGlwZWREcmF3UmVjdDogY3NtUmVjdCA9IGNsaXBDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3Q7IC8vIOOBk+OBruODnuOCueOCr+OCkuS9v+OBhuOAgeOBmeOBueOBpuOBruaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruirlueQhuW6p+aomeS4iuOBruWbsuOBv+efqeW9olxuICAgICAgICAgIGNvbnN0IGxheW91dEJvdW5kc09uVGV4MDE6IGNzbVJlY3QgPSBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzOyAvLyDjgZPjga7kuK3jgavjg57jgrnjgq/jgpLlj47jgoHjgotcblxuICAgICAgICAgIC8vIOODouODh+ODq+W6p+aomeS4iuOBruefqeW9ouOCkuOAgemBqeWunOODnuODvOOCuOODs+OCkuS7mOOBkeOBpuS9v+OBhlxuICAgICAgICAgIGNvbnN0IE1BUkdJTiA9IDAuMDU7XG4gICAgICAgICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5zZXRSZWN0KGFsbENsaXBlZERyYXdSZWN0KTtcbiAgICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmV4cGFuZChcbiAgICAgICAgICAgIGFsbENsaXBlZERyYXdSZWN0LndpZHRoICogTUFSR0lOLFxuICAgICAgICAgICAgYWxsQ2xpcGVkRHJhd1JlY3QuaGVpZ2h0ICogTUFSR0lOXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyMjIyMjIyMjIyMg5pys5p2l44Gv5Ymy44KK5b2T44Gm44KJ44KM44Gf6aCY5Z+f44Gu5YWo5L2T44KS5L2/44KP44Ga5b+F6KaB5pyA5L2O6ZmQ44Gu44K144Kk44K644GM44KI44GEXG5cbiAgICAgICAgICAvLyDjgrfjgqfjg7zjg4DnlKjjga7oqIjnrpflvI/jgpLmsYLjgoHjgovjgILlm57ou6LjgpLogIPmha7jgZfjgarjgYTloLTlkIjjga/ku6XkuIvjga7jgajjgYrjgopcbiAgICAgICAgICAvLyBtb3ZlUGVyaW9kJyA9IG1vdmVQZXJpb2QgKiBzY2FsZVggKyBvZmZYXHRcdCAgW1sgbW92ZVBlcmlvZCcgPSAobW92ZVBlcmlvZCAtIHRtcEJvdW5kc09uTW9kZWwubW92ZVBlcmlvZCkqc2NhbGUgKyBsYXlvdXRCb3VuZHNPblRleDAxLm1vdmVQZXJpb2QgXV1cbiAgICAgICAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9XG4gICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLndpZHRoIC8gdGhpcy5fdG1wQm91bmRzT25Nb2RlbC53aWR0aDtcbiAgICAgICAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9XG4gICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLmhlaWdodCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuaGVpZ2h0O1xuXG4gICAgICAgICAgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gr5L2/44GG6KGM5YiX44KS5rGC44KB44KLXG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8g44K344Kn44O844OA44Gr5rih44GZ6KGM5YiX44KS5rGC44KB44KLIDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PCDopoHmnIDpganljJbvvIjpgIbpoIbjgavoqIjnrpfjgZnjgozjgbDjgrfjg7Pjg5fjg6vjgavjgafjgY3jgovvvIlcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gbGF5b3V0MC4uMSDjgpIgLTEuLjHjgavlpInmj5tcbiAgICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKC0xLjAsIC0xLjApO1xuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZSgyLjAsIDIuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIHZpZXcgdG8gbGF5b3V0MC4uMVxuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS54LFxuICAgICAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEueVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7IC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVxuICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgudHJhbnNsYXRlUmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgLXRoaXMuX3RtcEJvdW5kc09uTW9kZWwueCxcbiAgICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVt0cmFuc2xhdGVdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0bXBNYXRyaXhGb3JNYXNr44GM6KiI566X57WQ5p6cXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrLnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXguZ2V0QXJyYXkoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8tLS0tLS0tLS0gZHJhd+aZguOBriBtYXNrIOWPgueFp+eUqOihjOWIl+OCkuioiOeul1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeihjOWIl+OCkuaxguOCgeOCiyA8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwg6KaB5pyA6YGp5YyW77yI6YCG6aCG44Gr6KiI566X44GZ44KM44Gw44K344Oz44OX44Or44Gr44Gn44GN44KL77yJXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgubG9hZElkZW50aXR5KCk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLngsXG4gICAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS55XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5zY2FsZVJlbGF0aXZlKHNjYWxlWCwgc2NhbGVZKTsgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdXG4gICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LFxuICAgICAgICAgICAgICAgIC10aGlzLl90bXBCb3VuZHNPbk1vZGVsLnlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdW3RyYW5zbGF0ZV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeEZvckRyYXcuc2V0TWF0cml4KHRoaXMuX3RtcE1hdHJpeC5nZXRBcnJheSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xpcENvbnRleHQuX21hdHJpeEZvck1hc2suc2V0TWF0cml4KFxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yTWFzay5nZXRBcnJheSgpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgoXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JEcmF3LmdldEFycmF5KClcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgY2xpcERyYXdDb3VudDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsaXBEcmF3Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2xpcERyYXdJbmRleDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2ldO1xuXG4gICAgICAgICAgICAvLyDpoILngrnmg4XloLHjgYzmm7TmlrDjgZXjgozjgabjgYrjgonjgZrjgIHkv6HpoLzmgKfjgYzjgarjgYTloLTlkIjjga/mj4/nlLvjgpLjg5HjgrnjgZnjgotcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIW1vZGVsLmdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UoXG4gICAgICAgICAgICAgICAgY2xpcERyYXdJbmRleFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlcmVyLnNldElzQ3VsbGluZyhcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVDdWxsaW5nKGNsaXBEcmF3SW5kZXgpICE9IGZhbHNlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyDku4rlm57lsILnlKjjga7lpInmj5vjgpLpgannlKjjgZfjgabmj4/jgY9cbiAgICAgICAgICAgIC8vIOODgeODo+ODs+ODjeODq+OCguWIh+OCiuabv+OBiOOCi+W/heimgeOBjOOBguOCiyhBLFIsRyxCKVxuICAgICAgICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhjbGlwQ29udGV4dCk7XG4gICAgICAgICAgICByZW5kZXJlci5kcmF3TWVzaChcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleEluZGljZXMoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGljZXMoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4VXZzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU9wYWNpdHkoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsLCAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjga/pgJrluLjmj4/nlLvjgpLlvLfliLZcbiAgICAgICAgICAgICAgZmFsc2UgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gv44Kv44Oq44OD44OU44Oz44Kw44Gu5Y+N6Lui5L2/55So44Gv5YWo44GP6Zai5L+C44GM44Gq44GEXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0tLSDlvozlh6bnkIYgLS0tXG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHNfZmJvKTsgLy8g5o+P55S75a++6LGh44KS5oi744GZXG4gICAgICAgIHJlbmRlcmVyLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XG5cbiAgICAgICAgdGhpcy5nbC52aWV3cG9ydChcbiAgICAgICAgICBzX3ZpZXdwb3J0WzBdLFxuICAgICAgICAgIHNfdmlld3BvcnRbMV0sXG4gICAgICAgICAgc192aWV3cG9ydFsyXSxcbiAgICAgICAgICBzX3ZpZXdwb3J0WzNdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pei44Gr44Oe44K544Kv44KS5L2c44Gj44Gm44GE44KL44GL44KS56K66KqNXG4gICAgICog5L2c44Gj44Gm44GE44KL5qeY44Gn44GC44KM44Gw6Kmy5b2T44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kk44Oz44K544K/44Oz44K544KS6L+U44GZXG4gICAgICog5L2c44Gj44Gm44GE44Gq44GR44KM44GwTlVMTOOCkui/lOOBmVxuICAgICAqIEBwYXJhbSBkcmF3YWJsZU1hc2tzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxuICAgICAqIEBwYXJhbSBkcmF3YWJsZU1hc2tDb3VudHMg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5pWwXG4gICAgICogQHJldHVybiDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzlrZjlnKjjgZnjgozjgbDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZfjgIHjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGZpbmRTYW1lQ2xpcChcbiAgICAgIGRyYXdhYmxlTWFza3M6IEludDMyQXJyYXksXG4gICAgICBkcmF3YWJsZU1hc2tDb3VudHM6IG51bWJlclxuICAgICk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gICAgICAvLyDkvZzmiJDmuIjjgb9DbGlwcGluZ0NvbnRleHTjgajkuIDoh7TjgZnjgovjgYvnorroqo1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSBjbGlwcGluZ0NvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcblxuICAgICAgICAvLyDlgIvmlbDjgYzpgZXjgYbloLTlkIjjga/liKXnialcbiAgICAgICAgaWYgKGNvdW50ICE9IGRyYXdhYmxlTWFza0NvdW50cykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNhbWVDb3VudCA9IDA7XG5cbiAgICAgICAgLy8g5ZCM44GYSUTjgpLmjIHjgaTjgYvnorroqo3jgILphY3liJfjga7mlbDjgYzlkIzjgZjjgarjga7jgafjgIHkuIDoh7TjgZfjgZ/lgIvmlbDjgYzlkIzjgZjjgarjgonlkIzjgZjnianjgpLmjIHjgaTjgajjgZnjgotcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgY2xpcElkOiBudW1iZXIgPSBjbGlwcGluZ0NvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2pdO1xuXG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBjb3VudDsgaysrKSB7XG4gICAgICAgICAgICBpZiAoZHJhd2FibGVNYXNrc1trXSA9PSBjbGlwSWQpIHtcbiAgICAgICAgICAgICAgc2FtZUNvdW50Kys7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzYW1lQ291bnQgPT0gY291bnQpIHtcbiAgICAgICAgICByZXR1cm4gY2xpcHBpbmdDb250ZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsOyAvLyDopovjgaTjgYvjgonjgarjgYvjgaPjgZ9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLphY3nva7jgZnjgovjg6zjgqTjgqLjgqbjg4hcbiAgICAgKiDkuIDjgaTjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6PjgpLmpbXlipvjgYTjgaPjgbHjgYTjgavkvb/jgaPjgabjg57jgrnjgq/jgpLjg6zjgqTjgqLjgqbjg4jjgZnjgotcbiAgICAgKiDjg57jgrnjgq/jgrDjg6vjg7zjg5fjga7mlbDjgYw05Lul5LiL44Gq44KJUkdCQeWQhOODgeODo+ODs+ODjeODq+OBq+S4gOOBpOOBmuOBpOODnuOCueOCr+OCkumFjee9ruOBl+OAgTXku6XkuIo25Lul5LiL44Gq44KJUkdCQeOCkjIsMiwxLDHjgajphY3nva7jgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2luZ0NsaXBDb3VudCDphY3nva7jgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjga7mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0dXBMYXlvdXRCb3VuZHModXNpbmdDbGlwQ291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgLy8g44Gy44Go44Gk44GuUmVuZGVyVGV4dHVyZeOCkualteWKm+OBhOOBo+OBseOBhOOBq+S9v+OBo+OBpuODnuOCueOCr+OCkuODrOOCpOOCouOCpuODiOOBmeOCi1xuICAgICAgLy8g44Oe44K544Kv44Kw44Or44O844OX44Gu5pWw44GMNOS7peS4i+OBquOCiVJHQkHlkITjg4Hjg6Pjg7Pjg43jg6vjgasx44Gk44Ga44Gk44Oe44K544Kv44KS6YWN572u44GX44CBNeS7peS4ijbku6XkuIvjgarjgolSR0JB44KSMiwyLDEsMeOBqOmFjee9ruOBmeOCi1xuXG4gICAgICAvLyBSR0JB44KS6aCG55Wq44Gr5L2/44Gj44Gm44GE44GPXG4gICAgICBsZXQgZGl2OiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAvIENvbG9yQ2hhbm5lbENvdW50OyAvLyAx44OB44Oj44Oz44ON44Or44Gr6YWN572u44GZ44KL5Z+65pys44Gu44Oe44K544KvXG4gICAgICBsZXQgbW9kOiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAlIENvbG9yQ2hhbm5lbENvdW50OyAvLyDkvZnjgorjgIHjgZPjga7nlarlj7fjga7jg4Hjg6Pjg7Pjg43jg6vjgb7jgafjgavkuIDjgaTjgZrjgaTphY3liIbjgZnjgotcblxuICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICBkaXYgPSB+fmRpdjtcbiAgICAgIG1vZCA9IH5+bW9kO1xuXG4gICAgICAvLyBSR0JB44Gd44KM44Ge44KM44Gu44OB44Oj44Oz44ON44Or44KS55So5oSP44GX44Gm44GE44GP77yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAgICBsZXQgY3VyQ2xpcEluZGV4ID0gMDsgLy8g6aCG55Wq44Gr6Kit5a6a44GX44Gm44GE44GPXG5cbiAgICAgIGZvciAobGV0IGNoYW5uZWxObyA9IDA7IGNoYW5uZWxObyA8IENvbG9yQ2hhbm5lbENvdW50OyBjaGFubmVsTm8rKykge1xuICAgICAgICAvLyDjgZPjga7jg4Hjg6Pjg7Pjg43jg6vjgavjg6zjgqTjgqLjgqbjg4jjgZnjgovmlbBcbiAgICAgICAgY29uc3QgbGF5b3V0Q291bnQ6IG51bWJlciA9IGRpdiArIChjaGFubmVsTm8gPCBtb2QgPyAxIDogMCk7XG5cbiAgICAgICAgLy8g5YiG5Ymy5pa55rOV44KS5rG65a6a44GZ44KLXG4gICAgICAgIGlmIChsYXlvdXRDb3VudCA9PSAwKSB7XG4gICAgICAgICAgLy8g5L2V44KC44GX44Gq44GEXG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPT0gMSkge1xuICAgICAgICAgIC8vIOWFqOOBpuOCkuOBneOBruOBvuOBvuS9v+OBhlxuICAgICAgICAgIGNvbnN0IGNsaXBDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICAgIGN1ckNsaXBJbmRleCsrXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xuICAgICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueCA9IDAuMDtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLnkgPSAwLjA7XG4gICAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy53aWR0aCA9IDEuMDtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA9PSAyKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXlvdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XG5cbiAgICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xuICAgICAgICAgICAgeHBvcyA9IH5+eHBvcztcblxuICAgICAgICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgICAgICBjdXJDbGlwSW5kZXgrK1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG5cbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IHhwb3MgKiAwLjU7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnkgPSAwLjA7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMC41O1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAxLjA7XG4gICAgICAgICAgICAvLyBVVuOCkjLjgaTjgavliIbop6PjgZfjgabkvb/jgYZcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPD0gNCkge1xuICAgICAgICAgIC8vIDTliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCB4cG9zOiBudW1iZXIgPSBpICUgMjtcbiAgICAgICAgICAgIGxldCB5cG9zOiBudW1iZXIgPSBpIC8gMjtcblxuICAgICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICAgICAgICB4cG9zID0gfn54cG9zO1xuICAgICAgICAgICAgeXBvcyA9IH5+eXBvcztcblxuICAgICAgICAgICAgY29uc3QgY2MgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xuXG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zICogMC41O1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAqIDAuNTtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMud2lkdGggPSAwLjU7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDAuNTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPD0gOSkge1xuICAgICAgICAgIC8vIDnliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCB4cG9zID0gaSAlIDM7XG4gICAgICAgICAgICBsZXQgeXBvcyA9IGkgLyAzO1xuXG4gICAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICAgICAgICAgIHhwb3MgPSB+fnhwb3M7XG4gICAgICAgICAgICB5cG9zID0gfn55cG9zO1xuXG4gICAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoXG4gICAgICAgICAgICAgIGN1ckNsaXBJbmRleCsrXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcblxuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0geHBvcyAvIDMuMDtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IHlwb3MgLyAzLjA7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wIC8gMy4wO1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAxLjAgLyAzLjA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdub3Qgc3VwcG9ydGVkIG1hc2sgY291bnQgOiB7MH0nLCBsYXlvdXRDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqvjg6njg7zjg5Djg4Pjg5XjgqHjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOOCq+ODqeODvOODkOODg+ODleOCoVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDb2xvckJ1ZmZlcigpOiBXZWJHTFRleHR1cmUge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yQnVmZmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g55S76Z2i5o+P55S744Gr5L2/55So44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Oq44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3KCk6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+IHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrrjgpLoqK3lrprjgZnjgotcbiAgICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSBzaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBfbWFza1JlbmRlclRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODnuOCueOCr+eUqOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICAgIHB1YmxpYyBfY29sb3JCdWZmZXI6IFdlYkdMVGV4dHVyZTsgLy8g44Oe44K544Kv55So44Kr44Op44O844OQ44OD44OV44Kh44O844Gu44Ki44OJ44Os44K5XG4gICAgcHVibGljIF9jdXJyZW50RnJhbWVObzogbnVtYmVyOyAvLyDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgavkuI7jgYjjgovjg5Xjg6zjg7zjg6Dnlarlj7dcblxuICAgIHB1YmxpYyBfY2hhbm5lbENvbG9yczogY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj47XG4gICAgcHVibGljIF9tYXNrVGV4dHVyZTogQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlOyAvLyDjg57jgrnjgq/nlKjjga7jg4bjgq/jgrnjg4Hjg6Pjg6rjgr3jg7zjgrnjga7jg6rjgrnjg4hcbiAgICBwdWJsaWMgX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrOiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PjsgLy8g44Oe44K544Kv55So44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu44Oq44K544OIXG4gICAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdzogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47IC8vIOaPj+eUu+eUqOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruODquOCueODiFxuICAgIHB1YmxpYyBfY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg5Djg4Pjg5XjgqHjgrXjgqTjgrrvvIjliJ3mnJ/lgKQ6MjU277yJXG5cbiAgICBwcml2YXRlIF90bXBNYXRyaXg6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcbiAgICBwcml2YXRlIF90bXBNYXRyaXhGb3JNYXNrOiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXG4gICAgcHJpdmF0ZSBfdG1wTWF0cml4Rm9yRHJhdzogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xuICAgIHByaXZhdGUgX3RtcEJvdW5kc09uTW9kZWw6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+mFjee9ruioiOeul+eUqOOBruefqeW9olxuXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgLy8gV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgr3jg7zjgrnjgpLlrprnvqnjgZnjgovmp4vpgKDkvZNcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gn5L2/55So44GZ44KLXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKiBAcGFyYW0gZnJhbWVObyDjg6zjg7Pjg4Djg6njg7zjga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgICAgKiBAcGFyYW0gdGV4dHVyZSDjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZnJhbWVObzogbnVtYmVyLCB0ZXh0dXJlOiBXZWJHTEZyYW1lYnVmZmVyKSB7XG4gICAgICB0aGlzLmZyYW1lTm8gPSBmcmFtZU5vO1xuICAgICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZnJhbWVObzogbnVtYmVyOyAvLyDjg6zjg7Pjg4Djg6njga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgICBwdWJsaWMgdGV4dHVyZTogV2ViR0xGcmFtZWJ1ZmZlcjsgLy8g44OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICBtYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wsXG4gICAgICBjbGlwcGluZ0RyYXdhYmxlSW5kaWNlczogSW50MzJBcnJheSxcbiAgICAgIGNsaXBDb3VudDogbnVtYmVyXG4gICAgKSB7XG4gICAgICB0aGlzLl9vd25lciA9IG1hbmFnZXI7XG5cbiAgICAgIC8vIOOCr+ODquODg+ODl+OBl+OBpuOBhOOCi++8iO+8neODnuOCueOCr+eUqOOBru+8iURyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K544Oq44K544OIXG4gICAgICB0aGlzLl9jbGlwcGluZ0lkTGlzdCA9IGNsaXBwaW5nRHJhd2FibGVJbmRpY2VzO1xuXG4gICAgICAvLyDjg57jgrnjgq/jga7mlbBcbiAgICAgIHRoaXMuX2NsaXBwaW5nSWRDb3VudCA9IGNsaXBDb3VudDtcblxuICAgICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbmV3IGNzbVJlY3QoKTtcbiAgICAgIHRoaXMuX2xheW91dEJvdW5kcyA9IG5ldyBjc21SZWN0KCk7XG5cbiAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCA9IFtdO1xuXG4gICAgICB0aGlzLl9tYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgICB0aGlzLl9tYXRyaXhGb3JEcmF3ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5fbGF5b3V0Qm91bmRzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbGF5b3V0Qm91bmRzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2FsbENsaXBwZWREcmF3UmVjdCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2FsbENsaXBwZWREcmF3UmVjdCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkui/veWKoOOBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXgg44Kv44Oq44OD44OU44Oz44Kw5a++6LGh44Gr6L+95Yqg44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAgICovXG4gICAgcHVibGljIGFkZENsaXBwZWREcmF3YWJsZShkcmF3YWJsZUluZGV4OiBudW1iZXIpIHtcbiAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdC5wdXNoKGRyYXdhYmxlSW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOBk+OBruODnuOCueOCr+OCkueuoeeQhuOBmeOCi+ODnuODjeODvOOCuOODo+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nTWFuYWdlcigpOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wge1xuICAgICAgcmV0dXJuIHRoaXMuX293bmVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRHbChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgICB0aGlzLl9vd25lci5zZXRHTChnbCk7XG4gICAgfVxuXG4gICAgcHVibGljIF9pc1VzaW5nOiBib29sZWFuOyAvLyDnj77lnKjjga7mj4/nlLvnirbmhYvjgafjg57jgrnjgq/jga7mupblgpnjgYzlv4XopoHjgarjgol0cnVlXG4gICAgcHVibGljIHJlYWRvbmx5IF9jbGlwcGluZ0lkTGlzdDogSW50MzJBcnJheTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GuSUTjg6rjgrnjg4hcbiAgICBwdWJsaWMgX2NsaXBwaW5nSWRDb3VudDogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7mlbBcbiAgICBwdWJsaWMgX2xheW91dENoYW5uZWxObzogbnVtYmVyOyAvLyBSR0JB44Gu44GE44Ga44KM44Gu44OB44Oj44Oz44ON44Or44Gr44GT44Gu44Kv44Oq44OD44OX44KS6YWN572u44GZ44KL44GL77yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAgcHVibGljIF9sYXlvdXRCb3VuZHM6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+eUqOODgeODo+ODs+ODjeODq+OBruOBqeOBrumgmOWfn+OBq+ODnuOCueOCr+OCkuWFpeOCjOOCi+OBi++8iFZpZXfluqfmqJktMX4xLCBVVuOBrzB+MeOBq+ebtOOBme+8iVxuICAgIHB1YmxpYyBfYWxsQ2xpcHBlZERyYXdSZWN0OiBjc21SZWN0OyAvLyDjgZPjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgafjgIHjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgovjgZnjgbnjgabjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7lm7Ljgb/nn6nlvaLvvIjmr47lm57mm7TmlrDvvIlcbiAgICBwdWJsaWMgX21hdHJpeEZvck1hc2s6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/jga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcbiAgICBwdWJsaWMgX21hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcbiAgICBwdWJsaWMgX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdDogbnVtYmVyW107IC8vIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxuXG4gICAgcHJpdmF0ZSBfb3duZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDsgLy8g44GT44Gu44Oe44K544Kv44KS566h55CG44GX44Gm44GE44KL44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K5XG4gIH1cblxuICAvKipcbiAgICogV2ViR0znlKjjga7jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLnlJ/miJDjg7vnoLTmo4TjgZnjgovjgq/jg6njgrlcbiAgICog44K344Oz44Kw44Or44OI44Oz44Gq44Kv44Op44K544Gn44GC44KK44CBQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNl44GL44KJ44Ki44Kv44K744K544GZ44KL44CCXG4gICAqL1xuICBleHBvcnQgY2xhc3MgQ3ViaXNtU2hhZGVyX1dlYkdMIHtcbiAgICAvKipcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgovvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvIlcbiAgICAgKiBAcmV0dXJuIOOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogQ3ViaXNtU2hhZGVyX1dlYkdMIHtcbiAgICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgc19pbnN0YW5jZSA9IG5ldyBDdWJpc21TaGFkZXJfV2ViR0woKTtcblxuICAgICAgICByZXR1cm4gc19pbnN0YW5jZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzX2luc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkumWi+aUvuOBmeOCi++8iOOCt+ODs+OCsOODq+ODiOODs++8iVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgICBpZiAoc19pbnN0YW5jZSkge1xuICAgICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICAgICAgc19pbnN0YW5jZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcHJpdmF0ZeOBquOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21TaGFkZXJTZXQ+KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICB0aGlzLnJlbGVhc2VTaGFkZXJQcm9ncmFtKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gu5LiA6YCj44Gu44K744OD44OI44Ki44OD44OX44KS5a6f6KGM44GZ44KLXG4gICAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgICAqIEBwYXJhbSB0ZXh0dXJlSWQgR1BV44Gu44OG44Kv44K544OB44OjSURcbiAgICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAgICogQHBhcmFtIHZlcnRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCuemFjeWIl1xuICAgICAqIEBwYXJhbSBpbmRleEFycmF5IOOCpOODs+ODh+ODg+OCr+OCueODkOODg+ODleOCoeOBrumggueCuemFjeWIl1xuICAgICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAgICogQHBhcmFtIGNvbG9yQmxlbmRNb2RlIOOCq+ODqeODvOODluODrOODs+ODh+OCo+ODs+OCsOOBruOCv+OCpOODl1xuICAgICAqIEBwYXJhbSBiYXNlQ29sb3Ig44OZ44O844K544Kr44Op44O8XG4gICAgICogQHBhcmFtIGlzUHJlbXVsdGlwbGllZEFscGhhIOS5l+eul+a4iOOBv+OCouODq+ODleOCoeOBi+OBqeOBhuOBi1xuICAgICAqIEBwYXJhbSBtYXRyaXg0eDQgTW9kZWwtVmlldy1Qcm9qZWN0aW9u6KGM5YiXXG4gICAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/jgpLlj43ou6LjgZfjgabkvb/nlKjjgZnjgovjg5Xjg6njgrBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0dXBTaGFkZXJQcm9ncmFtKFxuICAgICAgcmVuZGVyZXI6IEN1YmlzbVJlbmRlcmVyX1dlYkdMLFxuICAgICAgdGV4dHVyZUlkOiBXZWJHTFRleHR1cmUsXG4gICAgICB2ZXJ0ZXhDb3VudDogbnVtYmVyLFxuICAgICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgICAgdXZBcnJheTogRmxvYXQzMkFycmF5LFxuICAgICAgYnVmZmVyRGF0YToge1xuICAgICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgICAgICB1djogV2ViR0xCdWZmZXI7XG4gICAgICAgIGluZGV4OiBXZWJHTEJ1ZmZlcjtcbiAgICAgIH0sXG4gICAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgICAgYmFzZUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgICBpc1ByZW11bHRpcGxpZWRBbHBoYTogYm9vbGVhbixcbiAgICAgIG1hdHJpeDR4NDogQ3ViaXNtTWF0cml4NDQsXG4gICAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICghaXNQcmVtdWx0aXBsaWVkQWxwaGEpIHtcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ05vUHJlbXVsdGlwbGllZEFscGhhIGlzIG5vdCBhbGxvd2VkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9zaGFkZXJTZXRzLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVTaGFkZXJzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEJsZW5kaW5nXG4gICAgICBsZXQgU1JDX0NPTE9SOiBudW1iZXI7XG4gICAgICBsZXQgRFNUX0NPTE9SOiBudW1iZXI7XG4gICAgICBsZXQgU1JDX0FMUEhBOiBudW1iZXI7XG4gICAgICBsZXQgRFNUX0FMUEhBOiBudW1iZXI7XG5cbiAgICAgIGlmIChyZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgIT0gbnVsbCkge1xuICAgICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYJcbiAgICAgICAgY29uc3Qgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX1NldHVwTWFza1xuICAgICAgICApO1xuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xuXG4gICAgICAgIC8vIOODhuOCr+OCueODgeODo+ioreWumlxuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUwTG9jYXRpb24sIDApO1xuXG4gICAgICAgIC8vIOmggueCuemFjeWIl+OBruioreWumihWQk8pXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnV2ID09IG51bGwpIHtcbiAgICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudXYpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g44OB44Oj44Oz44ON44OrXG4gICAgICAgIGNvbnN0IGNoYW5uZWxObzogbnVtYmVyID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgICAgLl9sYXlvdXRDaGFubmVsTm87XG4gICAgICAgIGNvbnN0IGNvbG9yQ2hhbm5lbDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gcmVuZGVyZXJcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgICAgLmdldENsaXBwaW5nTWFuYWdlcigpXG4gICAgICAgICAgLmdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm8pO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24sXG4gICAgICAgICAgY29sb3JDaGFubmVsLlIsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkcsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkIsXG4gICAgICAgICAgY29sb3JDaGFubmVsLkFcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9tYXRyaXhGb3JNYXNrLmdldEFycmF5KClcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCByZWN0OiBjc21SZWN0ID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgICAgLl9sYXlvdXRCb3VuZHM7XG5cbiAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbixcbiAgICAgICAgICByZWN0LnggKiAyLjAgLSAxLjAsXG4gICAgICAgICAgcmVjdC55ICogMi4wIC0gMS4wLFxuICAgICAgICAgIHJlY3QuZ2V0UmlnaHQoKSAqIDIuMCAtIDEuMCxcbiAgICAgICAgICByZWN0LmdldEJvdHRvbSgpICogMi4wIC0gMS4wXG4gICAgICAgICk7XG5cbiAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5aRVJPO1xuICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQ09MT1I7XG4gICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcbiAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgfSAvLyDjg57jgrnjgq/nlJ/miJDku6XlpJbjga7loLTlkIhcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtYXNrZWQ6IGJvb2xlYW4gPVxuICAgICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKSAhPSBudWxsOyAvLyDjgZPjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga/jg57jgrnjgq/lr77osaHjgYtcbiAgICAgICAgY29uc3Qgb2Zmc2V0OiBudW1iZXIgPSBtYXNrZWQgPyAoaW52ZXJ0ZWRNYXNrID8gMiA6IDEpIDogMDtcblxuICAgICAgICBsZXQgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSBuZXcgQ3ViaXNtU2hhZGVyU2V0KCk7XG5cbiAgICAgICAgc3dpdGNoIChjb2xvckJsZW5kTW9kZSkge1xuICAgICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWw6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX05vcm1hbFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZTpcbiAgICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICAgIFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XG4gICAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlOlxuICAgICAgICAgICAgc2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSArIG9mZnNldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuRFNUX0NPTE9SO1xuICAgICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xuICAgICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShzaGFkZXJTZXQuc2hhZGVyUHJvZ3JhbSk7XG5cbiAgICAgICAgLy8g6aCC54K56YWN5YiX44Gu6Kit5a6aXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICAgICAgdGhpcy5nbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICAgIGlmIChidWZmZXJEYXRhLnV2ID09IG51bGwpIHtcbiAgICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEudXYpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbixcbiAgICAgICAgICAyLFxuICAgICAgICAgIHRoaXMuZ2wuRkxPQVQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKG1hc2tlZCkge1xuICAgICAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUxKTtcbiAgICAgICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IHJlbmRlcmVyXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAgIC5nZXRDb2xvckJ1ZmZlcigpO1xuICAgICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXgpO1xuICAgICAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiwgMSk7XG5cbiAgICAgICAgICAvLyB2aWV35bqn5qiZ44KSQ2xpcHBpbmdDb250ZXh044Gu5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44Gf44KB44Gu6KGM5YiX44KS6Kit5a6aXG4gICAgICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxuICAgICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKS5fbWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOS9v+eUqOOBmeOCi+OCq+ODqeODvOODgeODo+ODs+ODjeODq+OCkuioreWumlxuICAgICAgICAgIGNvbnN0IGNoYW5uZWxObzogbnVtYmVyID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgICAuX2xheW91dENoYW5uZWxObztcbiAgICAgICAgICBjb25zdCBjb2xvckNoYW5uZWw6IEN1YmlzbVRleHR1cmVDb2xvciA9IHJlbmRlcmVyXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAgIC5nZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vKTtcbiAgICAgICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbixcbiAgICAgICAgICAgIGNvbG9yQ2hhbm5lbC5SLFxuICAgICAgICAgICAgY29sb3JDaGFubmVsLkcsXG4gICAgICAgICAgICBjb2xvckNoYW5uZWwuQixcbiAgICAgICAgICAgIGNvbG9yQ2hhbm5lbC5BXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOODhuOCr+OCueODgeODo+ioreWumlxuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUwTG9jYXRpb24sIDApO1xuXG4gICAgICAgIC8vIOW6p+aomeWkieaPm1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1NYXRyaXhMb2NhdGlvbixcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBtYXRyaXg0eDQuZ2V0QXJyYXkoKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24sXG4gICAgICAgICAgYmFzZUNvbG9yLlIsXG4gICAgICAgICAgYmFzZUNvbG9yLkcsXG4gICAgICAgICAgYmFzZUNvbG9yLkIsXG4gICAgICAgICAgYmFzZUNvbG9yLkFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gSUJP44KS5L2c5oiQ44GX44CB44OH44O844K/44KS6Lui6YCBXG4gICAgICBpZiAoYnVmZmVyRGF0YS5pbmRleCA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEuaW5kZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEuaW5kZXgpO1xuICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxuICAgICAgICB0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxuICAgICAgICBpbmRleEFycmF5LFxuICAgICAgICB0aGlzLmdsLkRZTkFNSUNfRFJBV1xuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoU1JDX0NPTE9SLCBEU1RfQ09MT1IsIFNSQ19BTFBIQSwgRFNUX0FMUEhBKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZVNoYWRlclByb2dyYW0oKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlclNldHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSk7XG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSA9IDA7XG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIHZvaWQgMCk7XG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuWIneacn+WMluOBmeOCi1xuICAgICAqIEBwYXJhbSB2ZXJ0U2hhZGVyU3JjIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgICAqIEBwYXJhbSBmcmFnU2hhZGVyU3JjIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgICAqL1xuICAgIHB1YmxpYyBnZW5lcmF0ZVNoYWRlcnMoKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoYWRlckNvdW50OyBpKyspIHtcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5wdXNoQmFjayhuZXcgQ3ViaXNtU2hhZGVyU2V0KCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgICB2ZXJ0ZXhTaGFkZXJTcmNTZXR1cE1hc2ssXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU3Jjc2V0dXBNYXNrXG4gICAgICApO1xuXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgICB2ZXJ0ZXhTaGFkZXJTcmMsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU3JjUHJlbXVsdGlwbGllZEFscGhhXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgICAgdmVydGV4U2hhZGVyU3JjTWFza2VkLFxuICAgICAgICBmcmFnbWVudFNoYWRlclNyY01hc2tQcmVtdWx0aXBsaWVkQWxwaGFcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKFxuICAgICAgICB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhXG4gICAgICApO1xuXG4gICAgICAvLyDliqDnrpfjgoLpgJrluLjjgajlkIzjgZjjgrfjgqfjg7zjg4Djg7zjgpLliKnnlKjjgZnjgotcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDFcbiAgICAgICkuc2hhZGVyUHJvZ3JhbTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDJcbiAgICAgICkuc2hhZGVyUHJvZ3JhbTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDNcbiAgICAgICkuc2hhZGVyUHJvZ3JhbTtcblxuICAgICAgLy8g5LmX566X44KC6YCa5bi444Go5ZCM44GY44K344Kn44O844OA44O844KS5Yip55So44GZ44KLXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAxXG4gICAgICApLnNoYWRlclByb2dyYW07XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLnNoYWRlclByb2dyYW07XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLnNoYWRlclByb2dyYW07XG5cbiAgICAgIC8vIFNldHVwTWFza1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMFxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAwXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDBcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAwXG4gICAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDBcbiAgICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAwXG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOmAmuW4uO+8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMVxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAxXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDFcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X21hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAxXG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOmAmuW4uO+8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMlxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDJcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMlxuICAgICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAyXG4gICAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgMlxuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6IsIFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgM1xuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDNcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgM1xuICAgICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAzXG4gICAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgM1xuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDliqDnrpfvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDRcbiAgICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNFxuICAgICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA0XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNFxuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDliqDnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDVcbiAgICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNVxuICAgICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA1XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNVxuICAgICAgKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdzX3RleHR1cmUxJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDVcbiAgICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNVxuICAgICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDVcbiAgICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcblxuICAgICAgLy8g5Yqg566X77yI44Kv44Oq44OD44OU44Oz44Kw44O75Y+N6Lui44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA2XG4gICAgICApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDZcbiAgICAgICkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgNlxuICAgICAgKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdzX3RleHR1cmUwJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDZcbiAgICAgICkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMSdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X21hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA2XG4gICAgICApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDZcbiAgICAgICkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA2XG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOS5l+eul++8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgN1xuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA3XG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDdcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X21hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA3XG4gICAgICApLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG5cbiAgICAgIC8vIOS5l+eul++8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOFxuICAgICAgKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA4XG4gICAgICApLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDhcbiAgICAgICkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnc190ZXh0dXJlMCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA4XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTEnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOFxuICAgICAgKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA4XG4gICAgICApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOFxuICAgICAgKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuXG4gICAgICAvLyDkuZfnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6LjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDlcbiAgICAgICkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOVxuICAgICAgKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICA5XG4gICAgICApLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOVxuICAgICAgKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdzX3RleHR1cmUxJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbWF0cml4J1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDlcbiAgICAgICkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChcbiAgICAgICAgOVxuICAgICAgKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgIDlcbiAgICAgICkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6DjgpLjg63jg7zjg4njgZfjgabjgqLjg4njg6zjgrnjgpLov5TjgZlcbiAgICAgKiBAcGFyYW0gdmVydGV4U2hhZGVyU291cmNlICAgIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgICAqIEBwYXJhbSBmcmFnbWVudFNoYWRlclNvdXJjZSAg44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44K944O844K5XG4gICAgICogQHJldHVybiDjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6Djga7jgqLjg4njg6zjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZFNoYWRlclByb2dyYW0oXG4gICAgICB2ZXJ0ZXhTaGFkZXJTb3VyY2U6IHN0cmluZyxcbiAgICAgIGZyYWdtZW50U2hhZGVyU291cmNlOiBzdHJpbmdcbiAgICApOiBXZWJHTFByb2dyYW0ge1xuICAgICAgLy8gQ3JlYXRlIFNoYWRlciBQcm9ncmFtXG4gICAgICBsZXQgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVQcm9ncmFtKCk7XG5cbiAgICAgIGxldCB2ZXJ0U2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgICB0aGlzLmdsLlZFUlRFWF9TSEFERVIsXG4gICAgICAgIHZlcnRleFNoYWRlclNvdXJjZVxuICAgICAgKTtcblxuICAgICAgaWYgKCF2ZXJ0U2hhZGVyKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgZXJyb3IhJyk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBsZXQgZnJhZ1NoYWRlciA9IHRoaXMuY29tcGlsZVNoYWRlclNvdXJjZShcbiAgICAgICAgdGhpcy5nbC5GUkFHTUVOVF9TSEFERVIsXG4gICAgICAgIGZyYWdtZW50U2hhZGVyU291cmNlXG4gICAgICApO1xuICAgICAgaWYgKCFmcmFnU2hhZGVyKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgZXJyb3IhJyk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICAvLyBBdHRhY2ggdmVydGV4IHNoYWRlciB0byBwcm9ncmFtXG4gICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0U2hhZGVyKTtcblxuICAgICAgLy8gQXR0YWNoIGZyYWdtZW50IHNoYWRlciB0byBwcm9ncmFtXG4gICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnU2hhZGVyKTtcblxuICAgICAgLy8gbGluayBwcm9ncmFtXG4gICAgICB0aGlzLmdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgICAgY29uc3QgbGlua1N0YXR1cyA9IHRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihcbiAgICAgICAgc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgdGhpcy5nbC5MSU5LX1NUQVRVU1xuICAgICAgKTtcblxuICAgICAgLy8g44Oq44Oz44Kv44Gr5aSx5pWX44GX44Gf44KJ44K344Kn44O844OA44O844KS5YmK6ZmkXG4gICAgICBpZiAoIWxpbmtTdGF0dXMpIHtcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ0ZhaWxlZCB0byBsaW5rIHByb2dyYW06IHswfScsIHNoYWRlclByb2dyYW0pO1xuXG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHZlcnRTaGFkZXIpO1xuICAgICAgICB2ZXJ0U2hhZGVyID0gMDtcblxuICAgICAgICB0aGlzLmdsLmRlbGV0ZVNoYWRlcihmcmFnU2hhZGVyKTtcbiAgICAgICAgZnJhZ1NoYWRlciA9IDA7XG5cbiAgICAgICAgaWYgKHNoYWRlclByb2dyYW0pIHtcbiAgICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG4gICAgICAgICAgc2hhZGVyUHJvZ3JhbSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgLy8gUmVsZWFzZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnMuXG4gICAgICB0aGlzLmdsLmRlbGV0ZVNoYWRlcih2ZXJ0U2hhZGVyKTtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKGZyYWdTaGFkZXIpO1xuXG4gICAgICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLjgrPjg7Pjg5HjgqTjg6vjgZnjgotcbiAgICAgKiBAcGFyYW0gc2hhZGVyVHlwZSDjgrfjgqfjg7zjg4Djgr/jgqTjg5coVmVydGV4L0ZyYWdtZW50KVxuICAgICAqIEBwYXJhbSBzaGFkZXJTb3VyY2Ug44K344Kn44O844OA44K944O844K544Kz44O844OJXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOOCs+ODs+ODkeOCpOODq+OBleOCjOOBn+OCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoFxuICAgICAqL1xuICAgIHB1YmxpYyBjb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgc2hhZGVyVHlwZTogR0xlbnVtLFxuICAgICAgc2hhZGVyU291cmNlOiBzdHJpbmdcbiAgICApOiBXZWJHTFByb2dyYW0ge1xuICAgICAgY29uc3Qgc291cmNlOiBzdHJpbmcgPSBzaGFkZXJTb3VyY2U7XG5cbiAgICAgIGNvbnN0IHNoYWRlcjogV2ViR0xQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIoc2hhZGVyVHlwZSk7XG4gICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgICB0aGlzLmdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICAgICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgICAgY29uc3QgbG9nOiBzdHJpbmcgPSB0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ1NoYWRlciBjb21waWxlIGxvZzogezB9ICcsIGxvZyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0YXR1czogYW55ID0gdGhpcy5nbC5nZXRTaGFkZXJQYXJhbWV0ZXIoXG4gICAgICAgIHNoYWRlcixcbiAgICAgICAgdGhpcy5nbC5DT01QSUxFX1NUQVRVU1xuICAgICAgKTtcbiAgICAgIGlmICghc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2hhZGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRHbChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgICB0aGlzLmdsID0gZ2w7XG4gICAgfVxuXG4gICAgX3NoYWRlclNldHM6IGNzbVZlY3RvcjxDdWJpc21TaGFkZXJTZXQ+OyAvLyDjg63jg7zjg4njgZfjgZ/jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLkv53mjIHjgZnjgovlpInmlbBcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0OyAvLyB3ZWJnbOOCs+ODs+ODhuOCreOCueODiFxuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbVNoYWRlcl9XZWJHTOOBruOCpOODs+ODiuODvOOCr+ODqeOCuVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVNoYWRlclNldCB7XG4gICAgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6Djga7jgqLjg4njg6zjgrlcbiAgICBhdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uOiBHTHVpbnQ7IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFBvc2l0aW9u77yJXG4gICAgYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbjogR0x1aW50OyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXhDb29yZO+8iVxuICAgIHVuaWZvcm1NYXRyaXhMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iE1hdHJpeO+8iVxuICAgIHVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDbGlwTWF0cml477yJXG4gICAgc2FtcGxlclRleHR1cmUwTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXh0dXJlMO+8iVxuICAgIHNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4dHVyZTHvvIlcbiAgICB1bmlmb3JtQmFzZUNvbG9yTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhCYXNlQ29sb3LvvIlcbiAgICB1bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iENoYW5uZWxGbGFn77yJXG4gIH1cblxuICBleHBvcnQgZW51bSBTaGFkZXJOYW1lcyB7XG4gICAgLy8gU2V0dXBNYXNrXG4gICAgU2hhZGVyTmFtZXNfU2V0dXBNYXNrLFxuXG4gICAgLy8gTm9ybWFsXG4gICAgU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhLFxuICAgIFNoYWRlck5hbWVzX05vcm1hbE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgICBTaGFkZXJOYW1lc19Ob21yYWxNYXNrZWRJbnZlcnRlZFByZW11bHRpcGxpZWRBbHBoYSxcblxuICAgIC8vIEFkZFxuICAgIFNoYWRlck5hbWVzX0FkZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgICBTaGFkZXJOYW1lc19BZGRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gICAgU2hhZGVyTmFtZXNfQWRkTWFza2VkUHJlbXVsdGlwbGllZEFscGhhSW52ZXJ0ZWQsXG5cbiAgICAvLyBNdWx0XG4gICAgU2hhZGVyTmFtZXNfTXVsdFByZW11bHRpcGxpZWRBbHBoYSxcbiAgICBTaGFkZXJOYW1lc19NdWx0TWFza2VkUHJlbXVsdGlwbGllZEFscGhhLFxuICAgIFNoYWRlck5hbWVzX011bHRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGFJbnZlcnRlZFxuICB9XG5cbiAgZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyY1NldHVwTWFzayA9XG4gICAgJ2F0dHJpYnV0ZSB2ZWM0ICAgICBhX3Bvc2l0aW9uOycgK1xuICAgICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICtcbiAgICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xuICAgICd1bmlmb3JtIG1hdDQgICAgICAgdV9jbGlwTWF0cml4OycgK1xuICAgICd2b2lkIG1haW4oKScgK1xuICAgICd7JyArXG4gICAgJyAgIGdsX1Bvc2l0aW9uID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgICAnICAgdl9teVBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xuICAgICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICAgJ30nO1xuICBleHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2sgPVxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjNCAgICAgICB2X215UG9zOycgK1xuICAgICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXG4gICAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2NoYW5uZWxGbGFnOycgK1xuICAgICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICtcbiAgICAndm9pZCBtYWluKCknICtcbiAgICAneycgK1xuICAgICcgICBmbG9hdCBpc0luc2lkZSA9ICcgK1xuICAgICcgICAgICAgc3RlcCh1X2Jhc2VDb2xvci54LCB2X215UG9zLngvdl9teVBvcy53KScgK1xuICAgICcgICAgICAgKiBzdGVwKHVfYmFzZUNvbG9yLnksIHZfbXlQb3MueS92X215UG9zLncpJyArXG4gICAgJyAgICAgICAqIHN0ZXAodl9teVBvcy54L3ZfbXlQb3MudywgdV9iYXNlQ29sb3IueiknICtcbiAgICAnICAgICAgICogc3RlcCh2X215UG9zLnkvdl9teVBvcy53LCB1X2Jhc2VDb2xvci53KTsnICtcbiAgICAnICAgZ2xfRnJhZ0NvbG9yID0gdV9jaGFubmVsRmxhZyAqIHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKS5hICogaXNJbnNpZGU7JyArXG4gICAgJ30nO1xuXG4gIC8vLS0tLS0g44OQ44O844OG44OD44Kv44K544K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXG4gIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCaXG4gIGV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmMgPVxuICAgICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICsgLy92LnZlcnRleFxuICAgICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICsgLy92LnRleGNvb3JkXG4gICAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgKyAvL3YyZi50ZXhjb29yZFxuICAgICd1bmlmb3JtIG1hdDQgICAgICAgdV9tYXRyaXg7JyArXG4gICAgJ3ZvaWQgbWFpbigpJyArXG4gICAgJ3snICtcbiAgICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xuICAgICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICAgJ30nO1xuXG4gIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCa77yI44Kv44Oq44OD44OU44Oz44Kw44GV44KM44Gf44KC44Gu44Gu5o+P55S755So77yJXG4gIGV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQgPVxuICAgICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICtcbiAgICAnYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAgICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xuICAgICd1bmlmb3JtIG1hdDQgICAgICAgdV9tYXRyaXg7JyArXG4gICAgJ3VuaWZvcm0gbWF0NCAgICAgICB1X2NsaXBNYXRyaXg7JyArXG4gICAgJ3ZvaWQgbWFpbigpJyArXG4gICAgJ3snICtcbiAgICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfY2xpcFBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICAgJyAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkOycgK1xuICAgICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICAgJ30nO1xuXG4gIC8vLS0tLS0g44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXG4gIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCaIO+8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICBleHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXG4gICAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjsnICtcbiAgICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7JyArIC8vX01haW5UZXhcbiAgICAndm9pZCBtYWluKCknICtcbiAgICAneycgK1xuICAgICcgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCAsIHZfdGV4Q29vcmQpICogdV9iYXNlQ29sb3I7JyArXG4gICAgJ30nO1xuXG4gIC8vIE5vcm1hbCDvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgZ/jgoLjga7jga7mj4/nlLvnlKjjgIFQcmVtdWx0aXBsaWVkQWxwaGHlhbznlKjvvIlcbiAgZXhwb3J0IGNvbnN0IGZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYSA9XG4gICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAgICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICtcbiAgICAndmFyeWluZyB2ZWM0ICAgICAgIHZfY2xpcFBvczsnICtcbiAgICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfYmFzZUNvbG9yOycgK1xuICAgICd1bmlmb3JtIHZlYzQgICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgICAndW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7JyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUxOycgK1xuICAgICd2b2lkIG1haW4oKScgK1xuICAgICd7JyArXG4gICAgJyAgIHZlYzQgY29sX2Zvcm1hc2sgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCAsIHZfdGV4Q29vcmQpICogdV9iYXNlQ29sb3I7JyArXG4gICAgJyAgIHZlYzQgY2xpcE1hc2sgPSAoMS4wIC0gdGV4dHVyZTJEKHNfdGV4dHVyZTEsIHZfY2xpcFBvcy54eSAvIHZfY2xpcFBvcy53KSkgKiB1X2NoYW5uZWxGbGFnOycgK1xuICAgICcgICBmbG9hdCBtYXNrVmFsID0gY2xpcE1hc2suciArIGNsaXBNYXNrLmcgKyBjbGlwTWFzay5iICsgY2xpcE1hc2suYTsnICtcbiAgICAnICAgY29sX2Zvcm1hc2sgPSBjb2xfZm9ybWFzayAqIG1hc2tWYWw7JyArXG4gICAgJyAgIGdsX0ZyYWdDb2xvciA9IGNvbF9mb3JtYXNrOycgK1xuICAgICd9JztcblxuICAvLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBpuWPjei7ouS9v+eUqOOBruaPj+eUu+eUqOOAgVByZW11bHRpcGxpZWRBbHBoYeOBruWgtOWQiO+8iVxuICBleHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNNYXNrSW52ZXJ0ZWRQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAndmFyeWluZyB2ZWMyIHZfdGV4Q29vcmQ7JyArXG4gICAgJ3ZhcnlpbmcgdmVjNCB2X2NsaXBQb3M7JyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHNfdGV4dHVyZTA7JyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHNfdGV4dHVyZTE7JyArXG4gICAgJ3VuaWZvcm0gdmVjNCB1X2NoYW5uZWxGbGFnOycgK1xuICAgICd1bmlmb3JtIHZlYzQgdV9iYXNlQ29sb3I7JyArXG4gICAgJ3ZvaWQgbWFpbigpJyArXG4gICAgJ3snICtcbiAgICAndmVjNCBjb2xfZm9ybWFzayA9IHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKSAqIHVfYmFzZUNvbG9yOycgK1xuICAgICd2ZWM0IGNsaXBNYXNrID0gKDEuMCAtIHRleHR1cmUyRChzX3RleHR1cmUxLCB2X2NsaXBQb3MueHkgLyB2X2NsaXBQb3MudykpICogdV9jaGFubmVsRmxhZzsnICtcbiAgICAnZmxvYXQgbWFza1ZhbCA9IGNsaXBNYXNrLnIgKyBjbGlwTWFzay5nICsgY2xpcE1hc2suYiArIGNsaXBNYXNrLmE7JyArXG4gICAgJ2NvbF9mb3JtYXNrID0gY29sX2Zvcm1hc2sgKiAoMS4wIC0gbWFza1ZhbCk7JyArXG4gICAgJ2dsX0ZyYWdDb2xvciA9IGNvbF9mb3JtYXNrOycgK1xuICAgICd9JztcblxuICAvKipcbiAgICogV2ViR0znlKjjga7mj4/nlLvlkb3ku6TjgpLlrp/oo4XjgZfjgZ/jgq/jg6njgrlcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21SZW5kZXJlcl9XZWJHTCBleHRlbmRzIEN1YmlzbVJlbmRlcmVyIHtcbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICAgIGlmIChtb2RlbC5pc1VzaW5nTWFza2luZygpKSB7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44O744OQ44OD44OV44Kh5YmN5Yem55CG5pa55byP44KS5Yid5pyf5YyWXG4gICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5pbml0aWFsaXplKFxuICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU1hc2tzKCksXG4gICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QucmVzaXplKG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSwgMCk7XG5cbiAgICAgIHN1cGVyLmluaXRpYWxpemUobW9kZWwpOyAvLyDopqrjgq/jg6njgrnjga7lh6bnkIbjgpLlkbzjgbZcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXZWJHTOODhuOCr+OCueODgeODo+OBruODkOOCpOODs+ODieWHpueQhlxuICAgICAqIEN1YmlzbVJlbmRlcmVy44Gr44OG44Kv44K544OB44Oj44KS6Kit5a6a44GX44CBQ3ViaXNtUmVuZGVyZXLlhoXjgafjgZ3jga7nlLvlg4/jgpLlj4LnhafjgZnjgovjgZ/jgoHjga5JbmRleOWApOOCkuaIu+OCiuWApOOBqOOBmeOCi1xuICAgICAqIEBwYXJhbSBtb2RlbFRleHR1cmVObyDjgrvjg4Pjg4jjgZnjgovjg6Ljg4fjg6vjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcbiAgICAgKiBAcGFyYW0gZ2xUZXh0dXJlTm8gV2ViR0zjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcbiAgICAgKi9cbiAgICBwdWJsaWMgYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTm86IG51bWJlciwgZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldFZhbHVlKG1vZGVsVGV4dHVyZU5vLCBnbFRleHR1cmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdlYkdM44Gr44OQ44Kk44Oz44OJ44GV44KM44Gf44OG44Kv44K544OB44Oj44Gu44Oq44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgrnjg4hcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QmluZGVkVGV4dHVyZXMoKTogY3NtTWFwPG51bWJlciwgV2ViR0xUZXh0dXJlPiB7XG4gICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS6Kit5a6a44GZ44KLXG4gICAgICog44Oe44K544Kv55So44GuRnJhbWVCdWZmZXLjgpLnoLTmo4TjgIHlho3kvZzmiJDjgZnjgovngrrlh6bnkIbjgrPjgrnjg4jjga/pq5jjgYRcbiAgICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplOiBudW1iZXIpIHtcbiAgICAgIC8vIEZyYW1lQnVmZmVy44Gu44K144Kk44K644KS5aSJ5pu044GZ44KL44Gf44KB44Gr44Kk44Oz44K544K/44Oz44K544KS56C05qOE44O75YaN5L2c5oiQ44GZ44KLXG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbnVsbDtcblxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbmV3IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCgpO1xuXG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplKTtcblxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmluaXRpYWxpemUoXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlTWFza3MoKSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlTWFza0NvdW50cygpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ01hbmFnZXIuZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrID0gbnVsbDtcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcgPSBudWxsO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbmV3IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCgpO1xuICAgICAgdGhpcy5maXJzdERyYXcgPSB0cnVlO1xuICAgICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgICAgIHRoaXMuX2J1ZmZlckRhdGEgPSB7XG4gICAgICAgIHZlcnRleDogV2ViR0xCdWZmZXIgPSBudWxsLFxuICAgICAgICB1djogV2ViR0xCdWZmZXIgPSBudWxsLFxuICAgICAgICBpbmRleDogV2ViR0xCdWZmZXIgPSBudWxsXG4gICAgICB9O1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Plr77lv5zjg57jg4Pjg5fjga7lrrnph4/jgpLnorrkv53jgZfjgabjgYrjgY9cbiAgICAgIHRoaXMuX3RleHR1cmVzLnByZXBhcmVDYXBhY2l0eSgzMiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbnVsbDtcblxuICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgdGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXggPSBudWxsO1xuICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5fYnVmZmVyRGF0YS51dik7XG4gICAgICB0aGlzLl9idWZmZXJEYXRhLnV2ID0gbnVsbDtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEuaW5kZXgpO1xuICAgICAgdGhpcy5fYnVmZmVyRGF0YS5pbmRleCA9IG51bGw7XG4gICAgICB0aGlzLl9idWZmZXJEYXRhID0gbnVsbDtcblxuICAgICAgdGhpcy5fdGV4dHVyZXMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+Wun+mam+OBruWHpueQhlxuICAgICAqL1xuICAgIHB1YmxpYyBkb0RyYXdNb2RlbCgpOiB2b2lkIHtcbiAgICAgIC8vLS0tLS0tLS0tLS0tIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OBruWgtOWQiCAtLS0tLS0tLS0tLS1cbiAgICAgIGlmICh0aGlzLl9jbGlwcGluZ01hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnByZURyYXcoKTtcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldHVwQ2xpcHBpbmdDb250ZXh0KHRoaXMuZ2V0TW9kZWwoKSwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIOS4iuiomOOCr+ODquODg+ODlOODs+OCsOWHpueQhuWGheOBp+OCguS4gOW6plByZURyYXfjgpLlkbzjgbbjga7jgafms6jmhI8hIVxuICAgICAgdGhpcy5wcmVEcmF3KCk7XG5cbiAgICAgIGNvbnN0IGRyYXdhYmxlQ291bnQ6IG51bWJlciA9IHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUNvdW50KCk7XG4gICAgICBjb25zdCByZW5kZXJPcmRlcjogSW50MzJBcnJheSA9IHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVJlbmRlck9yZGVycygpO1xuXG4gICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjgpLmj4/nlLvpoIbjgafjgr3jg7zjg4hcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XG4gICAgICAgIGNvbnN0IG9yZGVyOiBudW1iZXIgPSByZW5kZXJPcmRlcltpXTtcbiAgICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3Quc2V0KG9yZGVyLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8g5o+P55S7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xuICAgICAgICBjb25zdCBkcmF3YWJsZUluZGV4OiBudW1iZXIgPSB0aGlzLl9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdC5hdChpKTtcblxuICAgICAgICAvLyBEcmF3YWJsZeOBjOihqOekuueKtuaFi+OBp+OBquOBkeOCjOOBsOWHpueQhuOCkuODkeOCueOBmeOCi1xuICAgICAgICBpZiAoIXRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXgpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KFxuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciAhPSBudWxsXG4gICAgICAgICAgICA/IHRoaXMuX2NsaXBwaW5nTWFuYWdlclxuICAgICAgICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdygpXG4gICAgICAgICAgICAgICAgLmF0KGRyYXdhYmxlSW5kZXgpXG4gICAgICAgICAgICA6IG51bGxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnNldElzQ3VsbGluZyh0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXgpKTtcblxuICAgICAgICB0aGlzLmRyYXdNZXNoKFxuICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVRleHR1cmVJbmRpY2VzKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4SW5kaWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhVdnMoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlT3BhY2l0eShkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleCksXG4gICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlSW52ZXJ0ZWRNYXNrQml0KGRyYXdhYmxlSW5kZXgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogW+OCquODvOODkOODvOODqeOCpOODiV1cbiAgICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgovjgIJcbiAgICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcbiAgICAgKiBAcGFyYW0gdGV4dHVyZU5vIOaPj+eUu+OBmeOCi+ODhuOCr+OCueODgeODo+eVquWPt1xuICAgICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcbiAgICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7jgqTjg7Pjg4fjg4Pjgq/jgrnphY3liJdcbiAgICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXG4gICAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcbiAgICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcbiAgICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O85ZCI5oiQ44K/44Kk44OXXG4gICAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/kvb/nlKjmmYLjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKhcbiAgICAgKi9cbiAgICBwdWJsaWMgZHJhd01lc2goXG4gICAgICB0ZXh0dXJlTm86IG51bWJlcixcbiAgICAgIGluZGV4Q291bnQ6IG51bWJlcixcbiAgICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcbiAgICAgIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICAgKTogdm9pZCB7XG4gICAgICAvLyDoo4/pnaLmj4/nlLvjga7mnInlirnjg7vnhKHlirlcbiAgICAgIGlmICh0aGlzLmlzQ3VsbGluZygpKSB7XG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ0NXKTsgLy8gQ3ViaXNtIFNESyBPcGVuR0zjga/jg57jgrnjgq/jg7vjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XlhbHjgatDQ1fjgYzooajpnaJcblxuICAgICAgY29uc3QgbW9kZWxDb2xvclJHQkE6IEN1YmlzbVRleHR1cmVDb2xvciA9IHRoaXMuZ2V0TW9kZWxDb2xvcigpO1xuXG4gICAgICBpZiAodGhpcy5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgPT0gbnVsbCkge1xuICAgICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYLku6XlpJZcbiAgICAgICAgbW9kZWxDb2xvclJHQkEuQSAqPSBvcGFjaXR5O1xuICAgICAgICBpZiAodGhpcy5pc1ByZW11bHRpcGxpZWRBbHBoYSgpKSB7XG4gICAgICAgICAgbW9kZWxDb2xvclJHQkEuUiAqPSBtb2RlbENvbG9yUkdCQS5BO1xuICAgICAgICAgIG1vZGVsQ29sb3JSR0JBLkcgKj0gbW9kZWxDb2xvclJHQkEuQTtcbiAgICAgICAgICBtb2RlbENvbG9yUkdCQS5CICo9IG1vZGVsQ29sb3JSR0JBLkE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGRyYXd0ZXh0dXJlOiBXZWJHTFRleHR1cmU7IC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeODhuOCr+OCueODgeODo1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjg57jg4Pjg5fjgYvjgonjg5DjgqTjg7Pjg4nmuIjjgb/jg4bjgq/jgrnjg4Hjg6PvvKnvvKTjgpLlj5blvpdcbiAgICAgIC8vIOODkOOCpOODs+ODieOBleOCjOOBpuOBhOOBquOBkeOCjOOBsOODgOODn+ODvOOBruODhuOCr+OCueODgeODo0lE44KS44K744OD44OI44GZ44KLXG4gICAgICBpZiAodGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKSAhPSBudWxsKSB7XG4gICAgICAgIGRyYXd0ZXh0dXJlID0gdGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYXd0ZXh0dXJlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgQ3ViaXNtU2hhZGVyX1dlYkdMLmdldEluc3RhbmNlKCkuc2V0dXBTaGFkZXJQcm9ncmFtKFxuICAgICAgICB0aGlzLFxuICAgICAgICBkcmF3dGV4dHVyZSxcbiAgICAgICAgdmVydGV4Q291bnQsXG4gICAgICAgIHZlcnRleEFycmF5LFxuICAgICAgICBpbmRleEFycmF5LFxuICAgICAgICB1dkFycmF5LFxuICAgICAgICB0aGlzLl9idWZmZXJEYXRhLFxuICAgICAgICBvcGFjaXR5LFxuICAgICAgICBjb2xvckJsZW5kTW9kZSxcbiAgICAgICAgbW9kZWxDb2xvclJHQkEsXG4gICAgICAgIHRoaXMuaXNQcmVtdWx0aXBsaWVkQWxwaGEoKSxcbiAgICAgICAgdGhpcy5nZXRNdnBNYXRyaXgoKSxcbiAgICAgICAgaW52ZXJ0ZWRNYXNrXG4gICAgICApO1xuXG4gICAgICAvLyDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6XjgpLmj4/nlLvjgZnjgotcbiAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKFxuICAgICAgICB0aGlzLmdsLlRSSUFOR0xFUyxcbiAgICAgICAgaW5kZXhDb3VudCxcbiAgICAgICAgdGhpcy5nbC5VTlNJR05FRF9TSE9SVCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g5b6M5Yem55CGXG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcobnVsbCk7XG4gICAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6Kej5pS+44GZ44KLXG4gICAgICogV2ViR0zjga7pnZnnmoTjgarjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRvU3RhdGljUmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5kZWxldGVJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODrOODs+ODgOODvOOCueODhuODvOODiOOCkuioreWumuOBmeOCi1xuICAgICAqIEBwYXJhbSBmYm8g44Ki44OX44Oq44Kx44O844K344On44Oz5YG044Gn5oyH5a6a44GX44Gm44GE44KL44OV44Os44O844Og44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIHZpZXdwb3J0IOODk+ODpeODvOODneODvOODiFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShmYm86IFdlYkdMRnJhbWVidWZmZXIsIHZpZXdwb3J0OiBudW1iZXJbXSk6IHZvaWQge1xuICAgICAgc19mYm8gPSBmYm87XG4gICAgICBzX3ZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5o+P55S76ZaL5aeL5pmC44Gu6L+95Yqg5Yem55CGXG4gICAgICog44Oi44OH44Or44KS5o+P55S744GZ44KL5YmN44Gr44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gr5b+F6KaB44Gq5Yem55CG44KS5a6f6KOF44GX44Gm44GE44KLXG4gICAgICovXG4gICAgcHVibGljIHByZURyYXcoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5maXJzdERyYXcpIHtcbiAgICAgICAgdGhpcy5maXJzdERyYXcgPSBmYWxzZTtcblxuICAgICAgICAvLyDmi6HlvLXmqZ/og73jgpLmnInlirnjgavjgZnjgotcbiAgICAgICAgdGhpcy5fYW5pc29ydG9weSA9XG4gICAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgICAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLlNDSVNTT1JfVEVTVCk7XG4gICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAgIC8vIOOCq+ODquODs+OCsO+8iDEuMGJldGEz77yJXG4gICAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsLkNXKTtcblxuICAgICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5CTEVORCk7XG4gICAgICB0aGlzLmdsLmNvbG9yTWFzayh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcblxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTsgLy8g5YmN44Gr44OQ44OD44OV44Kh44GM44OQ44Kk44Oz44OJ44GV44KM44Gm44GE44Gf44KJ56C05qOE44GZ44KL5b+F6KaB44GM44GC44KLXG4gICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS44K744OD44OI44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KSB7XG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrID0gY2xpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcmV0dXJuIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gICAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnlLvpnaLkuIrjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhjbGlwOiBDdWJpc21DbGlwcGluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcgPSBjbGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4g55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAgICovXG4gICAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKTogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcbiAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGds44Gu6Kit5a6aXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0VXAoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldEdMKGdsKTtcbiAgICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZSgpLnNldEdsKGdsKTtcbiAgICB9XG5cbiAgICBfdGV4dHVyZXM6IGNzbU1hcDxudW1iZXIsIFdlYkdMVGV4dHVyZT47IC8vIOODouODh+ODq+OBjOWPgueFp+OBmeOCi+ODhuOCr+OCueODgeODo+OBqOODrOODs+ODgOODqeOBp+ODkOOCpOODs+ODieOBl+OBpuOBhOOCi+ODhuOCr+OCueODgeODo+OBqOOBruODnuODg+ODl1xuICAgIF9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdDogY3NtVmVjdG9yPG51bWJlcj47IC8vIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueOCkuaPj+eUu+mghuOBq+S4puOBueOBn+ODquOCueODiFxuICAgIF9jbGlwcGluZ01hbmFnZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv566h55CG44Kq44OW44K444Kn44Kv44OIXG4gICAgX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2s6IEN1YmlzbUNsaXBwaW5nQ29udGV4dDsgLy8g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Gf44KB44Gu44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAgX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXc6IEN1YmlzbUNsaXBwaW5nQ29udGV4dDsgLy8g55S76Z2i5LiK5o+P55S744GZ44KL44Gf44KB44Gu44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAgZmlyc3REcmF3OiBib29sZWFuO1xuICAgIF9idWZmZXJEYXRhOiB7XG4gICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgICAgdXY6IFdlYkdMQnVmZmVyO1xuICAgICAgaW5kZXg6IFdlYkdMQnVmZmVyO1xuICAgIH07IC8vIOmggueCueODkOODg+ODleOCoeODh+ODvOOCv1xuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7IC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gICAqL1xuICBDdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlID0gKCk6IHZvaWQgPT4ge1xuICAgIEN1YmlzbVJlbmRlcmVyX1dlYkdMLmRvU3RhdGljUmVsZWFzZSgpO1xuICB9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTG9nRGVidWcgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIEtleS1WYWx1ZeOBruODmuOCouOCkuWumue+qeOBmeOCi+OCr+ODqeOCuVxuICAgKiBjc21NYXDjgq/jg6njgrnjga7lhoXpg6jjg4fjg7zjgr/jgafkvb/nlKjjgZnjgovjgIJcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBjc21QYWlyPF9LZXlULCBfVmFsVD4ge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIEBwYXJhbSBrZXkgS2V544Go44GX44Gm44K744OD44OI44GZ44KL5YCkXG4gICAgICogQHBhcmFtIHZhbHVlIFZhbHVl44Go44GX44Gm44K744OD44OI44GZ44KL5YCkXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGtleT86IF9LZXlULCB2YWx1ZT86IF9WYWxUKSB7XG4gICAgICB0aGlzLmZpcnN0ID0ga2V5ID09IHVuZGVmaW5lZCA/IG51bGwgOiBrZXk7XG5cbiAgICAgIHRoaXMuc2Vjb25kID0gdmFsdWUgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaXJzdDogX0tleVQ7IC8vIGtleeOBqOOBl+OBpueUqOOBhOOCi+WkieaVsFxuICAgIHB1YmxpYyBzZWNvbmQ6IF9WYWxUOyAvLyB2YWx1ZeOBqOOBl+OBpueUqOOBhOOCi+WkieaVsFxuICB9XG5cbiAgLyoqXG4gICAqIE1hcCB0eXBlXG4gICAqL1xuICBleHBvcnQgY2xhc3MgY3NtTWFwPF9LZXlULCBfVmFsVD4ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggYXJndW1lbnRzXG4gICAgICogQHBhcmFtIHNpemUgU2l6ZSB0byBzZWN1cmUgYXQgaW5pdGlhbGl6YXRpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioc2l6ZT86IG51bWJlcikge1xuICAgICAgaWYgKHNpemUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChzaXplIDwgMSkge1xuICAgICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IFtdO1xuICAgICAgICAgIHRoaXMuX2R1bW15VmFsdWUgPSBudWxsO1xuICAgICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IG5ldyBBcnJheShzaXplKTtcbiAgICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG4gICAgICAgIHRoaXMuX2R1bW15VmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpIHtcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq3jg7zjgpLov73liqDjgZnjgotcbiAgICAgKiBAcGFyYW0ga2V5IOaWsOOBn+OBq+i/veWKoOOBmeOCi+OCreODvFxuICAgICAqL1xuICAgIHB1YmxpYyBhcHBlbmRLZXkoa2V5OiBfS2V5VCk6IHZvaWQge1xuICAgICAgLy8g5paw44GX44GPS2V5L1ZhbHVl44Gu44Oa44Ki44KS5L2c44KLXG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eSh0aGlzLl9zaXplICsgMSwgZmFsc2UpOyAvLyAx44Gk5Lul5LiK5YWl44KL6ZqZ6ZaT44KS5L2c44KLXG4gICAgICAvLyDmlrDjgZfjgYRrZXkvdmFsdWXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga9fc2l6ZVxuXG4gICAgICB0aGlzLl9rZXlWYWx1ZXNbdGhpcy5fc2l6ZV0gPSBuZXcgY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+KGtleSk7XG4gICAgICB0aGlzLl9zaXplICs9IDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5re75a2X5ryU566X5a2QW2tleV3jga7jgqrjg7zjg5Djg7zjg63jg7zjg4koZ2V0KVxuICAgICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmFsdWUoa2V5OiBfS2V5VCk6IF9WYWxUIHtcbiAgICAgIGxldCBmb3VuZCA9IC0xO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xuICAgICAgICAgIGZvdW5kID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZm91bmQgPj0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGVuZEtleShrZXkpOyAvLyDmlrDopo/jgq3jg7zjgpLov73liqBcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplIC0gMV0uc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOa3u+Wtl+a8lOeul+WtkFtrZXld44Gu44Kq44O844OQ44O844Ot44O844OJKHNldClcbiAgICAgKiBAcGFyYW0ga2V5IOa3u+Wtl+OBi+OCieeJueWumuOBleOCjOOCi1ZhbHVl5YCkXG4gICAgICogQHBhcmFtIHZhbHVlIOS7o+WFpeOBmeOCi1ZhbHVl5YCkXG4gICAgICovXG4gICAgcHVibGljIHNldFZhbHVlKGtleTogX0tleVQsIHZhbHVlOiBfVmFsVCk6IHZvaWQge1xuICAgICAgbGV0IGZvdW5kID0gLTE7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KSB7XG4gICAgICAgICAgZm91bmQgPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3VuZCA+PSAwKSB7XG4gICAgICAgIHRoaXMuX2tleVZhbHVlc1tmb3VuZF0uc2Vjb25kID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGVuZEtleShrZXkpOyAvLyDmlrDopo/jgq3jg7zjgpLov73liqBcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemUgLSAxXS5zZWNvbmQgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDjgafmuKHjgZfjgZ9LZXnjgpLmjIHjgaTopoHntKDjgYzlrZjlnKjjgZnjgovjgYtcbiAgICAgKiBAcGFyYW0ga2V5IOWtmOWcqOOCkueiuuiqjeOBmeOCi2tleVxuICAgICAqIEByZXR1cm4gdHJ1ZSDlvJXmlbDjgafmuKHjgZfjgZ9rZXnjgpLmjIHjgaTopoHntKDjgYzlrZjlnKjjgZnjgotcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0V4aXN0KGtleTogX0tleVQpOiBib29sZWFuIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBrZXlWYWx1ZeOBruODneOCpOODs+OCv+OCkuWFqOOBpuino+aUvuOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2tleVZhbHVlcyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX2tleVZhbHVlcyA9IG51bGw7XG4gICAgICB0aGlzLl9rZXlWYWx1ZXMgPSBbXTtcblxuICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu44K144Kk44K644KS5Y+W5b6X44GZ44KLXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIOOCs+ODs+ODhuODiuOBruOCteOCpOOCulxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7jgq3jg6Pjg5Hjgrfjg4bjgqPjgpLnorrkv53jgZnjgotcbiAgICAgKiBAcGFyYW0gbmV3U2l6ZSDmlrDjgZ/jgarjgq3jg6Pjg5Hjgrfjg4bjgqPjgILlvJXmlbDjga7lgKTjgYznj77lnKjjga7jgrXjgqTjgrrmnKrmuoDjga7loLTlkIjjga/kvZXjgoLjgZfjgarjgYTjgIJcbiAgICAgKiBAcGFyYW0gZml0VG9TaXplIHRydWXjgarjgonmjIflrprjgZfjgZ/jgrXjgqTjgrrjgavlkIjjgo/jgZvjgovjgIJmYWxzZeOBquOCieOCteOCpOOCuuOCkjLlgI3norrkv53jgZfjgabjgYrjgY/jgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgcHJlcGFyZUNhcGFjaXR5KG5ld1NpemU6IG51bWJlciwgZml0VG9TaXplOiBib29sZWFuKTogdm9pZCB7XG4gICAgICBpZiAobmV3U2l6ZSA+IHRoaXMuX2tleVZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIGlmICghZml0VG9TaXplICYmIG5ld1NpemUgPCBjc21NYXAuRGVmYXVsdFNpemUpXG4gICAgICAgICAgICBuZXdTaXplID0gY3NtTWFwLkRlZmF1bHRTaXplO1xuICAgICAgICAgIHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPSBuZXdTaXplO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghZml0VG9TaXplICYmIG5ld1NpemUgPCB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoICogMilcbiAgICAgICAgICAgIG5ld1NpemUgPSB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoICogMjtcbiAgICAgICAgICB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID0gbmV3U2l6ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBruWFiOmgreimgee0oOOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBiZWdpbigpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMsIDApO1xuICAgICAgcmV0dXJuIGl0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7ntYLnq6/opoHntKDjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+ID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4oXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuX3NpemVcbiAgICAgICk7IC8vIOe1guS6hlxuICAgICAgcmV0dXJuIGl0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjgYvjgonopoHntKDjgpLliYrpmaTjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpdGUg5YmK6Zmk44GZ44KL6KaB57SgXG4gICAgICovXG4gICAgcHVibGljIGVyYXNlKGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IGl0ZS5faW5kZXg7XG4gICAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGl0ZTsgLy8g5YmK6Zmk56+E5Zuy5aSWXG4gICAgICB9XG5cbiAgICAgIC8vIOWJiumZpFxuICAgICAgdGhpcy5fa2V5VmFsdWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAtLXRoaXMuX3NpemU7XG5cbiAgICAgIGNvbnN0IGl0ZTI6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPihcbiAgICAgICAgdGhpcyxcbiAgICAgICAgaW5kZXhcbiAgICAgICk7IC8vIOe1guS6hlxuICAgICAgcmV0dXJuIGl0ZTI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu5YCk44KSMzLjg5Pjg4Pjg4jnrKblj7fku5jjgY3mlbTmlbDlnovjgafjg4Djg7Pjg5fjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZHVtcEFzSW50KCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgICAgQ3ViaXNtTG9nRGVidWcoJ3swfSAsJywgdGhpcy5fa2V5VmFsdWVzW2ldKTtcbiAgICAgICAgQ3ViaXNtTG9nRGVidWcoJ1xcbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRGVmYXVsdFNpemUgPSAxMDsgLy8g44Kz44Oz44OG44OK44Gu5Yid5pyf5YyW44Gu44OH44OV44Kp44Or44OI44K144Kk44K6XG4gICAgcHVibGljIF9rZXlWYWx1ZXM6IGNzbVBhaXI8X0tleVQsIF9WYWxUPltdOyAvLyBrZXktdmFsdWXjg5rjgqLjga7phY3liJdcbiAgICBwdWJsaWMgX2R1bW15VmFsdWU6IF9WYWxUOyAvLyDnqbrjga7lgKTjgpLov5TjgZnngrrjga7jg4Djg5/jg7xcbiAgICBwdWJsaWMgX3NpemU6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXG4gIH1cblxuICAvKipcbiAgICogY3NtTWFwPFQ+44Gu44Kk44OG44Os44O844K/XG4gICAqL1xuICBleHBvcnQgY2xhc3MgaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodj86IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+LCBpZHg/OiBudW1iZXIpIHtcbiAgICAgIHRoaXMuX21hcCA9IHYgIT0gdW5kZWZpbmVkID8gdiA6IG5ldyBjc21NYXA8X0tleVQsIF9WYWxUPigpO1xuXG4gICAgICB0aGlzLl9pbmRleCA9IGlkeCAhPSB1bmRlZmluZWQgPyBpZHggOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0KGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xuICAgICAgdGhpcy5fbWFwID0gaXRlLl9tYXA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliY3nva7jgY0rK+a8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVJbmNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgICArK3RoaXMuX2luZGV4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YmN572u44GNLS3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgcHJlRGVjcmVtZW50KCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgICAgLS10aGlzLl9pbmRleDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW+jOe9ruOBjSsr5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAgICovXG4gICAgcHVibGljIGluY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgrKyk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgICAgdGhpcy5fbWFwID0gaXRlb2xkLl9tYXA7XG4gICAgICB0aGlzLl9pbmRleCA9IGl0ZW9sZC5faW5kZXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvoznva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgICAqL1xuICAgIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgICBjb25zdCBpdGVvbGQgPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPih0aGlzLl9tYXAsIHRoaXMuX2luZGV4KTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgICB0aGlzLl9tYXAgPSBpdGVvbGQuX21hcDtcbiAgICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICrmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgcHRyKCk6IGNzbVBhaXI8X0tleVQsIF9WYWxUPiB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLl9rZXlWYWx1ZXNbdGhpcy5faW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICE95ryU566XXG4gICAgICovXG4gICAgcHVibGljIG5vdEVxdWFsKGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXggfHwgdGhpcy5fbWFwICE9IGl0ZS5fbWFwO1xuICAgIH1cblxuICAgIF9pbmRleDogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICBfbWFwOiBjc21NYXA8X0tleVQsIF9WYWxUPjsgLy8g44Kz44Oz44OG44OKXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOefqeW9ouW9oueKtu+8iOW6p+aomeODu+mVt+OBleOBr2Zsb2F05YCk77yJ44KS5a6a576p44GZ44KL44Kv44Op44K5XG4gICAqL1xuICBleHBvcnQgY2xhc3MgY3NtUmVjdCB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIHgg5bem56uvWOW6p+aomVxuICAgICAqIEBwYXJhbSB5IOS4iuerr1nluqfmqJlcbiAgICAgKiBAcGFyYW0gdyDluYVcbiAgICAgKiBAcGFyYW0gaCDpq5jjgZVcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeD86IG51bWJlciwgeT86IG51bWJlciwgdz86IG51bWJlciwgaD86IG51bWJlcikge1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICB0aGlzLndpZHRoID0gdztcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnn6nlvaLkuK3lpK7jga5Y5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLnggKyAwLjUgKiB0aGlzLndpZHRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOefqeW9ouS4reWkruOBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMueSArIDAuNSAqIHRoaXMuaGVpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPs+WBtOOBrljluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmlnaHQoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLnggKyB0aGlzLndpZHRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS4i+err+OBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Qm90dG9tKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog55+p5b2i44Gr5YCk44KS44K744OD44OI44GZ44KLXG4gICAgICogQHBhcmFtIHIg55+p5b2i44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIHNldFJlY3QocjogY3NtUmVjdCk6IHZvaWQge1xuICAgICAgdGhpcy54ID0gci54O1xuICAgICAgdGhpcy55ID0gci55O1xuICAgICAgdGhpcy53aWR0aCA9IHIud2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IHIuaGVpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOefqeW9ouS4reWkruOCkui7uOOBq+OBl+OBpue4puaoquOCkuaLoee4ruOBmeOCi1xuICAgICAqIEBwYXJhbSB3IOW5heaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xuICAgICAqIEBwYXJhbSBoIOmrmOOBleaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xuICAgICAqL1xuICAgIHB1YmxpYyBleHBhbmQodzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICAgIHRoaXMueCAtPSB3O1xuICAgICAgdGhpcy55IC09IGg7XG4gICAgICB0aGlzLndpZHRoICs9IHcgKiAyLjA7XG4gICAgICB0aGlzLmhlaWdodCArPSBoICogMi4wO1xuICAgIH1cblxuICAgIHB1YmxpYyB4OiBudW1iZXI7IC8vIOW3puerr1jluqfmqJlcbiAgICBwdWJsaWMgeTogbnVtYmVyOyAvLyDkuIrnq69Z5bqn5qiZXG4gICAgcHVibGljIHdpZHRoOiBudW1iZXI7IC8vIOW5hVxuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjsgLy8g6auY44GVXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OCr+ODqeOCueOAglxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIGNzbVN0cmluZyB7XG4gICAgLyoqXG4gICAgICog5paH5a2X5YiX44KS5b6M5pa544Gr6L+95Yqg44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYyDov73liqDjgZnjgovmloflrZfliJdcbiAgICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xuICAgICAqL1xuICAgIHB1YmxpYyBhcHBlbmQoYzogc3RyaW5nLCBsZW5ndGg/OiBudW1iZXIpOiBjc21TdHJpbmcge1xuICAgICAgdGhpcy5zICs9IGxlbmd0aCAhPT0gdW5kZWZpbmVkID8gYy5zdWJzdHIoMCwgbGVuZ3RoKSA6IGM7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaWh+Wtl+OCteOCpOOCuuOCkuaLoeW8teOBl+OBpuaWh+Wtl+OCkuWfi+OCgeOCi1xuICAgICAqIEBwYXJhbSBsZW5ndGggICAg5ouh5by144GZ44KL5paH5a2X5pWwXG4gICAgICogQHBhcmFtIHYgICAgICAgICDln4vjgoHjgovmloflrZdcbiAgICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xuICAgICAqL1xuICAgIHB1YmxpYyBleHBhbnNpb24obGVuZ3RoOiBudW1iZXIsIHY6IHN0cmluZyk6IGNzbVN0cmluZyB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKHYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmloflrZfliJfjga7plbfjgZXjgpLjg5DjgqTjg4jmlbDjgaflj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Qnl0ZXMoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodGhpcy5zKS5yZXBsYWNlKC8lLi4vZywgJ3gnKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5paH5a2X5YiX44Gu6ZW344GV44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMucy5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5paH5a2X5YiX5q+U6LyDIDxcbiAgICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWwj+OBleOBhFxuICAgICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXG4gICAgICovXG4gICAgcHVibGljIGlzTGVzcyhzOiBjc21TdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLnMgPCBzLnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5paH5a2X5YiX5q+U6LyDID5cbiAgICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWkp+OBjeOBhFxuICAgICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXG4gICAgICovXG4gICAgcHVibGljIGlzR3JlYXQoczogY3NtU3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5zID4gcy5zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaWh+Wtl+WIl+avlOi8gyA9PVxuICAgICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xuICAgICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44Go562J44GX44GEXG4gICAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgajnlbDjgarjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNFcXVhbChzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLnMgPT0gcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmloflrZfliJfjgYznqbrjgYvjganjgYbjgYtcbiAgICAgKiBAcmV0dXJuIHRydWU6IOepuuOBruaWh+Wtl+WIl1xuICAgICAqIEByZXR1cm4gZmFsc2U6IOWApOOBjOioreWumuOBleOCjOOBpuOBhOOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMucy5sZW5ndGggPT0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioczogc3RyaW5nKSB7XG4gICAgICB0aGlzLnMgPSBzO1xuICAgIH1cblxuICAgIHM6IHN0cmluZztcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44OZ44Kv44K/44O85Z6L77yI5Y+v5aSJ6YWN5YiX5Z6L77yJXG4gICAqL1xuICBleHBvcnQgY2xhc3MgY3NtVmVjdG9yPFQ+IHtcbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKiBAcGFyYW0gaW5paXRhbENhcGFjaXR5IOWIneacn+WMluW+jOOBruOCreODo+ODkeOCt+ODhuOCo+OAguODh+ODvOOCv+OCteOCpOOCuuOBr19jYXBhY2l0eSAqIHNpemVvZihUKVxuICAgICAqIEBwYXJhbSB6ZXJvQ2xlYXIgdHJ1ZeOBquOCieWIneacn+WMluaZguOBq+eiuuS/neOBl+OBn+mgmOWfn+OCkjDjgafln4vjgoHjgotcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihpbml0aWFsQ2FwYWNpdHkgPSAwKSB7XG4gICAgICBpZiAoaW5pdGlhbENhcGFjaXR5IDwgMSkge1xuICAgICAgICB0aGlzLl9wdHIgPSBbXTtcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheShpbml0aWFsQ2FwYWNpdHkpO1xuICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IGluaXRpYWxDYXBhY2l0eTtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44Oz44OH44OD44Kv44K544Gn5oyH5a6a44GX44Gf6KaB57Sg44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGF0KGluZGV4OiBudW1iZXIpOiBUIHtcbiAgICAgIHJldHVybiB0aGlzLl9wdHJbaW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuOCu+ODg+ODiFxuICAgICAqIEBwYXJhbSBpbmRleCDopoHntKDjgpLjgrvjg4Pjg4jjgZnjgovjgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICAgKiBAcGFyYW0gdmFsdWUg44K744OD44OI44GZ44KL6KaB57SgXG4gICAgICovXG4gICAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgICAgdGhpcy5fcHRyW2luZGV4XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQob2Zmc2V0ID0gMCk6IFRbXSB7XG4gICAgICBjb25zdCByZXQ6IFRbXSA9IG5ldyBBcnJheTxUPigpO1xuICAgICAgZm9yIChsZXQgaSA9IG9mZnNldDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xuICAgICAgICByZXQucHVzaCh0aGlzLl9wdHJbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwdXNoQmFja+WHpueQhuOAgeOCs+ODs+ODhuODiuOBq+aWsOOBn+OBquimgee0oOOCkui/veWKoOOBmeOCi1xuICAgICAqIEBwYXJhbSB2YWx1ZSBQdXNoQmFja+WHpueQhuOBp+i/veWKoOOBmeOCi+WApFxuICAgICAqL1xuICAgIHB1YmxpYyBwdXNoQmFjayh2YWx1ZTogVCk6IHZvaWQge1xuICAgICAgaWYgKHRoaXMuX3NpemUgPj0gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkoXG4gICAgICAgICAgdGhpcy5fY2FwYWNpdHkgPT0gMCA/IGNzbVZlY3Rvci5zX2RlZmF1bHRTaXplIDogdGhpcy5fY2FwYWNpdHkgKiAyXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3B0clt0aGlzLl9zaXplKytdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu5YWo6KaB57Sg44KS6Kej5pS+44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgICAgdGhpcy5fcHRyLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbDjgpLov5TjgZlcbiAgICAgKiBAcmV0dXJuIOOCs+ODs+ODhuODiuOBruimgee0oOaVsFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7lhajopoHntKDjgavlr77jgZfjgabku6PlhaXlh6bnkIbjgpLooYzjgYZcbiAgICAgKiBAcGFyYW0gbmV3U2l6ZSDku6PlhaXlh6bnkIblvozjga7jgrXjgqTjgrpcbiAgICAgKiBAcGFyYW0gdmFsdWUg6KaB57Sg44Gr5Luj5YWl44GZ44KL5YCkXG4gICAgICovXG4gICAgcHVibGljIGFzc2lnbihuZXdTaXplOiBudW1iZXIsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgICBjb25zdCBjdXJTaXplID0gdGhpcy5fc2l6ZTtcblxuICAgICAgaWYgKGN1clNpemUgPCBuZXdTaXplKSB7XG4gICAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KG5ld1NpemUpOyAvLyBjYXBhY2l0eeabtOaWsFxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgICB0aGlzLl9wdHJbaV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44K144Kk44K65aSJ5pu0XG4gICAgICovXG4gICAgcHVibGljIHJlc2l6ZShuZXdTaXplOiBudW1iZXIsIHZhbHVlOiBUID0gbnVsbCk6IHZvaWQge1xuICAgICAgdGhpcy51cGRhdGVTaXplKG5ld1NpemUsIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrXjgqTjgrrlpInmm7RcbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlU2l6ZShcbiAgICAgIG5ld1NpemU6IG51bWJlcixcbiAgICAgIHZhbHVlOiBhbnkgPSBudWxsLFxuICAgICAgY2FsbFBsYWNlbWVudE5ldyA9IHRydWVcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IGN1clNpemU6IG51bWJlciA9IHRoaXMuX3NpemU7XG5cbiAgICAgIGlmIChjdXJTaXplIDwgbmV3U2l6ZSkge1xuICAgICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgLy8gY2FwYWNpdHnmm7TmlrBcblxuICAgICAgICBpZiAoY2FsbFBsYWNlbWVudE5ldykge1xuICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHRoaXMuX3NpemU7IGkgPCBuZXdTaXplOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBuZXdcbiAgICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShuZXcgdmFsdWUoKSkpO1xuICAgICAgICAgICAgfSAvLyDjg5fjg6rjg5/jg4bjgqPjg5blnovjgarjga7jgaflgKTmuKHjgZdcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9wdHJbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gdGhpcy5fc2l6ZTsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBuZXdTaXplIDw9IHRoaXMuX3NpemVcbiAgICAgICAgLy8tLS1cbiAgICAgICAgY29uc3Qgc3ViID0gdGhpcy5fc2l6ZSAtIG5ld1NpemU7XG4gICAgICAgIHRoaXMuX3B0ci5zcGxpY2UodGhpcy5fc2l6ZSAtIHN1Yiwgc3ViKTsgLy8g5LiN6KaB44Gq44Gu44Gn56C05qOE44GZ44KLXG4gICAgICB9XG4gICAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjgavjgrPjg7Pjg4bjg4ropoHntKDjgpLmjL/lhaXjgZnjgotcbiAgICAgKiBAcGFyYW0gcG9zaXRpb24g5oy/5YWl44GZ44KL5L2N572uXG4gICAgICogQHBhcmFtIGJlZ2luIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrumWi+Wni+S9jee9rlxuICAgICAqIEBwYXJhbSBlbmQg5oy/5YWl44GZ44KL44Kz44Oz44OG44OK44Gu57WC56uv5L2N572uXG4gICAgICovXG4gICAgcHVibGljIGluc2VydChcbiAgICAgIHBvc2l0aW9uOiBpdGVyYXRvcjxUPixcbiAgICAgIGJlZ2luOiBpdGVyYXRvcjxUPixcbiAgICAgIGVuZDogaXRlcmF0b3I8VD5cbiAgICApOiB2b2lkIHtcbiAgICAgIGxldCBkc3RTaTogbnVtYmVyID0gcG9zaXRpb24uX2luZGV4O1xuICAgICAgY29uc3Qgc3JjU2k6IG51bWJlciA9IGJlZ2luLl9pbmRleDtcbiAgICAgIGNvbnN0IHNyY0VpOiBudW1iZXIgPSBlbmQuX2luZGV4O1xuXG4gICAgICBjb25zdCBhZGRDb3VudDogbnVtYmVyID0gc3JjRWkgLSBzcmNTaTtcblxuICAgICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkodGhpcy5fc2l6ZSArIGFkZENvdW50KTtcblxuICAgICAgLy8g5oy/5YWl55So44Gu5pei5a2Y44OH44O844K/44KS44K344OV44OI44GX44Gm6ZqZ6ZaT44KS5L2c44KLXG4gICAgICBjb25zdCBhZGRTaXplID0gdGhpcy5fc2l6ZSAtIGRzdFNpO1xuICAgICAgaWYgKGFkZFNpemUgPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5fcHRyLnNwbGljZShkc3RTaSArIGksIDAsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHNyY1NpOyBpIDwgc3JjRWk7IGkrKywgZHN0U2krKykge1xuICAgICAgICB0aGlzLl9wdHJbZHN0U2ldID0gYmVnaW4uX3ZlY3Rvci5fcHRyW2ldO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zaXplID0gdGhpcy5fc2l6ZSArIGFkZENvdW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBi+OCieOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBl+OBn+imgee0oOOCkuWJiumZpOOBmeOCi1xuICAgICAqIEBwYXJhbSBpbmRleCDjgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBAcmV0dXJuIHRydWUg5YmK6Zmk5a6f6KGMXG4gICAgICogQHJldHVybiBmYWxzZSDliYrpmaTnr4Tlm7LlpJZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgIGlmIChpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIOWJiumZpOevhOWbsuWkllxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wdHIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44GL44KJ6KaB57Sg44KS5YmK6Zmk44GX44Gm5LuW44Gu6KaB57Sg44KS44K344OV44OI44GZ44KLXG4gICAgICogQHBhcmFtIGl0ZSDliYrpmaTjgZnjgovopoHntKBcbiAgICAgKi9cbiAgICBwdWJsaWMgZXJhc2UoaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcbiAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBpdGUuX2luZGV4O1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9zaXplIDw9IGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxuICAgICAgfVxuXG4gICAgICAvLyDliYrpmaRcbiAgICAgIHRoaXMuX3B0ci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgLS10aGlzLl9zaXplO1xuXG4gICAgICBjb25zdCBpdGUyOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCBpbmRleCk7IC8vIOe1guS6hlxuICAgICAgcmV0dXJuIGl0ZTI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXG4gICAgICogQHBhcmFtIG5ld1NpemUg5paw44Gf44Gq44Kt44Oj44OR44K344OG44Kj44CC5byV5pWw44Gu5YCk44GM54++5Zyo44Gu44K144Kk44K65pyq5rqA44Gu5aC05ZCI44Gv5L2V44KC44GX44Gq44GELlxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBpZiAobmV3U2l6ZSA+IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICAgIGlmICh0aGlzLl9jYXBhY2l0eSA9PSAwKSB7XG4gICAgICAgICAgdGhpcy5fcHRyID0gbmV3IEFycmF5KG5ld1NpemUpO1xuICAgICAgICAgIHRoaXMuX2NhcGFjaXR5ID0gbmV3U2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9wdHIubGVuZ3RoID0gbmV3U2l6ZTtcbiAgICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IG5ld1NpemU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg4rjga7lhYjpoK3opoHntKDjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgYmVnaW4oKTogaXRlcmF0b3I8VD4ge1xuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxUPiA9XG4gICAgICAgIHRoaXMuX3NpemUgPT0gMCA/IHRoaXMuZW5kKCkgOiBuZXcgaXRlcmF0b3I8VD4odGhpcywgMCk7XG4gICAgICByZXR1cm4gaXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODiuOBrue1guerr+imgee0oOOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBlbmQoKTogaXRlcmF0b3I8VD4ge1xuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCB0aGlzLl9zaXplKTtcbiAgICAgIHJldHVybiBpdGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9mZnNldChvZmZzZXQ6IG51bWJlcik6IGNzbVZlY3RvcjxUPiB7XG4gICAgICBjb25zdCBuZXdWZWN0b3IgPSBuZXcgY3NtVmVjdG9yPFQ+KCk7XG4gICAgICBuZXdWZWN0b3IuX3B0ciA9IHRoaXMuZ2V0KG9mZnNldCk7XG4gICAgICBuZXdWZWN0b3IuX3NpemUgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcbiAgICAgIG5ld1ZlY3Rvci5fY2FwYWNpdHkgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcblxuICAgICAgcmV0dXJuIG5ld1ZlY3RvcjtcbiAgICB9XG5cbiAgICBfcHRyOiBUW107IC8vIOOCs+ODs+ODhuODiuOBruWFiOmgreOCouODieODrOOCuVxuICAgIF9zaXplOiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruimgee0oOaVsFxuICAgIF9jYXBhY2l0eTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgq3jg6Pjg5Hjgrfjg4bjgqNcblxuICAgIHN0YXRpYyByZWFkb25seSBzX2RlZmF1bHRTaXplID0gMTA7IC8vIOOCs+ODs+ODhuODiuWIneacn+WMluOBruODh+ODleOCqeODq+ODiOOCteOCpOOCulxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIGl0ZXJhdG9yPFQ+IHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iodj86IGNzbVZlY3RvcjxUPiwgaW5kZXg/OiBudW1iZXIpIHtcbiAgICAgIHRoaXMuX3ZlY3RvciA9IHYgIT0gdW5kZWZpbmVkID8gdiA6IG51bGw7XG4gICAgICB0aGlzLl9pbmRleCA9IGluZGV4ICE9IHVuZGVmaW5lZCA/IGluZGV4IDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDku6PlhaVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0KGl0ZTogaXRlcmF0b3I8VD4pOiBpdGVyYXRvcjxUPiB7XG4gICAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgICB0aGlzLl92ZWN0b3IgPSBpdGUuX3ZlY3RvcjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWJjee9ruOBjSsr5ryU566XXG4gICAgICovXG4gICAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgICArK3RoaXMuX2luZGV4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YmN572u44GNLS3mvJTnrpdcbiAgICAgKi9cbiAgICBwdWJsaWMgcHJlRGVjcmVtZW50KCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICAgIC0tdGhpcy5faW5kZXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvoznva7jgY0rK+a8lOeul+WtkFxuICAgICAqL1xuICAgIHB1YmxpYyBpbmNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMuX3ZlY3RvciwgdGhpcy5faW5kZXgrKyk7XG4gICAgICB0aGlzLl92ZWN0b3IgPSBpdGVvbGQuX3ZlY3RvcjtcbiAgICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW+jOe9ruOBjS0t5ryU566X5a2QXG4gICAgICovXG4gICAgcHVibGljIGRlY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgICBjb25zdCBpdGVvbGQgPSBuZXcgaXRlcmF0b3I8VD4odGhpcy5fdmVjdG9yLCB0aGlzLl9pbmRleC0tKTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgICB0aGlzLl92ZWN0b3IgPSBpdGVvbGQuX3ZlY3RvcjtcbiAgICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHB0clxuICAgICAqL1xuICAgIHB1YmxpYyBwdHIoKTogVCB7XG4gICAgICByZXR1cm4gdGhpcy5fdmVjdG9yLl9wdHJbdGhpcy5faW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICAgKi9cbiAgICBwdWJsaWMgc3Vic3RpdHV0aW9uKGl0ZTogaXRlcmF0b3I8VD4pOiBpdGVyYXRvcjxUPiB7XG4gICAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgICB0aGlzLl92ZWN0b3IgPSBpdGUuX3ZlY3RvcjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICE95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAgICovXG4gICAgcHVibGljIG5vdEVxdWFsKGl0ZTogaXRlcmF0b3I8VD4pOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbmRleCAhPSBpdGUuX2luZGV4IHx8IHRoaXMuX3ZlY3RvciAhPSBpdGUuX3ZlY3RvcjtcbiAgICB9XG5cbiAgICBfaW5kZXg6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgX3ZlY3RvcjogY3NtVmVjdG9yPFQ+OyAvLyDjgrPjg7Pjg4bjg4pcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHtcbiAgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayxcbiAgTG9nTGV2ZWxcbn0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7XG4gIENTTV9MT0dfTEVWRUwsXG4gIENTTV9MT0dfTEVWRUxfVkVSQk9TRSxcbiAgQ1NNX0xPR19MRVZFTF9ERUJVRyxcbiAgQ1NNX0xPR19MRVZFTF9JTkZPLFxuICBDU01fTE9HX0xFVkVMX1dBUk5JTkcsXG4gIENTTV9MT0dfTEVWRUxfRVJST1Jcbn0gZnJvbSAnLi4vY3ViaXNtZnJhbWV3b3JrY29uZmlnJztcblxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50ID0gKGxldmVsOiBMb2dMZXZlbCwgZm10OiBzdHJpbmcsIGFyZ3M6IGFueVtdKSA9PiB7XG4gIExpdmUyREN1YmlzbUZyYW1ld29yay5DdWJpc21EZWJ1Zy5wcmludChsZXZlbCwgJ1tDU01dJyArIGZtdCwgYXJncyk7XG59O1xuXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nUHJpbnRJbiA9IChsZXZlbDogTG9nTGV2ZWwsIGZtdDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4ge1xuICBDdWJpc21Mb2dQcmludChsZXZlbCwgZm10ICsgJ1xcbicsIGFyZ3MpO1xufTtcblxuZXhwb3J0IGNvbnN0IENTTV9BU1NFUlQgPSAoZXhwcjogYW55KSA9PiB7XG4gIGNvbnNvbGUuYXNzZXJ0KGV4cHIpO1xufTtcblxuZXhwb3J0IGxldCBDdWJpc21Mb2dWZXJib3NlOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dEZWJ1ZzogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nSW5mbzogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nV2FybmluZzogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nRXJyb3I6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5cbmlmIChDU01fTE9HX0xFVkVMIDw9IENTTV9MT0dfTEVWRUxfVkVSQk9TRSkge1xuICBDdWJpc21Mb2dWZXJib3NlID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfVmVyYm9zZSwgJ1tWXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0RlYnVnID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRGVidWcsICdbRF0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfSW5mbywgJ1tJXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfREVCVUcpIHtcbiAgQ3ViaXNtTG9nRGVidWcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9EZWJ1ZywgJ1tEXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9JTkZPKSB7XG4gIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9XQVJOSU5HKSB7XG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfRVJST1IpIHtcbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufVxuXG4vLy0tLS0tLS0tLS0tLSBMSVZFMkQgTkFNRVNQQUNFIC0tLS0tLS0tLS0tLVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvKipcbiAgICog44OH44OQ44OD44Kw55So44Gu44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K544CCXG4gICAqIOODreOCsOOBruWHuuWKm+OAgeODkOOCpOODiOOBruODgOODs+ODl+OBquOBqVxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbURlYnVnIHtcbiAgICAvKipcbiAgICAgKiDjg63jgrDjgpLlh7rlipvjgZnjgovjgILnrKzkuIDlvJXmlbDjgavjg63jgrDjg6zjg5njg6vjgpLoqK3lrprjgZnjgovjgIJcbiAgICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbG9nTGV2ZWwg44Ot44Kw44Os44OZ44Or44Gu6Kit5a6aXG4gICAgICogQHBhcmFtIGZvcm1hdCDmm7jlvI/ku5jjgY3mloflrZfliJdcbiAgICAgKiBAcGFyYW0gYXJncyDlj6/lpInplbflvJXmlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHByaW50KFxuICAgICAgbG9nTGV2ZWw6IExvZ0xldmVsLFxuICAgICAgZm9ybWF0OiBzdHJpbmcsXG4gICAgICBhcmdzPzogYW55W11cbiAgICApOiB2b2lkIHtcbiAgICAgIC8vIOOCquODl+OCt+ODp+ODs+OBp+ioreWumuOBleOCjOOBn+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuS4i+WbnuOCi+WgtOWQiOOBr+ODreOCsOOBq+WHuuOBleOBquOBhFxuICAgICAgaWYgKGxvZ0xldmVsIDwgY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yay5nZXRMb2dnaW5nTGV2ZWwoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvZ1ByaW50OiBMaXZlMkRDdWJpc21Db3JlLmNzbUxvZ0Z1bmN0aW9uID1cbiAgICAgICAgY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yay5jb3JlTG9nRnVuY3Rpb247XG5cbiAgICAgIGlmICghbG9nUHJpbnQpIHJldHVybjtcblxuICAgICAgY29uc3QgYnVmZmVyOiBzdHJpbmcgPSBmb3JtYXQucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIChtLCBrKSA9PiB7XG4gICAgICAgIHJldHVybiBhcmdzW2tdO1xuICAgICAgfSk7XG4gICAgICBsb2dQcmludChidWZmZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODh+ODvOOCv+OBi+OCieaMh+WumuOBl+OBn+mVt+OBleOBoOOBkeODgOODs+ODl+WHuuWKm+OBmeOCi+OAglxuICAgICAqIEN1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCnmmYLjgavjgqrjg5fjgrfjg6fjg7PjgafoqK3lrprjgZXjgozjgZ/jg63jgrDlh7rlipvjg6zjg5njg6vjgpLkuIvlm57jgovloLTlkIjjga/jg63jgrDjgavlh7rjgZXjgarjgYTjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsb2dMZXZlbCDjg63jgrDjg6zjg5njg6vjga7oqK3lrppcbiAgICAgKiBAcGFyYW0gZGF0YSDjg4Djg7Pjg5fjgZnjgovjg4fjg7zjgr9cbiAgICAgKiBAcGFyYW0gbGVuZ3RoIOODgOODs+ODl+OBmeOCi+mVt+OBlVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZHVtcEJ5dGVzKFxuICAgICAgbG9nTGV2ZWw6IExvZ0xldmVsLFxuICAgICAgZGF0YTogVWludDhBcnJheSxcbiAgICAgIGxlbmd0aDogbnVtYmVyXG4gICAgKTogdm9pZCB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpICUgMTYgPT0gMCAmJiBpID4gMCkgdGhpcy5wcmludChsb2dMZXZlbCwgJ1xcbicpO1xuICAgICAgICBlbHNlIGlmIChpICUgOCA9PSAwICYmIGkgPiAwKSB0aGlzLnByaW50KGxvZ0xldmVsLCAnICAnKTtcbiAgICAgICAgdGhpcy5wcmludChsb2dMZXZlbCwgJ3swfSAnLCBbZGF0YVtpXSAmIDB4ZmZdKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmludChsb2dMZXZlbCwgJ1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHByaXZhdGUg44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG4gIH1cbn1cblxuLy8tLS0tLS0tLS0tLS0gTElWRTJEIE5BTUVTUEFDRSAtLS0tLS0tLS0tLS1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtbWFwIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUxvZ0luZm8gfSBmcm9tICcuL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7IHN0cnRvZCB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBjc21WZWN0b3JfaXRlcmF0b3IgPSBjc212ZWN0b3IuaXRlcmF0b3I7XG5pbXBvcnQgY3NtTWFwID0gY3NtbWFwLmNzbU1hcDtcbmltcG9ydCBjc21NYXBfaXRlcmF0b3IgPSBjc21tYXAuaXRlcmF0b3I7XG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICAvLyBTdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgp44Gn5Yid5pyf5YyW44GZ44KLXG4gIGNvbnN0IENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0ggPSAnRXJyb3I6IHR5cGUgbWlzbWF0Y2gnO1xuICBjb25zdCBDU01fSlNPTl9FUlJPUl9JTkRFWF9PRl9CT1VORFMgPSAnRXJyb3I6IGluZGV4IG91dCBvZiBib3VuZHMnO1xuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Ko44Os44Oh44Oz44OI44Gu6KaB57Sg44Gu5Z+65bqV44Kv44Op44K544CCXG4gICAqL1xuICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFsdWUge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmloflrZfliJflnovjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlPzogc3RyaW5nLCBpbmRlbnQ/OiBzdHJpbmcpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmloflrZfliJflnovjgafov5TjgZkoc3RyaW5nKVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSYXdTdHJpbmcoZGVmYXVsdFZhbHVlPzogc3RyaW5nLCBpbmRlbnQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZSwgaW5kZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxuICAgICAqL1xuICAgIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9GbG9hdChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS55yf5YG95YCk44Gn6L+U44GZKGJvb2xlYW4pXG4gICAgICovXG4gICAgcHVibGljIHRvQm9vbGVhbihkZWZhdWx0VmFsdWUgPSBmYWxzZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgrXjgqTjgrrjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS6YWN5YiX44Gn6L+U44GZKFZhbHVlW10pXG4gICAgICovXG4gICAgcHVibGljIGdldEFycmF5KGRlZmF1bHRWYWx1ZTogVmFsdWVbXSA9IG51bGwpOiBWYWx1ZVtdIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS44Kz44Oz44OG44OK44Gn6L+U44GZKGFycmF5KVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWZWN0b3IoZGVmYXVsdFZhbHVlPzogY3NtVmVjdG9yPFZhbHVlPik6IGNzbVZlY3RvcjxWYWx1ZT4ge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLjg57jg4Pjg5fjgafov5TjgZkoY3NtTWFwPGNzbVN0cmluZywgVmFsdWU+KVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5re75a2X5ryU566X5a2QW2luZGV4XVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWYWx1ZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFZhbHVlIHtcbiAgICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vlrZfmvJTnrpflrZBbc3RyaW5nIHwgY3NtU3RyaW5nXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWYWx1ZUJ5U3RyaW5nKHM6IHN0cmluZyB8IGNzbVN0cmluZyk6IFZhbHVlIHtcbiAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODnuODg+ODl+OBruOCreODvOS4gOimp+OCkuOCs+ODs+ODhuODiuOBp+i/lOOBmVxuICAgICAqXG4gICAgICogQHJldHVybiDjg57jg4Pjg5fjga7jgq3jg7zjga7kuIDopqdcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0S2V5cygpOiBjc21WZWN0b3I8c3RyaW5nPiB7XG4gICAgICByZXR1cm4gVmFsdWUuc19kdW1teUtleXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYzjgqjjg6njg7zlgKTjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYxudWxs44Gq44KJdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc051bGwoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYznnJ/lgb3lgKTjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOaVsOWApOWei+OBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOaWh+Wtl+WIl+OBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNTdHJpbmcoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYzphY3liJfjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzQXJyYXkoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYzjg57jg4Pjg5flnovjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjgavjgqjjg6njg7zlgKTjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKGVycm9yU3RyOiBzdHJpbmcpOiBWYWx1ZSB7XG4gICAgICByZXR1cm4gSnNvbkVycm9yLmVycm9yVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yid5pyf5YyW55So44Oh44K944OD44OJXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgpOiB2b2lkIHtcbiAgICAgIEpzb25Cb29sZWFuLnRydWVWYWx1ZSA9IG5ldyBKc29uQm9vbGVhbih0cnVlKTtcbiAgICAgIEpzb25Cb29sZWFuLmZhbHNlVmFsdWUgPSBuZXcgSnNvbkJvb2xlYW4oZmFsc2UpO1xuXG4gICAgICBKc29uRXJyb3IuZXJyb3JWYWx1ZSA9IG5ldyBKc29uRXJyb3IoJ0VSUk9SJywgdHJ1ZSk7XG4gICAgICB0aGlzLm51bGxWYWx1ZSA9IG5ldyBKc29uTnVsbHZhbHVlKCk7XG5cbiAgICAgIFZhbHVlLnNfZHVtbXlLZXlzID0gbmV3IGNzbVZlY3RvcjxzdHJpbmc+KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oq44Oq44O844K555So44Oh44K944OD44OJXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCgpOiB2b2lkIHtcbiAgICAgIEpzb25Cb29sZWFuLnRydWVWYWx1ZSA9IG51bGw7XG4gICAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbnVsbDtcbiAgICAgIEpzb25FcnJvci5lcnJvclZhbHVlID0gbnVsbDtcbiAgICAgIFZhbHVlLm51bGxWYWx1ZSA9IG51bGw7XG4gICAgICBWYWx1ZS5zX2R1bW15S2V5cyA9IG51bGw7XG5cbiAgICAgIEpzb25Cb29sZWFuLnRydWVWYWx1ZSA9IG51bGw7XG4gICAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbnVsbDtcbiAgICAgIEpzb25FcnJvci5lcnJvclZhbHVlID0gbnVsbDtcbiAgICAgIFZhbHVlLm51bGxWYWx1ZSA9IG51bGw7XG4gICAgICBWYWx1ZS5zX2R1bW15S2V5cyA9IG51bGw7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9zdHJpbmdCdWZmZXI6IHN0cmluZzsgLy8g5paH5a2X5YiX44OQ44OD44OV44KhXG5cbiAgICBwcml2YXRlIHN0YXRpYyBzX2R1bW15S2V5czogY3NtVmVjdG9yPHN0cmluZz47IC8vIOODgOODn+ODvOOCreODvFxuXG4gICAgcHVibGljIHN0YXRpYyBlcnJvclZhbHVlOiBWYWx1ZTsgLy8g5LiA5pmC55qE44Gq6L+U44KK5YCk44Go44GX44Gm6L+U44GZ44Ko44Op44O844CCIEN1YmlzbUZyYW1ld29yazo6RGlzcG9zZeOBmeOCi+OBvuOBp+OBr2RlbGV0ZeOBl+OBquOBhFxuICAgIHB1YmxpYyBzdGF0aWMgbnVsbFZhbHVlOiBWYWx1ZTsgLy8g5LiA5pmC55qE44Gq6L+U44KK5YCk44Go44GX44Gm6L+U44GZTlVMTOOAgiAgIEN1YmlzbUZyYW1ld29yazo6RGlzcG9zZeOBmeOCi+OBvuOBp+OBr2RlbGV0ZeOBl+OBquOBhFxuICB9XG5cbiAgLyoqXG4gICAqIEFzY2lp5paH5a2X44Gu44G/5a++5b+c44GX44Gf5pyA5bCP6ZmQ44Gu6Lu96YePSlNPTuODkeODvOOCteOAglxuICAgKiDku5Xmp5jjga9KU09O44Gu44K144OW44K744OD44OI44Go44Gq44KL44CCXG4gICAqIOioreWumuODleOCoeOCpOODqyhtb2RlbDMuanNvbinjgarjganjga7jg63jg7zjg4nnlKhcbiAgICpcbiAgICogW+acquWvvuW/nOmgheebrl1cbiAgICog44O75pel5pys6Kqe44Gq44Gp44Gu6Z2eQVNDSUnmloflrZdcbiAgICog44O7ZeOBq+OCiOOCi+aMh+aVsOihqOePvlxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEN1YmlzbUpzb24ge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI/OiBBcnJheUJ1ZmZlciwgbGVuZ3RoPzogbnVtYmVyKSB7XG4gICAgICB0aGlzLl9lcnJvciA9IG51bGw7XG4gICAgICB0aGlzLl9saW5lQ291bnQgPSAwO1xuICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG5cbiAgICAgIGlmIChidWZmZXIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMucGFyc2VCeXRlcyhidWZmZXIsIGxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OQ44Kk44OI44OH44O844K/44GL44KJ55u05o6l44Ot44O844OJ44GX44Gm44OR44O844K544GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnVmZmVyIOODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOCteOCpOOCulxuICAgICAqIEByZXR1cm4gQ3ViaXNtSnNvbuOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCueOAguWkseaVl+OBl+OBn+OCiU5VTExcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICAgIGNvbnN0IGpzb24gPSBuZXcgQ3ViaXNtSnNvbigpO1xuICAgICAgY29uc3Qgc3VjY2VlZGVkOiBib29sZWFuID0ganNvbi5wYXJzZUJ5dGVzKGJ1ZmZlciwgc2l6ZSk7XG5cbiAgICAgIGlmICghc3VjY2VlZGVkKSB7XG4gICAgICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODkeODvOOCueOBl+OBn0pTT07jgqrjg5bjgrjjgqfjgq/jg4jjga7op6PmlL7lh6bnkIZcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnN0YW5jZSBDdWJpc21Kc29u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBkZWxldGUoaW5zdGFuY2U6IEN1YmlzbUpzb24pIHtcbiAgICAgIGluc3RhbmNlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu44Or44O844OI6KaB57Sg44KS6L+U44GZXG4gICAgICovXG4gICAgcHVibGljIGdldFJvb3QoKTogVmFsdWUge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIFVuaWNvZGXjga7jg5DjgqTjg4rjg6rjgpJTdHJpbmfjgavlpInmj5tcbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXIg5aSJ5o+b44GZ44KL44OQ44Kk44OK44Oq44OH44O844K/XG4gICAgICogQHJldHVybiDlpInmj5vlvozjga7mloflrZfliJdcbiAgICAgKi9cbiAgICBwdWJsaWMgYXJyYXlCdWZmZXJUb1N0cmluZyhidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcbiAgICAgIGNvbnN0IHVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgbGV0IHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuOiBudW1iZXIgPSB1aW50OEFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHN0ciArPSAnJScgKyB0aGlzLnBhZCh1aW50OEFycmF5W2ldLnRvU3RyaW5nKDE2KSk7XG4gICAgICB9XG5cbiAgICAgIHN0ciA9IGRlY29kZVVSSUNvbXBvbmVudChzdHIpO1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgqjjg7PjgrPjg7zjg4njgIHjg5Hjg4fjgqPjg7PjgrBcbiAgICAgKi9cbiAgICBwcml2YXRlIHBhZChuOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIG4ubGVuZ3RoIDwgMiA/ICcwJyArIG4gOiBuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEpTT07jga7jg5Hjg7zjgrnjgpLlrp/ooYzjgZnjgotcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIOODkeODvOOCueWvvuixoeOBruODh+ODvOOCv+ODkOOCpOODiFxuICAgICAqIEBwYXJhbSBzaXplICAgICAg44OH44O844K/44OQ44Kk44OI44Gu44K144Kk44K6XG4gICAgICogcmV0dXJuIHRydWUgOiDmiJDlip9cbiAgICAgKiByZXR1cm4gZmFsc2U6IOWkseaVl1xuICAgICAqL1xuICAgIHB1YmxpYyBwYXJzZUJ5dGVzKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZW5kUG9zOiBudW1iZXJbXSA9IG5ldyBBcnJheSgxKTsgLy8g5Y+C54Wn5rih44GX44Gr44GZ44KL44Gf44KB6YWN5YiXXG4gICAgICBjb25zdCBkZWNvZGVCdWZmZXI6IHN0cmluZyA9IHRoaXMuYXJyYXlCdWZmZXJUb1N0cmluZyhidWZmZXIpO1xuICAgICAgdGhpcy5fcm9vdCA9IHRoaXMucGFyc2VWYWx1ZShkZWNvZGVCdWZmZXIsIHNpemUsIDAsIGVuZFBvcyk7XG5cbiAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICBsZXQgc3RyYnVmID0gJ1xcMCc7XG4gICAgICAgIHN0cmJ1ZiA9ICdKc29uIHBhcnNlIGVycm9yIDogQGxpbmUgJyArICh0aGlzLl9saW5lQ291bnQgKyAxKSArICdcXG4nO1xuICAgICAgICB0aGlzLl9yb290ID0gbmV3IEpzb25TdHJpbmcoc3RyYnVmKTtcblxuICAgICAgICBDdWJpc21Mb2dJbmZvKCd7MH0nLCB0aGlzLl9yb290LmdldFJhd1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9yb290ID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IG5ldyBKc29uRXJyb3IobmV3IGNzbVN0cmluZyh0aGlzLl9lcnJvciksIGZhbHNlKTsgLy8gcm9vdOOBr+ino+aUvuOBleOCjOOCi+OBruOBp+OCqOODqeODvOOCquODluOCuOOCp+OCr+ODiOOCkuWIpemAlOS9nOaIkOOBmeOCi1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg5Hjg7zjgrnmmYLjga7jgqjjg6njg7zlgKTjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UGFyc2VFcnJvcigpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODq+ODvOODiOimgee0oOOBruasoeOBruimgee0oOOBjOODleOCoeOCpOODq+OBrue1guerr+OBoOOBo+OBn+OCiXRydWXjgpLov5TjgZlcbiAgICAgKi9cbiAgICBwdWJsaWMgY2hlY2tFbmRPZkZpbGUoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdC5nZXRBcnJheSgpWzFdLmVxdWFscygnRU9GJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSlNPTuOCqOODrOODoeODs+ODiOOBi+OCiVZhbHVlKGZsb2F0LFN0cmluZyxWYWx1ZSosQXJyYXksbnVsbCx0cnVlLGZhbHNlKeOCkuODkeODvOOCueOBmeOCi1xuICAgICAqIOOCqOODrOODoeODs+ODiOOBruabuOW8j+OBq+W/nOOBmOOBpuWGhemDqOOBp1BhcnNlU3RyaW5nKCksIFBhcnNlT2JqZWN0KCksIFBhcnNlQXJyYXkoKeOCkuWRvOOBtlxuICAgICAqXG4gICAgICogQHBhcmFtICAgYnVmZmVyICAgICAgSlNPTuOCqOODrOODoeODs+ODiOOBruODkOODg+ODleOCoVxuICAgICAqIEBwYXJhbSAgIGxlbmd0aCAgICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxuICAgICAqIEBwYXJhbSAgIGJlZ2luICAgICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgICAqIEBwYXJhbSAgIG91dEVuZFBvcyAgIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxuICAgICAqIEByZXR1cm4gICAgICDjg5Hjg7zjgrnjgYvjgonlj5blvpfjgZfjgZ9WYWx1ZeOCquODluOCuOOCp+OCr+ODiFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBwYXJzZVZhbHVlKFxuICAgICAgYnVmZmVyOiBzdHJpbmcsXG4gICAgICBsZW5ndGg6IG51bWJlcixcbiAgICAgIGJlZ2luOiBudW1iZXIsXG4gICAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICAgKSB7XG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xuXG4gICAgICBsZXQgbzogVmFsdWUgPSBudWxsO1xuICAgICAgbGV0IGk6IG51bWJlciA9IGJlZ2luO1xuICAgICAgbGV0IGY6IG51bWJlcjtcblxuICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjOiBzdHJpbmcgPSBidWZmZXJbaV07XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgIGNhc2UgJy4nOlxuICAgICAgICAgIGNhc2UgJzAnOlxuICAgICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgIGNhc2UgJzInOlxuICAgICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgIGNhc2UgJzQnOlxuICAgICAgICAgIGNhc2UgJzUnOlxuICAgICAgICAgIGNhc2UgJzYnOlxuICAgICAgICAgIGNhc2UgJzcnOlxuICAgICAgICAgIGNhc2UgJzgnOlxuICAgICAgICAgIGNhc2UgJzknOiB7XG4gICAgICAgICAgICBjb25zdCBhZnRlclN0cmluZzogc3RyaW5nW10gPSBuZXcgQXJyYXkoMSk7IC8vIOWPgueFp+a4oeOBl+OBq+OBmeOCi+OBn+OCgVxuICAgICAgICAgICAgZiA9IHN0cnRvZChidWZmZXIuc2xpY2UoaSksIGFmdGVyU3RyaW5nKTtcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGJ1ZmZlci5pbmRleE9mKGFmdGVyU3RyaW5nWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSnNvbkZsb2F0KGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEpzb25TdHJpbmcoXG4gICAgICAgICAgICAgIHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpXG4gICAgICAgICAgICApOyAvLyBcXFwi44Gu5qyh44Gu5paH5a2X44GL44KJXG4gICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICBvID0gdGhpcy5wYXJzZUFycmF5KGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKTtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgbyA9IHRoaXMucGFyc2VPYmplY3QoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpO1xuICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgICAgY2FzZSAnbic6IC8vIG51bGzku6XlpJbjgavjgarjgYRcbiAgICAgICAgICAgIGlmIChpICsgMyA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICBvID0gbmV3IEpzb25OdWxsdmFsdWUoKTsgLy8g6Kej5pS+44Gn44GN44KL44KI44GG44Gr44GZ44KLXG4gICAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2UgbnVsbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICBjYXNlICd0JzogLy8gdHJ1ZeS7peWkluOBq+OBquOBhFxuICAgICAgICAgICAgaWYgKGkgKyAzIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG8gPSBKc29uQm9vbGVhbi50cnVlVmFsdWU7XG4gICAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2UgdHJ1ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICBjYXNlICdmJzogLy8gZmFsc2Xku6XlpJbjgavjgarjgYRcbiAgICAgICAgICAgIGlmIChpICsgNCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICBvID0gSnNvbkJvb2xlYW4uZmFsc2VWYWx1ZTtcbiAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnLCcgcG9zaXRpb25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgIGNhc2UgJywnOiAvLyBBcnJheSBzZXBhcmF0b3JcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICcsJyBwb3NpdGlvblwiO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgY2FzZSAnXSc6IC8vIOS4jeato+OBqu+9neOBoOOBjOOCueOCreODg+ODl+OBmeOCi+OAgumFjeWIl+OBruacgOW+jOOBq+S4jeimgeOBqiAsIOOBjOOBguOCi+OBqOaAneOCj+OCjOOCi1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaTsgLy8g5ZCM44GY5paH5a2X44KS5YaN5Yem55CGXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICBjYXNlICdcXHInOlxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyDjgrnjgq3jg4Pjg5dcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHZhbHVlJztcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOasoeOBruOAjFwi44CN44G+44Gn44Gu5paH5a2X5YiX44KS44OR44O844K544GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICBzdHJpbmcgIC0+ICDjg5Hjg7zjgrnlr77osaHjga7mloflrZfliJdcbiAgICAgKiBAcGFyYW0gICBsZW5ndGggIC0+ICDjg5Hjg7zjgrnjgZnjgovplbfjgZVcbiAgICAgKiBAcGFyYW0gICBiZWdpbiAgIC0+ICDjg5Hjg7zjgrnjgpLplovlp4vjgZnjgovkvY3nva5cbiAgICAgKiBAcGFyYW0gIG91dEVuZFBvcyAgIC0+ICDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cbiAgICAgKiBAcmV0dXJuICAgICAg44OR44O844K544GX44Gf5paHRuWtl+WIl+imgee0oFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBwYXJzZVN0cmluZyhcbiAgICAgIHN0cmluZzogc3RyaW5nLFxuICAgICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgICBiZWdpbjogbnVtYmVyLFxuICAgICAgb3V0RW5kUG9zOiBudW1iZXJbXVxuICAgICk6IHN0cmluZyB7XG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xuXG4gICAgICBsZXQgaSA9IGJlZ2luO1xuICAgICAgbGV0IGM6IHN0cmluZywgYzI6IHN0cmluZztcbiAgICAgIGNvbnN0IHJldDogY3NtU3RyaW5nID0gbmV3IGNzbVN0cmluZygnJyk7XG4gICAgICBsZXQgYnVmU3RhcnQ6IG51bWJlciA9IGJlZ2luOyAvLyBzYnVm44Gr55m76Yyy44GV44KM44Gm44GE44Gq44GE5paH5a2X44Gu6ZaL5aeL5L2N572uXG5cbiAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IHN0cmluZ1tpXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICdcIic6IHtcbiAgICAgICAgICAgIC8vIOe1guerr+OBruKAneOAgeOCqOOCueOCseODvOODl+aWh+Wtl+OBr+WIpeOBq+WHpueQhuOBleOCjOOCi+OBruOBp+OBk+OBk+OBq+adpeOBquOBhFxuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7IC8vIOKAneOBruasoeOBruaWh+Wtl1xuICAgICAgICAgICAgcmV0LmFwcGVuZChzdHJpbmcuc2xpY2UoYnVmU3RhcnQpLCBpIC0gYnVmU3RhcnQpOyAvLyDliY3jga7mloflrZfjgb7jgafjgpLnmbvpjLLjgZnjgotcbiAgICAgICAgICAgIHJldHVybiByZXQucztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnLy8nOiB7XG4gICAgICAgICAgICAvLyDjgqjjgrnjgrHjg7zjg5fjga7loLTlkIhcbiAgICAgICAgICAgIGkrKzsgLy8g77yS5paH5a2X44KS44K744OD44OI44Gn5omx44GGXG5cbiAgICAgICAgICAgIGlmIChpIC0gMSA+IGJ1ZlN0YXJ0KSB7XG4gICAgICAgICAgICAgIHJldC5hcHBlbmQoc3RyaW5nLnNsaWNlKGJ1ZlN0YXJ0KSwgaSAtIGJ1ZlN0YXJ0KTsgLy8g5YmN44Gu5paH5a2X44G+44Gn44KS55m76Yyy44GZ44KLXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZTdGFydCA9IGkgKyAxOyAvLyDjgqjjgrnjgrHjg7zjg5fvvIjvvJLmloflrZcp44Gu5qyh44Gu5paH5a2X44GL44KJXG5cbiAgICAgICAgICAgIGlmIChpIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGMyID0gc3RyaW5nW2ldO1xuXG4gICAgICAgICAgICAgIHN3aXRjaCAoYzIpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcXFwnKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJy8nKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxiJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcZicpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXG4nKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxyJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcdCcpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSBzdHJpbmcvdW5pY29yZCBlc2NhcGUgbm90IHN1cHBvcnRlZCc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIHN0cmluZy9lc2NhcGUgZXJyb3InO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL2lsbGVnYWwgZW5kJztcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEpTT07jga7jgqrjg5bjgrjjgqfjgq/jg4jjgqjjg6zjg6Hjg7Pjg4jjgpLjg5Hjg7zjgrnjgZfjgaZWYWx1ZeOCquODluOCuOOCp+OCr+ODiOOCkui/lOOBmVxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlciAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIGxlbmd0aCAgICDjg5Hjg7zjgrnjgZnjgovplbfjgZVcbiAgICAgKiBAcGFyYW0gYmVnaW4gICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgICAqIEBwYXJhbSBvdXRFbmRQb3Mg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAgICogQHJldHVybiDjg5Hjg7zjgrnjgYvjgonlj5blvpfjgZfjgZ9WYWx1ZeOCquODluOCuOOCp+OCr+ODiFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBwYXJzZU9iamVjdChcbiAgICAgIGJ1ZmZlcjogc3RyaW5nLFxuICAgICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgICBiZWdpbjogbnVtYmVyLFxuICAgICAgb3V0RW5kUG9zOiBudW1iZXJbXVxuICAgICk6IFZhbHVlIHtcbiAgICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG4gICAgICBjb25zdCByZXQ6IEpzb25NYXAgPSBuZXcgSnNvbk1hcCgpO1xuXG4gICAgICAvLyBLZXk6IFZhbHVlXG4gICAgICBsZXQga2V5ID0gJyc7XG4gICAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XG4gICAgICBsZXQgYyA9ICcnO1xuICAgICAgY29uc3QgbG9jYWxSZXRFbmRQb3MyOiBudW1iZXJbXSA9IEFycmF5KDEpO1xuICAgICAgbGV0IG9rID0gZmFsc2U7XG5cbiAgICAgIC8vICwg44GM57aa44GP6ZmQ44KK44Or44O844OXXG4gICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIEZPUl9MT09QOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgbG9jYWxSZXRFbmRQb3MyKTtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpID0gbG9jYWxSZXRFbmRQb3MyWzBdO1xuICAgICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QOyAvLy0tIGxvb3DjgYvjgonlh7rjgotcbiAgICAgICAgICAgIGNhc2UgJ30nOiAvLyDplonjgZjjgqvjg4PjgrNcbiAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XG4gICAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOepulxuICAgICAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICc6JyBwb3NpdGlvblwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl+OBmeOCi+aWh+Wtl1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgdGhpcy5fZXJyb3IgPSAna2V5IG5vdCBmb3VuZCc7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBvayA9IGZhbHNlO1xuXG4gICAgICAgIC8vIDog44KS44OB44Kn44OD44KvXG4gICAgICAgIEZPUl9MT09QMjogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGMgPSBidWZmZXJbaV07XG5cbiAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1AyO1xuICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICd9JyBwb3NpdGlvblwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICAgICAgLy8gY2FzZSAnICc6IGNhc2UgJ1xcdCcgOiBjYXNlICdcXHInOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl+OBmeOCi+aWh+Wtl1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiJzonIG5vdCBmb3VuZFwiO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5YCk44KS44OB44Kn44OD44KvXG4gICAgICAgIGNvbnN0IHZhbHVlOiBWYWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbG9jYWxSZXRFbmRQb3MyXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaSA9IGxvY2FsUmV0RW5kUG9zMlswXTtcblxuICAgICAgICAvLyByZXQucHV0KGtleSwgdmFsdWUpO1xuICAgICAgICByZXQucHV0KGtleSwgdmFsdWUpO1xuXG4gICAgICAgIEZPUl9MT09QMzogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGMgPSBidWZmZXJbaV07XG5cbiAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgICBicmVhayBGT1JfTE9PUDM7XG4gICAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XG4gICAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOato+W4uOe1guS6hlxuICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OXXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHBlcnNlT2JqZWN0JztcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOasoeOBruOAjFwi44CN44G+44Gn44Gu5paH5a2X5YiX44KS44OR44O844K544GZ44KL44CCXG4gICAgICogQHBhcmFtIGJ1ZmZlciAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAgICogQHBhcmFtIGxlbmd0aCAgICDjg5Hjg7zjgrnjgZnjgovplbfjgZVcbiAgICAgKiBAcGFyYW0gYmVnaW4gICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgICAqIEBwYXJhbSBvdXRFbmRQb3Mg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAgICogQHJldHVybiDjg5Hjg7zjgrnjgYvjgonlj5blvpfjgZfjgZ9WYWx1ZeOCquODluOCuOOCp+OCr+ODiFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBwYXJzZUFycmF5KFxuICAgICAgYnVmZmVyOiBzdHJpbmcsXG4gICAgICBsZW5ndGg6IG51bWJlcixcbiAgICAgIGJlZ2luOiBudW1iZXIsXG4gICAgICBvdXRFbmRQb3M6IG51bWJlcltdXG4gICAgKTogVmFsdWUge1xuICAgICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcbiAgICAgIGxldCByZXQ6IEpzb25BcnJheSA9IG5ldyBKc29uQXJyYXkoKTtcblxuICAgICAgLy8ga2V5IDogdmFsdWVcbiAgICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICAgIGxldCBjOiBzdHJpbmc7XG4gICAgICBjb25zdCBsb2NhbFJldEVuZHBvczI6IG51bWJlcltdID0gbmV3IEFycmF5KDEpO1xuXG4gICAgICAvLyAsIOOBjOe2muOBj+mZkOOCiuODq+ODvOODl1xuICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAvLyA6IOOCkuODgeOCp+ODg+OCr1xuICAgICAgICBjb25zdCB2YWx1ZTogVmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoXG4gICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGxvY2FsUmV0RW5kcG9zMlxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGkgPSBsb2NhbFJldEVuZHBvczJbMF07XG5cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmV0LmFkZCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGT1JfTE9PUDM6XG4gICAgICAgIC8vIGJvb2xlYW4gYnJlYWtmbGFnID0gZmFsc2U7XG4gICAgICAgIEZPUl9MT09QOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICAgIC8vIGJyZWFrZmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgIC8vIGJyZWFrOyAvLyDmrKHjga5LRVksIFZBbFVF44G4XG4gICAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QO1xuICAgICAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xuICAgICAgICAgICAgICByZXR1cm4gcmV0OyAvLyDntYLkuoZcbiAgICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICAgICsrdGhpcy5fbGluZUNvdW50O1xuICAgICAgICAgICAgLy9jYXNlICcgJzogY2FzZSAnXFx0JzogY2FzZSAnXFxyJzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGJyZWFrOyAvLyDjgrnjgq3jg4Pjg5dcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gdm9pZCAwO1xuICAgICAgdGhpcy5fZXJyb3IgPSAnaWxsZWdhbCBlbmQgb2YgcGFyc2VPYmplY3QnO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgX2Vycm9yOiBzdHJpbmc7IC8vIOODkeODvOOCueaZguOBruOCqOODqeODvFxuICAgIF9saW5lQ291bnQ6IG51bWJlcjsgLy8g44Ko44Op44O85aCx5ZGK44Gr55So44GE44KL6KGM5pWw44Kr44Km44Oz44OIXG4gICAgX3Jvb3Q6IFZhbHVlOyAvLyDjg5Hjg7zjgrnjgZXjgozjgZ/jg6vjg7zjg4jopoHntKBcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KSZmxvYXTlgKTjgajjgZfjgabmibHjgYZcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBKc29uRmxvYXQgZXh0ZW5kcyBWYWx1ZSB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgY29uc3RydWN0b3IodjogbnVtYmVyKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYzmlbDlgKTlnovjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzRmxvYXQoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIGNvbnN0IHN0cmJ1ZiA9ICdcXDAnO1xuICAgICAgdGhpcy5fdmFsdWUgPSBwYXJzZUZsb2F0KHN0cmJ1Zik7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzdHJidWY7XG5cbiAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9JbnQoZGVmYXVsdFZhbHVlID0gMCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5fdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9GbG9hdChkZWZhdWx0VmFsdWUgPSAwLjApOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIC8vIGludFxuICAgICAgICBpZiAoTWF0aC5yb3VuZCh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmxvYXRcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09IHRoaXMuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfdmFsdWU6IG51bWJlcjsgLy8gSlNPTuimgee0oOOBruWApFxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLnnJ/lgb3lgKTjgajjgZfjgabmibHjgYZcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBKc29uQm9vbGVhbiBleHRlbmRzIFZhbHVlIHtcbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjOecn+WBveWApOOBquOCiXRydWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNCb29sKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6KaB57Sg44KS55yf5YG95YCk44Gn6L+U44GZKGJvb2xlYW4pXG4gICAgICovXG4gICAgcHVibGljIHRvQm9vbGVhbihkZWZhdWx0VmFsdWUgPSBmYWxzZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2Jvb2xWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHRoaXMuX2Jvb2xWYWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgaWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PSB0aGlzLl9ib29sVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7lgKTjgYzpnZnnmoTjgarjgol0cnVlLCDpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IodjogYm9vbGVhbikge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgdGhpcy5fYm9vbFZhbHVlID0gdjtcbiAgICB9XG5cbiAgICBzdGF0aWMgdHJ1ZVZhbHVlOiBKc29uQm9vbGVhbjsgLy8gdHJ1ZVxuICAgIHN0YXRpYyBmYWxzZVZhbHVlOiBKc29uQm9vbGVhbjsgLy8gZmFsc2VcblxuICAgIHByaXZhdGUgX2Jvb2xWYWx1ZTogYm9vbGVhbjsgLy8gSlNPTuimgee0oOOBruWApFxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLmloflrZfliJfjgajjgZfjgabmibHjgYZcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBKc29uU3RyaW5nIGV4dGVuZHMgVmFsdWUge1xuICAgIC8qKlxuICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBjc21TdHJpbmcpO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBhbnkpIHtcbiAgICAgIHN1cGVyKCk7XG5cbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHMpIHtcbiAgICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gcztcbiAgICAgIH1cblxuICAgICAgaWYgKHMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gcy5zO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu56iu6aGe44GM5paH5a2X5YiX44Gq44KJdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N0cmluZygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAgICovXG4gICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAgICovXG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyID09IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlciA9PSB2YWx1ZS5zO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEpTT07jg5Hjg7zjgrnmmYLjga7jgqjjg6njg7zntZDmnpzjgILmloflrZfliJflnovjga7jgojjgYbjgavjgbXjgovjgb7jgYZcbiAgICovXG4gIGV4cG9ydCBjbGFzcyBKc29uRXJyb3IgZXh0ZW5kcyBKc29uU3RyaW5nIHtcbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTdGF0aWM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Ko44Op44O85oOF5aCx44KS44K744OD44OI44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChzOiBzdHJpbmcpOiBWYWx1ZSB7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGNzbVN0cmluZyB8IHN0cmluZywgaXNTdGF0aWM6IGJvb2xlYW4pIHtcbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHMpIHtcbiAgICAgICAgc3VwZXIocyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdXBlcihzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2lzU3RhdGljID0gaXNTdGF0aWM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYzjgqjjg6njg7zlgKTjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2lzU3RhdGljOiBib29sZWFuOyAvLyDpnZnnmoTjgapWYWx1ZeOBi+OBqeOBhuOBi1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpJOVUxM5YCk44Go44GX44Gm5oyB44GkXG4gICAqL1xuICBleHBvcnQgY2xhc3MgSnNvbk51bGx2YWx1ZSBleHRlbmRzIFZhbHVlIHtcbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBrueorumhnuOBjE5VTEzlgKTjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzTnVsbCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAgICovXG4gICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG5cbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9ICdOdWxsVmFsdWUnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS6YWN5YiX44Go44GX44Gm5oyB44GkXG4gICAqL1xuICBleHBvcnQgY2xhc3MgSnNvbkFycmF5IGV4dGVuZHMgVmFsdWUge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLl9hcnJheSA9IG5ldyBjc21WZWN0b3I8VmFsdWU+KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgbGV0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xuXG4gICAgICAgIGlmICh2ICYmICF2LmlzU3RhdGljKCkpIHtcbiAgICAgICAgICB2ID0gdm9pZCAwO1xuICAgICAgICAgIHYgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsdWXjga7nqK7poZ7jgYzphY3liJfjgarjgol0cnVlXG4gICAgICovXG4gICAgcHVibGljIGlzQXJyYXkoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vlrZfmvJTnrpflrZBbaW5kZXhdXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9hcnJheS5nZXRTaXplKCkgPD0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICAgIENTTV9KU09OX0VSUk9SX0lOREVYX09GX0JPVU5EU1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2OiBWYWx1ZSA9IHRoaXMuX2FycmF5LmF0KGluZGV4KTtcblxuICAgICAgaWYgKHYgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vlrZfmvJTnrpflrZBbc3RyaW5nIHwgY3NtU3RyaW5nXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWYWx1ZUJ5U3RyaW5nKHM6IHN0cmluZyB8IGNzbVN0cmluZyk6IFZhbHVlIHtcbiAgICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIGNvbnN0IHN0cmluZ0J1ZmZlcjogc3RyaW5nID0gaW5kZW50ICsgJ1tcXG4nO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTtcbiAgICAgICAgaXRlLmluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgdjogVmFsdWUgPSBpdGUucHRyKCk7XG4gICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPSBpbmRlbnQgKyAnJyArIHYuZ2V0U3RyaW5nKGluZGVudCArICcgJykgKyAnXFxuJztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gc3RyaW5nQnVmZmVyICsgaW5kZW50ICsgJ11cXG4nO1xuXG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOmFjeWIl+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgICAqIEBwYXJhbSB2IOi/veWKoOOBmeOCi+imgee0oFxuICAgICAqL1xuICAgIHB1YmxpYyBhZGQodjogVmFsdWUpOiB2b2lkIHtcbiAgICAgIHRoaXMuX2FycmF5LnB1c2hCYWNrKHYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuOCs+ODs+ODhuODiuOBp+i/lOOBmShjc21WZWN0b3I8VmFsdWU+KVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWZWN0b3IoZGVmYXVsdFZhbHVlOiBjc21WZWN0b3I8VmFsdWU+ID0gbnVsbCk6IGNzbVZlY3RvcjxWYWx1ZT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOBruaVsOOCkui/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdGhpcy5fYXJyYXkuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2FycmF5OiBjc21WZWN0b3I8VmFsdWU+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG4gIH1cblxuICAvKipcbiAgICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkuODnuODg+ODl+OBqOOBl+OBpuaMgeOBpFxuICAgKi9cbiAgZXhwb3J0IGNsYXNzIEpzb25NYXAgZXh0ZW5kcyBWYWx1ZSB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuX21hcCA9IG5ldyBjc21NYXA8c3RyaW5nLCBWYWx1ZT4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICAgIGNvbnN0IGl0ZTogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XG5cbiAgICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xuICAgICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICAgIGlmICh2ICYmICF2LmlzU3RhdGljKCkpIHtcbiAgICAgICAgICB2ID0gdm9pZCAwO1xuICAgICAgICAgIHYgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbHVl44Gu5YCk44GMTWFw5Z6L44Gq44KJdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc01hcCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xuICAgICAgaWYgKHMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcmV0OiBWYWx1ZSA9IHRoaXMuX21hcC5nZXRWYWx1ZShzLnMpO1xuICAgICAgICBpZiAocmV0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpdGVyOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcbiAgICAgICAgaXRlci5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpO1xuICAgICAgICBpdGVyLnByZUluY3JlbWVudCgpXG4gICAgICApIHtcbiAgICAgICAgaWYgKGl0ZXIucHRyKCkuZmlyc3QgPT0gcykge1xuICAgICAgICAgIGlmIChpdGVyLnB0cigpLnNlY29uZCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlci5wdHIoKS5zZWNvbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vlrZfmvJTnrpflrZBbaW5kZXhdXG4gICAgICovXG4gICAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xuICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAgICovXG4gICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpIHtcbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IGluZGVudCArICd7XFxuJztcblxuICAgICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcbiAgICAgIHdoaWxlIChpdGUubm90RXF1YWwodGhpcy5fbWFwLmVuZCgpKSkge1xuICAgICAgICBjb25zdCBrZXkgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICAgIGNvbnN0IHY6IFZhbHVlID0gaXRlLnB0cigpLnNlY29uZDtcblxuICAgICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgKz1cbiAgICAgICAgICBpbmRlbnQgKyAnICcgKyBrZXkgKyAnIDogJyArIHYuZ2V0U3RyaW5nKGluZGVudCArICcgICAnKSArICcgXFxuJztcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgKz0gaW5kZW50ICsgJ31cXG4nO1xuXG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOimgee0oOOCkk1hcOWei+OBp+i/lOOBmVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFw44Gr6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAgICovXG4gICAgcHVibGljIHB1dChrZXk6IHN0cmluZywgdjogVmFsdWUpOiB2b2lkIHtcbiAgICAgIHRoaXMuX21hcC5zZXRWYWx1ZShrZXksIHYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcOOBi+OCieOCreODvOOBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRLZXlzKCk6IGNzbVZlY3RvcjxzdHJpbmc+IHtcbiAgICAgIGlmICghdGhpcy5fa2V5cykge1xuICAgICAgICB0aGlzLl9rZXlzID0gbmV3IGNzbVZlY3RvcjxzdHJpbmc+KCk7XG5cbiAgICAgICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcblxuICAgICAgICB3aGlsZSAoaXRlLm5vdEVxdWFsKHRoaXMuX21hcC5lbmQoKSkpIHtcbiAgICAgICAgICBjb25zdCBrZXk6IHN0cmluZyA9IGl0ZS5wdHIoKS5maXJzdDtcbiAgICAgICAgICB0aGlzLl9rZXlzLnB1c2hCYWNrKGtleSk7XG4gICAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fa2V5cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXDjga7opoHntKDmlbDjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuX2tleXMuZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX21hcDogY3NtTWFwPHN0cmluZywgVmFsdWU+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG4gICAgcHJpdmF0ZSBfa2V5czogY3NtVmVjdG9yPHN0cmluZz47IC8vIEpTT07opoHntKDjga7lgKRcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbi8qKlxuICogU2FtcGxlIEFwcOOBp+S9v+eUqOOBmeOCi+WumuaVsFxuICovXG4vLyDnlLvpnaJcbmV4cG9ydCBjb25zdCBWaWV3TWF4U2NhbGUgPSAyLjA7XG5leHBvcnQgY29uc3QgVmlld01pblNjYWxlID0gMC44O1xuXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxMZWZ0ID0gLTEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbFJpZ2h0ID0gMS4wO1xuXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhMZWZ0ID0gLTIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heFJpZ2h0ID0gMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4Qm90dG9tID0gLTIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heFRvcCA9IDIuMDtcblxuLy8g5aSW6YOo5a6a576p44OV44Kh44Kk44Or77yIanNvbu+8ieOBqOWQiOOCj+OBm+OCi1xuZXhwb3J0IGNvbnN0IE1vdGlvbkdyb3VwSWRsZSA9ICdJZGxlJzsgLy8g44Ki44Kk44OJ44Oq44Oz44KwXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBUYXBCb2R5ID0gJ1RhcEJvZHknOyAvLyDkvZPjgpLjgr/jg4Pjg5fjgZfjgZ/jgajjgY1cbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cFRhcEhlYWQgPSAnVGFwSGVhZCc7XG5cbi8vIOWklumDqOWumue+qeODleOCoeOCpOODq++8iGpzb27vvInjgajlkIjjgo/jgZvjgotcbmV4cG9ydCBjb25zdCBIaXRBcmVhTmFtZUhlYWQgPSAnSGVhZCc7XG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVCb2R5ID0gJ0JvZHknO1xuXG4vLyDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqblrprmlbBcbmV4cG9ydCBjb25zdCBQcmlvcml0eU5vbmUgPSAwO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5SWRsZSA9IDE7XG5leHBvcnQgY29uc3QgUHJpb3JpdHlOb3JtYWwgPSAyO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5Rm9yY2UgPSAzO1xuXG4vLyDjg4fjg5Djg4PjgrDnlKjjg63jgrDjga7ooajnpLrjgqrjg5fjgrfjg6fjg7NcbmV4cG9ydCBsZXQgRGVidWdMb2dFbmFibGU7XG5leHBvcnQgbGV0IERlYnVnVG91Y2hMb2dFbmFibGU7XG5cbi8vIEZyYW1ld29ya+OBi+OCieWHuuWKm+OBmeOCi+ODreOCsOOBruODrOODmeODq+ioreWumlxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ2dpbmdMZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5Mb2dMZXZlbF9WZXJib3NlO1xuXG4vLyDjg4fjg5Xjgqnjg6vjg4jjga7jg6zjg7Pjg4Djg7zjgr/jg7zjgrLjg4Pjg4jjgrXjgqTjgrpcbmV4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRXaWR0aCA9IDE5MDA7XG5leHBvcnQgY29uc3QgUmVuZGVyVGFyZ2V0SGVpZ2h0ID0gMTAwMDtcblxuZXhwb3J0IGxldCBtb2RlbFBhdGg6IHN0cmluZztcbmV4cG9ydCBsZXQgbW9kZWxKc29uTmFtZTogc3RyaW5nO1xuZXhwb3J0IGxldCBwcmVMb2FkTW90aW9uOiBib29sZWFuO1xuXG5leHBvcnQgbGV0IGNhcHR1cmVDYW52YXM6IGJvb2xlYW47XG5cbmV4cG9ydCBjb25zdCBzZXRDYXB0dXJlQ2FudmFzID0gZnVuY3Rpb24oY2FwdHVyZUNhbnZhczogYm9vbGVhbik6IHZvaWQge1xuICB0aGlzLmNhcHR1cmVDYW52YXMgPSBjYXB0dXJlQ2FudmFzO1xufTtcbmV4cG9ydCBjb25zdCBkZWZpbmVNb2RlbFBhdGggPSBmdW5jdGlvbihtb2RlbFBhdGg6IHN0cmluZywgbW9kZWxKc29uTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gIHRoaXMubW9kZWxQYXRoID0gbW9kZWxQYXRoO1xuICB0aGlzLm1vZGVsSnNvbk5hbWUgPSBtb2RlbEpzb25OYW1lO1xufTtcbmV4cG9ydCBjb25zdCBkZWZpbmVEZWJ1ZyA9IGZ1bmN0aW9uKGRlYnVnOiBib29sZWFuLCBkZWJ1Z01vdXNlOiBib29sZWFuKTogdm9pZCB7XG4gIHRoaXMuRGVidWdMb2dFbmFibGUgPSBkZWJ1ZztcbiAgdGhpcy5EZWJ1Z1RvdWNoTG9nRW5hYmxlID0gZGVidWdNb3VzZTtcbn07XG5leHBvcnQgY29uc3Qgc2V0UHJlTG9hZE1vdGlvbiA9IGZ1bmN0aW9uIChwcmVMb2FkTW90aW9uOiBib29sZWFuKTp2b2lke1xuICB0aGlzLnByZUxvYWRNb3Rpb24gPSBwcmVMb2FkTW90aW9uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLFxuICAgIE9wdGlvbiBhcyBDc21fT3B0aW9uXG59IGZyb20gJ0BmcmFtZXdvcmsvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCBDc21fQ3ViaXNtRnJhbWV3b3JrID0gbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcbmltcG9ydCB7TEFwcFZpZXd9IGZyb20gJy4vbGFwcHZpZXcnO1xuaW1wb3J0IHtMQXBwUGFsfSBmcm9tICcuL2xhcHBwYWwnO1xuaW1wb3J0IHtMQXBwVGV4dHVyZU1hbmFnZXJ9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCB7TEFwcExpdmUyRE1hbmFnZXJ9IGZyb20gJy4vbGFwcGxpdmUyZG1hbmFnZXInO1xuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xuXG5leHBvcnQgbGV0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBudWxsO1xuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwRGVsZWdhdGUgPSBudWxsO1xuZXhwb3J0IGxldCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBsZXQgZnJhbWVCdWZmZXI6IFdlYkdMRnJhbWVidWZmZXIgPSBudWxsO1xuXG4vKipcbiAqIOW6lOeUqOeoi+W6j+exu1xuICogQ3ViaXNtIFNES+OBrueuoeeQhuOCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcERlbGVnYXRlIHtcbiAgICAvKipcbiAgICAgKiDov5Tlm57nsbvlrp7kvosoc2luZ3RvbinjgIJcbiAgICAgKiDlpoLmnpzmsqHmnInnlJ/miJDlrp7kvovvvIzliJnlnKjlhoXpg6jnlJ/miJDlrp7kvovjgIJcbiAgICAgKlxuICAgICAqIEByZXR1cm4g57G75a6e5L6LXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBMQXBwRGVsZWdhdGUge1xuICAgICAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBEZWxlZ2F0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YeK5pS+57G75a6e5L6LKHNpbmdsZSB0b24pXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgICAgIGlmIChzX2luc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNfaW5zdGFuY2UucmVsZWFzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc19pbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yid5aeL5YyWQVBQ6ZyA6KaB55qE5Lic6KW/44CCXG4gICAgICovXG4gICAgcHVibGljIGluaXRpYWxpemUoY2FudmFzSWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBHZXR0aW5nIGEgY2FudmFzXG4gICAgICAgIGNhbnZhcyA9IDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNJZCk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBnbCBjb250ZXh0XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJyk7XG5cbiAgICAgICAgaWYgKCFnbCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGluaXRpYWxpemUgV2ViR0wuIFRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0LicpO1xuICAgICAgICAgICAgZ2wgPSBudWxsO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9XG4gICAgICAgICAgICAgICAgJ1RoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSA8Y29kZT4mbHQ7Y2FudmFzJmd0OzwvY29kZT4gZWxlbWVudC4nO1xuXG4gICAgICAgICAgICAvLyBHbCBpbml0aWFsaXphdGlvbiBmYWlsZWQuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgYSBjYW52YXMgdG8gdGhlIERPTVxuICAgICAgICAvLyBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbiAgICAgICAgaWYgKCFmcmFtZUJ1ZmZlcikge1xuICAgICAgICAgICAgZnJhbWVCdWZmZXIgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuRlJBTUVCVUZGRVJfQklORElORyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFuc3BhcmVuY3kgc2V0dGluZ1xuICAgICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgICAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgICAgICBjb25zdCBzdXBwb3J0VG91Y2g6IGJvb2xlYW4gPSAnb250b3VjaGVuZCcgaW4gY2FudmFzO1xuXG4gICAgICAgIGlmIChzdXBwb3J0VG91Y2gpIHtcbiAgICAgICAgICAgIC8vIFRvdWNoIHJlbGF0ZWQgY2FsbGJhY2sgZnVuY3Rpb24gcmVnaXN0cmF0aW9uXG4gICAgICAgICAgICB3aW5kb3cub250b3VjaHN0YXJ0ID0gb25Ub3VjaEJlZ2FuO1xuICAgICAgICAgICAgd2luZG93Lm9udG91Y2htb3ZlID0gb25Ub3VjaE1vdmVkO1xuICAgICAgICAgICAgd2luZG93Lm9udG91Y2hlbmQgPSBvblRvdWNoRW5kZWQ7XG4gICAgICAgICAgICB3aW5kb3cub250b3VjaGNhbmNlbCA9IG9uVG91Y2hDYW5jZWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBNb3VzZSByZWxhdGVkIGNhbGxiYWNrIGZ1bmN0aW9uIHJlZ2lzdHJhdGlvblxuICAgICAgICAgICAgY2FudmFzLm9ubW91c2Vkb3duID0gb25DbGlja0JlZ2FuO1xuICAgICAgICAgICAgd2luZG93Lm9ubW91c2Vtb3ZlID0gb25Nb3VzZU1vdmVkOyAvLyDnm5HlkKzlnKggd2luZG93IOS4iu+8jOWPr+S7peebkeWQrOaVtOS4queql+WPo+WGheeahOaMh+mSiFxuICAgICAgICAgICAgd2luZG93Lm9ubW91c2VvdXQgPSBvbk1vdXNlTGVhdmU7IC8vIOaMh+mSiOenu+WHuueql+WPo+aXtlxuICAgICAgICAgICAgY2FudmFzLm9ubW91c2V1cCA9IG9uQ2xpY2tFbmRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemluZyBBcHBWaWV3XG4gICAgICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAgIC8vIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcbiAgICAgICAgdGhpcy5pbml0aWFsaXplQ3ViaXNtKCk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6Kej5pS+44GZ44KL44CCXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICAgIC8vIOenu+mZpOebkeWQrOWHveaVsFxuICAgICAgICB3aW5kb3cub250b3VjaHN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICB3aW5kb3cub250b3VjaG1vdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHdpbmRvdy5vbnRvdWNoZW5kID0gdW5kZWZpbmVkO1xuICAgICAgICB3aW5kb3cub250b3VjaGNhbmNlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2FudmFzLm9ubW91c2Vkb3duID0gdW5kZWZpbmVkO1xuICAgICAgICB3aW5kb3cub25tb3VzZW1vdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHdpbmRvdy5vbm1vdXNlb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICBjYW52YXMub25tb3VzZXVwID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZU1hbmFnZXIgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX3ZpZXcucmVsZWFzZSgpO1xuICAgICAgICB0aGlzLl92aWV3ID0gbnVsbDtcblxuICAgICAgICAvLyBGcmVlIHVwIHJlc291cmNlc1xuICAgICAgICBMQXBwTGl2ZTJETWFuYWdlci5yZWxlYXNlSW5zdGFuY2UoKTtcblxuICAgICAgICAvLyBDdWJpc20gU0RL44Gu6Kej5pS+XG4gICAgICAgIENzbV9DdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGlvbiBwcm9jZXNzaW5nXG4gICAgICovXG4gICAgcHVibGljIHJ1bigpOiB2b2lkIHtcbiAgICAgICAgLy8gTWFpbiBsb29wXG4gICAgICAgIGNvbnN0IGxvb3AgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgICAgICAvLyBDaGVja2luZyB0aGUgcHJlc2VuY2Ugb3IgYWJzZW5jZSBvZiBpbnN0YW5jZXNcbiAgICAgICAgICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOaZgumWk+abtOaWsFxuICAgICAgICAgICAgTEFwcFBhbC51cGRhdGVUaW1lKCk7XG5cbiAgICAgICAgICAgIC8vIOeUu+mdouOBruWIneacn+WMllxuICAgICAgICAgICAgZ2wuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAwLjApO1xuXG4gICAgICAgICAgICAvLyBBY3RpdmF0ZSBkZXB0aCB0ZXN0aW5nLlxuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuXG4gICAgICAgICAgICAvLyBUaGUgbmVhcmVzdCBvYmplY3Qgb2JzY3VyZXMgdGhlIGRpc3RhbnQgb2JqZWN0XG4gICAgICAgICAgICBnbC5kZXB0aEZ1bmMoZ2wuTEVRVUFMKTtcblxuICAgICAgICAgICAgLy8gQ2xlYXIgY29sb3IgYW5kIGRlcHRoIGJ1ZmZlcnNcbiAgICAgICAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcblxuICAgICAgICAgICAgZ2wuY2xlYXJEZXB0aCgxLjApO1xuXG4gICAgICAgICAgICAvLyDpgI/pgY7oqK3lrppcbiAgICAgICAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgICAgICAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgICAgICAgICAgLy8g5o+P55S75pu05pawXG4gICAgICAgICAgICB0aGlzLl92aWV3LnJlbmRlcigpO1xuXG4gICAgICAgICAgICAvLyDmo4Dmn6XmmK/lkKbmiKrlm75cbiAgICAgICAgICAgIGlmIChMQXBwRGVmaW5lLmNhcHR1cmVDYW52YXMpIHtcbiAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLnNldENhcHR1cmVDYW52YXMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNhbnZhcy50b0Jsb2Iod2luZG93LmRvd25sb2FkQ2FwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZSBjYWxsIGZvciB0aGUgbG9vcFxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICB9O1xuICAgICAgICBsb29wKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIHNoYWRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlU2hhZGVyKCk6IFdlYkdMUHJvZ3JhbSB7XG4gICAgICAgIC8vIOODkOODvOODhuODg+OCr+OCueOCt+OCp+ODvOODgOODvOOBruOCs+ODs+ODkeOCpOODq1xuICAgICAgICBjb25zdCB2ZXJ0ZXhTaGFkZXJJZCA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcblxuICAgICAgICBpZiAodmVydGV4U2hhZGVySWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgdmVydGV4U2hhZGVyJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlcjogc3RyaW5nID1cbiAgICAgICAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAgICAgICAgICdhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsnICtcbiAgICAgICAgICAgICdhdHRyaWJ1dGUgdmVjMiB1djsnICtcbiAgICAgICAgICAgICd2YXJ5aW5nIHZlYzIgdnV2OycgK1xuICAgICAgICAgICAgJ3ZvaWQgbWFpbih2b2lkKScgK1xuICAgICAgICAgICAgJ3snICtcbiAgICAgICAgICAgICcgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDEuMCk7JyArXG4gICAgICAgICAgICAnICAgdnV2ID0gdXY7JyArXG4gICAgICAgICAgICAnfSc7XG5cbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlcklkLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBnbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcblxuICAgICAgICAvLyBDb21waWxpbmcgZnJhZ21lbnQgc2hhZGVyc1xuICAgICAgICBjb25zdCBmcmFnbWVudFNoYWRlcklkID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG5cbiAgICAgICAgaWYgKGZyYWdtZW50U2hhZGVySWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgZnJhZ21lbnRTaGFkZXInKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaGFkZXI6IHN0cmluZyA9XG4gICAgICAgICAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICAgICAgICAgICAndmFyeWluZyB2ZWMyIHZ1djsnICtcbiAgICAgICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlOycgK1xuICAgICAgICAgICAgJ3ZvaWQgbWFpbih2b2lkKScgK1xuICAgICAgICAgICAgJ3snICtcbiAgICAgICAgICAgICcgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodGV4dHVyZSwgdnV2KTsnICtcbiAgICAgICAgICAgICd9JztcblxuICAgICAgICBnbC5zaGFkZXJTb3VyY2UoZnJhZ21lbnRTaGFkZXJJZCwgZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgICAgIC8vIENyZWF0aW5nIHByb2dyYW0gb2JqZWN0c1xuICAgICAgICBjb25zdCBwcm9ncmFtSWQgPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtSWQsIHZlcnRleFNoYWRlcklkKTtcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgZnJhZ21lbnRTaGFkZXJJZCk7XG5cbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgICAgIC8vIExpbmtcbiAgICAgICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbUlkKTtcblxuICAgICAgICBnbC51c2VQcm9ncmFtKHByb2dyYW1JZCk7XG5cbiAgICAgICAgcmV0dXJuIHByb2dyYW1JZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWaWV3IGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWaWV3KCk6IExBcHBWaWV3IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRleHR1cmVNYW5hZ2VyKCk6IExBcHBUZXh0dXJlTWFuYWdlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlTWFuYWdlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9jYXB0dXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9tb3VzZVggPSAwLjA7XG4gICAgICAgIHRoaXMuX21vdXNlWSA9IDAuMDtcbiAgICAgICAgdGhpcy5faXNFbmQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9jdWJpc21PcHRpb24gPSBuZXcgQ3NtX09wdGlvbigpO1xuICAgICAgICB0aGlzLl92aWV3ID0gbmV3IExBcHBWaWV3KCk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbmV3IExBcHBUZXh0dXJlTWFuYWdlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdGlhbGl6ZUN1YmlzbSgpOiB2b2lkIHtcbiAgICAgICAgLy8gc2V0dXAgY3ViaXNtXG4gICAgICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dGdW5jdGlvbiA9IExBcHBQYWwucHJpbnRNZXNzYWdlO1xuICAgICAgICB0aGlzLl9jdWJpc21PcHRpb24ubG9nZ2luZ0xldmVsID0gTEFwcERlZmluZS5DdWJpc21Mb2dnaW5nTGV2ZWw7XG4gICAgICAgIENzbV9DdWJpc21GcmFtZXdvcmsuc3RhcnRVcCh0aGlzLl9jdWJpc21PcHRpb24pO1xuXG4gICAgICAgIC8vIGluaXRpYWxpemUgY3ViaXNtXG4gICAgICAgIENzbV9DdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAgIC8vIGxvYWQgbW9kZWxcbiAgICAgICAgTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcblxuICAgICAgICB0aGlzLl92aWV3LmluaXRpYWxpemVTcHJpdGUoKTtcbiAgICB9XG5cbiAgICBfY3ViaXNtT3B0aW9uOiBDc21fT3B0aW9uOyAvLyBDdWJpc20gU0RLIE9wdGlvblxuICAgIF92aWV3OiBMQXBwVmlldzsgLy8gVmlld+aDheWgsVxuICAgIF9jYXB0dXJlZDogYm9vbGVhbjsgLy8gQXJlIHlvdSBjbGlja2luZyBvbiBpdD9cbiAgICBfbW91c2VYOiBudW1iZXI7IC8vIE1vdXNlIHgtY29vcmRpbmF0ZVxuICAgIF9tb3VzZVk6IG51bWJlcjsgLy8gTW91c2UgeS1jb29yZGluYXRlXG4gICAgX2lzRW5kOiBib29sZWFuOyAvLyBJcyB0aGUgQVBQIGNsb3NlZD9cbiAgICBfdGV4dHVyZU1hbmFnZXI6IExBcHBUZXh0dXJlTWFuYWdlcjsgLy8gVGV4dHVyZSBtYW5hZ2VyXG59XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gY2xpY2tlZC5cbiAqL1xuZnVuY3Rpb24gb25DbGlja0JlZ2FuKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gdHJ1ZTtcblxuICAgIGNvbnN0IHBvc1g6IG51bWJlciA9IGUucGFnZVg7XG4gICAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5wYWdlWTtcblxuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIElmIHRoZSBtb3VzZSBwb2ludGVyIG1vdmVzLCBpdCBpcyBjYWxsZWQuXG4gKi9cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgLy8g6buY6K6k6ZyA6KaB5ZCM5pe25oyJ5LiL6byg5qCH5omN6IO96Lef6LiqIOazqOmHiuaOiVxuICAgIC8vIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkKSB7XG4gICAgLy8gICByZXR1cm47XG4gICAgLy8gfVxuXG4gICAgaWYgKFxuICAgICAgICAhTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcgfHxcbiAgICAgICAgIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Ll9wcm9ncmFtSWRcbiAgICApIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBET01SZWN0IOWvueixoe+8jHRvcOOAgWxlZnQg6KGo56S65YWD57SgKGNhbnZhcynlt6bkuIrop5LliLDop4blj6Plt6bkuIrop5LnmoTot53nprvvvIxib3R0b23jgIFyaWdodOihqOekuuWFg+e0oOWPs+S4i+inkuWIsOinhuWPo+W3puS4iuinkueahOi3neemu1xuICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgLy8g6L+Z6YeM55qEIGUudGFyZ2V0IOaYryB3aW5kb3dcbiAgICAvLyBNb3VzZUV2ZW50IOWvueixoe+8jGNsaWVudFjjgIFjbGllbnRZ5YiG5Yir5piv6byg5qCH54K55Ye75L2N572u5Zyo6KeG5Y+j5Lit55qEWOOAgVnlnZDmoIdcbiAgICBjb25zdCBwb3NYOiBudW1iZXIgPSBlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNNb3ZlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDmjIfpkojnp7vlh7rnqpflj6Pml7bmgaLlpI3pu5jorqTlp7/mgIFcbiAqL1xuZnVuY3Rpb24gb25Nb3VzZUxlYXZlKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAvLyBGaXJlRm94IOeahCB3aW5kb3cub25tb3VzZW91dCDop6blj5Hlvojov7fvvIzmnInml7blnKjpobXpnaLkuK3lpK7op6blj5HvvIzmnInml7bmraPnoa7op6blj5Hov5Tlm57nmoTlnZDmoIfku43lnKjnqpflj6PlhoVcbiAgICBpZiAoZS5jbGllbnRZIDw9IDAgfHwgZS5jbGllbnRYIDw9IDAgfHwgKGUuY2xpZW50WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIDYgfHwgZS5jbGllbnRZID49IHdpbmRvdy5pbm5lckhlaWdodCAtIDYpKSB7XG4gICAgICAgIExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUgJiYgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ1tMaXZlMkR2NF0gb25Nb3VzZUxlYXZlJyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldyB8fFxuICAgICAgICAgICAgIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Ll9wcm9ncmFtSWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpdmUyRE1hbmFnZXI6IExBcHBMaXZlMkRNYW5hZ2VyID0gTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgbGl2ZTJETWFuYWdlci5vbkRyYWcoMC4wLCAwLjApO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDYWxsIHdoZW4gdGhlIGNsaWNrIGlzIGZpbmlzaGVkLlxuICovXG5mdW5jdGlvbiBvbkNsaWNrRW5kZWQoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAgICAgIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3IHx8XG4gICAgICAgICFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5fcHJvZ3JhbUlkXG4gICAgKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRE9NUmVjdCDlr7nosaHvvIx0b3DjgIFsZWZ0IOihqOekuuWFg+e0oCjov5nph4zmmK9jYW52YXMp5bem5LiK6KeS5Yiw6KeG5Y+j5bem5LiK6KeS55qE6Led56a777yMYm90dG9t44CBcmlnaHTooajnpLrlhYPntKDlj7PkuIvop5LliLDop4blj6Plt6bkuIrop5LnmoTot53nprtcbiAgICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIC8vIE1vdXNlRXZlbnQg5a+56LGh77yMY2xpZW50WOOAgWNsaWVudFnliIbliKvmmK/pvKDmoIfngrnlh7vkvY3nva7lnKjop4blj6PkuK3nmoRY44CBWeWdkOagh1xuICAgIGNvbnN0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICBjb25zdCBwb3NZOiBudW1iZXIgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICAgIGBbTGl2ZTJEdjRdIG9uQ2xpY2tFbmRlZDpcbiAgICAgICByZWN0IGxlZnQ6ICR7cmVjdC5sZWZ0LnRvRml4ZWQoMil9IHJlY3QgdG9wOiAke3JlY3QudG9wLnRvRml4ZWQoMil9XG4gICAgICAgY2xpZW50WDogJHtlLmNsaWVudFgudG9GaXhlZCgyKX0gY2xpZW50WTogJHtlLmNsaWVudFkudG9GaXhlZCgyKX1gXG4gICAgICAgICk7XG4gICAgfVxuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIEl0IGlzIGNhbGxlZCB3aGVuIHRvdWNoZWQuXG4gKi9cbmZ1bmN0aW9uIG9uVG91Y2hCZWdhbihlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gdHJ1ZTtcblxuICAgIC8vIERPTVJlY3Qg5a+56LGh77yMdG9w44CBbGVmdCDooajnpLrlhYPntKAoY2FudmFzKeW3puS4iuinkuWIsOinhuWPo+W3puS4iuinkueahOi3neemu++8jGJvdHRvbeOAgXJpZ2h06KGo56S65YWD57Sg5Y+z5LiL6KeS5Yiw6KeG5Y+j5bem5LiK6KeS55qE6Led56a7XG4gICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAvLyDov5nph4znmoQgZS50YXJnZXQg5pivIHdpbmRvd1xuICAgIC8vIE1vdXNlRXZlbnQg5a+56LGh77yMY2xpZW50WOOAgWNsaWVudFnliIbliKvmmK/pvKDmoIfngrnlh7vkvY3nva7lnKjop4blj6PkuK3nmoRY44CBWeWdkOagh1xuICAgIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xuXG4gICAgLy8gY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgLy8gY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgLy9cbiAgICAvLyBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNCZWdhbihwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGNhbGxlZCBzd2lwaW5nLlxuICovXG5mdW5jdGlvbiBvblRvdWNoTW92ZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgIC8vIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkKSB7XG4gICAgLy8gICByZXR1cm47XG4gICAgLy8gfVxuXG4gICAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRE9NUmVjdCDlr7nosaHvvIx0b3DjgIFsZWZ0IOihqOekuuWFg+e0oChjYW52YXMp5bem5LiK6KeS5Yiw6KeG5Y+j5bem5LiK6KeS55qE6Led56a777yMYm90dG9t44CBcmlnaHTooajnpLrlhYPntKDlj7PkuIvop5LliLDop4blj6Plt6bkuIrop5LnmoTot53nprtcbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIC8vIOi/memHjOeahCBlLnRhcmdldCDmmK8gd2luZG93XG4gICAgLy8gTW91c2VFdmVudCDlr7nosaHvvIxjbGllbnRY44CBY2xpZW50WeWIhuWIq+aYr+m8oOagh+eCueWHu+S9jee9ruWcqOinhuWPo+S4reeahFjjgIFZ5Z2Q5qCHXG4gICAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICBjb25zdCBwb3NZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNNb3ZlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiBJdCBpcyBjYWxsZWQgd2hlbiB0aGUgdG91Y2ggaXMgZmluaXNoZWQuXG4gKi9cbmZ1bmN0aW9uIG9uVG91Y2hFbmRlZChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XG5cbiAgICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGxpdmUyRE1hbmFnZXIub25EcmFnKDAuMCwgMC4wKTtcblxuICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCBwb3NYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIFRvdWNoIGlzIGNhbGxlZCBjYW5jZWxlZC5cbiAqL1xuZnVuY3Rpb24gb25Ub3VjaENhbmNlbChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XG5cbiAgICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGxpdmUyRE1hbmFnZXIub25EcmFnKDAuMCwgMC4wKTtcblxuICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCBwb3NYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0cml4NDR9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3J9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbn0gZnJvbSAnQGZyYW1ld29yay9tb3Rpb24vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgQ3NtX2NzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XG5pbXBvcnQgQ3NtX0N1YmlzbU1hdHJpeDQ0ID0gY3ViaXNtbWF0cml4NDQuQ3ViaXNtTWF0cml4NDQ7XG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcblxuaW1wb3J0IHtMQXBwTW9kZWx9IGZyb20gJy4vbGFwcG1vZGVsJztcbmltcG9ydCB7TEFwcFBhbH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCB7Y2FudmFzfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5cbmV4cG9ydCBsZXQgc19pbnN0YW5jZTogTEFwcExpdmUyRE1hbmFnZXIgPSBudWxsO1xuXG4vKipcbiAqIENsYXNzIHRvIG1hbmFnZSBDdWJpc21Nb2RlbCBpbiB0aGUgc2FtcGxlIGFwcGxpY2F0aW9uXG4gKiBJdCBnZW5lcmF0ZXMgYW5kIGRpc2NhcmRzIG1vZGVscywgaGFuZGxlcyB0YXAgZXZlbnRzLCBhbmQgc3dpdGNoZXMgbW9kZWxzLlxuICovXG5leHBvcnQgY2xhc3MgTEFwcExpdmUyRE1hbmFnZXIge1xuICAgIC8qKlxuICAgICAqIEl0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIGNsYXNzIChzaW5nbGV0b24pLlxuICAgICAqIElmIG5vIGluc3RhbmNlIGlzIGNyZWF0ZWQsIGFuIGluc3RhbmNlIGlzIGNyZWF0ZWQgaW50ZXJuYWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gSW5zdGFuY2Ugb2YgY2xhc3NcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IExBcHBMaXZlMkRNYW5hZ2VyIHtcbiAgICAgICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gTEFwcERlZmluZS5tb2RlbFBhdGhcbiAgICAgICAgICAgIHNfaW5zdGFuY2UgPSBuZXcgTEFwcExpdmUyRE1hbmFnZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzX2luc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZyZWUgaW5zdGFuY2Ugb2YgY2xhc3MgKHNpbmdsZXRvbikuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgICAgIGlmIChzX2luc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNfaW5zdGFuY2UgPSB2b2lkIDA7XG4gICAgICAgIH1cblxuICAgICAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtb2RlbCBoZWxkIGluIHRoZSBjdXJyZW50IHNjZW5lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vIEluZGV4IHZhbHVlIG9mIG1vZGVsIGxpc3RcbiAgICAgKiBAcmV0dXJuIFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYSBtb2RlbC5JZiB0aGUgaW5kZXggdmFsdWUgaXMgb3V0IG9mIHRoZSByYW5nZSwgcmV0dXJuIE5VTEwuXG4gICAgICovXG4gICAgcHVibGljIGdldE1vZGVsKG5vOiBudW1iZXIpOiBMQXBwTW9kZWwge1xuICAgICAgICBpZiAobm8gPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWxzLmF0KG5vKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgYWxsIHRoZSBtb2RlbHMgeW91IGhvbGQgaW4gdGhlIGN1cnJlbnQgc2NlbmVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsZWFzZUFsbE1vZGVsKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fbW9kZWxzLmF0KGkpLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX21vZGVscy5zZXQoaSwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb2RlbHMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcHJvY2VzcyBvZiBkcmFnZ2luZyB0aGUgc2NyZWVuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCDnlLvpnaLjga5Y5bqn5qiZXG4gICAgICogQHBhcmFtIHkg55S76Z2i44GuWeW6p+aomVxuICAgICAqL1xuICAgIHB1YmxpYyBvbkRyYWcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsOiBMQXBwTW9kZWwgPSB0aGlzLmdldE1vZGVsKGkpO1xuXG4gICAgICAgICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgICAgICAgICBtb2RlbC5zZXREcmFnZ2luZyh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRhcHBpbmcgdGhlIHNjcmVlblxuICAgICAqXG4gICAgICogQHBhcmFtIHgg55S76Z2i44GuWOW6p+aomVxuICAgICAqIEBwYXJhbSB5IOeUu+mdouOBrlnluqfmqJlcbiAgICAgKi9cbiAgICBwdWJsaWMgb25UYXAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgICAgICAgIGBbTGl2ZTJEdjRdIHRhcCBwb2ludDoge3g6ICR7eC50b0ZpeGVkKDIpfSB5OiAke3kudG9GaXhlZCgyKX19YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW9kZWxzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBoaXRBcmVhID0gdGhpcy5fbW9kZWxzLmF0KGkpLmdldEhpdEFyZWFOYW1lKHgsIHkpO1xuICAgICAgICAgICAgaWYgKGhpdEFyZWEpIHtcbiAgICAgICAgICAgICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSlcbiAgICAgICAgICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtMaXZlMkR2NF0gaGl0IGFyZWE6IFske2hpdEFyZWF9XWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsc1xuICAgICAgICAgICAgICAgICAgICAuYXQoaSlcbiAgICAgICAgICAgICAgICAgICAgLnN0YXJ0UmFuZG9tTW90aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgYFRhcCR7aGl0QXJlYX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgTEFwcERlZmluZS5Qcmlvcml0eU5vcm1hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGF0IHRvIGRvIHdoZW4gdXBkYXRpbmcgdGhlIHNjcmVlblxuICAgICAqIE1vZGVsIHVwZGF0ZSBwcm9jZXNzaW5nIGFuZCBkcmF3aW5nIHByb2Nlc3NpbmdcbiAgICAgKi9cbiAgICBwdWJsaWMgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgICAgIGxldCBwcm9qZWN0aW9uOiBDc21fQ3ViaXNtTWF0cml4NDQgPSBuZXcgQ3NtX0N1YmlzbU1hdHJpeDQ0KCk7XG5cbiAgICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gY2FudmFzO1xuICAgICAgICBwcm9qZWN0aW9uLnNjYWxlKDEuMCwgd2lkdGggLyBoZWlnaHQpO1xuXG4gICAgICAgIGlmICh0aGlzLl92aWV3TWF0cml4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHByb2plY3Rpb24ubXVsdGlwbHlCeU1hdHJpeCh0aGlzLl92aWV3TWF0cml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNhdmVQcm9qZWN0aW9uOiBDc21fQ3ViaXNtTWF0cml4NDQgPSBwcm9qZWN0aW9uLmNsb25lKCk7XG4gICAgICAgIGNvbnN0IG1vZGVsQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVscy5nZXRTaXplKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbENvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsOiBMQXBwTW9kZWwgPSB0aGlzLmdldE1vZGVsKGkpO1xuICAgICAgICAgICAgcHJvamVjdGlvbiA9IHNhdmVQcm9qZWN0aW9uLmNsb25lKCk7XG5cbiAgICAgICAgICAgIG1vZGVsLnVwZGF0ZSgpO1xuICAgICAgICAgICAgbW9kZWwuZHJhdyhwcm9qZWN0aW9uKTsgLy8gVGhlIHByb2plY3Rpb24gaXMgbW9kaWZpZWQgYnkgcmVmZXJlbmNlLlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHNjZW5lc1xuICAgICAqIFRoZSBzYW1wbGUgYXBwbGljYXRpb24gc3dpdGNoZXMgdGhlIG1vZGVsIHNldC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hhbmdlU2NlbmUobW9kZWxQYXRoOiBzdHJpbmcsIG1vZGVsSnNvbk5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xuICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtMaXZlMkR2NF0gbG9hZCBtb2RlbDogJHttb2RlbEpzb25OYW1lfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWxlYXNlQWxsTW9kZWwoKTtcbiAgICAgICAgdGhpcy5fbW9kZWxzLnB1c2hCYWNrKG5ldyBMQXBwTW9kZWwoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkpO1xuICAgICAgICB0aGlzLl9tb2RlbHMuYXQoMCkubG9hZEFzc2V0cyhtb2RlbFBhdGgsIG1vZGVsSnNvbk5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3ZpZXdNYXRyaXggPSBuZXcgQ3NtX0N1YmlzbU1hdHJpeDQ0KCk7XG4gICAgICAgIHRoaXMuX21vZGVscyA9IG5ldyBDc21fY3NtVmVjdG9yPExBcHBNb2RlbD4oKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VTY2VuZShMQXBwRGVmaW5lLm1vZGVsUGF0aCwgTEFwcERlZmluZS5tb2RlbEpzb25OYW1lKTtcbiAgICB9XG5cbiAgICBfdmlld01hdHJpeDogQ3NtX0N1YmlzbU1hdHJpeDQ0OyAvLyBWaWV3IG1hdHJpeCBmb3IgbW9kZWwgZHJhd2luZ1xuICAgIF9tb2RlbHM6IENzbV9jc21WZWN0b3I8TEFwcE1vZGVsPjsgLy8gQ29udGFpbmVyIG9mIG1vZGVsIGluc3RhbmNlc1xuICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGVuZCBtb3Rpb24gcGxheWJhY2tcbiAgICBfZmluaXNoZWRNb3Rpb24gPSAoc2VsZjogQUN1YmlzbU1vdGlvbik6IHZvaWQgPT4ge1xuICAgICAgICBMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlICYmIExBcHBQYWwucHJpbnRNZXNzYWdlKCdbTGl2ZTJEdjRdIE1vdGlvbiBGaW5pc2hlZCcpO1xuICAgIH07XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBsaXZlMmRjdWJpc21mcmFtZXdvcmt9IGZyb20gJ0BmcmFtZXdvcmsvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tICdAZnJhbWV3b3JrL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXVzZXJtb2RlbH0gZnJvbSAnQGZyYW1ld29yay9tb2RlbC9jdWJpc211c2VybW9kZWwnO1xuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgaWN1YmlzbW1vZGVsc2V0dGluZ30gZnJvbSAnQGZyYW1ld29yay9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsc2V0dGluZ2pzb259IGZyb20gJ0BmcmFtZXdvcmsvY3ViaXNtbW9kZWxzZXR0aW5nanNvbic7XG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21kZWZhdWx0cGFyYW1ldGVyaWR9IGZyb20gJ0BmcmFtZXdvcmsvY3ViaXNtZGVmYXVsdHBhcmFtZXRlcmlkJztcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGFjdWJpc21tb3Rpb259IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZXllYmxpbmt9IGZyb20gJ0BmcmFtZXdvcmsvZWZmZWN0L2N1YmlzbWV5ZWJsaW5rJztcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWJyZWF0aH0gZnJvbSAnQGZyYW1ld29yay9lZmZlY3QvY3ViaXNtYnJlYXRoJztcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3Rvcn0gZnJvbSAnQGZyYW1ld29yay90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21tYXB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21tYXAnO1xuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0cml4NDR9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb259IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2N1YmlzbW1vdGlvbic7XG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXJ9IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmd9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtcmVjdH0gZnJvbSAnQGZyYW1ld29yay90eXBlL2NzbXJlY3RmJztcbmltcG9ydCB7Q3ViaXNtTG9nSW5mb30gZnJvbSAnQGZyYW1ld29yay91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgY3NtUmVjdCA9IGNzbXJlY3QuY3NtUmVjdDtcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xuaW1wb3J0IEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWUgPSBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIuSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLkN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7XG5pbXBvcnQgQ3ViaXNtTW90aW9uID0gY3ViaXNtbW90aW9uLkN1YmlzbU1vdGlvbjtcbmltcG9ydCBDdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xuaW1wb3J0IGNzbU1hcCA9IGNzbW1hcC5jc21NYXA7XG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBDdWJpc21CcmVhdGggPSBjdWJpc21icmVhdGguQ3ViaXNtQnJlYXRoO1xuaW1wb3J0IEJyZWF0aFBhcmFtZXRlckRhdGEgPSBjdWJpc21icmVhdGguQnJlYXRoUGFyYW1ldGVyRGF0YTtcbmltcG9ydCBDdWJpc21FeWVCbGluayA9IGN1YmlzbWV5ZWJsaW5rLkN1YmlzbUV5ZUJsaW5rO1xuaW1wb3J0IEFDdWJpc21Nb3Rpb24gPSBhY3ViaXNtbW90aW9uLkFDdWJpc21Nb3Rpb247XG5pbXBvcnQgRmluaXNoZWRNb3Rpb25DYWxsYmFjayA9IGFjdWJpc21tb3Rpb24uRmluaXNoZWRNb3Rpb25DYWxsYmFjaztcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBsaXZlMmRjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XG5pbXBvcnQgQ3ViaXNtVXNlck1vZGVsID0gY3ViaXNtdXNlcm1vZGVsLkN1YmlzbVVzZXJNb2RlbDtcbmltcG9ydCBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gaWN1YmlzbW1vZGVsc2V0dGluZy5JQ3ViaXNtTW9kZWxTZXR0aW5nO1xuaW1wb3J0IEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gPSBjdWJpc21tb2RlbHNldHRpbmdqc29uLkN1YmlzbU1vZGVsU2V0dGluZ0pzb247XG5pbXBvcnQgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkID0gY3ViaXNtZGVmYXVsdHBhcmFtZXRlcmlkO1xuXG5pbXBvcnQge0xBcHBQYWx9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQge2dsLCBjYW52YXMsIGZyYW1lQnVmZmVyLCBMQXBwRGVsZWdhdGV9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcbmltcG9ydCB7VGV4dHVyZUluZm99IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuZW51bSBMb2FkU3RlcCB7XG4gICAgTG9hZEFzc2V0cyxcbiAgICBMb2FkTW9kZWwsXG4gICAgV2FpdExvYWRNb2RlbCxcbiAgICBMb2FkRXhwcmVzc2lvbixcbiAgICBXYWl0TG9hZEV4cHJlc3Npb24sXG4gICAgTG9hZFBoeXNpY3MsXG4gICAgV2FpdExvYWRQaHlzaWNzLFxuICAgIExvYWRQb3NlLFxuICAgIFdhaXRMb2FkUG9zZSxcbiAgICBTZXR1cEV5ZUJsaW5rLFxuICAgIFNldHVwQnJlYXRoLFxuICAgIExvYWRVc2VyRGF0YSxcbiAgICBXYWl0TG9hZFVzZXJEYXRhLFxuICAgIFNldHVwRXllQmxpbmtJZHMsXG4gICAgU2V0dXBMaXBTeW5jSWRzLFxuICAgIFNldHVwTGF5b3V0LFxuICAgIExvYWRNb3Rpb24sXG4gICAgV2FpdExvYWRNb3Rpb24sXG4gICAgQ29tcGxldGVJbml0aWFsaXplLFxuICAgIENvbXBsZXRlU2V0dXBNb2RlbCxcbiAgICBMb2FkVGV4dHVyZSxcbiAgICBXYWl0TG9hZFRleHR1cmUsXG4gICAgQ29tcGxldGVTZXR1cFxufVxuXG4vKipcbiAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq+OBruWun+ijheOCr+ODqeOCuTxicj5cbiAqIOODouODh+ODq+eUn+aIkOOAgeapn+iDveOCs+ODs+ODneODvOODjeODs+ODiOeUn+aIkOOAgeabtOaWsOWHpueQhuOBqOODrOODs+ODgOODquODs+OCsOOBruWRvOOBs+WHuuOBl+OCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcE1vZGVsIGV4dGVuZHMgQ3ViaXNtVXNlck1vZGVsIHtcbiAgICAvKipcbiAgICAgKiBtb2RlbDMuanNvbuOBjOe9ruOBi+OCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBqOODleOCoeOCpOODq+ODkeOCueOBi+OCieODouODh+ODq+OCkueUn+aIkOOBmeOCi1xuICAgICAqIEBwYXJhbSBkaXJcbiAgICAgKiBAcGFyYW0gZmlsZU5hbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZEFzc2V0cyhkaXI6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9tb2RlbEhvbWVEaXIgPSBkaXI7XG5cbiAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfS8ke2ZpbGVOYW1lfWApXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcgPSBuZXcgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbihcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgLy8g44K544OG44O844OI44KS5pu05pawXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkTW9kZWw7XG5cbiAgICAgICAgICAgICAgICAvLyDntZDmnpzjgpLkv53lrZhcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwTW9kZWwoc2V0dGluZyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBtb2RlbDMuanNvbuOBi+OCieODouODh+ODq+OCkueUn+aIkOOBmeOCi+OAglxuICAgICAqIG1vZGVsMy5qc29u44Gu6KiY6L+w44Gr5b6T44Gj44Gm44Oi44OH44Or55Sf5oiQ44CB44Oi44O844K344On44Oz44CB54mp55CG5ryU566X44Gq44Gp44Gu44Kz44Oz44Od44O844ON44Oz44OI55Sf5oiQ44KS6KGM44GG44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2V0dGluZyBJQ3ViaXNtTW9kZWxTZXR0aW5n44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXR1cE1vZGVsKHNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX21vZGVsU2V0dGluZyA9IHNldHRpbmc7XG5cbiAgICAgICAgLy8gQ3ViaXNtTW9kZWxcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb2RlbEZpbGVOYW1lKCkgIT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlTmFtZSgpO1xuXG4gICAgICAgICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9LyR7bW9kZWxGaWxlTmFtZX1gKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRNb2RlbChhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZEV4cHJlc3Npb247XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgbG9hZEN1YmlzbUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZE1vZGVsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ01vZGVsIGRhdGEgZG9lcyBub3QgZXhpc3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHByZXNzaW9uXG4gICAgICAgIGNvbnN0IGxvYWRDdWJpc21FeHByZXNzaW9uID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uQ291bnQoKSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25OYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25OYW1lKGkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHByZXNzaW9uRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKFxuICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHtleHByZXNzaW9uRmlsZU5hbWV9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5sb2FkRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25OYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9leHByZXNzaW9ucy5nZXRWYWx1ZShleHByZXNzaW9uTmFtZSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25OYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9ucy5zZXRWYWx1ZShleHByZXNzaW9uTmFtZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUsIG1vdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9uQ291bnQrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9leHByZXNzaW9uQ291bnQgPj0gY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUGh5c2ljcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkQ3ViaXNtUGh5c2ljcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkRXhwcmVzc2lvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUGh5c2ljcztcblxuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgbG9hZEN1YmlzbVBoeXNpY3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQaHlzaWNzXG4gICAgICAgIGNvbnN0IGxvYWRDdWJpc21QaHlzaWNzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKSAhPSAnJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBoeXNpY3NGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKTtcblxuICAgICAgICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHtwaHlzaWNzRmlsZU5hbWV9YClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkUGh5c2ljcyhhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFBvc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkQ3ViaXNtUG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkUGh5c2ljcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUG9zZTtcblxuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgbG9hZEN1YmlzbVBvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQb3NlXG4gICAgICAgIGNvbnN0IGxvYWRDdWJpc21Qb3NlID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRQb3NlRmlsZU5hbWUoKSAhPSAnJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2VGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRQb3NlRmlsZU5hbWUoKTtcblxuICAgICAgICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHtwb3NlRmlsZU5hbWV9YClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkUG9zZShhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBFeWVCbGluaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwRXllQmxpbmsoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBvc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBFeWVCbGluaztcblxuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgc2V0dXBFeWVCbGluaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEV5ZUJsaW5rXG4gICAgICAgIGNvbnN0IHNldHVwRXllQmxpbmsgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKSA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leWVCbGluayA9IEN1YmlzbUV5ZUJsaW5rLmNyZWF0ZSh0aGlzLl9tb2RlbFNldHRpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBCcmVhdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cEJyZWF0aCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEJyZWF0aFxuICAgICAgICBjb25zdCBzZXR1cEJyZWF0aCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2JyZWF0aCA9IEN1YmlzbUJyZWF0aC5jcmVhdGUoKTtcblxuICAgICAgICAgICAgY29uc3QgYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+ID0gbmV3IGNzbVZlY3RvcigpO1xuICAgICAgICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcbiAgICAgICAgICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVYLCAwLjAsIDE1LjAsIDYuNTM0NSwgMC41KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgICAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWSwgMC4wLCA4LjAsIDMuNTM0NSwgMC41KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgICAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWiwgMC4wLCAxMC4wLCA1LjUzNDUsIDAuNSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICAgICAgICAgIG5ldyBCcmVhdGhQYXJhbWV0ZXJEYXRhKHRoaXMuX2lkUGFyYW1Cb2R5QW5nbGVYLCAwLjAsIDQuMCwgMTUuNTM0NSwgMC41KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgICAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEoXG4gICAgICAgICAgICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyZWF0aFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAgICAgICAgIDAuNSxcbiAgICAgICAgICAgICAgICAgICAgMy4yMzQ1LFxuICAgICAgICAgICAgICAgICAgICAwLjVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLl9icmVhdGguc2V0UGFyYW1ldGVycyhicmVhdGhQYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFVzZXJEYXRhO1xuXG4gICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgbG9hZFVzZXJEYXRhKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVXNlckRhdGFcbiAgICAgICAgY29uc3QgbG9hZFVzZXJEYXRhID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRVc2VyRGF0YUZpbGUoKSAhPSAnJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEYXRhRmlsZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRVc2VyRGF0YUZpbGUoKTtcblxuICAgICAgICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHt1c2VyRGF0YUZpbGV9YClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkVXNlckRhdGEoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbmtJZHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR1cEV5ZUJsaW5rSWRzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFVzZXJEYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbmtJZHM7XG5cbiAgICAgICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBFeWVCbGlua0lkc1xuICAgICAgICBjb25zdCBzZXR1cEV5ZUJsaW5rSWRzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXllQmxpbmtJZENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV5ZUJsaW5rSWRDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXllQmxpbmtJZHMucHVzaEJhY2soXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cExpcFN5bmNJZHM7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cExpcFN5bmNJZHMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBMaXBTeW5jSWRzXG4gICAgICAgIGNvbnN0IHNldHVwTGlwU3luY0lkcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxpcFN5bmNJZENvdW50ID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpcFN5bmNJZENvdW50OyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXBTeW5jSWRzLnB1c2hCYWNrKHRoaXMuX21vZGVsU2V0dGluZy5nZXRMaXBTeW5jUGFyYW1ldGVySWQoaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cExheW91dDtcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIHNldHVwTGF5b3V0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTGF5b3V0XG4gICAgICAgIGNvbnN0IHNldHVwTGF5b3V0ID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGF5b3V0OiBjc21NYXA8c3RyaW5nLCBudW1iZXI+ID0gbmV3IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4oKTtcbiAgICAgICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRMYXlvdXRNYXAobGF5b3V0KTtcbiAgICAgICAgICAgIHRoaXMuX21vZGVsTWF0cml4LnNldHVwRnJvbUxheW91dChsYXlvdXQpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkTW90aW9uO1xuXG4gICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgbG9hZEN1YmlzbU1vdGlvbigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIE1vdGlvblxuICAgICAgICBjb25zdCBsb2FkQ3ViaXNtTW90aW9uID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZE1vdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgICB0aGlzLl9hbGxNb3Rpb25Db3VudCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25Db3VudCA9IDA7XG4gICAgICAgICAgICBjb25zdCBncm91cDogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICAgICAgY29uc3QgbW90aW9uR3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkdyb3VwQ291bnQoKTtcblxuICAgICAgICAgICAgLy8gRmluZCB0aGUgdG90YWwgbnVtYmVyIG9mIG1vdGlvbnNcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uR3JvdXBDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBbaV0gPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uR3JvdXBOYW1lKGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FsbE1vdGlvbkNvdW50ICs9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cFtpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvYWRpbmcgbW90aW9uXG4gICAgICAgICAgICBpZiAoTEFwcERlZmluZS5wcmVMb2FkTW90aW9uKSB7XG4gICAgICAgICAgICAgICAgTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSAmJiBMQXBwUGFsLnByaW50TWVzc2FnZSgncGVybG9hZCBtb3Rpb24nKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vdGlvbkdyb3VwQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZUxvYWRNb3Rpb25Hcm91cChncm91cFtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRUZXh0dXJlO1xuXG4gICAgICAgICAgICAgICAgLy8gU3RvcCBhbGwgbW90aW9uc1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RvcEFsbE1vdGlvbnMoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zdGFydFVwKGdsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0UmFuZG9tTW90aW9uKFwiU3RhcnRcIiwgTEFwcERlZmluZS5Qcmlvcml0eU5vcm1hbCwgKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlICYmIExBcHBQYWwucHJpbnRNZXNzYWdlKCdbTGl2ZTJEdjRdIFN0YXJ0IE1vdGlvbiBGaW5pc2hlZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODhuOCr+OCueODgeODo+ODpuODi+ODg+ODiOOBq+ODhuOCr+OCueODgeODo+OCkuODreODvOODieOBmeOCi1xuICAgICAqL1xuICAgIHByaXZhdGUgc2V0dXBUZXh0dXJlcygpOiB2b2lkIHtcbiAgICAgICAgLy8gaVBob25l44Gn44Gu44Ki44Or44OV44Kh5ZOB6LOq5ZCR5LiK44Gu44Gf44KBVHlwZXNjcmlwdOOBp+OBr3ByZW11bHRpcGxpZWRBbHBoYeOCkuaOoeeUqFxuICAgICAgICBjb25zdCB1c2VQcmVtdWx0aXBseSA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09IExvYWRTdGVwLkxvYWRUZXh0dXJlKSB7XG4gICAgICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Poqq3jgb/ovrzjgb/nlKhcbiAgICAgICAgICAgIGNvbnN0IHRleHR1cmVDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFRleHR1cmVDb3VudCgpO1xuXG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIGxldCBtb2RlbFRleHR1cmVOdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIG1vZGVsVGV4dHVyZU51bWJlciA8IHRleHR1cmVDb3VudDtcbiAgICAgICAgICAgICAgICBtb2RlbFRleHR1cmVOdW1iZXIrK1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8g44OG44Kv44K544OB44Oj5ZCN44GM56m65paH5a2X44Gg44Gj44Gf5aC05ZCI44Gv44Ot44O844OJ44O744OQ44Kk44Oz44OJ5Yem55CG44KS44K544Kt44OD44OXXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRUZXh0dXJlRmlsZU5hbWUobW9kZWxUZXh0dXJlTnVtYmVyKSA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0VGV4dHVyZUZpbGVOYW1lIG51bGwnKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gV2ViR0zjga7jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4jjgavjg4bjgq/jgrnjg4Hjg6PjgpLjg63jg7zjg4njgZnjgotcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHVyZVBhdGggPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGVOYW1lKFxuICAgICAgICAgICAgICAgICAgICBtb2RlbFRleHR1cmVOdW1iZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRleHR1cmVQYXRoID0gYCR7dGhpcy5fbW9kZWxIb21lRGlyfS8ke3RleHR1cmVQYXRofWA7XG5cbiAgICAgICAgICAgICAgICAvLyDjg63jg7zjg4nlrozkuobmmYLjgavlkbzjgbPlh7rjgZnjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICAgICAgICAgICAgICBjb25zdCBvbkxvYWQgPSAodGV4dHVyZUluZm86IFRleHR1cmVJbmZvKTogdm9pZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5iaW5kVGV4dHVyZShtb2RlbFRleHR1cmVOdW1iZXIsIHRleHR1cmVJbmZvLmlkKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0dXJlQ291bnQrKztcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGV4dHVyZUNvdW50ID49IHRleHR1cmVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Ot44O844OJ5a6M5LqGXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkNvbXBsZXRlU2V0dXA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8g6Kqt44G/6L6844G/XG4gICAgICAgICAgICAgICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKClcbiAgICAgICAgICAgICAgICAgICAgLmdldFRleHR1cmVNYW5hZ2VyKClcbiAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZSh0ZXh0dXJlUGF0aCwgdXNlUHJlbXVsdGlwbHksIG9uTG9hZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldElzUHJlbXVsdGlwbGllZEFscGhhKHVzZVByZW11bHRpcGx5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFRleHR1cmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6zjg7Pjg4Djg6njgpLlho3mp4vnr4njgZnjgotcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVsb2FkUmVuZGVyZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgICAgICB0aGlzLnNldHVwVGV4dHVyZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmm7TmlrBcbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGRlbHRhVGltZVNlY29uZHM6IG51bWJlciA9IExBcHBQYWwuZ2V0RGVsdGFUaW1lKCk7XG4gICAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZHJhZ1ggPSB0aGlzLl9kcmFnTWFuYWdlci5nZXRYKCk7XG4gICAgICAgIHRoaXMuX2RyYWdZID0gdGhpcy5fZHJhZ01hbmFnZXIuZ2V0WSgpO1xuXG4gICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBq+OCiOOCi+ODkeODqeODoeODvOOCv+abtOaWsOOBruacieeEoVxuICAgICAgICBsZXQgbW90aW9uVXBkYXRlZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdGhpcy5fbW9kZWwubG9hZFBhcmFtZXRlcnMoKTsgLy8g5YmN5Zue44K744O844OW44GV44KM44Gf54q25oWL44KS44Ot44O844OJXG4gICAgICAgIGlmICh0aGlzLl9tb3Rpb25NYW5hZ2VyLmlzRmluaXNoZWQoKSkge1xuICAgICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gu5YaN55Sf44GM44Gq44GE5aC05ZCI44CB5b6F5qmf44Oi44O844K344On44Oz44Gu5Lit44GL44KJ44Op44Oz44OA44Og44Gn5YaN55Sf44GZ44KLXG4gICAgICAgICAgICB0aGlzLnN0YXJ0UmFuZG9tTW90aW9uKFxuICAgICAgICAgICAgICAgIExBcHBEZWZpbmUuTW90aW9uR3JvdXBJZGxlLFxuICAgICAgICAgICAgICAgIExBcHBEZWZpbmUuUHJpb3JpdHlJZGxlXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW90aW9uVXBkYXRlZCA9IHRoaXMuX21vdGlvbk1hbmFnZXIudXBkYXRlTW90aW9uKFxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICAgICAgICAgIGRlbHRhVGltZVNlY29uZHNcbiAgICAgICAgICAgICk7IC8vIOODouODvOOCt+ODp+ODs+OCkuabtOaWsFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7IC8vIOeKtuaFi+OCkuS/neWtmFxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgLy8g44G+44Gw44Gf44GNXG4gICAgICAgIGlmICghbW90aW9uVXBkYXRlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V5ZUJsaW5rICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyDjg6HjgqTjg7Pjg6Ljg7zjgrfjg6fjg7Pjga7mm7TmlrDjgYzjgarjgYTjgajjgY1cbiAgICAgICAgICAgICAgICB0aGlzLl9leWVCbGluay51cGRhdGVQYXJhbWV0ZXJzKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTsgLy8g55uu44OR44OBXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIudXBkYXRlTW90aW9uKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTsgLy8g6KGo5oOF44Gn44OR44Op44Oh44O844K/5pu05paw77yI55u45a++5aSJ5YyW77yJXG4gICAgICAgIH1cblxuICAgICAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovlpInljJZcbiAgICAgICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL6aGU44Gu5ZCR44GN44Gu6Kq/5pW0XG4gICAgICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtQW5nbGVYLCB0aGlzLl9kcmFnWCAqIDMwKTsgLy8gLTMw44GL44KJMzDjga7lgKTjgpLliqDjgYjjgotcbiAgICAgICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1BbmdsZVksIHRoaXMuX2RyYWdZICogMzApO1xuICAgICAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICB0aGlzLl9pZFBhcmFtQW5nbGVaLFxuICAgICAgICAgICAgdGhpcy5fZHJhZ1ggKiB0aGlzLl9kcmFnWSAqIC0zMFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+S9k+OBruWQkeOBjeOBruiqv+aVtFxuICAgICAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICB0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCxcbiAgICAgICAgICAgIHRoaXMuX2RyYWdYICogMTBcbiAgICAgICAgKTsgLy8gLTEw44GL44KJMTDjga7lgKTjgpLliqDjgYjjgotcblxuICAgICAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovnm67jga7lkJHjgY3jga7oqr/mlbRcbiAgICAgICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1FeWVCYWxsWCwgdGhpcy5fZHJhZ1gpOyAvLyAtMeOBi+OCiTHjga7lgKTjgpLliqDjgYjjgotcbiAgICAgICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1FeWVCYWxsWSwgdGhpcy5fZHJhZ1kpO1xuXG4gICAgICAgIC8vIOWRvOWQuOOBquOBqVxuICAgICAgICBpZiAodGhpcy5fYnJlYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2JyZWF0aC51cGRhdGVQYXJhbWV0ZXJzKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOeJqeeQhua8lOeul+OBruioreWumlxuICAgICAgICBpZiAodGhpcy5fcGh5c2ljcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzLmV2YWx1YXRlKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOODquODg+ODl+OCt+ODs+OCr+OBruioreWumlxuICAgICAgICBpZiAodGhpcy5fbGlwc3luYykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAwOyAvLyDjg6rjgqLjg6vjgr/jgqTjg6Djgafjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLooYzjgYbloLTlkIjjgIHjgrfjgrnjg4bjg6DjgYvjgonpn7Pph4/jgpLlj5blvpfjgZfjgabjgIEwfjHjga7nr4Tlm7LjgaflgKTjgpLlhaXlipvjgZfjgb7jgZnjgIJcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saXBTeW5jSWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2xpcFN5bmNJZHMuYXQoaSksIHZhbHVlLCAwLjgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g44Od44O844K644Gu6Kit5a6aXG4gICAgICAgIGlmICh0aGlzLl9wb3NlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3Bvc2UudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb2RlbC51cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBwbGF5aW5nIHRoZSBtb3Rpb24gc3BlY2lmaWVkIGJ5IHRoZSBhcmd1bWVudFxuICAgICAqIEBwYXJhbSBncm91cCBNb3Rpb24gZ3JvdXAgbmFtZVxuICAgICAqIEBwYXJhbSBubyBOdW1iZXIgaW4gZ3JvdXBcbiAgICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXG4gICAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBhdCB0aGUgZW5kIG9mIG1vdGlvbiBwbGF5YmFja1xuICAgICAqIEByZXR1cm4gUmV0dXJucyB0aGUgaWRlbnRpZmljYXRpb24gbnVtYmVyIG9mIHRoZSBtb3Rpb24gdGhhdCBzdGFydGVkXG4gICAgICogSXQgaXMgdXNlZCBpbiB0aGUgYXJndW1lbnQgb2YgaXNGaW5pc2hlZCgpIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBpbmRpdmlkdWFsIG1vdGlvbiBoYXMgZmluaXNoZWQuXG4gICAgICogSWYgeW91IGNhbiBub3Qgc3RhcnQgWy0xXVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFydE1vdGlvbihcbiAgICAgICAgZ3JvdXA6IHN0cmluZyxcbiAgICAgICAgbm86IG51bWJlcixcbiAgICAgICAgcHJpb3JpdHk6IG51bWJlcixcbiAgICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgICAgIGlmIChwcmlvcml0eSA9PSBMQXBwRGVmaW5lLlByaW9yaXR5Rm9yY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc2V0UmVzZXJ2ZVByaW9yaXR5KHByaW9yaXR5KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fbW90aW9uTWFuYWdlci5yZXNlcnZlTW90aW9uKHByaW9yaXR5KSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdbTGl2ZTJEdjRdIEZBSUwgc3RhcnQgbW90aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cCwgbm8pO1xuICAgICAgICBjb25zdCBtb3Rpb25Tb3VuZEZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvblNvdW5kRmlsZU5hbWUoXG4gICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgIG5vXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1vdGlvblNvdW5kRGVsYXkgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uU291bmREZWxheShncm91cCwgbm8pO1xuICAgICAgICB0aGlzLnBsYXlNb3Rpb25Tb3VuZChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9LyR7bW90aW9uU291bmRGaWxlTmFtZX1gLCBtb3Rpb25Tb3VuZERlbGF5KTtcbiAgICAgICAgLy8gZXgpIGlkbGVfMFxuICAgICAgICBjb25zdCBuYW1lID0gYCR7Z3JvdXB9XyR7bm99YDtcbiAgICAgICAgbGV0IG1vdGlvbjogQ3ViaXNtTW90aW9uID0gdGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSBhcyBDdWJpc21Nb3Rpb247XG4gICAgICAgIGxldCBhdXRvRGVsZXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgIGBbTGl2ZTJEdjRdIGxvYWQgbW90aW9uOiAke21vdGlvbkZpbGVOYW1lfSA9PiBbJHtuYW1lfV1gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHttb3Rpb25GaWxlTmFtZX1gKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtb3Rpb24gPSB0aGlzLmxvYWRNb3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZhZGVUaW1lOiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBub1xuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlSW5UaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZhZGVUaW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXAsIG5vKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW90aW9uLnNldEZhZGVPdXRUaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtb3Rpb24uc2V0RWZmZWN0SWRzKHRoaXMuX2V5ZUJsaW5rSWRzLCB0aGlzLl9saXBTeW5jSWRzKTtcbiAgICAgICAgICAgICAgICAgICAgYXV0b0RlbGV0ZSA9IGZhbHNlOyAvLyBEZWxldGUgZnJvbSBtZW1vcnkgd2hlbiBmaW5pc2hlZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25zLnNldFZhbHVlKG5hbWUsIG1vdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0YXJ0TW90aW9uUHJpb3JpdHkoXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvRGVsZXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIob25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtMaXZlMkR2NF0gTW90aW9uIFN0YXJ0OiAke2dyb3VwfV8ke25vfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0YXJ0TW90aW9uUHJpb3JpdHkoXG4gICAgICAgICAgICBtb3Rpb24sXG4gICAgICAgICAgICBhdXRvRGVsZXRlLFxuICAgICAgICAgICAgcHJpb3JpdHlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmkq3mlL7liqjkvZzpn7PpopFcbiAgICAgKiBAcGFyYW0gc291bmRGaWxlTmFtZSDpn7PpopHmlofku7blnLDlnYBcbiAgICAgKiBAcGFyYW0gc291bmREZWxheSDpn7PpopHlu7bov59tc1xuICAgICAqL1xuICAgIHB1YmxpYyBwbGF5TW90aW9uU291bmQoc291bmRGaWxlTmFtZTogc3RyaW5nLCBzb3VuZERlbGF5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKC8oXFwubXAzfFxcLmFhY3xcXC5tNGF8XFwub3B1c3xcXC5vZ2d8XFwuY2FmfFxcLndhdnxcXC53ZWJtfFxcLmZsYWN8XFwubXA0KSQvaS50ZXN0KHNvdW5kRmlsZU5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBhdWRpb01vdGlvbiA9IG5ldyBBdWRpbygpO1xuICAgICAgICAgICAgYXVkaW9Nb3Rpb24uc3JjID0gc291bmRGaWxlTmFtZTtcbiAgICAgICAgICAgIGF1ZGlvTW90aW9uLmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF1ZGlvTW90aW9uXG4gICAgICAgICAgICAgICAgICAgIC5wbGF5KClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5fZGVidWdNb2RlICYmIGNvbnNvbGUubG9nKGBbTGl2ZTJEdjRdIHBsYXkgc291bmQ6ICR7c291bmRGaWxlTmFtZX0gZGVsYXk6ICR7c291bmREZWxheX1gKSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4gdGhpcy5fZGVidWdNb2RlICYmIGNvbnNvbGUuZXJyb3IoYFtMaXZlMkR2NF0gRkFJTEVEIHBsYXkgc291bmQ6ICR7c291bmRGaWxlTmFtZX0gJHtlfWApKVxuICAgICAgICAgICAgfSwgc291bmREZWxheSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCZWdpbiBwbGF5YmFjayBvZiBhIHJhbmRvbWx5IHNlbGVjdGVkIG1vdGlvbi5cbiAgICAgKiBAcGFyYW0gZ3JvdXAgTW90aW9uIGdyb3VwIG5hbWVcbiAgICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXG4gICAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBtb3Rpb24gcGxheWJhY2sgZW5kc1xuICAgICAqIEByZXR1cm4gUmV0dXJucyB0aGUgaWRlbnRpZmljYXRpb24gbnVtYmVyIG9mIHRoZSBzdGFydGVkIG1vdGlvbi5cbiAgICAgKiBJdCBpcyB1c2VkIGFzIHRoZSBhcmd1bWVudCBvZiBpc0ZpbmlzaGVkKCksIHdoaWNoIGRldGVybWluZXMgd2hldGhlciB0aGUgaW5kaXZpZHVhbCBtb3Rpb24gaXNGaW5pc2hlZCBvciBub3QuXG4gICAgICogSWYgeW91IGNhbiBub3Qgc3RhcnQgWy0xXVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFydFJhbmRvbU1vdGlvbihcbiAgICAgICAgZ3JvdXA6IHN0cmluZyxcbiAgICAgICAgcHJpb3JpdHk6IG51bWJlcixcbiAgICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXApID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgbm86IG51bWJlciA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgICBNYXRoLnJhbmRvbSgpICogdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0TW90aW9uKGdyb3VwLCBubywgcHJpb3JpdHksIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZhY2lhbCBleHByZXNzaW9uIG1vdGlvbiBzcGVjaWZpZWQgYnkgdGhlIGFyZ3VtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXhwcmVzc2lvbklkIEV4cHJlc3Npb24gbW90aW9uIElEXG4gICAgICovXG4gICAgcHVibGljIHNldEV4cHJlc3Npb24oZXhwcmVzc2lvbklkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbklkKTtcblxuICAgICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0xpdmUyRHY0XSBleHByZXNzaW9uOiBbJHtleHByZXNzaW9uSWR9XWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5zdGFydE1vdGlvblByaW9yaXR5KFxuICAgICAgICAgICAgICAgIG1vdGlvbixcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5Rm9yY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgICAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtMaXZlMkR2NF0gZXhwcmVzc2lvblske2V4cHJlc3Npb25JZH1dIGlzIG51bGxgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODqeODs+ODgOODoOOBq+mBuOOBsOOCjOOBn+ihqOaDheODouODvOOCt+ODp+ODs+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRSYW5kb21FeHByZXNzaW9uKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpID09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vOiBudW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLl9leHByZXNzaW9ucy5nZXRTaXplKCkpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZXhwcmVzc2lvbnMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09IG5vKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZTogc3RyaW5nID0gdGhpcy5fZXhwcmVzc2lvbnMuX2tleVZhbHVlc1tpXS5maXJzdDtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEV4cHJlc3Npb24obmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kk44OZ44Oz44OI44Gu55m654Gr44KS5Y+X44GR5Y+W44KLXG4gICAgICovXG4gICAgcHVibGljIG1vdGlvbkV2ZW50RmlyZWQoZXZlbnRWYWx1ZTogY3NtU3RyaW5nKTogdm9pZCB7XG4gICAgICAgIEN1YmlzbUxvZ0luZm8oJ3swfSBpcyBmaXJlZCBvbiBMQXBwTW9kZWwhIScsIGV2ZW50VmFsdWUucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5b2T44Gf44KK5Yik5a6a44OG44K544OIXG4gICAgICog5oyH5a6a77yp77yk44Gu6aCC54K544Oq44K544OI44GL44KJ55+p5b2i44KS6KiI566X44GX44CB5bqn5qiZ44KS44GM55+p5b2i56+E5Zuy5YaF44GL5Yik5a6a44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGl0QXJlbmFOYW1lICDlvZPjgZ/jgorliKTlrprjgpLjg4bjgrnjg4jjgZnjgovlr77osaHjga5JRFxuICAgICAqIEBwYXJhbSB4ICAgICAgICAgICAgIOWIpOWumuOCkuihjOOBhljluqfmqJlcbiAgICAgKiBAcGFyYW0geSAgICAgICAgICAgICDliKTlrprjgpLooYzjgYZZ5bqn5qiZXG4gICAgICovXG4gICAgcHVibGljIGhpdFRlc3QoaGl0QXJlbmFOYW1lOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIC8vIOmAj+aYjuaZguOBr+W9k+OBn+OCiuWIpOWumueEoeOBl+OAglxuICAgICAgICBpZiAodGhpcy5fb3BhY2l0eSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYXNDb3VudCgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhTmFtZShpKSA9PSBoaXRBcmVuYU5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkcmF3SWQ6IEN1YmlzbUlkSGFuZGxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFJZChpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0hpdChkcmF3SWQsIHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOagueaNrueCueWHu+S9jee9rui/lOWbniBIaXRBcmVhIOWQjeensFxuICAgICAqIEBwYXJhbSB4XG4gICAgICogQHBhcmFtIHlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SGl0QXJlYU5hbWUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICAvLyDpgI/mmI7mmYLjga/lvZPjgZ/jgorliKTlrprnhKHjgZfjgIJcbiAgICAgICAgaWYgKHRoaXMuX29wYWNpdHkgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhc0NvdW50KCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkcmF3SWQ6IEN1YmlzbUlkSGFuZGxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFJZChpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSGl0KGRyYXdJZCwgeCwgeSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFOYW1lKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZCBtb3Rpb24gZGF0YSBpbiBiYXRjaCBmcm9tIGdyb3VwIG5hbWUuXG4gICAgICogVGhlIG5hbWUgb2YgbW90aW9uIGRhdGEgaXMgb2J0YWluZWQgaW50ZXJuYWxseSBmcm9tIE1vZGVsU2V0dGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBncm91cCBHcm91cCBuYW1lIG9mIG1vdGlvbiBkYXRhXG4gICAgICovXG4gICAgcHVibGljIHByZUxvYWRNb3Rpb25Hcm91cChncm91cDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cCwgaSk7XG4gICAgICAgICAgICAvLyBleCkgaWRsZV8wXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gYCR7Z3JvdXB9XyR7aX1gO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICBgW0xpdmUyRHY0XSBsb2FkIG1vdGlvbjogJHttb3Rpb25GaWxlTmFtZX0gPT4gWyR7bmFtZX1dYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0vJHttb3Rpb25GaWxlTmFtZX1gKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBNb3Rpb246IEN1YmlzbU1vdGlvbiA9IHRoaXMubG9hZE1vdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKGdyb3VwLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wTW90aW9uLnNldEZhZGVJblRpbWUoZmFkZVRpbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShncm91cCwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcE1vdGlvbi5zZXRGYWRlT3V0VGltZShmYWRlVGltZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG1wTW90aW9uLnNldEVmZmVjdElkcyh0aGlzLl9leWVCbGlua0lkcywgdGhpcy5fbGlwU3luY0lkcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vdGlvbnMuZ2V0VmFsdWUobmFtZSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQUN1YmlzbU1vdGlvbi5kZWxldGUodGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25zLnNldFZhbHVlKG5hbWUsIHRtcE1vdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vdGlvbkNvdW50ID49IHRoaXMuX2FsbE1vdGlvbkNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRUZXh0dXJlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIGFsbCBtb3Rpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnN0YXJ0VXAoZ2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFJhbmRvbU1vdGlvbihcIlN0YXJ0XCIsIExBcHBEZWZpbmUuUHJpb3JpdHlOb3JtYWwsICgpOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlICYmIExBcHBQYWwucHJpbnRNZXNzYWdlKCdbTGl2ZTJEdjRdIFN0YXJ0IE1vdGlvbiBGaW5pc2hlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOBmeOBueOBpuOBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuino+aUvuOBmeOCi+OAglxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlTW90aW9ucygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fbW90aW9ucy5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWFqOOBpuOBruihqOaDheODh+ODvOOCv+OCkuino+aUvuOBmeOCi+OAglxuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlRXhwcmVzc2lvbnMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Oi44OH44Or44KS5o+P55S744GZ44KL5Yem55CG44CC44Oi44OH44Or44KS5o+P55S744GZ44KL56m66ZaT44GuVmlldy1Qcm9qZWN0aW9u6KGM5YiX44KS5rih44GZ44CCXG4gICAgICovXG4gICAgcHVibGljIGRvRHJhdygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHJldHVybjtcblxuICAgICAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnjgrXjgqTjgrrjgpLmuKHjgZlcbiAgICAgICAgY29uc3Qgdmlld3BvcnQ6IG51bWJlcltdID0gWzAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodF07XG5cbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldFJlbmRlclN0YXRlKGZyYW1lQnVmZmVyLCB2aWV3cG9ydCk7XG4gICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5kcmF3TW9kZWwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovlh6bnkIbjgILjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovnqbrplpPjga5WaWV3LVByb2plY3Rpb27ooYzliJfjgpLmuKHjgZnjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgZHJhdyhtYXRyaXg6IEN1YmlzbU1hdHJpeDQ0KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlkIToqq3jgb/ovrzjgb/ntYLkuoblvoxcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09IExvYWRTdGVwLkNvbXBsZXRlU2V0dXApIHtcbiAgICAgICAgICAgIG1hdHJpeC5tdWx0aXBseUJ5TWF0cml4KHRoaXMuX21vZGVsTWF0cml4KTtcblxuICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldE12cE1hdHJpeChtYXRyaXgpO1xuXG4gICAgICAgICAgICB0aGlzLmRvRHJhdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGRlYnVnTW9kZSkge1xuICAgICAgICBzdXBlcihkZWJ1Z01vZGUpO1xuXG4gICAgICAgIHRoaXMuX21vZGVsU2V0dGluZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX21vZGVsSG9tZURpciA9IG51bGw7XG4gICAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcblxuICAgICAgICB0aGlzLl9leWVCbGlua0lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG4gICAgICAgIHRoaXMuX2xpcFN5bmNJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuXG4gICAgICAgIHRoaXMuX21vdGlvbnMgPSBuZXcgY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj4oKTtcbiAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMgPSBuZXcgY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj4oKTtcblxuICAgICAgICB0aGlzLl9oaXRBcmVhID0gbmV3IGNzbVZlY3Rvcjxjc21SZWN0PigpO1xuICAgICAgICB0aGlzLl91c2VyQXJlYSA9IG5ldyBjc21WZWN0b3I8Y3NtUmVjdD4oKTtcblxuICAgICAgICB0aGlzLl9pZFBhcmFtQW5nbGVYID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVYXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2lkUGFyYW1BbmdsZVkgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5faWRQYXJhbUFuZ2xlWiA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWlxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9pZFBhcmFtRXllQmFsbFggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWFxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9pZFBhcmFtRXllQmFsbFkgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVhcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRBc3NldHM7XG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb25Db3VudCA9IDA7XG4gICAgICAgIHRoaXMuX3RleHR1cmVDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX21vdGlvbkNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fYWxsTW90aW9uQ291bnQgPSAwO1xuICAgIH1cblxuICAgIF9tb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmc7IC8vIOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsOaDheWgsVxuICAgIF9tb2RlbEhvbWVEaXI6IHN0cmluZzsgLy8g44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw44GM572u44GL44KM44Gf44OH44Kj44Os44Kv44OI44OqXG4gICAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuXG4gICAgX2V5ZUJsaW5rSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/nnqzjgY3mqZ/og73nlKjjg5Hjg6njg6Hjg7zjgr9JRFxuICAgIF9saXBTeW5jSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/jg6rjg4Pjg5fjgrfjg7Pjgq/mqZ/og73nlKjjg5Hjg6njg6Hjg7zjgr9JRFxuXG4gICAgX21vdGlvbnM6IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+OyAvLyDoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Pjga7jg6rjgrnjg4hcbiAgICBfZXhwcmVzc2lvbnM6IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+OyAvLyDoqq3jgb/ovrzjgb7jgozjgabjgYTjgovooajmg4Xjga7jg6rjgrnjg4hcblxuICAgIF9oaXRBcmVhOiBjc21WZWN0b3I8Y3NtUmVjdD47XG4gICAgX3VzZXJBcmVhOiBjc21WZWN0b3I8Y3NtUmVjdD47XG5cbiAgICBfaWRQYXJhbUFuZ2xlWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUFuZ2xlWFxuICAgIF9pZFBhcmFtQW5nbGVZOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtQW5nbGVZXG4gICAgX2lkUGFyYW1BbmdsZVo6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVpcbiAgICBfaWRQYXJhbUV5ZUJhbGxYOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtRXllQmFsbFhcbiAgICBfaWRQYXJhbUV5ZUJhbGxZOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SUQ6IFBhcmFtRXllQkFsbFlcbiAgICBfaWRQYXJhbUJvZHlBbmdsZVg6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1Cb2R5QW5nbGVYXG5cbiAgICBfc3RhdGU6IG51bWJlcjsgLy8g54++5Zyo44Gu44K544OG44O844K/44K5566h55CG55SoXG4gICAgX2V4cHJlc3Npb25Db3VudDogbnVtYmVyOyAvLyDooajmg4Xjg4fjg7zjgr/jgqvjgqbjg7Pjg4hcbiAgICBfdGV4dHVyZUNvdW50OiBudW1iZXI7IC8vIOODhuOCr+OCueODgeODo+OCq+OCpuODs+ODiFxuICAgIF9tb3Rpb25Db3VudDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgqvjgqbjg7Pjg4hcbiAgICBfYWxsTW90aW9uQ291bnQ6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz57eP5pWwXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIOODl+ODqeODg+ODiOODleOCqeODvOODoOS+neWtmOapn+iDveOCkuaKveixoeWMluOBmeOCiyBDdWJpc20gUGxhdGZvcm0gQWJzdHJhY3Rpb24gTGF5ZXIuXG4gKlxuICog44OV44Kh44Kk44Or6Kqt44G/6L6844G/44KE5pmC5Yi75Y+W5b6X562J44Gu44OX44Op44OD44OI44OV44Kp44O844Og44Gr5L6d5a2Y44GZ44KL6Zai5pWw44KS44G+44Go44KB44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwUGFsIHtcbiAgLyoqXG4gICAqIOODleOCoeOCpOODq+OCkuODkOOCpOODiOODh+ODvOOCv+OBqOOBl+OBpuiqreOBv+OBk+OCgFxuICAgKlxuICAgKiBAcGFyYW0gZmlsZVBhdGgg6Kqt44G/6L6844G/5a++6LGh44OV44Kh44Kk44Or44Gu44OR44K5XG4gICAqIEByZXR1cm5cbiAgICoge1xuICAgKiAgICAgIGJ1ZmZlciwgICDoqq3jgb/ovrzjgpPjgaDjg5DjgqTjg4jjg4fjg7zjgr9cbiAgICogICAgICBzaXplICAgICAgICDjg5XjgqHjgqTjg6vjgrXjgqTjgrpcbiAgICogfVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBsb2FkRmlsZUFzQnl0ZXMoXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcbiAgICBjYWxsYmFjazogKGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIGZldGNoKGZpbGVQYXRoKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IGNhbGxiYWNrKGFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44Or44K/5pmC6ZaT77yI5YmN5Zue44OV44Os44O844Og44Go44Gu5beu5YiG77yJ44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OH44Or44K/5pmC6ZaTW21zXVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXREZWx0YVRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zX2RlbHRhVGltZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdXBkYXRlVGltZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNfY3VycmVudEZyYW1lID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLnNfZGVsdGFUaW1lID0gKHRoaXMuc19jdXJyZW50RnJhbWUgLSB0aGlzLnNfbGFzdEZyYW1lKSAvIDEwMDA7XG4gICAgdGhpcy5zX2xhc3RGcmFtZSA9IHRoaXMuc19jdXJyZW50RnJhbWU7XG4gIH1cblxuICAvKipcbiAgICog44Oh44OD44K744O844K444KS5Ye65Yqb44GZ44KLXG4gICAqIEBwYXJhbSBtZXNzYWdlIOaWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcmludE1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZS5pbmRleE9mKCdbTGl2ZTJEdjRdJykgPiAtMSA/IG1lc3NhZ2UgOiBgW0xpdmUyRHY0XSAke21lc3NhZ2V9YCk7XG4gIH1cblxuICBzdGF0aWMgbGFzdFVwZGF0ZSA9IERhdGUubm93KCk7XG5cbiAgc3RhdGljIHNfY3VycmVudEZyYW1lID0gMC4wO1xuICBzdGF0aWMgc19sYXN0RnJhbWUgPSAwLjA7XG4gIHN0YXRpYyBzX2RlbHRhVGltZSA9IDAuMDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCBDc21fY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcbmltcG9ydCBjc21WZWN0b3JfaXRlcmF0b3IgPSBjc212ZWN0b3IuaXRlcmF0b3I7XG5pbXBvcnQgeyBnbCB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcblxuLyoqXG4gKiBUZXh0dXJlIG1hbmFnZW1lbnQgY2xhc3NcbiAqIEEgY2xhc3MgdGhhdCBsb2FkcyBhbmQgbWFuYWdlcyBpbWFnZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwVGV4dHVyZU1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl90ZXh0dXJlcyA9IG5ldyBDc21fY3NtVmVjdG9yPFRleHR1cmVJbmZvPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgZ2wuZGVsZXRlVGV4dHVyZShpdGUucHRyKCkuaWQpO1xuICAgIH1cbiAgICB0aGlzLl90ZXh0dXJlcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP6Kqt44G/6L6844G/XG4gICAqXG4gICAqIEBwYXJhbSBmaWxlTmFtZSDoqq3jgb/ovrzjgoDnlLvlg4/jg5XjgqHjgqTjg6vjg5HjgrnlkI1cbiAgICogQHBhcmFtIHVzZVByZW11bHRpcGx5IFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgICogQHJldHVybiDnlLvlg4/mg4XloLHjgIHoqq3jgb/ovrzjgb/lpLHmlZfmmYLjga9udWxs44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgdXNlUHJlbXVsdGlwbHk6IGJvb2xlYW4sXG4gICAgY2FsbGJhY2s6ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pID0+IHZvaWRcbiAgKTogdm9pZCB7XG4gICAgLy8gc2VhcmNoIGxvYWRlZCB0ZXh0dXJlIGFscmVhZHlcbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogY3NtVmVjdG9yX2l0ZXJhdG9yPFRleHR1cmVJbmZvPiA9IHRoaXMuX3RleHR1cmVzLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fdGV4dHVyZXMuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGl0ZS5wdHIoKS5maWxlTmFtZSA9PSBmaWxlTmFtZSAmJlxuICAgICAgICBpdGUucHRyKCkudXNlUHJlbXVsdHBseSA9PSB1c2VQcmVtdWx0aXBseVxuICAgICAgKSB7XG4gICAgICAgIC8vIDLlm57nm67ku6XpmY3jga/jgq3jg6Pjg4Pjgrfjg6XjgYzkvb/nlKjjgZXjgozjgoso5b6F44Gh5pmC6ZaT44Gq44GXKVxuICAgICAgICAvLyBXZWJLaXTjgafjga/lkIzjgZhJbWFnZeOBrm9ubG9hZOOCkuWGjeW6puWRvOOBtuOBq+OBr+WGjeOCpOODs+OCueOCv+ODs+OCueOBjOW/heimgVxuICAgICAgICAvLyDoqbPntLDvvJpodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTAyNDE4MVxuXG4gICAgICAgIGlmICh3aW5kb3cud2VicFJlYWR5ID09PSB0cnVlKVxuICAgICAgICAgIGZpbGVOYW1lID0gZmlsZU5hbWUuY29uY2F0KFwiLndlYnBcIik7XG4gICAgICAgIGxldCB0cmllZE9yaWdpbiA9IGZhbHNlO1xuICAgICAgICBpdGUucHRyKCkuaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiO1xuICAgICAgICBpdGUucHRyKCkuaW1nLm9ubG9hZCA9ICgpOiB2b2lkID0+IGNhbGxiYWNrKGl0ZS5wdHIoKSk7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcuc3JjID0gZmlsZU5hbWU7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcub25lcnJvciA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgICBpZiAod2luZG93LndlYnBSZWFkeSA9PT0gdHJ1ZSAmJiB0cmllZE9yaWdpbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9hZCBXZWJQIGltYWdlOiBcIiArIGl0ZS5wdHIoKS5pbWcuc3JjICsgXCIgTG9hZCBvcmlnaW4gZmlsZSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgIHRyaWVkT3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgICAgIGl0ZS5wdHIoKS5pbWcuc3JjID0gZmlsZU5hbWUucmVwbGFjZSgvXFwud2VicCQvLCBcIlwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2FkIGltYWdlOiBcIiArIGl0ZS5wdHIoKS5pbWcuc3JjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3aW5kb3cud2VicFJlYWR5ID09PSB0cnVlKVxuICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5jb25jYXQoXCIud2VicFwiKTtcbiAgICBsZXQgdHJpZWRPcmlnaW4gPSBmYWxzZTtcbiAgICAvLyDjg4fjg7zjgr/jga7jgqrjg7Pjg63jg7zjg4njgpLjg4jjg6rjgqzjg7zjgavjgZnjgotcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiO1xuICAgIGltZy5vbmxvYWQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgqrjg5bjgrjjgqfjgq/jg4jjga7kvZzmiJBcbiAgICAgIGNvbnN0IHRleDogV2ViR0xUZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgLy8g44OG44Kv44K544OB44Oj44KS6YG45oqeXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgavjg5Tjgq/jgrvjg6vjgpLmm7jjgY3ovrzjgoBcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUixcbiAgICAgICAgZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICAgICk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcblxuICAgICAgLy8gUHJlbXVsdOWHpueQhuOCkuihjOOCj+OBm+OCi1xuICAgICAgaWYgKHVzZVByZW11bHRpcGx5KSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OBq+ODlOOCr+OCu+ODq+OCkuabuOOBjei+vOOCgFxuICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWcpO1xuXG4gICAgICAvLyDjg5/jg4Pjg5fjg57jg4Pjg5fjgpLnlJ/miJBcbiAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PjgpLjg5DjgqTjg7Pjg4lcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICBjb25zdCB0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8gPSBuZXcgVGV4dHVyZUluZm8oKTtcbiAgICAgIGlmICh0ZXh0dXJlSW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHRleHR1cmVJbmZvLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgIHRleHR1cmVJbmZvLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICB0ZXh0dXJlSW5mby5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICB0ZXh0dXJlSW5mby5pZCA9IHRleDtcbiAgICAgICAgdGV4dHVyZUluZm8uaW1nID0gaW1nO1xuICAgICAgICB0ZXh0dXJlSW5mby51c2VQcmVtdWx0cGx5ID0gdXNlUHJlbXVsdGlwbHk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnB1c2hCYWNrKHRleHR1cmVJbmZvKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sodGV4dHVyZUluZm8pO1xuICAgIH07XG4gICAgaW1nLm9uZXJyb3IgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAod2luZG93LndlYnBSZWFkeSA9PT0gdHJ1ZSAmJiB0cmllZE9yaWdpbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2FkIFdlYlAgaW1hZ2U6IFwiICsgaW1nLnNyYyArIFwiIExvYWQgb3JpZ2luIGZpbGUgaW5zdGVhZC5cIik7XG4gICAgICAgIHRyaWVkT3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgaW1nLnNyYyA9IGZpbGVOYW1lLnJlcGxhY2UoL1xcLndlYnAkLywgXCJcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGxvYWQgaW1hZ2U6IFwiICsgaW1nLnNyYyk7XG4gICAgICB9XG4gICAgfVxuICAgIGltZy5zcmMgPSBmaWxlTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jga7op6PmlL5cbiAgICpcbiAgICog6YWN5YiX44Gr5a2Y5Zyo44GZ44KL55S75YOP5YWo44Gm44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVRleHR1cmVzKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLl90ZXh0dXJlcy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDmjIflrprjgZfjgZ/jg4bjgq/jgrnjg4Hjg6Pjga7nlLvlg4/jgpLop6PmlL7jgZnjgovjgIJcbiAgICogQHBhcmFtIHRleHR1cmUg6Kej5pS+44GZ44KL44OG44Kv44K544OB44OjXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVRleHR1cmVCeVRleHR1cmUodGV4dHVyZTogV2ViR0xUZXh0dXJlKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVzLmF0KGkpLmlkICE9IHRleHR1cmUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnJlbW92ZShpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jga7op6PmlL5cbiAgICpcbiAgICog5oyH5a6a44GX44Gf5ZCN5YmN44Gu55S75YOP44KS6Kej5pS+44GZ44KL44CCXG4gICAqIEBwYXJhbSBmaWxlTmFtZSDop6PmlL7jgZnjgovnlLvlg4/jg5XjgqHjgqTjg6vjg5HjgrnlkI1cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZUJ5RmlsZVBhdGgoZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl90ZXh0dXJlcy5hdChpKS5maWxlTmFtZSA9PSBmaWxlTmFtZSkge1xuICAgICAgICB0aGlzLl90ZXh0dXJlcy5zZXQoaSwgbnVsbCk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnJlbW92ZShpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3RleHR1cmVzOiBDc21fY3NtVmVjdG9yPFRleHR1cmVJbmZvPjtcbn1cblxuLyoqXG4gKiDnlLvlg4/mg4XloLHmp4vpgKDkvZNcbiAqL1xuZXhwb3J0IGNsYXNzIFRleHR1cmVJbmZvIHtcbiAgaW1nOiBIVE1MSW1hZ2VFbGVtZW50OyAvLyDnlLvlg49cbiAgaWQ6IFdlYkdMVGV4dHVyZSA9IG51bGw7IC8vIOODhuOCr+OCueODgeODo1xuICB3aWR0aCA9IDA7IC8vIOaoquW5hVxuICBoZWlnaHQgPSAwOyAvLyDpq5jjgZVcbiAgdXNlUHJlbXVsdHBseTogYm9vbGVhbjsgLy8gUHJlbXVsdOWHpueQhuOCkuacieWKueOBq+OBmeOCi+OBi1xuICBmaWxlTmFtZTogc3RyaW5nOyAvLyDjg5XjgqHjgqTjg6vlkI1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21NYXRyaXg0NCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtdmlld21hdHJpeCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc212aWV3bWF0cml4JztcbmltcG9ydCBDc21fQ3ViaXNtVmlld01hdHJpeCA9IGN1YmlzbXZpZXdtYXRyaXguQ3ViaXNtVmlld01hdHJpeDtcbmltcG9ydCBDc21fQ3ViaXNtTWF0cml4NDQgPSBjdWJpc21NYXRyaXg0NC5DdWJpc21NYXRyaXg0NDtcbmltcG9ydCB7IFRvdWNoTWFuYWdlciB9IGZyb20gJy4vdG91Y2htYW5hZ2VyJztcbmltcG9ydCB7IExBcHBMaXZlMkRNYW5hZ2VyIH0gZnJvbSAnLi9sYXBwbGl2ZTJkbWFuYWdlcic7XG5pbXBvcnQgeyBMQXBwRGVsZWdhdGUsIGNhbnZhcywgZ2wgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwU3ByaXRlIH0gZnJvbSAnLi9sYXBwc3ByaXRlJztcbmltcG9ydCB7IFRleHR1cmVJbmZvIH0gZnJvbSAnLi9sYXBwdGV4dHVyZW1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5cbi8qKlxuICogRHJhd2luZyBjbGFzc2VzLlxuICovXG5leHBvcnQgY2xhc3MgTEFwcFZpZXcge1xuICAvKipcbiAgICogY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3Byb2dyYW1JZCA9IG51bGw7XG5cbiAgICAvLyBUb3VjaCByZWxhdGVkIGV2ZW50IG1hbmFnZW1lbnRcbiAgICB0aGlzLl90b3VjaE1hbmFnZXIgPSBuZXcgVG91Y2hNYW5hZ2VyKCk7XG5cbiAgICAvLyBGb3IgY29udmVydGluZyBkZXZpY2UgY29vcmRpbmF0ZXMgdG8gc2NyZWVuIGNvb3JkaW5hdGVzXG4gICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4gPSBuZXcgQ3NtX0N1YmlzbU1hdHJpeDQ0KCk7XG5cbiAgICAvLyBNYXRyaXggZm9yIHNjYWxpbmcgYW5kIHNoaWZ0aW5nIHRoZSBkaXNwbGF5XG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG5ldyBDc21fQ3ViaXNtVmlld01hdHJpeCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgY29uc3QgcmF0aW86IG51bWJlciA9IGhlaWdodCAvIHdpZHRoO1xuICAgIGNvbnN0IGxlZnQ6IG51bWJlciA9IExBcHBEZWZpbmUuVmlld0xvZ2ljYWxMZWZ0O1xuICAgIGNvbnN0IHJpZ2h0OiBudW1iZXIgPSBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsUmlnaHQ7XG4gICAgY29uc3QgYm90dG9tOiBudW1iZXIgPSAtcmF0aW87XG4gICAgY29uc3QgdG9wOiBudW1iZXIgPSByYXRpbztcblxuICAgIC8vIFJhbmdlIG9mIHNjcmVlbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBkZXZpY2UuVGhlIGxlZnQgZW5kIG9mIFgsIHRoZSByaWdodCBlbmQgb2YgWCwgdGhlIGJvdHRvbSBlbmQgb2YgWSwgdGhlIHRvcCBlbmQgb2YgWVxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0U2NyZWVuUmVjdChsZWZ0LCByaWdodCwgYm90dG9tLCB0b3ApO1xuXG4gICAgY29uc3Qgc2NyZWVuVzogbnVtYmVyID0gTWF0aC5hYnMobGVmdCAtIHJpZ2h0KTtcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbi5zY2FsZVJlbGF0aXZlKHNjcmVlblcgLyB3aWR0aCwgLXNjcmVlblcgLyB3aWR0aCk7XG4gICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNsYXRlUmVsYXRpdmUoLXdpZHRoICogMC41LCAtaGVpZ2h0ICogMC41KTtcblxuICAgIC8vIFNldHRpbmcgdGhlIGRpc3BsYXkgcmFuZ2VcbiAgICB0aGlzLl92aWV3TWF0cml4LnNldE1heFNjYWxlKExBcHBEZWZpbmUuVmlld01heFNjYWxlKTsgLy8g6ZmQ55WM5ouh5by1546HXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNaW5TY2FsZShMQXBwRGVmaW5lLlZpZXdNaW5TY2FsZSk7IC8vIOmZkOeVjOe4ruWwj+eOh1xuXG4gICAgLy8gTWF4aW11bSByYW5nZSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWRcbiAgICB0aGlzLl92aWV3TWF0cml4LnNldE1heFNjcmVlblJlY3QoXG4gICAgICBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTWF4TGVmdCxcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhSaWdodCxcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhCb3R0b20sXG4gICAgICBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTWF4VG9wXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3ZpZXdNYXRyaXggPSBudWxsO1xuICAgIHRoaXMuX3RvdWNoTWFuYWdlciA9IG51bGw7XG4gICAgdGhpcy5fZGV2aWNlVG9TY3JlZW4gPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSWQpO1xuICAgIHRoaXMuX3Byb2dyYW1JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5o+P55S744GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgIGdsLnVzZVByb2dyYW0odGhpcy5fcHJvZ3JhbUlkKTtcblxuICAgIGdsLmZsdXNoKCk7XG5cbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbiAgICBsaXZlMkRNYW5hZ2VyLm9uVXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgaW1hZ2UuXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZVNwcml0ZSgpOiB2b2lkIHtcbiAgICBjb25zdCB3aWR0aDogbnVtYmVyID0gY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodDogbnVtYmVyID0gY2FudmFzLmhlaWdodDtcblxuICAgIGNvbnN0IHRleHR1cmVNYW5hZ2VyID0gTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuZ2V0VGV4dHVyZU1hbmFnZXIoKTtcblxuICAgIC8vIENyZWF0ZSBhIHNoYWRlci5cbiAgICBpZiAodGhpcy5fcHJvZ3JhbUlkID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3Byb2dyYW1JZCA9IExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmNyZWF0ZVNoYWRlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdCBpcyBjYWxsZWQgd2hlbiBpdCBpcyB0b3VjaGVkLlxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnRYIFNjcmVlbiB4LWNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSBwb2ludFkgU2NyZWVuIHktY29vcmRpbmF0ZXNcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNCZWdhbihwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl90b3VjaE1hbmFnZXIudG91Y2hlc0JlZ2FuKHBvaW50WCwgcG9pbnRZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBmaW5nZXIgaXMgdG91Y2hlZCwgaXQgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnRYIFNjcmVlbiBYIGNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSBwb2ludFkgU2NyZWVuIFkgY29vcmRpbmF0ZXNcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNNb3ZlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBjb25zdCB2aWV3WDogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WCh0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpKTtcbiAgICBjb25zdCB2aWV3WDogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WChwb2ludFgpO1xuICAgIC8vIGNvbnN0IHZpZXdZOiBudW1iZXIgPSB0aGlzLnRyYW5zZm9ybVZpZXdZKHRoaXMuX3RvdWNoTWFuYWdlci5nZXRZKCkpO1xuICAgIGNvbnN0IHZpZXdZOiBudW1iZXIgPSB0aGlzLnRyYW5zZm9ybVZpZXdZKHBvaW50WSk7XG4gICAgLy8gdGhpcy5fdG91Y2hNYW5hZ2VyLnRvdWNoZXNNb3ZlZChwb2ludFgsIHBvaW50WSk7XG5cbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSAmJlxuICAgICAgTEFwcERlZmluZS5EZWJ1Z1RvdWNoTG9nRW5hYmxlICYmXG4gICAgICBjb25zb2xlLmxvZyhgW0xpdmUyRHY0XSBwb2ludFg6ICR7cG9pbnRYfSBwb2ludFk6ICR7cG9pbnRZfVxuICAgICAgICAgIHZpZXdYOiAke3ZpZXdYfSB2aWV3WTogJHt2aWV3WX1gKTtcbiAgICBsaXZlMkRNYW5hZ2VyLm9uRHJhZyh2aWV3WCwgdmlld1kpO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0IGlzIGNhbGxlZCB3aGVuIHRoZSB0b3VjaCBpcyBmaW5pc2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHBvaW50WCBTY3JlZW4gWCBjb29yZGluYXRlc1xuICAgKiBAcGFyYW0gcG9pbnRZIFNjcmVlbiBZIGNvb3JkaW5hdGVzXG4gICAqL1xuICBwdWJsaWMgb25Ub3VjaGVzRW5kZWQocG9pbnRYOiBudW1iZXIsIHBvaW50WTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gVG91Y2ggZG9uZS5cbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgLy8gbGl2ZTJETWFuYWdlci5vbkRyYWcoMC4wLCAwLjApO1xuICAgIHtcbiAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbTGl2ZTJEdjRdIHRvdWNoZXNFbmRlZCB4OiAke3BvaW50WH0geTogJHtwb2ludFl9YCk7XG4gICAgICB9XG4gICAgICAvLyBTaW5nbGUgdGFwXG4gICAgICBjb25zdCB4OiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKFxuICAgICAgICAvLyB0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpXG4gICAgICAgIHBvaW50WCAvLyDljp/ku6PnoIHkvb/nlKjmjInkuIvml7bnmoTlnZDmoIfvvIznu4/luLjml6Dms5Xop6blj5HliqjkvZzvvIzmlLnkuLrkvb/nlKjlvLnotbfml7bnmoTlnZDmoIdcbiAgICAgICk7IC8vIExvZ2ljYWwgY29vcmRpbmF0ZXMgZ2V0IHRoZSB0cmFuc2Zvcm1lZCBjb29yZGluYXRlcy5cbiAgICAgIGNvbnN0IHk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoXG4gICAgICAgIC8vIHRoaXMuX3RvdWNoTWFuYWdlci5nZXRZKClcbiAgICAgICAgcG9pbnRZIC8vIOWOn+S7o+eggeS9v+eUqOaMieS4i+aXtueahOWdkOagh++8jOe7j+W4uOaXoOazleinpuWPkeWKqOS9nO+8jOaUueS4uuS9v+eUqOW8uei1t+aXtueahOWdkOagh1xuICAgICAgKTsgLy8gTG9naWNhbCBjb29yZGluYXRlcyBnZXQgY2hhbmdlZCBjb29yZGluYXRlcy5cblxuICAgICAgbGl2ZTJETWFuYWdlci5vblRhcCh4LCB5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgWCBjb29yZGluYXRlcyB0byBWaWV3IGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBAcGFyYW0gZGV2aWNlWCBEZXZpY2UgWCBjb29yZGluYXRlXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtVmlld1goZGV2aWNlWDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBzY3JlZW5YOiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKGRldmljZVgpOyAvLyDoq5bnkIbluqfmqJnlpInmj5vjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcbiAgICByZXR1cm4gdGhpcy5fdmlld01hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHNjcmVlblgpOyAvLyDmi6HlpKfjgIHnuK7lsI/jgIHnp7vli5Xlvozjga7lgKTjgIJcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBZIGNvb3JkaW5hdGVzIHRvIFZpZXcgY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VZIERldmljZSB5LWNvb3JkaW5hdGVcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WShkZXZpY2VZOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNjcmVlblk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoZGV2aWNlWSk7IC8vIExvZ2ljYWwgY29vcmRpbmF0ZXMgZ2V0IHRoZSB0cmFuc2Zvcm1lZCBjb29yZGluYXRlcy5cbiAgICByZXR1cm4gdGhpcy5fdmlld01hdHJpeC5pbnZlcnRUcmFuc2Zvcm1ZKHNjcmVlblkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIFggY29vcmRpbmF0ZXMgdG8gU2NyZWVuIGNvb3JkaW5hdGVzLlxuICAgKiBAcGFyYW0gZGV2aWNlWCBEZXZpY2UgWCBjb29yZGluYXRlXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtU2NyZWVuWChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKGRldmljZVgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIFkgY29vcmRpbmF0ZXMgdG8gU2NyZWVuIGNvb3JkaW5hdGVzLlxuICAgKlxuICAgKiBAcGFyYW0gZGV2aWNlWSBEZXZpY2UgWSBjb29yZGluYXRlXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtU2NyZWVuWShkZXZpY2VZOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1ZKGRldmljZVkpO1xuICB9XG5cbiAgX3RvdWNoTWFuYWdlcjogVG91Y2hNYW5hZ2VyOyAvLyBUb3VjaCBtYW5hZ2VyXG4gIF9kZXZpY2VUb1NjcmVlbjogQ3NtX0N1YmlzbU1hdHJpeDQ0OyAvLyBNYXRyaXggZnJvbSBkZXZpY2UgdG8gc2NyZWVuXG4gIF92aWV3TWF0cml4OiBDc21fQ3ViaXNtVmlld01hdHJpeDsgLy8gdmlld01hdHJpeFxuICBfcHJvZ3JhbUlkOiBXZWJHTFByb2dyYW07IC8vIFNoZWRhIElEXG4gIF9jaGFuZ2VNb2RlbDogYm9vbGVhbjsgLy8gTW9kZWwgc3dpdGNoIGZsYWdcbiAgX2lzQ2xpY2s6IGJvb2xlYW47IC8vIEknbSBjbGlja2luZy5cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7TEFwcERlbGVnYXRlfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQge0xBcHBMaXZlMkRNYW5hZ2VyfSBmcm9tIFwiLi9sYXBwbGl2ZTJkbWFuYWdlclwiO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0KCchIXJhdy1sb2FkZXIhLi9Db3JlL2xpdmUyZGN1YmlzbWNvcmUubWluLmpzJykudGhlbihyYXdNb2R1bGUgPT4gZXZhbC5jYWxsKG51bGwsIHJhd01vZHVsZS5kZWZhdWx0KSk7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgbGl2ZTJkdjQ6IGFueTtcbiAgICAgICAgZG93bmxvYWRDYXA6IGFueTtcbiAgICAgICAgd2VicFJlYWR5OiBhbnk7XG4gICAgfVxufVxud2luZG93LmxpdmUyZHY0ID0gd2luZG93LmxpdmUyZHY0IHx8IHt9O1xud2luZG93LmxpdmUyZHY0LmxvYWQgPSAoY2FudmFzSWQ6IHN0cmluZywgbW9kZWxQYXRoOiBzdHJpbmcsIG1vZGVsSnNvbk5hbWU6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIExBcHBEZWZpbmUuZGVmaW5lRGVidWcod2luZG93LmxpdmUyZHY0LmRlYnVnID8gdHJ1ZSA6IGZhbHNlLCB3aW5kb3cubGl2ZTJkdjQuZGVidWdNb3VzZW1vdmUgPyB0cnVlIDogZmFsc2UpO1xuICAgIExBcHBEZWZpbmUuZGVmaW5lTW9kZWxQYXRoKG1vZGVsUGF0aCwgbW9kZWxKc29uTmFtZSk7XG4gICAgaWYgKExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmluaXRpYWxpemUoY2FudmFzSWQpID09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkucnVuKCk7XG59O1xud2luZG93LmxpdmUyZHY0LmNoYW5nZSA9IChtb2RlbFBhdGg6IHN0cmluZywgbW9kZWxKc29uTmFtZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5jaGFuZ2VTY2VuZShtb2RlbFBhdGgsIG1vZGVsSnNvbk5hbWUpO1xufVxud2luZG93LmxpdmUyZHY0LnJlbGVhc2UgPSAoKTogdm9pZCA9PiB7XG4gICAgTEFwcERlbGVnYXRlLnJlbGVhc2VJbnN0YW5jZSgpO1xufTtcbndpbmRvdy5saXZlMmR2NC5DYXB0dXJlQ2FudmFzID0gKCk6IHZvaWQgPT4ge1xuICAgIExBcHBEZWZpbmUuc2V0Q2FwdHVyZUNhbnZhcyh0cnVlKTtcbn07XG53aW5kb3cubGl2ZTJkdjQuc2V0UHJlTG9hZE1vdGlvbiA9IChwcmVMb2FkTW90aW9uOiBib29sZWFuKTogdm9pZCA9PiB7XG4gICAgTEFwcERlZmluZS5zZXRQcmVMb2FkTW90aW9uKHByZUxvYWRNb3Rpb24pO1xufTtcbi8qKlxuICog6aG16Z2i5YWz6ZetL+i3s+i9rC/liLfmlrDml7ZcbiAqL1xud2luZG93Lm9uYmVmb3JldW5sb2FkID0gKCk6IHZvaWQgPT4gTEFwcERlbGVnYXRlLnJlbGVhc2VJbnN0YW5jZSgpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuZXhwb3J0IGNsYXNzIFRvdWNoTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3N0YXJ0WCA9IDAuMDtcbiAgICB0aGlzLl9zdGFydFkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFggPSAwLjA7XG4gICAgdGhpcy5fbGFzdFkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFgxID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZMSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WDIgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFkyID0gMC4wO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gMC4wO1xuICAgIHRoaXMuX2RlbHRhWCA9IDAuMDtcbiAgICB0aGlzLl9kZWx0YVkgPSAwLjA7XG4gICAgdGhpcy5fc2NhbGUgPSAxLjA7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSBmYWxzZTtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDZW50ZXJZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xuICB9XG5cbiAgcHVibGljIGdldERlbHRhWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVg7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGVsdGFZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbHRhWTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFydFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRYO1xuICB9XG5cbiAgcHVibGljIGdldFN0YXJ0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U2NhbGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0WCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xuICB9XG5cbiAgcHVibGljIGdldFgxKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYMTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZMSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTE7XG4gIH1cblxuICBwdWJsaWMgZ2V0WDIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgyO1xuICB9XG5cbiAgcHVibGljIGdldFkyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZMjtcbiAgfVxuXG4gIHB1YmxpYyBpc1NpbmdsZVRvdWNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl90b3VjaFNpbmdsZTtcbiAgfVxuXG4gIHB1YmxpYyBpc0ZsaWNrQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9mbGlwQXZhaWxhYmxlO1xuICB9XG5cbiAgcHVibGljIGRpc2FibGVGbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVG91Y2ggc3RhcnQgZXZlbnRcbiAgICogQHBhcmFtIGRldmljZVggWCB2YWx1ZSBvZiB0aGUgdG91Y2hlZCBzY3JlZW5cbiAgICogQHBhcmFtIGRldmljZVkgWSB2YWx1ZSBvZiB0aGUgdG91Y2hlZCBzY3JlZW5cbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzQmVnYW4oZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgLy8gdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX3N0YXJ0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fc3RhcnRZID0gZGV2aWNlWTtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODqeODg+OCsOaZguOBruOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzTW92ZWQoZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gLTEuMDtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Oq44OD44Kv44Gu6Led6Zui5ris5a6aXG4gICAqIEByZXR1cm4g44OV44Oq44OD44Kv6Led6ZuiXG4gICAqL1xuICBwdWJsaWMgZ2V0RmxpY2tEaXN0YW5jZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKFxuICAgICAgdGhpcy5fc3RhcnRYLFxuICAgICAgdGhpcy5fc3RhcnRZLFxuICAgICAgdGhpcy5fbGFzdFgsXG4gICAgICB0aGlzLl9sYXN0WVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog54K577yR44GL44KJ54K577yS44G444Gu6Led6Zui44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqIEBwYXJhbSB4MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgY2FsY3VsYXRlRGlzdGFuY2UoXG4gICAgeDE6IG51bWJlcixcbiAgICB5MTogbnVtYmVyLFxuICAgIHgyOiBudW1iZXIsXG4gICAgeTI6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHgxIC0geDIpICogKHgxIC0geDIpICsgKHkxIC0geTIpICogKHkxIC0geTIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTnm67jga7lgKTjgYvjgonjgIHnp7vli5Xph4/jgpLmsYLjgoHjgovjgIJcbiAgICog6YGV44GG5pa55ZCR44Gu5aC05ZCI44Gv56e75YuV6YeP77yQ44CC5ZCM44GY5pa55ZCR44Gu5aC05ZCI44Gv44CB57W25a++5YCk44GM5bCP44GV44GE5pa544Gu5YCk44KS5Y+C54Wn44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB2MSDvvJHjgaTnm67jga7np7vli5Xph49cbiAgICogQHBhcmFtIHYyIO+8kuOBpOebruOBruenu+WLlemHj1xuICAgKlxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIGNhbGN1bGF0ZU1vdmluZ0Ftb3VudCh2MTogbnVtYmVyLCB2MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodjEgPiAwLjAgIT0gdjIgPiAwLjApIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgY29uc3Qgc2lnbjogbnVtYmVyID0gdjEgPiAwLjAgPyAxLjAgOiAtMS4wO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUxID0gTWF0aC5hYnModjEpO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUyID0gTWF0aC5hYnModjIpO1xuICAgIHJldHVybiAoXG4gICAgICBzaWduICogKGFic29sdXRlVmFsdWUxIDwgYWJzb2x1dGVWYWx1ZTIgPyBhYnNvbHV0ZVZhbHVlMSA6IGFic29sdXRlVmFsdWUyKVxuICAgICk7XG4gIH1cblxuICBfc3RhcnRZOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnjjga7lgKRcbiAgX3N0YXJ0WDogbnVtYmVyOyAvLyDjgr/jg4Pjg4HjgpLplovlp4vjgZfjgZ/mmYLjga5544Gu5YCkXG4gIF9sYXN0WDogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5444Gu5YCkXG4gIF9sYXN0WTogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5544Gu5YCkXG4gIF9sYXN0WDE6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LiA44Gk55uu44GueOOBruWApFxuICBfbGFzdFkxOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS4gOOBpOebruOBrnnjga7lgKRcbiAgX2xhc3RYMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5444Gu5YCkXG4gIF9sYXN0WTI6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LqM44Gk55uu44GueeOBruWApFxuICBfbGFzdFRvdWNoRGlzdGFuY2U6IG51bWJlcjsgLy8gMuacrOS7peS4iuOBp+OCv+ODg+ODgeOBl+OBn+OBqOOBjeOBruaMh+OBrui3nembolxuICBfZGVsdGFYOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnjjga7np7vli5Xot53pm6LjgIJcbiAgX2RlbHRhWTogbnVtYmVyOyAvLyDliY3lm57jga7lgKTjgYvjgonku4rlm57jga7lgKTjgbjjga5544Gu56e75YuV6Led6Zui44CCXG4gIF9zY2FsZTogbnVtYmVyOyAvLyDjgZPjga7jg5Xjg6zjg7zjg6DjgafmjpvjgZHlkIjjgo/jgZvjgovmi6HlpKfnjofjgILmi6HlpKfmk43kvZzkuK3ku6XlpJbjga8x44CCXG4gIF90b3VjaFNpbmdsZTogYm9vbGVhbjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GvdHJ1ZVxuICBfZmxpcEF2YWlsYWJsZTogYm9vbGVhbjsgLy8g44OV44Oq44OD44OX44GM5pyJ5Yq544GL44Gp44GG44GLXG59XG4iLCJ2YXIgZ2xvYmFsID1cbiAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpXG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGdsb2JhbCxcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGdsb2JhbCAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gZ2xvYmFsICYmXG4gICAgJ0Jsb2InIGluIGdsb2JhbCAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gZ2xvYmFsLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBnbG9iYWxcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIC8qXG4gICAgICBmZXRjaC1tb2NrIHdyYXBzIHRoZSBSZXNwb25zZSBvYmplY3QgaW4gYW4gRVM2IFByb3h5IHRvXG4gICAgICBwcm92aWRlIHVzZWZ1bCB0ZXN0IGhhcm5lc3MgZmVhdHVyZXMgc3VjaCBhcyBmbHVzaC4gSG93ZXZlciwgb25cbiAgICAgIEVTNSBicm93c2VycyB3aXRob3V0IGZldGNoIG9yIFByb3h5IHN1cHBvcnQgcG9sbHlmaWxscyBtdXN0IGJlIHVzZWQ7XG4gICAgICB0aGUgcHJveHktcG9sbHlmaWxsIGlzIHVuYWJsZSB0byBwcm94eSBhbiBhdHRyaWJ1dGUgdW5sZXNzIGl0IGV4aXN0c1xuICAgICAgb24gdGhlIG9iamVjdCBiZWZvcmUgdGhlIFByb3h5IGlzIGNyZWF0ZWQuIFRoaXMgY2hhbmdlIGVuc3VyZXNcbiAgICAgIFJlc3BvbnNlLmJvZHlVc2VkIGV4aXN0cyBvbiB0aGUgaW5zdGFuY2UsIHdoaWxlIG1haW50YWluaW5nIHRoZVxuICAgICAgc2VtYW50aWMgb2Ygc2V0dGluZyBSZXF1ZXN0LmJvZHlVc2VkIGluIHRoZSBjb25zdHJ1Y3RvciBiZWZvcmVcbiAgICAgIF9pbml0Qm9keSBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICB0aGlzLmJvZHlVc2VkID0gdGhpcy5ib2R5VXNlZFxuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgaXNDb25zdW1lZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0ICsgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcblxuICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSA9PT0gJ25vLXN0b3JlJyB8fCBvcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAvLyBTZWFyY2ggZm9yIGEgJ18nIHBhcmFtZXRlciBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gICAgICB2YXIgcmVQYXJhbVNlYXJjaCA9IC8oWz8mXSlfPVteJl0qL1xuICAgICAgaWYgKHJlUGFyYW1TZWFyY2gudGVzdCh0aGlzLnVybCkpIHtcbiAgICAgICAgLy8gSWYgaXQgYWxyZWFkeSBleGlzdHMgdGhlbiBzZXQgdGhlIHZhbHVlIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB0aGlzLnVybCA9IHRoaXMudXJsLnJlcGxhY2UocmVQYXJhbVNlYXJjaCwgJyQxXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGEgbmV3ICdfJyBwYXJhbWV0ZXIgdG8gdGhlIGVuZCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdmFyIHJlUXVlcnlTdHJpbmcgPSAvXFw/L1xuICAgICAgICB0aGlzLnVybCArPSAocmVRdWVyeVN0cmluZy50ZXN0KHRoaXMudXJsKSA/ICcmJyA6ICc/JykgKyAnXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgaWYgKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICcnXG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBnbG9iYWwuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpeFVybCh1cmwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cmwgPT09ICcnICYmIGdsb2JhbC5sb2NhdGlvbi5ocmVmID8gZ2xvYmFsLmxvY2F0aW9uLmhyZWYgOiB1cmxcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVybFxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCBmaXhVcmwocmVxdWVzdC51cmwpLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhocikge1xuICAgICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBzdXBwb3J0LmFycmF5QnVmZmVyICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpLmluZGV4T2YoJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpICE9PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluaXQgJiYgdHlwZW9mIGluaXQuaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgIShpbml0LmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSkge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgbm9ybWFsaXplVmFsdWUoaW5pdC5oZWFkZXJzW25hbWVdKSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghZ2xvYmFsLmZldGNoKSB7XG4gIGdsb2JhbC5mZXRjaCA9IGZldGNoXG4gIGdsb2JhbC5IZWFkZXJzID0gSGVhZGVyc1xuICBnbG9iYWwuUmVxdWVzdCA9IFJlcXVlc3RcbiAgZ2xvYmFsLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsInZhciBMQXBwRGVmaW5lVjIgPSB7XG4gICAgXG4gICAgXG4gICAgREVCVUdfTE9HIDogZmFsc2UsXG4gICAgREVCVUdfTU9VU0VfTE9HIDogZmFsc2UsXG4gICAgREVCVUdfRFJBV19ISVRfQVJFQSA6IGZhbHNlLFxuICAgIERFQlVHX0RSQVdfQUxQSEFfTU9ERUwgOiBmYWxzZSwgXG5cbiAgICBWSUVXX01BWF9TQ0FMRSA6IDIsXG4gICAgVklFV19NSU5fU0NBTEUgOiAwLjgsXG5cbiAgICBWSUVXX0xPR0lDQUxfTEVGVCA6IC0xLFxuICAgIFZJRVdfTE9HSUNBTF9SSUdIVCA6IDEsXG5cbiAgICBWSUVXX0xPR0lDQUxfTUFYX0xFRlQgOiAtMixcbiAgICBWSUVXX0xPR0lDQUxfTUFYX1JJR0hUIDogMixcbiAgICBWSUVXX0xPR0lDQUxfTUFYX0JPVFRPTSA6IC0yLFxuICAgIFZJRVdfTE9HSUNBTF9NQVhfVE9QIDogMixcblxuICAgIFBSSU9SSVRZX05PTkUgOiAwLFxuICAgIFBSSU9SSVRZX0lETEUgOiAxLFxuICAgIFBSSU9SSVRZX1NMRUVQWSA6IDIsXG4gICAgUFJJT1JJVFlfTk9STUFMIDogMyxcbiAgICBQUklPUklUWV9GT1JDRSA6IDQsXG5cbiAgICBNT1RJT05fR1JPVVBfSURMRSA6IFwiaWRsZVwiLCBcbiAgICBNT1RJT05fR1JPVVBfU0xFRVBZIDogXCJzbGVlcHlcIixcbiAgICBNT1RJT05fR1JPVVBfVEFQX0ZBQ0UgOiBcInRhcF9mYWNlXCIsXG4gICAgTU9USU9OX0dST1VQX0ZMSUNLX0hFQUQgOiBcImZsaWNrX2hlYWRcIixcbiAgICBNT1RJT05fR1JPVVBfVEFQX0JPRFkgOiBcInRhcF9ib2R5XCIsXG4gICAgTU9USU9OX0dST1VQX1RBUF9CUkVBU1QgOiBcInRhcF9icmVhc3RcIixcbiAgICBNT1RJT05fR1JPVVBfVEFQX0JFTExZIDogXCJ0YXBfYmVsbHlcIixcbiAgICBNT1RJT05fR1JPVVBfVEFQX0xFRyA6IFwidGFwX2xlZ1wiLFxuICAgIE1PVElPTl9HUk9VUF9QSU5DSF9JTiA6IFwicGluY2hfaW5cIixcbiAgICBNT1RJT05fR1JPVVBfUElOQ0hfT1VUIDogXCJwaW5jaF9vdXRcIiwgXG4gICAgTU9USU9OX0dST1VQX1NIQUtFIDogXCJzaGFrZVwiLCBcblxuICAgIEhJVF9BUkVBX0hFQUQgOiBcImhlYWRcIixcbiAgICBISVRfQVJFQV9CT0RZIDogXCJib2R5XCIsXG4gICAgSElUX0FSRUFfRkFDRSA6IFwiZmFjZVwiLFxuICAgIEhJVF9BUkVBX0JSRUFTVCA6IFwiYnJlYXN0XCIsXG4gICAgSElUX0FSRUFfQkVMTFkgOiBcImJlbGx5XCIsXG4gICAgSElUX0FSRUFfTEVHIDogXCJsZWdcIixcblxuICAgIEhJVF9BUkVBX0NVU1RPTV9IRUFEIDogXCJoZWFkXCIsXG4gICAgSElUX0FSRUFfQ1VTVE9NX0JPRFkgOiBcImJvZHlcIixcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTEFwcERlZmluZVYyOyIsImltcG9ydCB7TGl2ZTJERnJhbWV3b3JrfSBmcm9tIFwiLi9saWIvTGl2ZTJERnJhbWV3b3JrLmpzXCJcbmltcG9ydCBQbGF0Zm9ybU1hbmFnZXIgZnJvbSBcIi4vUGxhdGZvcm1NYW5hZ2VyXCJcbmltcG9ydCBMQXBwTW9kZWxWMiBmcm9tIFwiLi9MQXBwTW9kZWxWMlwiXG5pbXBvcnQgTEFwcERlZmluZVYyIGZyb20gXCIuL0xBcHBEZWZpbmVWMlwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExBcHBMaXZlMkRNYW5hZ2VyVjIoKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCItLT4gTEFwcExpdmUyRE1hbmFnZXIoKVwiKTtcblxuXG4gICAgdGhpcy5tb2RlbHMgPSBbXTtcblxuXG4gICAgdGhpcy5jb3VudCA9IC0xO1xuICAgIHRoaXMucmVsb2FkRmxnID0gZmFsc2U7XG5cbiAgICBMaXZlMkQuaW5pdCgpO1xuICAgIExpdmUyREZyYW1ld29yay5zZXRQbGF0Zm9ybU1hbmFnZXIobmV3IFBsYXRmb3JtTWFuYWdlcik7XG5cbn1cblxuTEFwcExpdmUyRE1hbmFnZXJWMi5wcm90b3R5cGUuY3JlYXRlTW9kZWwgPSBmdW5jdGlvbiAoKSB7XG5cblxuICAgIHZhciBtb2RlbCA9IG5ldyBMQXBwTW9kZWxWMigpO1xuICAgIHRoaXMubW9kZWxzLnB1c2gobW9kZWwpO1xuXG4gICAgcmV0dXJuIG1vZGVsO1xufVxuXG5cbkxBcHBMaXZlMkRNYW5hZ2VyVjIucHJvdG90eXBlLmNoYW5nZU1vZGVsID0gZnVuY3Rpb24gKGdsLCBtb2RlbHVybCkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiLS0+IExBcHBMaXZlMkRNYW5hZ2VyLnVwZGF0ZShnbClcIik7XG5cbiAgICBpZiAodGhpcy5yZWxvYWRGbGcpIHtcblxuICAgICAgICB0aGlzLnJlbG9hZEZsZyA9IGZhbHNlO1xuXG4gICAgICAgIHZhciB0aGlzUmVmID0gdGhpcztcbiAgICAgICAgdGhpcy5yZWxlYXNlTW9kZWwoMCwgZ2wpO1xuICAgICAgICB0aGlzLmNyZWF0ZU1vZGVsKCk7XG4gICAgICAgIHRoaXMubW9kZWxzWzBdLmxvYWQoZ2wsIG1vZGVsdXJsKTtcbiAgICB9XG59O1xuXG5cbkxBcHBMaXZlMkRNYW5hZ2VyVjIucHJvdG90eXBlLmdldE1vZGVsID0gZnVuY3Rpb24gKG5vKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCItLT4gTEFwcExpdmUyRE1hbmFnZXIuZ2V0TW9kZWwoXCIgKyBubyArIFwiKVwiKTtcblxuICAgIGlmIChubyA+PSB0aGlzLm1vZGVscy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHRoaXMubW9kZWxzW25vXTtcbn07XG5cblxuTEFwcExpdmUyRE1hbmFnZXJWMi5wcm90b3R5cGUucmVsZWFzZU1vZGVsID0gZnVuY3Rpb24gKG5vLCBnbCkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiLS0+IExBcHBMaXZlMkRNYW5hZ2VyLnJlbGVhc2VNb2RlbChcIiArIG5vICsgXCIpXCIpO1xuXG4gICAgaWYgKHRoaXMubW9kZWxzLmxlbmd0aCA8PSBubykgcmV0dXJuO1xuXG4gICAgdGhpcy5tb2RlbHNbbm9dLnJlbGVhc2UoZ2wpO1xuXG4gICAgZGVsZXRlIHRoaXMubW9kZWxzW25vXTtcbiAgICB0aGlzLm1vZGVscy5zcGxpY2Uobm8sIDEpO1xufTtcblxuXG5MQXBwTGl2ZTJETWFuYWdlclYyLnByb3RvdHlwZS5udW1Nb2RlbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWxzLmxlbmd0aDtcbn07XG5cblxuTEFwcExpdmUyRE1hbmFnZXJWMi5wcm90b3R5cGUuc2V0RHJhZyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1vZGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLm1vZGVsc1tpXS5zZXREcmFnKHgsIHkpO1xuICAgIH1cbn1cblxuXG5MQXBwTGl2ZTJETWFuYWdlclYyLnByb3RvdHlwZS5tYXhTY2FsZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChMQXBwRGVmaW5lVjIuREVCVUdfTE9HKVxuICAgICAgICBjb25zb2xlLmxvZyhcIltMaXZlMkR2Ml0gTWF4IHNjYWxlIGV2ZW50LlwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubW9kZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMubW9kZWxzW2ldLnN0YXJ0UmFuZG9tTW90aW9uKExBcHBEZWZpbmVWMi5NT1RJT05fR1JPVVBfUElOQ0hfSU4sXG4gICAgICAgICAgICBMQXBwRGVmaW5lVjIuUFJJT1JJVFlfTk9STUFMKTtcbiAgICB9XG59XG5cblxuTEFwcExpdmUyRE1hbmFnZXJWMi5wcm90b3R5cGUubWluU2NhbGVFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoTEFwcERlZmluZVYyLkRFQlVHX0xPRylcbiAgICAgICAgY29uc29sZS5sb2coXCJbTGl2ZTJEdjJdIE1pbiBzY2FsZSBldmVudC5cIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1vZGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLm1vZGVsc1tpXS5zdGFydFJhbmRvbU1vdGlvbihMQXBwRGVmaW5lVjIuTU9USU9OX0dST1VQX1BJTkNIX09VVCxcbiAgICAgICAgICAgIExBcHBEZWZpbmVWMi5QUklPUklUWV9OT1JNQUwpO1xuICAgIH1cbn1cblxuXG5MQXBwTGl2ZTJETWFuYWdlclYyLnByb3RvdHlwZS50YXBFdmVudCA9IGZ1bmN0aW9uICh4LCB5KSB7XG5cbiAgICBpZiAoTEFwcERlZmluZVYyLkRFQlVHX0xPRylcbiAgICAgICAgY29uc29sZS5sb2coXCJbTGl2ZTJEdjJdIHRhcEV2ZW50IHZpZXcgeDpcIiArIHggKyBcIiB5OlwiICsgeSk7XG5cbiAgICBjb25zdCBoaXRUZXN0QXJlYSA9IHtcbiAgICAgICAgJ2hlYWQnOiBMQXBwRGVmaW5lVjIuSElUX0FSRUFfSEVBRCxcbiAgICAgICAgJ2JvZHknOiBMQXBwRGVmaW5lVjIuSElUX0FSRUFfQk9EWSxcbiAgICAgICAgJ2ZhY2UnOiBMQXBwRGVmaW5lVjIuSElUX0FSRUFfRkFDRSxcbiAgICAgICAgJ2JyZWFzdCc6IExBcHBEZWZpbmVWMi5ISVRfQVJFQV9CUkVBU1QsXG4gICAgICAgICdiZWxseSc6IExBcHBEZWZpbmVWMi5ISVRfQVJFQV9CRUxMWSxcbiAgICAgICAgJ2xlZyc6IExBcHBEZWZpbmVWMi5ISVRfQVJFQV9MRUcsXG4gICAgfVxuXG4gICAgY29uc3QgaGl0VGVzdEFyZWFDdXN0b20gPSB7XG4gICAgICAgICdoZWFkJzogTEFwcERlZmluZVYyLkhJVF9BUkVBX0NVU1RPTV9IRUFELFxuICAgICAgICAnYm9keSc6IExBcHBEZWZpbmVWMi5ISVRfQVJFQV9DVVNUT01fQk9EWSxcbiAgICB9XG5cbiAgICBjb25zdCBtb3Rpb25Hcm91cCA9IHtcbiAgICAgICAgJ2lkbGUnOiBMQXBwRGVmaW5lVjIuTU9USU9OX0dST1VQX0lETEUsXG4gICAgICAgICdoZWFkJzogTEFwcERlZmluZVYyLk1PVElPTl9HUk9VUF9GTElDS19IRUFELFxuICAgICAgICAnZmFjZSc6IExBcHBEZWZpbmVWMi5NT1RJT05fR1JPVVBfVEFQX0ZBQ0UsXG4gICAgICAgICdib2R5JzogTEFwcERlZmluZVYyLk1PVElPTl9HUk9VUF9UQVBfQk9EWSxcbiAgICAgICAgJ2JyZWFzdCc6IExBcHBEZWZpbmVWMi5NT1RJT05fR1JPVVBfVEFQX0JSRUFTVCxcbiAgICAgICAgJ2JlbGx5JzogTEFwcERlZmluZVYyLk1PVElPTl9HUk9VUF9UQVBfQkVMTFksXG4gICAgICAgICdsZWcnOiBMQXBwRGVmaW5lVjIuTU9USU9OX0dST1VQX1RBUF9MRUcsXG4gICAgICAgICdzbGVlcHknOiBMQXBwRGVmaW5lVjIuTU9USU9OX0dST1VQX1NMRUVQWSxcbiAgICAgICAgJ3NoYWtlJzogTEFwcERlZmluZVYyLk1PVElPTl9HUk9VUF9TSEFLRSxcbiAgICB9XG5cbiAgICAvLyDngrnlh7vpnaLpg6jliIfmjaLooajmg4VcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubW9kZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbHNbaV0uaGl0VGVzdChoaXRUZXN0QXJlYVsnZmFjZSddLCB4LCB5KSkge1xuICAgICAgICAgICAgICAgIExBcHBEZWZpbmVWMi5ERUJVR19MT0cgJiYgY29uc29sZS5sb2coYFtMaXZlMkR2Ml0gVGFwIGZhY2UuYCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbHNbaV0uc2V0UmFuZG9tRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tb2RlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHRhcE1vdGlvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBoaXRUZXN0QXJlYSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubW9kZWxzW2ldLmhpdFRlc3QoaGl0VGVzdEFyZWFbcHJvcF0sIHgsIHkpKSB7XG4gICAgICAgICAgICAgICAgTEFwcERlZmluZVYyLkRFQlVHX0xPRyAmJiBjb25zb2xlLmxvZyhgW0xpdmUyRHYyXSBUYXAgJHtwcm9wfS5gKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsc1tpXS5zdGFydFJhbmRvbU1vdGlvbihtb3Rpb25Hcm91cFtwcm9wXSwgTEFwcERlZmluZVYyLlBSSU9SSVRZX05PUk1BTCk7XG4gICAgICAgICAgICAgICAgdGFwTW90aW9uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0YXBNb3Rpb25TdGFydGVkKVxuICAgICAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBoaXRUZXN0QXJlYUN1c3RvbSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsc1tpXS5oaXRUZXN0Q3VzdG9tKGhpdFRlc3RBcmVhQ3VzdG9tW3Byb3BdLCB4LCB5KSkge1xuICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lVjIuREVCVUdfTE9HICYmIGNvbnNvbGUubG9nKGBbTGl2ZTJEdjJdIFRhcCBDdXN0b20gJHtwcm9wfS5gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbHNbaV0uc3RhcnRSYW5kb21Nb3Rpb24obW90aW9uR3JvdXBbcHJvcF0sIExBcHBEZWZpbmVWMi5QUklPUklUWV9OT1JNQUwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59OyIsImltcG9ydCB7TGl2ZTJERnJhbWV3b3JrLCBMMkRCYXNlTW9kZWwsIEwyREV5ZUJsaW5rfSBmcm9tIFwiLi9saWIvTGl2ZTJERnJhbWV3b3JrXCJcbmltcG9ydCBNb2RlbFNldHRpbmdKc29uIGZyb20gXCIuL2xpYi9Nb2RlbFNldHRpbmdKc29uXCJcbmltcG9ydCBMQXBwRGVmaW5lIGZyb20gXCIuL0xBcHBEZWZpbmVWMlwiXG5pbXBvcnQgTWF0cml4U3RhY2sgZnJvbSBcIi4vbGliL01hdHJpeFN0YWNrXCJcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgY2xhc3MgTEFwcE1vZGVsICAgICBleHRlbmRzIEwyREJhc2VNb2RlbCAgICAgICAgIFxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMQXBwTW9kZWxWMigpIHtcbiAgICAvL0wyREJhc2VNb2RlbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIEwyREJhc2VNb2RlbC5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubW9kZWxIb21lRGlyID0gXCJcIjtcbiAgICB0aGlzLm1vZGVsU2V0dGluZyA9IG51bGw7XG4gICAgdGhpcy50bXBNYXRyaXggPSBbXTtcbn1cblxuTEFwcE1vZGVsVjIucHJvdG90eXBlID0gbmV3IEwyREJhc2VNb2RlbCgpO1xuXG5cbkxBcHBNb2RlbFYyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGdsLCBtb2RlbFNldHRpbmdQYXRoLCBjYWxsYmFjaykge1xuICAgIHRoaXMuc2V0VXBkYXRpbmcodHJ1ZSk7XG4gICAgdGhpcy5zZXRJbml0aWFsaXplZChmYWxzZSk7XG5cbiAgICB0aGlzLm1vZGVsSG9tZURpciA9IG1vZGVsU2V0dGluZ1BhdGguc3Vic3RyaW5nKDAsIG1vZGVsU2V0dGluZ1BhdGgubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG5cbiAgICB0aGlzLm1vZGVsU2V0dGluZyA9IG5ldyBNb2RlbFNldHRpbmdKc29uKCk7XG5cbiAgICB2YXIgdGhpc1JlZiA9IHRoaXM7XG5cbiAgICB0aGlzLm1vZGVsU2V0dGluZy5sb2FkTW9kZWxTZXR0aW5nKG1vZGVsU2V0dGluZ1BhdGgsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgcGF0aCA9IHRoaXNSZWYubW9kZWxIb21lRGlyICsgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlKCk7XG4gICAgICAgIHRoaXNSZWYubG9hZE1vZGVsRGF0YShwYXRoLCBmdW5jdGlvbiAobW9kZWwpIHtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRUZXh0dXJlTnVtKCk7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgaWYgKC9eaHR0cHM/OlxcL1xcL3xeXFwvXFwvL2kudGVzdCh0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRUZXh0dXJlRmlsZShpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleFBhdGhzID0gdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGUoaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleFBhdGhzID0gdGhpc1JlZi5tb2RlbEhvbWVEaXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGUoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNSZWYubG9hZFRleHR1cmUoaSwgdGV4UGF0aHMsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlZi5pc1RleExvYWRlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbk51bSgpID4gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5leHByZXNzaW9ucyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uTnVtKCk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwTmFtZSA9IHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25OYW1lKGopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwRmlsZVBhdGggPSB0aGlzUmVmLm1vZGVsSG9tZURpciArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uRmlsZShqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLmxvYWRFeHByZXNzaW9uKGV4cE5hbWUsIGV4cEZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYuZXhwcmVzc2lvbk1hbmFnZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYuZXhwcmVzc2lvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlZi5leWVCbGluayA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzUmVmLmV5ZUJsaW5rID0gbmV3IEwyREV5ZUJsaW5rKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldFBoeXNpY3NGaWxlKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubG9hZFBoeXNpY3ModGhpc1JlZi5tb2RlbEhvbWVEaXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5waHlzaWNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0UG9zZUZpbGUoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5sb2FkUG9zZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbEhvbWVEaXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRQb3NlRmlsZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLnBvc2UudXBkYXRlUGFyYW0odGhpc1JlZi5saXZlMkRNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLnBvc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRMYXlvdXQoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxheW91dCA9IHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldExheW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJ3aWR0aFwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LnNldFdpZHRoKGxheW91dFtcIndpZHRoXCJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0W1wiaGVpZ2h0XCJdICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubW9kZWxNYXRyaXguc2V0SGVpZ2h0KGxheW91dFtcImhlaWdodFwiXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0W1wieFwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LnNldFgobGF5b3V0W1wieFwiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheW91dFtcInlcIl0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5zZXRZKGxheW91dFtcInlcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJjZW50ZXJfeFwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LmNlbnRlclgobGF5b3V0W1wiY2VudGVyX3hcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJjZW50ZXJfeVwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LmNlbnRlclkobGF5b3V0W1wiY2VudGVyX3lcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJ0b3BcIl0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC50b3AobGF5b3V0W1widG9wXCJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0W1wiYm90dG9tXCJdICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubW9kZWxNYXRyaXguYm90dG9tKGxheW91dFtcImJvdHRvbVwiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheW91dFtcImxlZnRcIl0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5sZWZ0KGxheW91dFtcImxlZnRcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJyaWdodFwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LnJpZ2h0KGxheW91dFtcInJpZ2h0XCJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldEhpdEFyZWFzQ3VzdG9tKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoaXRfYXJlYXNfY3VzdG9tID0gdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYXNDdXN0b20oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0X2FyZWFzX2N1c3RvbVtcImhlYWRfeFwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21faGVhZF94ID0gaGl0X2FyZWFzX2N1c3RvbVtcImhlYWRfeFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0X2FyZWFzX2N1c3RvbVtcImhlYWRfeVwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21faGVhZF95ID0gaGl0X2FyZWFzX2N1c3RvbVtcImhlYWRfeVwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0X2FyZWFzX2N1c3RvbVtcImJvZHlfeFwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21fYm9keV94ID0gaGl0X2FyZWFzX2N1c3RvbVtcImJvZHlfeFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0X2FyZWFzX2N1c3RvbVtcImJvZHlfeVwiXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21fYm9keV95ID0gaGl0X2FyZWFzX2N1c3RvbVtcImJvZHlfeVwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTEFwcERlZmluZS5oaXRfYXJlYXNfY3VzdG9tX2hlYWRfeCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21faGVhZF95ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExBcHBEZWZpbmUuaGl0X2FyZWFzX2N1c3RvbV9ib2R5X3ggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTEFwcERlZmluZS5oaXRfYXJlYXNfY3VzdG9tX2JvZHlfeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFyYW1OdW0oKTsgaisrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLmxpdmUyRE1vZGVsLnNldFBhcmFtRmxvYXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldEluaXRQYXJhbUlEKGopLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFyYW1WYWx1ZShqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0SW5pdFBhcnRzVmlzaWJsZU51bSgpOyBqKyspIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubGl2ZTJETW9kZWwuc2V0UGFydHNPcGFjaXR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFydHNWaXNpYmxlSUQoaiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldEluaXRQYXJ0c1Zpc2libGVWYWx1ZShqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5saXZlMkRNb2RlbC5zYXZlUGFyYW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXNSZWYubGl2ZTJETW9kZWwuc2V0R0woZ2wpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYucHJlbG9hZE1vdGlvbkdyb3VwKExBcHBEZWZpbmUuTU9USU9OX0dST1VQX0lETEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5wcmVsb2FkTW90aW9uR3JvdXAoTEFwcERlZmluZS5NT1RJT05fR1JPVVBfU0xFRVBZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubWFpbk1vdGlvbk1hbmFnZXIuc3RvcEFsbE1vdGlvbnMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5zZXRVcGRhdGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLnNldEluaXRpYWxpemVkKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2soKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuXG5MQXBwTW9kZWxWMi5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uIChnbCkge1xuICAgIC8vIHRoaXMubGl2ZTJETW9kZWwuZGVsZXRlVGV4dHVyZXMoKTtcbiAgICB2YXIgcG0gPSBMaXZlMkRGcmFtZXdvcmsuZ2V0UGxhdGZvcm1NYW5hZ2VyKCk7XG5cbiAgICBnbC5kZWxldGVUZXh0dXJlKHBtLnRleHR1cmUpO1xufVxuXG5cbkxBcHBNb2RlbFYyLnByb3RvdHlwZS5wcmVsb2FkTW90aW9uR3JvdXAgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciB0aGlzUmVmID0gdGhpcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tb2RlbFNldHRpbmcuZ2V0TW90aW9uTnVtKG5hbWUpOyBpKyspIHtcbiAgICAgICAgdmFyIGZpbGUgPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlKG5hbWUsIGkpO1xuICAgICAgICB0aGlzLmxvYWRNb3Rpb24oZmlsZSwgdGhpcy5tb2RlbEhvbWVEaXIgKyBmaWxlLCBmdW5jdGlvbiAobW90aW9uKSB7XG4gICAgICAgICAgICBtb3Rpb24uc2V0RmFkZUluKHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVJbihuYW1lLCBpKSk7XG4gICAgICAgICAgICBtb3Rpb24uc2V0RmFkZU91dCh0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlT3V0KG5hbWUsIGkpKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG59XG5cbkxBcHBNb2RlbFYyLmhhc1NsZWVweU1vdGlvbiA9IHRydWU7XG5MQXBwTW9kZWxWMi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiLS0+IExBcHBNb2RlbC51cGRhdGUoKVwiKTtcblxuICAgIGlmICh0aGlzLmxpdmUyRE1vZGVsID09IG51bGwpIHtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuREVCVUdfTE9HKSBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHVwZGF0ZS5cIik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0aW1lTVNlYyA9IFV0U3lzdGVtLmdldFVzZXJUaW1lTVNlYygpIC0gdGhpcy5zdGFydFRpbWVNU2VjO1xuICAgIHZhciB0aW1lU2VjID0gdGltZU1TZWMgLyAxMDAwLjA7XG4gICAgdmFyIHQgPSB0aW1lU2VjICogMiAqIE1hdGguUEk7XG5cblxuICAgIGlmICh0aGlzLm1haW5Nb3Rpb25NYW5hZ2VyLmlzRmluaXNoZWQoKSkge1xuICAgICAgICB2YXIgU2xlZXB5ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnU2xlZXB5Jyk7XG4gICAgICAgIGlmIChTbGVlcHkgPT09ICcxJyAmJiB0aGlzLmhhc1NsZWVweU1vdGlvbikge1xuICAgICAgICAgICAgdGhpcy5oYXNTbGVlcHlNb3Rpb24gPSB0aGlzLnN0YXJ0UmFuZG9tTW90aW9uKExBcHBEZWZpbmUuTU9USU9OX0dST1VQX1NMRUVQWSwgTEFwcERlZmluZS5QUklPUklUWV9TTEVFUFkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydFJhbmRvbU1vdGlvbihMQXBwRGVmaW5lLk1PVElPTl9HUk9VUF9JRExFLCBMQXBwRGVmaW5lLlBSSU9SSVRZX0lETEUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0XHRcblxuXG4gICAgdGhpcy5saXZlMkRNb2RlbC5sb2FkUGFyYW0oKTtcblxuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMubWFpbk1vdGlvbk1hbmFnZXIudXBkYXRlUGFyYW0odGhpcy5saXZlMkRNb2RlbCk7XG4gICAgaWYgKCF1cGRhdGUpIHtcblxuICAgICAgICBpZiAodGhpcy5leWVCbGluayAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmV5ZUJsaW5rLnVwZGF0ZVBhcmFtKHRoaXMubGl2ZTJETW9kZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICB0aGlzLmxpdmUyRE1vZGVsLnNhdmVQYXJhbSgpO1xuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0XHRcblxuXG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCAmJlxuICAgICAgICB0aGlzLmV4cHJlc3Npb25zICE9IG51bGwgJiZcbiAgICAgICAgIXRoaXMuZXhwcmVzc2lvbk1hbmFnZXIuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbk1hbmFnZXIudXBkYXRlUGFyYW0odGhpcy5saXZlMkRNb2RlbCk7XG4gICAgfVxuXG5cbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0FOR0xFX1hcIiwgdGhpcy5kcmFnWCAqIDMwLCAxKTtcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0FOR0xFX1lcIiwgdGhpcy5kcmFnWSAqIDMwLCAxKTtcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0FOR0xFX1pcIiwgKHRoaXMuZHJhZ1ggKiB0aGlzLmRyYWdZKSAqIC0zMCwgMSk7XG5cblxuICAgIHRoaXMubGl2ZTJETW9kZWwuYWRkVG9QYXJhbUZsb2F0KFwiUEFSQU1fQk9EWV9BTkdMRV9YXCIsIHRoaXMuZHJhZ1ggKiAxMCwgMSk7XG5cblxuICAgIHRoaXMubGl2ZTJETW9kZWwuYWRkVG9QYXJhbUZsb2F0KFwiUEFSQU1fRVlFX0JBTExfWFwiLCB0aGlzLmRyYWdYLCAxKTtcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0VZRV9CQUxMX1lcIiwgdGhpcy5kcmFnWSwgMSk7XG5cblxuICAgIHRoaXMubGl2ZTJETW9kZWwuYWRkVG9QYXJhbUZsb2F0KFwiUEFSQU1fQU5HTEVfWFwiLFxuICAgICAgICBOdW1iZXIoKDE1ICogTWF0aC5zaW4odCAvIDYuNTM0NSkpKSwgMC41KTtcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0FOR0xFX1lcIixcbiAgICAgICAgTnVtYmVyKCg4ICogTWF0aC5zaW4odCAvIDMuNTM0NSkpKSwgMC41KTtcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0FOR0xFX1pcIixcbiAgICAgICAgTnVtYmVyKCgxMCAqIE1hdGguc2luKHQgLyA1LjUzNDUpKSksIDAuNSk7XG4gICAgdGhpcy5saXZlMkRNb2RlbC5hZGRUb1BhcmFtRmxvYXQoXCJQQVJBTV9CT0RZX0FOR0xFX1hcIixcbiAgICAgICAgTnVtYmVyKCg0ICogTWF0aC5zaW4odCAvIDE1LjUzNDUpKSksIDAuNSk7XG4gICAgdGhpcy5saXZlMkRNb2RlbC5zZXRQYXJhbUZsb2F0KFwiUEFSQU1fQlJFQVRIXCIsXG4gICAgICAgIE51bWJlcigoMC41ICsgMC41ICogTWF0aC5zaW4odCAvIDMuMjM0NSkpKSwgMSk7XG5cblxuICAgIGlmICh0aGlzLnBoeXNpY3MgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnBoeXNpY3MudXBkYXRlUGFyYW0odGhpcy5saXZlMkRNb2RlbCk7XG4gICAgfVxuXG5cbiAgICBpZiAodGhpcy5saXBTeW5jID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5saXZlMkRNb2RlbC5zZXRQYXJhbUZsb2F0KFwiUEFSQU1fTU9VVEhfT1BFTl9ZXCIsXG4gICAgICAgICAgICB0aGlzLmxpcFN5bmNWYWx1ZSk7XG4gICAgfVxuXG5cbiAgICBpZiAodGhpcy5wb3NlICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wb3NlLnVwZGF0ZVBhcmFtKHRoaXMubGl2ZTJETW9kZWwpO1xuICAgIH1cblxuICAgIHRoaXMubGl2ZTJETW9kZWwudXBkYXRlKCk7XG59O1xuXG5cbkxBcHBNb2RlbFYyLnByb3RvdHlwZS5zZXRSYW5kb21FeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bXAgPSBbXTtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuZXhwcmVzc2lvbnMpIHtcbiAgICAgICAgdG1wLnB1c2gobmFtZSk7XG4gICAgfVxuICAgIGlmICh0bXAubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciBubyA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiB0bXAubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5zZXRFeHByZXNzaW9uKHRtcFtub10pO1xuICAgIH1cbn1cblxuXG5MQXBwTW9kZWxWMi5wcm90b3R5cGUuc3RhcnRSYW5kb21Nb3Rpb24gPSBmdW5jdGlvbiAobmFtZSwgcHJpb3JpdHkpIHtcblxuICAgIHZhciBtYXggPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25OdW0obmFtZSk7XG4gICAgdmFyIG5vID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIG1heCk7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRNb3Rpb24obmFtZSwgbm8sIHByaW9yaXR5KTtcbn1cblxuXG5MQXBwTW9kZWxWMi5wcm90b3R5cGUuc3RhcnRNb3Rpb24gPSBmdW5jdGlvbiAobmFtZSwgbm8sIHByaW9yaXR5KSB7XG4gICAgTEFwcERlZmluZS5ERUJVR19MT0cgJiYgY29uc29sZS5sb2coYFtMaXZlMkR2Ml0gc3RhcnRNb3Rpb246ICR7bmFtZX0gTm86ICR7bm99IFByaW9yaXR5OiAke3ByaW9yaXR5fWApO1xuXG4gICAgdmFyIG1vdGlvbk5hbWUgPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlKG5hbWUsIG5vKTtcbiAgICBjb25zdCBtb3Rpb25FeHByZXNzaW9uID0gdGhpcy5tb2RlbFNldHRpbmcuZ2V0TW90aW9uRXhwcmVzc2lvbihuYW1lLCBubyk7XG5cbiAgICBpZiAobW90aW9uTmFtZSA9PSBudWxsIHx8IG1vdGlvbk5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuREVCVUdfTE9HKVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltMaXZlMkR2Ml0gTW90aW9uIHVuZGVmaW5lZC5cIik7XG4gICAgICAgIHJldHVybiAnbW90aW9uIHVuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgaWYgKHByaW9yaXR5ID09PSBMQXBwRGVmaW5lLlBSSU9SSVRZX0ZPUkNFKSB7XG4gICAgICAgIHRoaXMubWFpbk1vdGlvbk1hbmFnZXIuc2V0UmVzZXJ2ZVByaW9yaXR5KHByaW9yaXR5KTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLm1haW5Nb3Rpb25NYW5hZ2VyLnJlc2VydmVNb3Rpb24ocHJpb3JpdHkpKSB7XG4gICAgICAgIGlmIChMQXBwRGVmaW5lLkRFQlVHX0xPRylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0xpdmUyRHYyXSBNb3Rpb24gaXMgcnVubmluZy5cIilcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0aGlzUmVmID0gdGhpcztcbiAgICB2YXIgbW90aW9uO1xuXG4gICAgaWYgKHRoaXMubW90aW9uc1tuYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMubG9hZE1vdGlvbihudWxsLCB0aGlzLm1vZGVsSG9tZURpciArIG1vdGlvbk5hbWUsIGZ1bmN0aW9uIChtdG4pIHtcbiAgICAgICAgICAgIG1vdGlvbiA9IG10bjtcbiAgICAgICAgICAgIHRoaXNSZWYuc2V0RmFkZUluRmFkZU91dChuYW1lLCBubywgcHJpb3JpdHksIG1vdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdGlvbiA9IHRoaXMubW90aW9uc1tuYW1lXTtcbiAgICAgICAgdGhpc1JlZi5zZXRGYWRlSW5GYWRlT3V0KG5hbWUsIG5vLCBwcmlvcml0eSwgbW90aW9uKTtcbiAgICB9XG4gICAgaWYgKG1vdGlvbkV4cHJlc3Npb24gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldEV4cHJlc3Npb24obW90aW9uRXhwcmVzc2lvbik7XG4gICAgfVxufVxuXG5cbkxBcHBNb2RlbFYyLnByb3RvdHlwZS5zZXRGYWRlSW5GYWRlT3V0ID0gZnVuY3Rpb24gKG5hbWUsIG5vLCBwcmlvcml0eSwgbW90aW9uKSB7XG4gICAgdmFyIG1vdGlvbk5hbWUgPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlKG5hbWUsIG5vKTtcblxuICAgIG1vdGlvbi5zZXRGYWRlSW4odGhpcy5tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluKG5hbWUsIG5vKSk7XG4gICAgbW90aW9uLnNldEZhZGVPdXQodGhpcy5tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dChuYW1lLCBubykpO1xuXG5cbiAgICBpZiAoTEFwcERlZmluZS5ERUJVR19MT0cpXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0xpdmUyRHYyXSBTdGFydCBtb3Rpb24gOiBcIiArIG1vdGlvbk5hbWUpO1xuXG4gICAgaWYgKHRoaXMubW9kZWxTZXR0aW5nLmdldE1vdGlvblNvdW5kKG5hbWUsIG5vKSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMubWFpbk1vdGlvbk1hbmFnZXIuc3RhcnRNb3Rpb25QcmlvKG1vdGlvbiwgcHJpb3JpdHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzb3VuZE5hbWUgPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25Tb3VuZChuYW1lLCBubyk7XG4gICAgICAgIC8vIHZhciBwbGF5ZXIgPSBuZXcgU291bmQodGhpcy5tb2RlbEhvbWVEaXIgKyBzb3VuZE5hbWUpO1xuXG4gICAgICAgIHZhciBzbmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7XG4gICAgICAgIHNuZC5zcmMgPSB0aGlzLm1vZGVsSG9tZURpciArIHNvdW5kTmFtZTtcblxuICAgICAgICBpZiAoTEFwcERlZmluZS5ERUJVR19MT0cpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltMaXZlMkR2Ml0gU3RhcnQgc291bmQgOiBcIiArIHNvdW5kTmFtZSk7XG5cbiAgICAgICAgc25kLnBsYXkoKTtcbiAgICAgICAgdGhpcy5tYWluTW90aW9uTWFuYWdlci5zdGFydE1vdGlvblByaW8obW90aW9uLCBwcmlvcml0eSk7XG4gICAgfVxufVxuXG5cbkxBcHBNb2RlbFYyLnByb3RvdHlwZS5zZXRFeHByZXNzaW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgbW90aW9uID0gdGhpcy5leHByZXNzaW9uc1tuYW1lXTtcblxuICAgIGlmIChMQXBwRGVmaW5lLkRFQlVHX0xPRylcbiAgICAgICAgY29uc29sZS5sb2coXCJbTGl2ZTJEdjJdIEV4cHJlc3Npb24gOiBcIiArIG5hbWUpO1xuXG4gICAgdGhpcy5leHByZXNzaW9uTWFuYWdlci5zdGFydE1vdGlvbihtb3Rpb24sIGZhbHNlKTtcbn1cblxuXG5MQXBwTW9kZWxWMi5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChnbCkge1xuICAgIC8vY29uc29sZS5sb2coXCItLT4gTEFwcE1vZGVsLmRyYXcoKVwiKTtcblxuICAgIC8vIGlmKHRoaXMubGl2ZTJETW9kZWwgPT0gbnVsbCkgcmV0dXJuO1xuXG5cbiAgICBNYXRyaXhTdGFjay5wdXNoKCk7XG5cbiAgICBNYXRyaXhTdGFjay5tdWx0TWF0cml4KHRoaXMubW9kZWxNYXRyaXguZ2V0QXJyYXkoKSk7XG5cbiAgICB0aGlzLnRtcE1hdHJpeCA9IE1hdHJpeFN0YWNrLmdldE1hdHJpeCgpXG4gICAgdGhpcy5saXZlMkRNb2RlbC5zZXRNYXRyaXgodGhpcy50bXBNYXRyaXgpO1xuICAgIHRoaXMubGl2ZTJETW9kZWwuZHJhdygpO1xuXG4gICAgTWF0cml4U3RhY2sucG9wKCk7XG5cbn07XG5cblxuTEFwcE1vZGVsVjIucHJvdG90eXBlLmhpdFRlc3QgPSBmdW5jdGlvbiAoaWQsIHRlc3RYLCB0ZXN0WSkge1xuICAgIHZhciBsZW4gPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRIaXRBcmVhTnVtKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoaWQgPT0gdGhpcy5tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYU5hbWUoaSkpIHtcbiAgICAgICAgICAgIHZhciBkcmF3SUQgPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRIaXRBcmVhSUQoaSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oaXRUZXN0U2ltcGxlKGRyYXdJRCwgdGVzdFgsIHRlc3RZKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuXG5MQXBwTW9kZWxWMi5wcm90b3R5cGUuaGl0VGVzdEN1c3RvbSA9IGZ1bmN0aW9uICh0eXBlLCB0ZXN0WCwgdGVzdFkpIHtcbiAgICBpZiAodHlwZSA9PSAnaGVhZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGl0VGVzdFNpbXBsZUN1c3RvbShMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21faGVhZF94LCBMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21faGVhZF95LCB0ZXN0WCwgdGVzdFkpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnYm9keScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGl0VGVzdFNpbXBsZUN1c3RvbShMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21fYm9keV94LCBMQXBwRGVmaW5lLmhpdF9hcmVhc19jdXN0b21fYm9keV95LCB0ZXN0WCwgdGVzdFkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59IiwiLyoqXG4gKlxuICogIFlvdSBjYW4gbW9kaWZ5IGFuZCB1c2UgdGhpcyBzb3VyY2UgZnJlZWx5XG4gKiAgb25seSBmb3IgdGhlIGRldmVsb3BtZW50IG9mIGFwcGxpY2F0aW9uIHJlbGF0ZWQgTGl2ZTJELlxuICpcbiAqICAoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuaW1wb3J0IHtnZXRDb250ZXh0fSBmcm9tIFwiLi93ZWJnbGNvbnRleHRcIlxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICBjbGFzcyBQbGF0Zm9ybU1hbmFnZXIgICAgIGV4dGVuZCBJUGxhdGZvcm1NYW5hZ2VyXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBsYXRmb3JtTWFuYWdlcigpIHtcblxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgUGxhdGZvcm1NYW5hZ2VyICMgbG9hZEJ5dGVzKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5QbGF0Zm9ybU1hbmFnZXIucHJvdG90eXBlLmxvYWRCeXRlcyA9IGZ1bmN0aW9uIChwYXRoLypTdHJpbmcqLywgY2FsbGJhY2spIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcXVlc3Qub3BlbihcIkdFVFwiLCBwYXRoLCB0cnVlKTtcbiAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoIChyZXF1ZXN0LnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSAyMDA6XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9hZCAoXCIgKyByZXF1ZXN0LnN0YXR1cyArIFwiKSA6IFwiICsgcGF0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVxdWVzdC5zZW5kKG51bGwpO1xuICAgIC8vcmV0dXJuIHJlcXVlc3Q7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBQbGF0Zm9ybU1hbmFnZXIgIyBsb2FkU3RyaW5nKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5QbGF0Zm9ybU1hbmFnZXIucHJvdG90eXBlLmxvYWRTdHJpbmcgPSBmdW5jdGlvbiAocGF0aC8qU3RyaW5nKi8pIHtcblxuICAgIHRoaXMubG9hZEJ5dGVzKHBhdGgsIGZ1bmN0aW9uIChidWYpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9KTtcblxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgUGxhdGZvcm1NYW5hZ2VyICMgbG9hZExpdmUyRE1vZGVsKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5QbGF0Zm9ybU1hbmFnZXIucHJvdG90eXBlLmxvYWRMaXZlMkRNb2RlbCA9IGZ1bmN0aW9uIChwYXRoLypTdHJpbmcqLywgY2FsbGJhY2spIHtcbiAgICB2YXIgbW9kZWwgPSBudWxsO1xuXG4gICAgLy8gbG9hZCBtb2NcbiAgICB0aGlzLmxvYWRCeXRlcyhwYXRoLCBmdW5jdGlvbiAoYnVmKSB7XG4gICAgICAgIG1vZGVsID0gTGl2ZTJETW9kZWxXZWJHTC5sb2FkTW9kZWwoYnVmKTtcbiAgICAgICAgY2FsbGJhY2sobW9kZWwpO1xuICAgIH0pO1xuXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBQbGF0Zm9ybU1hbmFnZXIgIyBsb2FkVGV4dHVyZSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuUGxhdGZvcm1NYW5hZ2VyLnByb3RvdHlwZS5sb2FkVGV4dHVyZSA9IGZ1bmN0aW9uIChtb2RlbC8qQUxpdmUyRE1vZGVsKi8sIG5vLyppbnQqLywgcGF0aC8qU3RyaW5nKi8sIGNhbGxiYWNrKSB7XG4gICAgaWYgKHdpbmRvdy53ZWJwUmVhZHkgPT09IHRydWUpXG4gICAgICAgIHBhdGggPSBwYXRoLmNvbmNhdChcIi53ZWJwXCIpO1xuICAgIGxldCB0cmllZE9yaWdpbiA9IGZhbHNlO1xuXG4gICAgLy8gbG9hZCB0ZXh0dXJlc1xuICAgIHZhciBsb2FkZWRJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGxvYWRlZEltYWdlLmNyb3NzT3JpZ2luID0gJ0Fub255bW91cyc7XG4gICAgbG9hZGVkSW1hZ2Uuc3JjID0gcGF0aDtcbiAgICB2YXIgdGhpc1JlZiA9IHRoaXM7XG4gICAgbG9hZGVkSW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBjcmVhdGUgdGV4dHVyZVxuICAgICAgICB2YXIgZ2wgPSBnZXRDb250ZXh0KCk7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgICBpZiAoIXRleHR1cmUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gZ2VuZXJhdGUgZ2wgdGV4dHVyZSBuYW1lLlwiKTtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RlbC5pc1ByZW11bHRpcGxpZWRBbHBoYSgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAvLyDkuZfnrpfmuIjjgqLjg6vjg5XjgqHjg4bjgq/jgrnjg4Hjg6Pku6XlpJbjga7loLTlkIhcbiAgICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgMSk7XG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLFxuICAgICAgICAgICAgZ2wuVU5TSUdORURfQllURSwgbG9hZGVkSW1hZ2UpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVCk7XG4gICAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuXG5cbiAgICAgICAgbW9kZWwuc2V0VGV4dHVyZShubywgdGV4dHVyZSk7XG5cbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj44Kq44OW44K444Kn44Kv44OI44KS6Kej5pS+XG4gICAgICAgIHRleHR1cmUgPSBudWxsO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBsb2FkZWRJbWFnZS5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod2luZG93LndlYnBSZWFkeSA9PT0gdHJ1ZSAmJiB0cmllZE9yaWdpbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbG9hZCBXZWJQIGltYWdlOiBcIiArIGxvYWRlZEltYWdlLnNyYyArIFwiIExvYWQgb3JpZ2luIGZpbGUgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICB0cmllZE9yaWdpbiA9IHRydWU7XG4gICAgICAgICAgICBsb2FkZWRJbWFnZS5zcmMgPSBwYXRoLnJlcGxhY2UoL1xcLndlYnAkLywgXCJcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGxvYWQgaW1hZ2U6IFwiICsgbG9hZGVkSW1hZ2Uuc3JjKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgUGxhdGZvcm1NYW5hZ2VyICMgcGFyc2VGcm9tQnl0ZXMoYnVmKVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuUGxhdGZvcm1NYW5hZ2VyLnByb3RvdHlwZS5qc29uUGFyc2VGcm9tQnl0ZXMgPSBmdW5jdGlvbiAoYnVmKSB7XG5cbiAgICB2YXIganNvblN0cjtcblxuXG4gICAgdmFyIGJvbUNvZGUgPSBuZXcgVWludDhBcnJheShidWYsIDAsIDMpO1xuICAgIGlmIChib21Db2RlWzBdID09IDIzOSAmJiBib21Db2RlWzFdID09IDE4NyAmJiBib21Db2RlWzJdID09IDE5MSkge1xuICAgICAgICBqc29uU3RyID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShidWYsIDMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBqc29uU3RyID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShidWYpKTtcbiAgICB9XG5cbiAgICB2YXIganNvbk9iaiA9IEpTT04ucGFyc2UoanNvblN0cik7XG5cbiAgICByZXR1cm4ganNvbk9iajtcbn07XG5cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIFBsYXRmb3JtTWFuYWdlciAjIGxvZygpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuUGxhdGZvcm1NYW5hZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAodHh0LypTdHJpbmcqLykge1xuICAgIC8vY29uc29sZS5sb2codHh0KTtcbn1cblxuZnVuY3Rpb24gZ2V0V2ViR0xDb250ZXh0KGNhbnZhcykge1xuICAgIHZhciBOQU1FUyA9IFtcIndlYmdsXCIsIFwiZXhwZXJpbWVudGFsLXdlYmdsXCIsIFwid2Via2l0LTNkXCIsIFwibW96LXdlYmdsXCJdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTkFNRVMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChOQU1FU1tpXSwge3ByZW11bHRpcGxpZWRBbHBoYTogdHJ1ZX0pO1xuICAgICAgICAgICAgaWYgKGN0eCkgcmV0dXJuIGN0eDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTsiLCIvKipcbiAqIEtvbmF0YSBNb2RpZmllZFxuICogZml4OiBlcnJvciB3aGVuIG1vZGVsLmpzb24gbm90IGNvbnRhaW4gY3VzdG9tIGhpdEFyZWEuXG4gKiAyMDIwLTA4LTE2XG4gKi9cblxuLyoqXG4gKiBFWUhOIOWfuuS6jiBsaXZlMmQg5a6Y5pa5IExpdmUyREZyYW1ld29yay5qcyDkv67mlLlcbiAqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNiAtIDIwMTcgRVlITlxuICovXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICBjbGFzcyBMMkRCYXNlTW9kZWwgICAgICAgICBcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZnVuY3Rpb24gTDJEQmFzZU1vZGVsKCkge1xuICAgIHRoaXMubGl2ZTJETW9kZWwgPSBudWxsOyAvLyBBTGl2ZTJETW9kZWxcbiAgICB0aGlzLm1vZGVsTWF0cml4ID0gbnVsbDsgLy8gTDJETW9kZWxNYXRyaXhcbiAgICB0aGlzLmV5ZUJsaW5rID0gbnVsbDsgLy8gTDJERXllQmxpbmtcbiAgICB0aGlzLnBoeXNpY3MgPSBudWxsOyAvLyBMMkRQaHlzaWNzXG4gICAgdGhpcy5wb3NlID0gbnVsbDsgLy8gTDJEUG9zZVxuICAgIHRoaXMuZGVidWdNb2RlID0gZmFsc2U7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMudXBkYXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmFscGhhID0gMTtcbiAgICB0aGlzLmFjY0FscGhhID0gMDtcbiAgICB0aGlzLmxpcFN5bmMgPSBmYWxzZTtcbiAgICB0aGlzLmxpcFN5bmNWYWx1ZSA9IDA7XG4gICAgdGhpcy5hY2NlbFggPSAwO1xuICAgIHRoaXMuYWNjZWxZID0gMDtcbiAgICB0aGlzLmFjY2VsWiA9IDA7XG4gICAgdGhpcy5kcmFnWCA9IDA7XG4gICAgdGhpcy5kcmFnWSA9IDA7XG4gICAgdGhpcy5zdGFydFRpbWVNU2VjID0gbnVsbDtcbiAgICB0aGlzLm1haW5Nb3Rpb25NYW5hZ2VyID0gbmV3IEwyRE1vdGlvbk1hbmFnZXIoKTsgLy9MMkRNb3Rpb25NYW5hZ2VyXG4gICAgdGhpcy5leHByZXNzaW9uTWFuYWdlciA9IG5ldyBMMkRNb3Rpb25NYW5hZ2VyKCk7IC8vTDJETW90aW9uTWFuYWdlclxuICAgIHRoaXMubW90aW9ucyA9IHt9O1xuICAgIHRoaXMuZXhwcmVzc2lvbnMgPSB7fTtcblxuICAgIHRoaXMuaXNUZXhMb2FkZWQgPSBmYWxzZTtcbn1cblxudmFyIHRleENvdW50ZXIgPSAwO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgZ2V0TW9kZWxNYXRyaXgoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUuZ2V0TW9kZWxNYXRyaXggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWxNYXRyaXg7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRCYXNlTW9kZWwgIyBzZXRBbHBoYSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5zZXRBbHBoYSA9IGZ1bmN0aW9uIChhLypmbG9hdCovKSB7XG4gICAgaWYgKGEgPiAwLjk5OSkgYSA9IDE7XG4gICAgaWYgKGEgPCAwLjAwMSkgYSA9IDA7XG4gICAgdGhpcy5hbHBoYSA9IGE7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRCYXNlTW9kZWwgIyBnZXRBbHBoYSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5nZXRBbHBoYSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hbHBoYTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyREJhc2VNb2RlbCAjIGlzSW5pdGlhbGl6ZWQoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUuaXNJbml0aWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplZDtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyREJhc2VNb2RlbCAjIHNldEluaXRpYWxpemVkKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRCYXNlTW9kZWwucHJvdG90eXBlLnNldEluaXRpYWxpemVkID0gZnVuY3Rpb24gKHYvKmJvb2xlYW4qLykge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB2O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgaXNVcGRhdGluZygpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5pc1VwZGF0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0aW5nO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgc2V0VXBkYXRpbmcoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUuc2V0VXBkYXRpbmcgPSBmdW5jdGlvbiAodi8qYm9vbGVhbiovKSB7XG4gICAgdGhpcy51cGRhdGluZyA9IHY7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRCYXNlTW9kZWwgIyBnZXRMaXZlMkRNb2RlbCgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5nZXRMaXZlMkRNb2RlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5saXZlMkRNb2RlbDtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyREJhc2VNb2RlbCAjIHNldExpcFN5bmMoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUuc2V0TGlwU3luYyA9IGZ1bmN0aW9uICh2Lypib29sZWFuKi8pIHtcbiAgICB0aGlzLmxpcFN5bmMgPSB2O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgc2V0TGlwU3luY1ZhbHVlKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRCYXNlTW9kZWwucHJvdG90eXBlLnNldExpcFN5bmNWYWx1ZSA9IGZ1bmN0aW9uICh2LypmbG9hdCovKSB7XG4gICAgdGhpcy5saXBTeW5jVmFsdWUgPSB2O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgc2V0QWNjZWwoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUuc2V0QWNjZWwgPSBmdW5jdGlvbiAoeC8qZmxvYXQqLywgeS8qZmxvYXQqLywgei8qZmxvYXQqLykge1xuICAgIHRoaXMuYWNjZWxYID0geDtcbiAgICB0aGlzLmFjY2VsWSA9IHk7XG4gICAgdGhpcy5hY2NlbFogPSB6O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgc2V0RHJhZygpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5zZXREcmFnID0gZnVuY3Rpb24gKHgvKmZsb2F0Ki8sIHkvKmZsb2F0Ki8pIHtcbiAgICB0aGlzLmRyYWdYID0geDtcbiAgICB0aGlzLmRyYWdZID0geTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyREJhc2VNb2RlbCAjIGdldE1haW5Nb3Rpb25NYW5hZ2VyKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRCYXNlTW9kZWwucHJvdG90eXBlLmdldE1haW5Nb3Rpb25NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1haW5Nb3Rpb25NYW5hZ2VyO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgZ2V0RXhwcmVzc2lvbk1hbmFnZXIoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUuZ2V0RXhwcmVzc2lvbk1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvbk1hbmFnZXI7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRCYXNlTW9kZWwgIyBsb2FkTW9kZWxEYXRhKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRCYXNlTW9kZWwucHJvdG90eXBlLmxvYWRNb2RlbERhdGEgPSBmdW5jdGlvbiAocGF0aC8qU3RyaW5nKi8sIGNhbGxiYWNrKSB7XG4gICAgLypcbiAgICBpZiggdGhpcy5saXZlMkRNb2RlbCAhPSBudWxsICkge1xuICAgICAgICB0aGlzLmxpdmUyRE1vZGVsLmRlbGV0ZVRleHR1cmVzKCk7XG4gICAgfVxuICAgICovXG4gICAgdmFyIHBtID0gTGl2ZTJERnJhbWV3b3JrLmdldFBsYXRmb3JtTWFuYWdlcigpOyAvL0lQbGF0Zm9ybU1hbmFnZXJcbiAgICBpZiAodGhpcy5kZWJ1Z01vZGUpIHBtLmxvZyhcIkxvYWQgbW9kZWwgOiBcIiArIHBhdGgpO1xuXG4gICAgdmFyIHRoaXNSZWYgPSB0aGlzO1xuICAgIHBtLmxvYWRMaXZlMkRNb2RlbChwYXRoLCBmdW5jdGlvbiAobDJkTW9kZWwpIHtcbiAgICAgICAgdGhpc1JlZi5saXZlMkRNb2RlbCA9IGwyZE1vZGVsO1xuICAgICAgICB0aGlzUmVmLmxpdmUyRE1vZGVsLnNhdmVQYXJhbSgpO1xuXG4gICAgICAgIHZhciBfZXJyID0gTGl2ZTJELmdldEVycm9yKCk7XG5cbiAgICAgICAgaWYgKF9lcnIgIT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIDogRmFpbGVkIHRvIGxvYWRNb2RlbERhdGEoKS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4ID0gbmV3IEwyRE1vZGVsTWF0cml4KFxuICAgICAgICAgICAgdGhpc1JlZi5saXZlMkRNb2RlbC5nZXRDYW52YXNXaWR0aCgpLFxuICAgICAgICAgICAgdGhpc1JlZi5saXZlMkRNb2RlbC5nZXRDYW52YXNIZWlnaHQoKSk7IC8vTDJETW9kZWxNYXRyaXhcbiAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5zZXRXaWR0aCgyKTtcbiAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5zZXRDZW50ZXJQb3NpdGlvbigwLCAwKTtcblxuICAgICAgICBjYWxsYmFjayh0aGlzUmVmLmxpdmUyRE1vZGVsKTtcbiAgICB9KTtcbn1cblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgbG9hZFRleHR1cmUoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUubG9hZFRleHR1cmUgPSBmdW5jdGlvbiAobm8vKmludCovLCBwYXRoLypTdHJpbmcqLywgY2FsbGJhY2spIHtcbiAgICB0ZXhDb3VudGVyKys7XG5cbiAgICB2YXIgcG0gPSBMaXZlMkRGcmFtZXdvcmsuZ2V0UGxhdGZvcm1NYW5hZ2VyKCk7IC8vSVBsYXRmb3JtTWFuYWdlclxuXG4gICAgaWYgKHRoaXMuZGVidWdNb2RlKSBwbS5sb2coXCJMb2FkIFRleHR1cmUgOiBcIiArIHBhdGgpO1xuXG4gICAgdmFyIHRoaXNSZWYgPSB0aGlzO1xuICAgIHBtLmxvYWRUZXh0dXJlKHRoaXMubGl2ZTJETW9kZWwsIG5vLCBwYXRoLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRleENvdW50ZXItLTtcbiAgICAgICAgaWYgKHRleENvdW50ZXIgPT0gMCkgdGhpc1JlZi5pc1RleExvYWRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjaygpO1xuICAgIH0pO1xuXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRCYXNlTW9kZWwgIyBsb2FkTW90aW9uKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRCYXNlTW9kZWwucHJvdG90eXBlLmxvYWRNb3Rpb24gPSBmdW5jdGlvbiAobmFtZS8qU3RyaW5nKi8sIHBhdGggLypTdHJpbmcqLywgY2FsbGJhY2spIHtcbiAgICB2YXIgcG0gPSBMaXZlMkRGcmFtZXdvcmsuZ2V0UGxhdGZvcm1NYW5hZ2VyKCk7IC8vSVBsYXRmb3JtTWFuYWdlclxuXG4gICAgaWYgKHRoaXMuZGVidWdNb2RlKSBwbS5sb2coXCJMb2FkIE1vdGlvbiA6IFwiICsgcGF0aCk7XG5cbiAgICB2YXIgbW90aW9uID0gbnVsbDsgLy9MaXZlMkRNb3Rpb25cblxuICAgIHZhciB0aGlzUmVmID0gdGhpcztcbiAgICBwbS5sb2FkQnl0ZXMocGF0aCwgZnVuY3Rpb24gKGJ1Zikge1xuICAgICAgICBtb3Rpb24gPSBMaXZlMkRNb3Rpb24ubG9hZE1vdGlvbihidWYpO1xuICAgICAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzUmVmLm1vdGlvbnNbbmFtZV0gPSBtb3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sobW90aW9uKTtcbiAgICB9KTtcblxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgbG9hZEV4cHJlc3Npb24oKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUubG9hZEV4cHJlc3Npb24gPSBmdW5jdGlvbiAobmFtZS8qU3RyaW5nKi8sIHBhdGggLypTdHJpbmcqLywgY2FsbGJhY2spIHtcbiAgICB2YXIgcG0gPSBMaXZlMkRGcmFtZXdvcmsuZ2V0UGxhdGZvcm1NYW5hZ2VyKCk7IC8vSVBsYXRmb3JtTWFuYWdlclxuXG4gICAgaWYgKHRoaXMuZGVidWdNb2RlKSBwbS5sb2coXCJMb2FkIEV4cHJlc3Npb24gOiBcIiArIHBhdGgpO1xuXG4gICAgdmFyIHRoaXNSZWYgPSB0aGlzO1xuICAgIHBtLmxvYWRCeXRlcyhwYXRoLCBmdW5jdGlvbiAoYnVmKSB7XG4gICAgICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXNSZWYuZXhwcmVzc2lvbnNbbmFtZV0gPSBMMkRFeHByZXNzaW9uTW90aW9uLmxvYWRKc29uKGJ1Zik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrKCk7XG4gICAgfSk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRCYXNlTW9kZWwgIyBsb2FkUG9zZSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5sb2FkUG9zZSA9IGZ1bmN0aW9uIChwYXRoIC8qU3RyaW5nKi8sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHBtID0gTGl2ZTJERnJhbWV3b3JrLmdldFBsYXRmb3JtTWFuYWdlcigpOyAvL0lQbGF0Zm9ybU1hbmFnZXJcbiAgICBpZiAodGhpcy5kZWJ1Z01vZGUpIHBtLmxvZyhcIkxvYWQgUG9zZSA6IFwiICsgcGF0aCk7XG4gICAgdmFyIHRoaXNSZWYgPSB0aGlzO1xuICAgIHRyeSB7XG4gICAgICAgIHBtLmxvYWRCeXRlcyhwYXRoLCBmdW5jdGlvbiAoYnVmKSB7XG4gICAgICAgICAgICB0aGlzUmVmLnBvc2UgPSBMMkRQb3NlLmxvYWQoYnVmKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICB9XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRCYXNlTW9kZWwgIyBsb2FkUGh5c2ljcygpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5sb2FkUGh5c2ljcyA9IGZ1bmN0aW9uIChwYXRoLypTdHJpbmcqLykge1xuICAgIHZhciBwbSA9IExpdmUyREZyYW1ld29yay5nZXRQbGF0Zm9ybU1hbmFnZXIoKTsgLy9JUGxhdGZvcm1NYW5hZ2VyXG4gICAgaWYgKHRoaXMuZGVidWdNb2RlKSBwbS5sb2coXCJMb2FkIFBoeXNpY3MgOiBcIiArIHBhdGgpO1xuICAgIHZhciB0aGlzUmVmID0gdGhpcztcbiAgICB0cnkge1xuICAgICAgICBwbS5sb2FkQnl0ZXMocGF0aCwgZnVuY3Rpb24gKGJ1Zikge1xuICAgICAgICAgICAgdGhpc1JlZi5waHlzaWNzID0gTDJEUGh5c2ljcy5sb2FkKGJ1Zik7XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGUpO1xuICAgIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyREJhc2VNb2RlbCAjIGhpdFRlc3RTaW1wbGUoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREJhc2VNb2RlbC5wcm90b3R5cGUuaGl0VGVzdFNpbXBsZSA9IGZ1bmN0aW9uIChkcmF3SUQsIHRlc3RYLCB0ZXN0WSkge1xuXG4gICAgaWYgKHRoaXMubGl2ZTJETW9kZWwgPT09IG51bGwpIHJldHVybiAhMTtcblxuICAgIHZhciBkcmF3SW5kZXggPSB0aGlzLmxpdmUyRE1vZGVsLmdldERyYXdEYXRhSW5kZXgoZHJhd0lEKTtcbiAgICBpZiAoZHJhd0luZGV4IDwgMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIHBvaW50cyA9IHRoaXMubGl2ZTJETW9kZWwuZ2V0VHJhbnNmb3JtZWRQb2ludHMoZHJhd0luZGV4KTtcbiAgICB2YXIgbGVmdCA9IHRoaXMubGl2ZTJETW9kZWwuZ2V0Q2FudmFzV2lkdGgoKTtcbiAgICB2YXIgcmlnaHQgPSAwO1xuICAgIHZhciB0b3AgPSB0aGlzLmxpdmUyRE1vZGVsLmdldENhbnZhc0hlaWdodCgpO1xuICAgIHZhciBib3R0b20gPSAwO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwb2ludHMubGVuZ3RoOyBqID0gaiArIDIpIHtcbiAgICAgICAgdmFyIHggPSBwb2ludHNbal07XG4gICAgICAgIHZhciB5ID0gcG9pbnRzW2ogKyAxXTtcblxuICAgICAgICBpZiAoeCA8IGxlZnQpIGxlZnQgPSB4O1xuICAgICAgICBpZiAoeCA+IHJpZ2h0KSByaWdodCA9IHg7XG4gICAgICAgIGlmICh5IDwgdG9wKSB0b3AgPSB5O1xuICAgICAgICBpZiAoeSA+IGJvdHRvbSkgYm90dG9tID0geTtcbiAgICB9XG4gICAgdmFyIHR4ID0gdGhpcy5tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHRlc3RYKTtcbiAgICB2YXIgdHkgPSB0aGlzLm1vZGVsTWF0cml4LmludmVydFRyYW5zZm9ybVkodGVzdFkpO1xuXG4gICAgcmV0dXJuIChsZWZ0IDw9IHR4ICYmIHR4IDw9IHJpZ2h0ICYmIHRvcCA8PSB0eSAmJiB0eSA8PSBib3R0b20pO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEQmFzZU1vZGVsICMgaGl0VGVzdFNpbXBsZUN1c3RvbSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEQmFzZU1vZGVsLnByb3RvdHlwZS5oaXRUZXN0U2ltcGxlQ3VzdG9tID0gZnVuY3Rpb24gKHgsIHksIHRlc3RYLCB0ZXN0WSkge1xuXG4gICAgaWYgKHRoaXMubGl2ZTJETW9kZWwgPT09IG51bGwpIHJldHVybiAhMTtcblxuICAgIGlmICh4ICYmIHkgJiYgdGVzdFggPj0geFswXSAmJiB0ZXN0WCA8PSB5WzBdKVxuICAgICAgICBpZiAodGVzdFkgPD0geFsxXSAmJiB0ZXN0WSA+PSB5WzFdKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqXG4gKiAgWW91IGNhbiBtb2RpZnkgYW5kIHVzZSB0aGlzIHNvdXJjZSBmcmVlbHlcbiAqICBvbmx5IGZvciB0aGUgZGV2ZWxvcG1lbnQgb2YgYXBwbGljYXRpb24gcmVsYXRlZCBMaXZlMkQuXG4gKlxuICogIChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIGNsYXNzIEwyREV4cHJlc3Npb25Nb3Rpb24gIGV4dGVuZHMgICAgIEFNb3Rpb25cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZnVuY3Rpb24gTDJERXhwcmVzc2lvbk1vdGlvbigpIHtcbiAgICBBTW90aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMucGFyYW1MaXN0ID0gbmV3IEFycmF5KCk7IC8vQXJyYXlMaXN0PEwyREV4cHJlc3Npb25QYXJhbT5cbn1cblxuTDJERXhwcmVzc2lvbk1vdGlvbi5wcm90b3R5cGUgPSBuZXcgQU1vdGlvbigpOyAvLyBMMkRFeHByZXNzaW9uTW90aW9uIGV4dGVuZHMgQU1vdGlvblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJERXhwcmVzc2lvbk1vdGlvbi5FWFBSRVNTSU9OX0RFRkFVTFQgPSBcIkRFRkFVTFRcIjtcbkwyREV4cHJlc3Npb25Nb3Rpb24uVFlQRV9TRVQgPSAwO1xuTDJERXhwcmVzc2lvbk1vdGlvbi5UWVBFX0FERCA9IDE7XG5MMkRFeHByZXNzaW9uTW90aW9uLlRZUEVfTVVMVCA9IDI7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBzdGF0aWMgTDJERXhwcmVzc2lvbk1vdGlvbi5sb2FkSnNvbigpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJERXhwcmVzc2lvbk1vdGlvbi5sb2FkSnNvbiA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICB2YXIgcmV0ID0gbmV3IEwyREV4cHJlc3Npb25Nb3Rpb24oKTtcblxuICAgIHZhciBwbSA9IExpdmUyREZyYW1ld29yay5nZXRQbGF0Zm9ybU1hbmFnZXIoKTtcbiAgICB2YXIganNvbiA9IHBtLmpzb25QYXJzZUZyb21CeXRlcyhidWYpO1xuXG4gICAgcmV0LnNldEZhZGVJbihwYXJzZUludChqc29uLmZhZGVfaW4pID4gMCA/IHBhcnNlSW50KGpzb24uZmFkZV9pbikgOiAxMDAwKTtcbiAgICByZXQuc2V0RmFkZU91dChwYXJzZUludChqc29uLmZhZGVfb3V0KSA+IDAgPyBwYXJzZUludChqc29uLmZhZGVfb3V0KSA6IDEwMDApO1xuXG4gICAgaWYgKGpzb24ucGFyYW1zID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0ganNvbi5wYXJhbXM7XG4gICAgdmFyIHBhcmFtTnVtID0gcGFyYW1zLmxlbmd0aDtcbiAgICByZXQucGFyYW1MaXN0ID0gW107IC8vQXJyYXlMaXN0PEwyREV4cHJlc3Npb25QYXJhbT5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtTnVtOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zW2ldO1xuICAgICAgICB2YXIgcGFyYW1JRCA9IHBhcmFtLmlkLnRvU3RyaW5nKCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlRmxvYXQocGFyYW0udmFsKTtcbiAgICAgICAgdmFyIGNhbGNUeXBlSW50ID0gTDJERXhwcmVzc2lvbk1vdGlvbi5UWVBFX0FERDtcbiAgICAgICAgdmFyIGNhbGMgPSBwYXJhbS5jYWxjICE9IG51bGwgPyBwYXJhbS5jYWxjLnRvU3RyaW5nKCkgOiBcImFkZFwiO1xuICAgICAgICBpZiAoY2FsYyA9PT0gXCJhZGRcIikge1xuICAgICAgICAgICAgY2FsY1R5cGVJbnQgPSBMMkRFeHByZXNzaW9uTW90aW9uLlRZUEVfQUREO1xuICAgICAgICB9IGVsc2UgaWYgKGNhbGMgPT09IFwibXVsdFwiKSB7XG4gICAgICAgICAgICBjYWxjVHlwZUludCA9IEwyREV4cHJlc3Npb25Nb3Rpb24uVFlQRV9NVUxUO1xuICAgICAgICB9IGVsc2UgaWYgKGNhbGMgPT09IFwic2V0XCIpIHtcbiAgICAgICAgICAgIGNhbGNUeXBlSW50ID0gTDJERXhwcmVzc2lvbk1vdGlvbi5UWVBFX1NFVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGNUeXBlSW50ID0gTDJERXhwcmVzc2lvbk1vdGlvbi5UWVBFX0FERDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsY1R5cGVJbnQgPT0gTDJERXhwcmVzc2lvbk1vdGlvbi5UWVBFX0FERCkge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHBhcmFtLmRlZiA9PSBudWxsID8gMCA6IHBhcnNlRmxvYXQocGFyYW0uZGVmKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2FsY1R5cGVJbnQgPT0gTDJERXhwcmVzc2lvbk1vdGlvbi5UWVBFX01VTFQpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwYXJhbS5kZWYgPT0gbnVsbCA/IDEgOiBwYXJzZUZsb2F0KHBhcmFtLmRlZik7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlID09IDApIGRlZmF1bHRWYWx1ZSA9IDE7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGl0ZW0gPSBuZXcgTDJERXhwcmVzc2lvblBhcmFtKCk7XG4gICAgICAgIGl0ZW0uaWQgPSBwYXJhbUlEO1xuICAgICAgICBpdGVtLnR5cGUgPSBjYWxjVHlwZUludDtcbiAgICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIHJldC5wYXJhbUxpc3QucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufVxuXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRFeHByZXNzaW9uTW90aW9uICMgdXBkYXRlUGFyYW1FeGUoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREV4cHJlc3Npb25Nb3Rpb24ucHJvdG90eXBlLnVwZGF0ZVBhcmFtRXhlID0gZnVuY3Rpb24gKG1vZGVsIC8qQUxpdmUyRE1vZGVsKi8sIHRpbWVNU2VjLypsb25nKi8sIHdlaWdodCAvKmZsb2F0Ki8sIG1vdGlvblF1ZXVlRW50IC8qTW90aW9uUXVldWVFbnQqLykge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLnBhcmFtTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgcGFyYW0gPSB0aGlzLnBhcmFtTGlzdFtpXTsgLy9MMkRFeHByZXNzaW9uUGFyYW1cbiAgICAgICAgLy8gaWYgKCFwYXJhbSB8fCAhcGFyYW0udHlwZSkgY29udGludWU7XG4gICAgICAgIGlmIChwYXJhbS50eXBlID09IEwyREV4cHJlc3Npb25Nb3Rpb24uVFlQRV9BREQpIHtcbiAgICAgICAgICAgIG1vZGVsLmFkZFRvUGFyYW1GbG9hdChwYXJhbS5pZCwgcGFyYW0udmFsdWUsIHdlaWdodCk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW0udHlwZSA9PSBMMkRFeHByZXNzaW9uTW90aW9uLlRZUEVfTVVMVCkge1xuICAgICAgICAgICAgbW9kZWwubXVsdFBhcmFtRmxvYXQocGFyYW0uaWQsIHBhcmFtLnZhbHVlLCB3ZWlnaHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLnR5cGUgPT0gTDJERXhwcmVzc2lvbk1vdGlvbi5UWVBFX1NFVCkge1xuICAgICAgICAgICAgbW9kZWwuc2V0UGFyYW1GbG9hdChwYXJhbS5pZCwgcGFyYW0udmFsdWUsIHdlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIGNsYXNzIEwyREV4cHJlc3Npb25QYXJhbSAgIFxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5mdW5jdGlvbiBMMkRFeHByZXNzaW9uUGFyYW0oKSB7XG4gICAgdGhpcy5pZCA9IFwiXCI7XG4gICAgdGhpcy50eXBlID0gLTE7XG4gICAgdGhpcy52YWx1ZSA9IG51bGw7XG59XG5cbi8qKlxuICpcbiAqICBZb3UgY2FuIG1vZGlmeSBhbmQgdXNlIHRoaXMgc291cmNlIGZyZWVseVxuICogIG9ubHkgZm9yIHRoZSBkZXZlbG9wbWVudCBvZiBhcHBsaWNhdGlvbiByZWxhdGVkIExpdmUyRC5cbiAqXG4gKiAgKGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgY2xhc3MgTDJERXllQmxpbmsgICAgICAgICAgXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIEwyREV5ZUJsaW5rKCkge1xuICAgIHRoaXMubmV4dEJsaW5rVGltZSA9IG51bGwgLyogVE9ETyBOT1QgSU5JVCAqLzsgLy8gXG4gICAgdGhpcy5zdGF0ZVN0YXJ0VGltZSA9IG51bGwgLyogVE9ETyBOT1QgSU5JVCAqLzsgLy8gXG4gICAgdGhpcy5ibGlua0ludGVydmFsTXNlYyA9IG51bGwgLyogVE9ETyBOT1QgSU5JVCAqLzsgLy8gXG4gICAgdGhpcy5leWVTdGF0ZSA9IEVZRV9TVEFURS5TVEFURV9GSVJTVDtcbiAgICB0aGlzLmJsaW5rSW50ZXJ2YWxNc2VjID0gNDAwMDtcbiAgICB0aGlzLmNsb3NpbmdNb3Rpb25Nc2VjID0gMTAwO1xuICAgIHRoaXMuY2xvc2VkTW90aW9uTXNlYyA9IDUwO1xuICAgIHRoaXMub3BlbmluZ01vdGlvbk1zZWMgPSAxNTA7XG4gICAgdGhpcy5jbG9zZUlmWmVybyA9IHRydWU7XG4gICAgdGhpcy5leWVJRF9MID0gXCJQQVJBTV9FWUVfTF9PUEVOXCI7XG4gICAgdGhpcy5leWVJRF9SID0gXCJQQVJBTV9FWUVfUl9PUEVOXCI7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRFeWVCbGluayAjIGNhbGNOZXh0QmxpbmsoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREV5ZUJsaW5rLnByb3RvdHlwZS5jYWxjTmV4dEJsaW5rID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aW1lIC8qbG9uZyovID0gVXRTeXN0ZW0uZ2V0VXNlclRpbWVNU2VjKCk7XG4gICAgdmFyIHIgLypOdW1iZXIqLyA9IE1hdGgucmFuZG9tKCk7XG4gICAgcmV0dXJuICAvKihsb25nKSovICh0aW1lICsgciAqICgyICogdGhpcy5ibGlua0ludGVydmFsTXNlYyAtIDEpKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyREV5ZUJsaW5rICMgc2V0SW50ZXJ2YWwoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREV5ZUJsaW5rLnByb3RvdHlwZS5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uIChibGlua0ludGVydmFsTXNlYyAvKmludCovKSB7XG4gICAgdGhpcy5ibGlua0ludGVydmFsTXNlYyA9IGJsaW5rSW50ZXJ2YWxNc2VjO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJERXllQmxpbmsgIyBzZXRFeWVNb3Rpb24oKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyREV5ZUJsaW5rLnByb3RvdHlwZS5zZXRFeWVNb3Rpb24gPSBmdW5jdGlvbiAoY2xvc2luZ01vdGlvbk1zZWMvKmludCovLCBjbG9zZWRNb3Rpb25Nc2VjLyppbnQqLywgb3BlbmluZ01vdGlvbk1zZWMvKmludCovKSB7XG4gICAgdGhpcy5jbG9zaW5nTW90aW9uTXNlYyA9IGNsb3NpbmdNb3Rpb25Nc2VjO1xuICAgIHRoaXMuY2xvc2VkTW90aW9uTXNlYyA9IGNsb3NlZE1vdGlvbk1zZWM7XG4gICAgdGhpcy5vcGVuaW5nTW90aW9uTXNlYyA9IG9wZW5pbmdNb3Rpb25Nc2VjO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJERXllQmxpbmsgIyB1cGRhdGVQYXJhbSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJERXllQmxpbmsucHJvdG90eXBlLnVwZGF0ZVBhcmFtID0gZnVuY3Rpb24gKG1vZGVsLypBTGl2ZTJETW9kZWwqLykge1xuICAgIHZhciB0aW1lIC8qOmxvbmcqLyA9IFV0U3lzdGVtLmdldFVzZXJUaW1lTVNlYygpO1xuICAgIHZhciBleWVQYXJhbVZhbHVlIC8qOk51bWJlciovO1xuICAgIHZhciB0IC8qOk51bWJlciovID0gMDtcbiAgICBzd2l0Y2ggKHRoaXMuZXllU3RhdGUpIHtcbiAgICAgICAgY2FzZSBFWUVfU1RBVEUuU1RBVEVfQ0xPU0lORzpcbiAgICAgICAgICAgIHQgPSAodGltZSAtIHRoaXMuc3RhdGVTdGFydFRpbWUpIC8gdGhpcy5jbG9zaW5nTW90aW9uTXNlYztcbiAgICAgICAgICAgIGlmICh0ID49IDEpIHtcbiAgICAgICAgICAgICAgICB0ID0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLmV5ZVN0YXRlID0gRVlFX1NUQVRFLlNUQVRFX0NMT1NFRDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlU3RhcnRUaW1lID0gdGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV5ZVBhcmFtVmFsdWUgPSAxIC0gdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVZRV9TVEFURS5TVEFURV9DTE9TRUQ6XG4gICAgICAgICAgICB0ID0gKHRpbWUgLSB0aGlzLnN0YXRlU3RhcnRUaW1lKSAvIHRoaXMuY2xvc2VkTW90aW9uTXNlYztcbiAgICAgICAgICAgIGlmICh0ID49IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV5ZVN0YXRlID0gRVlFX1NUQVRFLlNUQVRFX09QRU5JTkc7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleWVQYXJhbVZhbHVlID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVZRV9TVEFURS5TVEFURV9PUEVOSU5HOlxuICAgICAgICAgICAgdCA9ICh0aW1lIC0gdGhpcy5zdGF0ZVN0YXJ0VGltZSkgLyB0aGlzLm9wZW5pbmdNb3Rpb25Nc2VjO1xuICAgICAgICAgICAgaWYgKHQgPj0gMSkge1xuICAgICAgICAgICAgICAgIHQgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuZXllU3RhdGUgPSBFWUVfU1RBVEUuU1RBVEVfSU5URVJWQUw7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0QmxpbmtUaW1lID0gdGhpcy5jYWxjTmV4dEJsaW5rKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleWVQYXJhbVZhbHVlID0gdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVZRV9TVEFURS5TVEFURV9JTlRFUlZBTDpcbiAgICAgICAgICAgIGlmICh0aGlzLm5leHRCbGlua1RpbWUgPCB0aW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5leWVTdGF0ZSA9IEVZRV9TVEFURS5TVEFURV9DTE9TSU5HO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVTdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXllUGFyYW1WYWx1ZSA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFWUVfU1RBVEUuU1RBVEVfRklSU1Q6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aGlzLmV5ZVN0YXRlID0gRVlFX1NUQVRFLlNUQVRFX0lOVEVSVkFMO1xuICAgICAgICAgICAgdGhpcy5uZXh0QmxpbmtUaW1lID0gdGhpcy5jYWxjTmV4dEJsaW5rKCk7XG4gICAgICAgICAgICBleWVQYXJhbVZhbHVlID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuY2xvc2VJZlplcm8pIGV5ZVBhcmFtVmFsdWUgPSAtZXllUGFyYW1WYWx1ZTtcbiAgICBtb2RlbC5zZXRQYXJhbUZsb2F0KHRoaXMuZXllSURfTCwgZXllUGFyYW1WYWx1ZSk7XG4gICAgbW9kZWwuc2V0UGFyYW1GbG9hdCh0aGlzLmV5ZUlEX1IsIGV5ZVBhcmFtVmFsdWUpO1xufVxuXG4vLz09IGVudW0gRVlFX1NUQVRFID09XG52YXIgRVlFX1NUQVRFID0gZnVuY3Rpb24gKCkge1xufTtcblxuRVlFX1NUQVRFLlNUQVRFX0ZJUlNUID0gXCJTVEFURV9GSVJTVFwiXG5FWUVfU1RBVEUuU1RBVEVfSU5URVJWQUwgPSBcIlNUQVRFX0lOVEVSVkFMXCJcbkVZRV9TVEFURS5TVEFURV9DTE9TSU5HID0gXCJTVEFURV9DTE9TSU5HXCJcbkVZRV9TVEFURS5TVEFURV9DTE9TRUQgPSBcIlNUQVRFX0NMT1NFRFwiXG5FWUVfU1RBVEUuU1RBVEVfT1BFTklORyA9IFwiU1RBVEVfT1BFTklOR1wiXG5cbi8qKlxuICpcbiAqICBZb3UgY2FuIG1vZGlmeSBhbmQgdXNlIHRoaXMgc291cmNlIGZyZWVseVxuICogIG9ubHkgZm9yIHRoZSBkZXZlbG9wbWVudCBvZiBhcHBsaWNhdGlvbiByZWxhdGVkIExpdmUyRC5cbiAqXG4gKiAgKGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgY2xhc3MgTDJETWF0cml4NDQgICAgICAgICAgXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIEwyRE1hdHJpeDQ0KCkge1xuICAgIHRoaXMudHIgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsgLy8gXG4gICAgdGhpcy5pZGVudGl0eSgpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgc3RhdGljIEwyRE1hdHJpeDQ0Lm11bCgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETWF0cml4NDQubXVsID0gZnVuY3Rpb24gKGEvKmZsb2F0W10qLywgYi8qZmxvYXRbXSovLCBkc3QvKmZsb2F0W10qLykge1xuICAgIHZhciBjID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICAgIHZhciBuID0gNDtcbiAgICB2YXIgaSwgaiwgaztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBuOyBrKyspIHtcbiAgICAgICAgICAgICAgICBjW2kgKyBqICogNF0gKz0gYVtpICsgayAqIDRdICogYltrICsgaiAqIDRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIGRzdFtpXSA9IGNbaV07XG4gICAgfVxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETWF0cml4NDQgIyBpZGVudGl0eSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETWF0cml4NDQucHJvdG90eXBlLmlkZW50aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGkvKjppbnQqLyA9IDA7IGkgPCAxNjsgaSsrKVxuICAgICAgICB0aGlzLnRyW2ldID0gKChpICUgNSkgPT0gMCkgPyAxIDogMDtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1hdHJpeDQ0ICMgZ2V0QXJyYXkoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS5nZXRBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50cjtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1hdHJpeDQ0ICMgZ2V0Q29weU1hdHJpeCgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETWF0cml4NDQucHJvdG90eXBlLmdldENvcHlNYXRyaXggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodGhpcy50cik7IC8vIHRoaXMudHIuY2xvbmUoKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1hdHJpeDQ0ICMgc2V0TWF0cml4KClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNYXRyaXg0NC5wcm90b3R5cGUuc2V0TWF0cml4ID0gZnVuY3Rpb24gKHRyLypmbG9hdFtdKi8pIHtcbiAgICBpZiAodGhpcy50ciA9PSBudWxsIHx8IHRoaXMudHIubGVuZ3RoICE9IHRoaXMudHIubGVuZ3RoKSByZXR1cm47XG4gICAgZm9yICh2YXIgaS8qOmludCovID0gMDsgaSA8IDE2OyBpKyspIHRoaXMudHJbaV0gPSB0cltpXTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1hdHJpeDQ0ICMgZ2V0U2NhbGVYKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNYXRyaXg0NC5wcm90b3R5cGUuZ2V0U2NhbGVYID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRyWzBdO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETWF0cml4NDQgIyBnZXRTY2FsZVkoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS5nZXRTY2FsZVkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJbNV07XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNYXRyaXg0NCAjIHRyYW5zZm9ybVgoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS50cmFuc2Zvcm1YID0gZnVuY3Rpb24gKHNyYy8qZmxvYXQqLykge1xuICAgIHJldHVybiB0aGlzLnRyWzBdICogc3JjICsgdGhpcy50clsxMl07XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNYXRyaXg0NCAjIHRyYW5zZm9ybVkoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS50cmFuc2Zvcm1ZID0gZnVuY3Rpb24gKHNyYy8qZmxvYXQqLykge1xuICAgIHJldHVybiB0aGlzLnRyWzVdICogc3JjICsgdGhpcy50clsxM107XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNYXRyaXg0NCAjIGludmVydFRyYW5zZm9ybVgoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS5pbnZlcnRUcmFuc2Zvcm1YID0gZnVuY3Rpb24gKHNyYy8qZmxvYXQqLykge1xuICAgIHJldHVybiAoc3JjIC0gdGhpcy50clsxMl0pIC8gdGhpcy50clswXTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1hdHJpeDQ0ICMgaW52ZXJ0VHJhbnNmb3JtWSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETWF0cml4NDQucHJvdG90eXBlLmludmVydFRyYW5zZm9ybVkgPSBmdW5jdGlvbiAoc3JjLypmbG9hdCovKSB7XG4gICAgcmV0dXJuIChzcmMgLSB0aGlzLnRyWzEzXSkgLyB0aGlzLnRyWzVdO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETWF0cml4NDQgIyBtdWx0VHJhbnNsYXRlKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNYXRyaXg0NC5wcm90b3R5cGUubXVsdFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIChzaGlmdFgvKmZsb2F0Ki8sIHNoaWZ0WS8qZmxvYXQqLykge1xuICAgIHZhciB0cjEgPSBbMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgc2hpZnRYLCBzaGlmdFksIDAsIDFdO1xuICAgIEwyRE1hdHJpeDQ0Lm11bCh0cjEsIHRoaXMudHIsIHRoaXMudHIpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETWF0cml4NDQgIyB0cmFuc2xhdGUoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbiAoeC8qZmxvYXQqLywgeS8qZmxvYXQqLykge1xuICAgIHRoaXMudHJbMTJdID0geDtcbiAgICB0aGlzLnRyWzEzXSA9IHk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNYXRyaXg0NCAjIHRyYW5zbGF0ZVgoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS50cmFuc2xhdGVYID0gZnVuY3Rpb24gKHgvKmZsb2F0Ki8pIHtcbiAgICB0aGlzLnRyWzEyXSA9IHg7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNYXRyaXg0NCAjIHRyYW5zbGF0ZVkoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1hdHJpeDQ0LnByb3RvdHlwZS50cmFuc2xhdGVZID0gZnVuY3Rpb24gKHkvKmZsb2F0Ki8pIHtcbiAgICB0aGlzLnRyWzEzXSA9IHk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNYXRyaXg0NCAjIG11bHRTY2FsZSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETWF0cml4NDQucHJvdG90eXBlLm11bHRTY2FsZSA9IGZ1bmN0aW9uIChzY2FsZVgvKmZsb2F0Ki8sIHNjYWxlWS8qZmxvYXQqLykge1xuICAgIHZhciB0cjEgPSBbc2NhbGVYLCAwLCAwLCAwLCAwLCBzY2FsZVksIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDFdO1xuICAgIEwyRE1hdHJpeDQ0Lm11bCh0cjEsIHRoaXMudHIsIHRoaXMudHIpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETWF0cml4NDQgIyBzY2FsZSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETWF0cml4NDQucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24gKHNjYWxlWC8qZmxvYXQqLywgc2NhbGVZLypmbG9hdCovKSB7XG4gICAgdGhpcy50clswXSA9IHNjYWxlWDtcbiAgICB0aGlzLnRyWzVdID0gc2NhbGVZO1xufVxuXG4vKipcbiAqXG4gKiAgWW91IGNhbiBtb2RpZnkgYW5kIHVzZSB0aGlzIHNvdXJjZSBmcmVlbHlcbiAqICBvbmx5IGZvciB0aGUgZGV2ZWxvcG1lbnQgb2YgYXBwbGljYXRpb24gcmVsYXRlZCBMaXZlMkQuXG4gKlxuICogIChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIGNsYXNzIEwyRE1vZGVsTWF0cml4ICAgICAgIGV4dGVuZHMgICAgIEwyRE1hdHJpeDQ0XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIEwyRE1vZGVsTWF0cml4KHcvKmZsb2F0Ki8sIGgvKmZsb2F0Ki8pIHtcbiAgICBMMkRNYXRyaXg0NC5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLndpZHRoID0gdztcbiAgICB0aGlzLmhlaWdodCA9IGg7XG59XG5cbi8vTDJETW9kZWxNYXRyaXggZXh0ZW5kcyBMMkRNYXRyaXg0NFxuTDJETW9kZWxNYXRyaXgucHJvdG90eXBlID0gbmV3IEwyRE1hdHJpeDQ0KCk7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNb2RlbE1hdHJpeCAjIHNldFBvc2l0aW9uKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNb2RlbE1hdHJpeC5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoeC8qZmxvYXQqLywgeS8qZmxvYXQqLykge1xuICAgIHRoaXMudHJhbnNsYXRlKHgsIHkpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETW9kZWxNYXRyaXggIyBzZXRDZW50ZXJQb3NpdGlvbigpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETW9kZWxNYXRyaXgucHJvdG90eXBlLnNldENlbnRlclBvc2l0aW9uID0gZnVuY3Rpb24gKHgvKmZsb2F0Ki8sIHkvKmZsb2F0Ki8pIHtcbiAgICB2YXIgdyA9IHRoaXMud2lkdGggKiB0aGlzLmdldFNjYWxlWCgpO1xuICAgIHZhciBoID0gdGhpcy5oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xuICAgIHRoaXMudHJhbnNsYXRlKHggLSB3IC8gMiwgeSAtIGggLyAyKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1vZGVsTWF0cml4ICMgdG9wKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNb2RlbE1hdHJpeC5wcm90b3R5cGUudG9wID0gZnVuY3Rpb24gKHkvKmZsb2F0Ki8pIHtcbiAgICB0aGlzLnNldFkoeSk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNb2RlbE1hdHJpeCAjIGJvdHRvbSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETW9kZWxNYXRyaXgucHJvdG90eXBlLmJvdHRvbSA9IGZ1bmN0aW9uICh5LypmbG9hdCovKSB7XG4gICAgdmFyIGggPSB0aGlzLmhlaWdodCAqIHRoaXMuZ2V0U2NhbGVZKCk7XG4gICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1vZGVsTWF0cml4ICMgbGVmdCgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETW9kZWxNYXRyaXgucHJvdG90eXBlLmxlZnQgPSBmdW5jdGlvbiAoeC8qZmxvYXQqLykge1xuICAgIHRoaXMuc2V0WCh4KTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1vZGVsTWF0cml4ICMgcmlnaHQoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1vZGVsTWF0cml4LnByb3RvdHlwZS5yaWdodCA9IGZ1bmN0aW9uICh4LypmbG9hdCovKSB7XG4gICAgdmFyIHcgPSB0aGlzLndpZHRoICogdGhpcy5nZXRTY2FsZVgoKTtcbiAgICB0aGlzLnRyYW5zbGF0ZVgoeCAtIHcpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETW9kZWxNYXRyaXggIyBjZW50ZXJYKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNb2RlbE1hdHJpeC5wcm90b3R5cGUuY2VudGVyWCA9IGZ1bmN0aW9uICh4LypmbG9hdCovKSB7XG4gICAgdmFyIHcgPSB0aGlzLndpZHRoICogdGhpcy5nZXRTY2FsZVgoKTtcbiAgICB0aGlzLnRyYW5zbGF0ZVgoeCAtIHcgLyAyKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1vZGVsTWF0cml4ICMgY2VudGVyWSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETW9kZWxNYXRyaXgucHJvdG90eXBlLmNlbnRlclkgPSBmdW5jdGlvbiAoeS8qZmxvYXQqLykge1xuICAgIHZhciBoID0gdGhpcy5oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xuICAgIHRoaXMudHJhbnNsYXRlWSh5IC0gaCAvIDIpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETW9kZWxNYXRyaXggIyBzZXRYKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNb2RlbE1hdHJpeC5wcm90b3R5cGUuc2V0WCA9IGZ1bmN0aW9uICh4LypmbG9hdCovKSB7XG4gICAgdGhpcy50cmFuc2xhdGVYKHgpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETW9kZWxNYXRyaXggIyBzZXRZKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNb2RlbE1hdHJpeC5wcm90b3R5cGUuc2V0WSA9IGZ1bmN0aW9uICh5LypmbG9hdCovKSB7XG4gICAgdGhpcy50cmFuc2xhdGVZKHkpO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETW9kZWxNYXRyaXggIyBzZXRIZWlnaHQoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1vZGVsTWF0cml4LnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaC8qZmxvYXQqLykge1xuICAgIHZhciBzY2FsZVggPSBoIC8gdGhpcy5oZWlnaHQ7XG4gICAgdmFyIHNjYWxlWSA9IC1zY2FsZVg7XG4gICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNb2RlbE1hdHJpeCAjIHNldFdpZHRoKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNb2RlbE1hdHJpeC5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbiAody8qZmxvYXQqLykge1xuICAgIHZhciBzY2FsZVggPSB3IC8gdGhpcy53aWR0aDtcbiAgICB2YXIgc2NhbGVZID0gLXNjYWxlWDtcbiAgICB0aGlzLnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbn1cblxuLyoqXG4gKlxuICogIFlvdSBjYW4gbW9kaWZ5IGFuZCB1c2UgdGhpcyBzb3VyY2UgZnJlZWx5XG4gKiAgb25seSBmb3IgdGhlIGRldmVsb3BtZW50IG9mIGFwcGxpY2F0aW9uIHJlbGF0ZWQgTGl2ZTJELlxuICpcbiAqICAoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICBjbGFzcyBMMkRNb3Rpb25NYW5hZ2VyICAgICBleHRlbmRzICAgICBNb3Rpb25RdWV1ZU1hbmFnZXJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZnVuY3Rpb24gTDJETW90aW9uTWFuYWdlcigpIHtcbiAgICBNb3Rpb25RdWV1ZU1hbmFnZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5jdXJyZW50UHJpb3JpdHkgPSBudWxsO1xuICAgIHRoaXMucmVzZXJ2ZVByaW9yaXR5ID0gbnVsbDtcblxuICAgIHRoaXMuc3VwZXIgPSBNb3Rpb25RdWV1ZU1hbmFnZXIucHJvdG90eXBlO1xufVxuXG5cbkwyRE1vdGlvbk1hbmFnZXIucHJvdG90eXBlID0gbmV3IE1vdGlvblF1ZXVlTWFuYWdlcigpO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJETW90aW9uTWFuYWdlciAjIGdldEN1cnJlbnRQcmlvcml0eSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETW90aW9uTWFuYWdlci5wcm90b3R5cGUuZ2V0Q3VycmVudFByaW9yaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRQcmlvcml0eTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1vdGlvbk1hbmFnZXIgIyBnZXRSZXNlcnZlUHJpb3JpdHkoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1vdGlvbk1hbmFnZXIucHJvdG90eXBlLmdldFJlc2VydmVQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXNlcnZlUHJpb3JpdHk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNb3Rpb25NYW5hZ2VyICMgcmVzZXJ2ZU1vdGlvbigpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJETW90aW9uTWFuYWdlci5wcm90b3R5cGUucmVzZXJ2ZU1vdGlvbiA9IGZ1bmN0aW9uIChwcmlvcml0eS8qaW50Ki8pIHtcbiAgICBpZiAodGhpcy5yZXNlcnZlUHJpb3JpdHkgPj0gcHJpb3JpdHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5jdXJyZW50UHJpb3JpdHkgPj0gcHJpb3JpdHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXJ2ZVByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRE1vdGlvbk1hbmFnZXIgIyBzZXRSZXNlcnZlUHJpb3JpdHkoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1vdGlvbk1hbmFnZXIucHJvdG90eXBlLnNldFJlc2VydmVQcmlvcml0eSA9IGZ1bmN0aW9uICh2YWwvKmludCovKSB7XG4gICAgdGhpcy5yZXNlcnZlUHJpb3JpdHkgPSB2YWw7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNb3Rpb25NYW5hZ2VyICMgdXBkYXRlUGFyYW0oKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRE1vdGlvbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVBhcmFtID0gZnVuY3Rpb24gKG1vZGVsLypBTGl2ZTJETW9kZWwqLykge1xuICAgIHZhciB1cGRhdGVkID0gTW90aW9uUXVldWVNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVQYXJhbS5jYWxsKHRoaXMsIG1vZGVsKTtcblxuICAgIGlmICh0aGlzLmlzRmluaXNoZWQoKSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRQcmlvcml0eSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRNb3Rpb25NYW5hZ2VyICMgc3RhcnRNb3Rpb25QcmlvKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRNb3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zdGFydE1vdGlvblByaW8gPSBmdW5jdGlvbiAobW90aW9uLypBTW90aW9uKi8sIHByaW9yaXR5LyppbnQqLykge1xuICAgIGlmIChwcmlvcml0eSA9PSB0aGlzLnJlc2VydmVQcmlvcml0eSkge1xuICAgICAgICB0aGlzLnJlc2VydmVQcmlvcml0eSA9IDA7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudFByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRNb3Rpb24obW90aW9uLCBmYWxzZSk7XG59XG5cbi8qKlxuICpcbiAqICBZb3UgY2FuIG1vZGlmeSBhbmQgdXNlIHRoaXMgc291cmNlIGZyZWVseVxuICogIG9ubHkgZm9yIHRoZSBkZXZlbG9wbWVudCBvZiBhcHBsaWNhdGlvbiByZWxhdGVkIExpdmUyRC5cbiAqXG4gKiAgKGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgY2xhc3MgTDJEUGh5c2ljcyAgICAgICAgICAgXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIEwyRFBoeXNpY3MoKSB7XG4gICAgdGhpcy5waHlzaWNzTGlzdCA9IG5ldyBBcnJheSgpOyAvL0FycmF5TGlzdDxQaHlzaWNzSGFpcj5cbiAgICB0aGlzLnN0YXJ0VGltZU1TZWMgPSBVdFN5c3RlbS5nZXRVc2VyVGltZU1TZWMoKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIHN0YXRpYyBMMkRQaHlzaWNzLmxvYWQoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFBoeXNpY3MubG9hZCA9IGZ1bmN0aW9uIChidWYgLypieXRlW10qLykge1xuICAgIHZhciByZXQgPSBuZXcgTDJEUGh5c2ljcygpOyAvL0wyRFBoeXNpY3NMMkRQaHlzaWNzXG4gICAgdmFyIHBtID0gTGl2ZTJERnJhbWV3b3JrLmdldFBsYXRmb3JtTWFuYWdlcigpO1xuICAgIHZhciBqc29uID0gcG0uanNvblBhcnNlRnJvbUJ5dGVzKGJ1Zik7XG4gICAgdmFyIHBhcmFtcyA9IGpzb24ucGh5c2ljc19oYWlyO1xuICAgIHZhciBwYXJhbU51bSA9IHBhcmFtcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbU51bTsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1tpXTsgLy9WYWx1ZVxuICAgICAgICB2YXIgcGh5c2ljcyA9IG5ldyBQaHlzaWNzSGFpcigpOyAvL1BoeXNpY3NIYWlyUGh5c2ljc0hhaXJcbiAgICAgICAgdmFyIHNldHVwID0gcGFyYW0uc2V0dXA7IC8vVmFsdWVcbiAgICAgICAgdmFyIGxlbmd0aCA9IHBhcnNlRmxvYXQoc2V0dXAubGVuZ3RoKTtcbiAgICAgICAgdmFyIHJlc2lzdCA9IHBhcnNlRmxvYXQoc2V0dXAucmVnaXN0KTtcbiAgICAgICAgdmFyIG1hc3MgPSBwYXJzZUZsb2F0KHNldHVwLm1hc3MpO1xuICAgICAgICBwaHlzaWNzLnNldHVwKGxlbmd0aCwgcmVzaXN0LCBtYXNzKTtcbiAgICAgICAgdmFyIHNyY0xpc3QgPSBwYXJhbS5zcmM7IC8vVmFsdWVcbiAgICAgICAgdmFyIHNyY051bSA9IHNyY0xpc3QubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNyY051bTsgaisrKSB7XG4gICAgICAgICAgICB2YXIgc3JjID0gc3JjTGlzdFtqXTsgLy9WYWx1ZVxuICAgICAgICAgICAgdmFyIGlkID0gc3JjLmlkOyAvL1N0cmluZ1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBQaHlzaWNzSGFpci5TcmMuU1JDX1RPX1g7XG4gICAgICAgICAgICB2YXIgdHlwZVN0ciA9IHNyYy5wdHlwZTsgLy9TdHJpbmdcbiAgICAgICAgICAgIGlmICh0eXBlU3RyID09PSBcInhcIikge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBQaHlzaWNzSGFpci5TcmMuU1JDX1RPX1g7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVTdHIgPT09IFwieVwiKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IFBoeXNpY3NIYWlyLlNyYy5TUkNfVE9fWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZVN0ciA9PT0gXCJhbmdsZVwiKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IFBoeXNpY3NIYWlyLlNyYy5TUkNfVE9fR19BTkdMRTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgVXREZWJ1Zy5lcnJvcihcImxpdmUyZFwiLCBcIkludmFsaWQgcGFyYW1ldGVyOlBoeXNpY3NIYWlyLlNyY1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzY2FsZSA9IHBhcnNlRmxvYXQoc3JjLnNjYWxlKTtcbiAgICAgICAgICAgIHZhciB3ZWlnaHQgPSBwYXJzZUZsb2F0KHNyYy53ZWlnaHQpO1xuICAgICAgICAgICAgcGh5c2ljcy5hZGRTcmNQYXJhbSh0eXBlLCBpZCwgc2NhbGUsIHdlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRhcmdldExpc3QgPSBwYXJhbS50YXJnZXRzOyAvL1ZhbHVlXG4gICAgICAgIHZhciB0YXJnZXROdW0gPSB0YXJnZXRMaXN0Lmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0YXJnZXROdW07IGorKykge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldExpc3Rbal07IC8vVmFsdWVcbiAgICAgICAgICAgIHZhciBpZCA9IHRhcmdldC5pZDsgLy9TdHJpbmdcbiAgICAgICAgICAgIHZhciB0eXBlID0gUGh5c2ljc0hhaXIuVGFyZ2V0LlRBUkdFVF9GUk9NX0FOR0xFO1xuICAgICAgICAgICAgdmFyIHR5cGVTdHIgPSB0YXJnZXQucHR5cGU7IC8vU3RyaW5nXG4gICAgICAgICAgICBpZiAodHlwZVN0ciA9PT0gXCJhbmdsZVwiKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IFBoeXNpY3NIYWlyLlRhcmdldC5UQVJHRVRfRlJPTV9BTkdMRTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZVN0ciA9PT0gXCJhbmdsZV92XCIpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gUGh5c2ljc0hhaXIuVGFyZ2V0LlRBUkdFVF9GUk9NX0FOR0xFX1Y7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFV0RGVidWcuZXJyb3IoXCJsaXZlMmRcIiwgXCJJbnZhbGlkIHBhcmFtZXRlcjpQaHlzaWNzSGFpci5UYXJnZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSBwYXJzZUZsb2F0KHRhcmdldC5zY2FsZSk7XG4gICAgICAgICAgICB2YXIgd2VpZ2h0ID0gcGFyc2VGbG9hdCh0YXJnZXQud2VpZ2h0KTtcbiAgICAgICAgICAgIHBoeXNpY3MuYWRkVGFyZ2V0UGFyYW0odHlwZSwgaWQsIHNjYWxlLCB3ZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldC5waHlzaWNzTGlzdC5wdXNoKHBoeXNpY3MpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEUGh5c2ljcyAjIHVwZGF0ZVBhcmFtKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRQaHlzaWNzLnByb3RvdHlwZS51cGRhdGVQYXJhbSA9IGZ1bmN0aW9uIChtb2RlbC8qQUxpdmUyRE1vZGVsKi8pIHtcbiAgICB2YXIgdGltZU1TZWMgPSBVdFN5c3RlbS5nZXRVc2VyVGltZU1TZWMoKSAtIHRoaXMuc3RhcnRUaW1lTVNlYztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGh5c2ljc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5waHlzaWNzTGlzdFtpXS51cGRhdGUobW9kZWwsIHRpbWVNU2VjKTtcbiAgICB9XG59XG5cbi8qKlxuICpcbiAqICBZb3UgY2FuIG1vZGlmeSBhbmQgdXNlIHRoaXMgc291cmNlIGZyZWVseVxuICogIG9ubHkgZm9yIHRoZSBkZXZlbG9wbWVudCBvZiBhcHBsaWNhdGlvbiByZWxhdGVkIExpdmUyRC5cbiAqXG4gKiAgKGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgY2xhc3MgTDJEUG9zZSAgICAgICAgICAgICAgXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIEwyRFBvc2UoKSB7XG4gICAgdGhpcy5sYXN0VGltZSA9IDA7XG4gICAgdGhpcy5sYXN0TW9kZWwgPSBudWxsOyAvL0FMaXZlMkRNb2RlbFxuICAgIHRoaXMucGFydHNHcm91cHMgPSBuZXcgQXJyYXkoKTsgLy9BcnJheUxpc3Q8TDJEUGFydHNQYXJhbVtdPlxufVxuXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBzdGF0aWMgTDJEUG9zZS5sb2FkKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRQb3NlLmxvYWQgPSBmdW5jdGlvbiAoYnVmLypieXRlW10qLykge1xuICAgIHZhciByZXQgPSBuZXcgTDJEUG9zZSgpOyAvL0wyRFBvc2VcbiAgICB2YXIgcG0gPSBMaXZlMkRGcmFtZXdvcmsuZ2V0UGxhdGZvcm1NYW5hZ2VyKCk7XG4gICAgdmFyIGpzb24gPSBwbS5qc29uUGFyc2VGcm9tQnl0ZXMoYnVmKTtcbiAgICB2YXIgcG9zZUxpc3RJbmZvID0ganNvbi5wYXJ0c192aXNpYmxlOyAvL1ZhbHVlXG4gICAgdmFyIHBvc2VOdW0gPSBwb3NlTGlzdEluZm8ubGVuZ3RoO1xuICAgIGZvciAodmFyIGlfcG9zZSA9IDA7IGlfcG9zZSA8IHBvc2VOdW07IGlfcG9zZSsrKSB7XG4gICAgICAgIHZhciBwb3NlSW5mbyA9IHBvc2VMaXN0SW5mb1tpX3Bvc2VdOyAvL1ZhbHVlXG4gICAgICAgIHZhciBpZExpc3RJbmZvID0gcG9zZUluZm8uZ3JvdXA7IC8vVmFsdWVcbiAgICAgICAgdmFyIGlkTnVtID0gaWRMaXN0SW5mby5sZW5ndGg7XG4gICAgICAgIHZhciBwYXJ0c0dyb3VwLypMMkRQYXJ0c1BhcmFtKi8gPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgZm9yICh2YXIgaV9ncm91cCA9IDA7IGlfZ3JvdXAgPCBpZE51bTsgaV9ncm91cCsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydHNJbmZvID0gaWRMaXN0SW5mb1tpX2dyb3VwXTsgLy9WYWx1ZVxuICAgICAgICAgICAgdmFyIHBhcnRzID0gbmV3IEwyRFBhcnRzUGFyYW0ocGFydHNJbmZvLmlkKTsgLy9MMkRQYXJ0c1BhcmFtTDJEUGFydHNQYXJhbVxuICAgICAgICAgICAgcGFydHNHcm91cFtpX2dyb3VwXSA9IHBhcnRzO1xuICAgICAgICAgICAgaWYgKHBhcnRzSW5mby5saW5rID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIGxpbmtMaXN0SW5mbyA9IHBhcnRzSW5mby5saW5rOyAvL1ZhbHVlXG4gICAgICAgICAgICB2YXIgbGlua051bSA9IGxpbmtMaXN0SW5mby5sZW5ndGg7XG4gICAgICAgICAgICBwYXJ0cy5saW5rID0gbmV3IEFycmF5KCk7IC8vQXJyYXlMaXN0PEwyRFBhcnRzUGFyYW0+XG4gICAgICAgICAgICBmb3IgKHZhciBpX2xpbmsgPSAwOyBpX2xpbmsgPCBsaW5rTnVtOyBpX2xpbmsrKykge1xuICAgICAgICAgICAgICAgIHZhciBsaW5rUGFydHMgPSBuZXcgTDJEUGFydHNQYXJhbShsaW5rTGlzdEluZm9baV9saW5rXSk7IC8vTDJEUGFydHNQYXJhbUwyRFBhcnRzUGFyYW1cbiAgICAgICAgICAgICAgICBwYXJ0cy5saW5rLnB1c2gobGlua1BhcnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXQucGFydHNHcm91cHMucHVzaChwYXJ0c0dyb3VwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEUG9zZSAjIHVwZGF0ZVBhcmFtKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRQb3NlLnByb3RvdHlwZS51cGRhdGVQYXJhbSA9IGZ1bmN0aW9uIChtb2RlbC8qQUxpdmUyRE1vZGVsKi8pIHtcbiAgICBpZiAobW9kZWwgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgaWYgKCEobW9kZWwgPT0gdGhpcy5sYXN0TW9kZWwpKSB7XG4gICAgICAgIHRoaXMuaW5pdFBhcmFtKG1vZGVsKTtcbiAgICB9XG4gICAgdGhpcy5sYXN0TW9kZWwgPSBtb2RlbDtcblxuICAgIHZhciBjdXJUaW1lID0gVXRTeXN0ZW0uZ2V0VXNlclRpbWVNU2VjKCk7XG4gICAgdmFyIGRlbHRhVGltZVNlYyA9ICgodGhpcy5sYXN0VGltZSA9PSAwKSA/IDAgOiAoY3VyVGltZSAtIHRoaXMubGFzdFRpbWUpIC8gMTAwMC4wKTtcbiAgICB0aGlzLmxhc3RUaW1lID0gY3VyVGltZTtcbiAgICBpZiAoZGVsdGFUaW1lU2VjIDwgMCkgZGVsdGFUaW1lU2VjID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGFydHNHcm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ub3JtYWxpemVQYXJ0c09wYWNpdHlHcm91cChtb2RlbCwgdGhpcy5wYXJ0c0dyb3Vwc1tpXSwgZGVsdGFUaW1lU2VjKTtcbiAgICAgICAgdGhpcy5jb3B5T3BhY2l0eU90aGVyUGFydHMobW9kZWwsIHRoaXMucGFydHNHcm91cHNbaV0pO1xuICAgIH1cbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFBvc2UgIyBpbml0UGFyYW0oKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFBvc2UucHJvdG90eXBlLmluaXRQYXJhbSA9IGZ1bmN0aW9uIChtb2RlbC8qQUxpdmUyRE1vZGVsKi8pIHtcbiAgICBpZiAobW9kZWwgPT0gbnVsbCkgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wYXJ0c0dyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGFydHNHcm91cCA9IHRoaXMucGFydHNHcm91cHNbaV07IC8vTDJEUGFydHNQYXJhbVxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcnRzR3JvdXAubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHBhcnRzR3JvdXBbal0uaW5pdEluZGV4KG1vZGVsKTtcbiAgICAgICAgICAgIHZhciBwYXJ0c0luZGV4ID0gcGFydHNHcm91cFtqXS5wYXJ0c0luZGV4O1xuICAgICAgICAgICAgdmFyIHBhcmFtSW5kZXggPSBwYXJ0c0dyb3VwW2pdLnBhcmFtSW5kZXg7XG4gICAgICAgICAgICBpZiAocGFydHNJbmRleCA8IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHYvKjpCb29sZWFuKi8gPSAobW9kZWwuZ2V0UGFyYW1GbG9hdChwYXJhbUluZGV4KSAhPSAwKTtcbiAgICAgICAgICAgIG1vZGVsLnNldFBhcnRzT3BhY2l0eShwYXJ0c0luZGV4LCAodiA/IDEuMCA6IDAuMCkpO1xuICAgICAgICAgICAgbW9kZWwuc2V0UGFyYW1GbG9hdChwYXJhbUluZGV4LCAodiA/IDEuMCA6IDAuMCkpO1xuICAgICAgICAgICAgaWYgKHBhcnRzR3JvdXBbal0ubGluayA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcGFydHNHcm91cFtqXS5saW5rLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgcGFydHNHcm91cFtqXS5saW5rW2tdLmluaXRJbmRleChtb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRQb3NlICMgbm9ybWFsaXplUGFydHNPcGFjaXR5R3JvdXAoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFBvc2UucHJvdG90eXBlLm5vcm1hbGl6ZVBhcnRzT3BhY2l0eUdyb3VwID0gZnVuY3Rpb24gKG1vZGVsLypBTGl2ZTJETW9kZWwqLywgcGFydHNHcm91cC8qTDJEUGFydHNQYXJhbVtdKi8sIGRlbHRhVGltZVNlYy8qZmxvYXQqLykge1xuICAgIHZhciB2aXNpYmxlUGFydHMgPSAtMTtcbiAgICB2YXIgdmlzaWJsZU9wYWNpdHkgPSAxLjA7XG4gICAgdmFyIENMRUFSX1RJTUVfU0VDID0gMC41O1xuICAgIHZhciBwaGkgPSAwLjU7XG4gICAgdmFyIG1heEJhY2tPcGFjaXR5ID0gMC4xNTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzR3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnRzSW5kZXggPSBwYXJ0c0dyb3VwW2ldLnBhcnRzSW5kZXg7XG4gICAgICAgIHZhciBwYXJhbUluZGV4ID0gcGFydHNHcm91cFtpXS5wYXJhbUluZGV4O1xuICAgICAgICBpZiAocGFydHNJbmRleCA8IDApIGNvbnRpbnVlO1xuICAgICAgICBpZiAobW9kZWwuZ2V0UGFyYW1GbG9hdChwYXJhbUluZGV4KSAhPSAwKSB7XG4gICAgICAgICAgICBpZiAodmlzaWJsZVBhcnRzID49IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpc2libGVQYXJ0cyA9IGk7XG4gICAgICAgICAgICB2aXNpYmxlT3BhY2l0eSA9IG1vZGVsLmdldFBhcnRzT3BhY2l0eShwYXJ0c0luZGV4KTtcbiAgICAgICAgICAgIHZpc2libGVPcGFjaXR5ICs9IGRlbHRhVGltZVNlYyAvIENMRUFSX1RJTUVfU0VDO1xuICAgICAgICAgICAgaWYgKHZpc2libGVPcGFjaXR5ID4gMSkge1xuICAgICAgICAgICAgICAgIHZpc2libGVPcGFjaXR5ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodmlzaWJsZVBhcnRzIDwgMCkge1xuICAgICAgICB2aXNpYmxlUGFydHMgPSAwO1xuICAgICAgICB2aXNpYmxlT3BhY2l0eSA9IDE7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHNHcm91cC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGFydHNJbmRleCA9IHBhcnRzR3JvdXBbaV0ucGFydHNJbmRleDtcbiAgICAgICAgaWYgKHBhcnRzSW5kZXggPCAwKSBjb250aW51ZTtcbiAgICAgICAgaWYgKHZpc2libGVQYXJ0cyA9PSBpKSB7XG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJ0c09wYWNpdHkocGFydHNJbmRleCwgdmlzaWJsZU9wYWNpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG9wYWNpdHkgPSBtb2RlbC5nZXRQYXJ0c09wYWNpdHkocGFydHNJbmRleCk7XG4gICAgICAgICAgICB2YXIgYTE7XG4gICAgICAgICAgICBpZiAodmlzaWJsZU9wYWNpdHkgPCBwaGkpIHtcbiAgICAgICAgICAgICAgICBhMSA9IHZpc2libGVPcGFjaXR5ICogKHBoaSAtIDEpIC8gcGhpICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYTEgPSAoMSAtIHZpc2libGVPcGFjaXR5KSAqIHBoaSAvICgxIC0gcGhpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiYWNrT3AgPSAoMSAtIGExKSAqICgxIC0gdmlzaWJsZU9wYWNpdHkpO1xuICAgICAgICAgICAgaWYgKGJhY2tPcCA+IG1heEJhY2tPcGFjaXR5KSB7XG4gICAgICAgICAgICAgICAgYTEgPSAxIC0gbWF4QmFja09wYWNpdHkgLyAoMSAtIHZpc2libGVPcGFjaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcGFjaXR5ID4gYTEpIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5ID0gYTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJ0c09wYWNpdHkocGFydHNJbmRleCwgb3BhY2l0eSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRQb3NlICMgY29weU9wYWNpdHlPdGhlclBhcnRzKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRQb3NlLnByb3RvdHlwZS5jb3B5T3BhY2l0eU90aGVyUGFydHMgPSBmdW5jdGlvbiAobW9kZWwvKkFMaXZlMkRNb2RlbCovLCBwYXJ0c0dyb3VwLypMMkRQYXJ0c1BhcmFtW10qLykge1xuICAgIGZvciAodmFyIGlfZ3JvdXAgPSAwOyBpX2dyb3VwIDwgcGFydHNHcm91cC5sZW5ndGg7IGlfZ3JvdXArKykge1xuICAgICAgICB2YXIgcGFydHNQYXJhbSA9IHBhcnRzR3JvdXBbaV9ncm91cF07IC8vTDJEUGFydHNQYXJhbVxuICAgICAgICBpZiAocGFydHNQYXJhbS5saW5rID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBpZiAocGFydHNQYXJhbS5wYXJ0c0luZGV4IDwgMCkgY29udGludWU7XG4gICAgICAgIHZhciBvcGFjaXR5ID0gbW9kZWwuZ2V0UGFydHNPcGFjaXR5KHBhcnRzUGFyYW0ucGFydHNJbmRleCk7XG4gICAgICAgIGZvciAodmFyIGlfbGluayA9IDA7IGlfbGluayA8IHBhcnRzUGFyYW0ubGluay5sZW5ndGg7IGlfbGluaysrKSB7XG4gICAgICAgICAgICB2YXIgbGlua1BhcnRzID0gcGFydHNQYXJhbS5saW5rW2lfbGlua107IC8vTDJEUGFydHNQYXJhbVxuICAgICAgICAgICAgaWYgKGxpbmtQYXJ0cy5wYXJ0c0luZGV4IDwgMCkgY29udGludWU7XG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJ0c09wYWNpdHkobGlua1BhcnRzLnBhcnRzSW5kZXgsIG9wYWNpdHkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICBjbGFzcyBMMkRQYXJ0c1BhcmFtICAgICAgICBcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZnVuY3Rpb24gTDJEUGFydHNQYXJhbShpZC8qU3RyaW5nKi8pIHtcbiAgICB0aGlzLnBhcmFtSW5kZXggPSAtMTtcbiAgICB0aGlzLnBhcnRzSW5kZXggPSAtMTtcbiAgICB0aGlzLmxpbmsgPSBudWxsOyAvLyBBcnJheUxpc3Q8TDJEUGFydHNQYXJhbT5cbiAgICB0aGlzLmlkID0gaWQ7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRQYXJ0c1BhcmFtICMgaW5pdEluZGV4KClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRQYXJ0c1BhcmFtLnByb3RvdHlwZS5pbml0SW5kZXggPSBmdW5jdGlvbiAobW9kZWwvKkFMaXZlMkRNb2RlbCovKSB7XG4gICAgdGhpcy5wYXJhbUluZGV4ID0gbW9kZWwuZ2V0UGFyYW1JbmRleChcIlZJU0lCTEU6XCIgKyB0aGlzLmlkKTtcbiAgICB0aGlzLnBhcnRzSW5kZXggPSBtb2RlbC5nZXRQYXJ0c0RhdGFJbmRleChQYXJ0c0RhdGFJRC5nZXRJRCh0aGlzLmlkKSk7XG4gICAgbW9kZWwuc2V0UGFyYW1GbG9hdCh0aGlzLnBhcmFtSW5kZXgsIDEpO1xufVxuXG4vKipcbiAqXG4gKiAgWW91IGNhbiBtb2RpZnkgYW5kIHVzZSB0aGlzIHNvdXJjZSBmcmVlbHlcbiAqICBvbmx5IGZvciB0aGUgZGV2ZWxvcG1lbnQgb2YgYXBwbGljYXRpb24gcmVsYXRlZCBMaXZlMkQuXG4gKlxuICogIChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIGNsYXNzIEwyRFRhcmdldFBvaW50ICAgICAgIFxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5mdW5jdGlvbiBMMkRUYXJnZXRQb2ludCgpIHtcbiAgICB0aGlzLkVQU0lMT04gPSAwLjAxOyAvLyDlpInljJbjga7mnIDlsI/lgKTvvIjjgZPjga7lgKTku6XkuIvjga/nhKHoppbjgZXjgozjgovvvIlcbiAgICB0aGlzLmZhY2VUYXJnZXRYID0gMDtcbiAgICB0aGlzLmZhY2VUYXJnZXRZID0gMDtcbiAgICB0aGlzLmZhY2VYID0gMDtcbiAgICB0aGlzLmZhY2VZID0gMDtcbiAgICB0aGlzLmZhY2VWWCA9IDA7XG4gICAgdGhpcy5mYWNlVlkgPSAwO1xuICAgIHRoaXMubGFzdFRpbWVTZWMgPSAwO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEVGFyZ2V0UG9pbnQuRlJBTUVfUkFURSA9IDMwO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVGFyZ2V0UG9pbnQgIyBzZXQoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFRhcmdldFBvaW50LnByb3RvdHlwZS5zZXRQb2ludCA9IGZ1bmN0aW9uICh4LypmbG9hdCovLCB5LypmbG9hdCovKSB7XG4gICAgdGhpcy5mYWNlVGFyZ2V0WCA9IHg7XG4gICAgdGhpcy5mYWNlVGFyZ2V0WSA9IHk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRUYXJnZXRQb2ludCAjIGdldFgoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFRhcmdldFBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmZhY2VYO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVGFyZ2V0UG9pbnQgIyBnZXRZKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRUYXJnZXRQb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5mYWNlWTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFRhcmdldFBvaW50ICMgdXBkYXRlKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRUYXJnZXRQb2ludC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBUSU1FX1RPX01BWF9TUEVFRCA9IDAuMTU7XG4gICAgdmFyIEZBQ0VfUEFSQU1fTUFYX1YgPSA0MC4wIC8gNy41O1xuICAgIHZhciBNQVhfViA9IEZBQ0VfUEFSQU1fTUFYX1YgLyBMMkRUYXJnZXRQb2ludC5GUkFNRV9SQVRFO1xuICAgIGlmICh0aGlzLmxhc3RUaW1lU2VjID09IDApIHtcbiAgICAgICAgdGhpcy5sYXN0VGltZVNlYyA9IFV0U3lzdGVtLmdldFVzZXJUaW1lTVNlYygpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjdXJUaW1lU2VjID0gVXRTeXN0ZW0uZ2V0VXNlclRpbWVNU2VjKCk7XG4gICAgdmFyIGRlbHRhVGltZVdlaWdodCA9IChjdXJUaW1lU2VjIC0gdGhpcy5sYXN0VGltZVNlYykgKiBMMkRUYXJnZXRQb2ludC5GUkFNRV9SQVRFIC8gMTAwMC4wO1xuICAgIHRoaXMubGFzdFRpbWVTZWMgPSBjdXJUaW1lU2VjO1xuICAgIHZhciBGUkFNRV9UT19NQVhfU1BFRUQgPSBUSU1FX1RPX01BWF9TUEVFRCAqIEwyRFRhcmdldFBvaW50LkZSQU1FX1JBVEU7XG4gICAgdmFyIE1BWF9BID0gZGVsdGFUaW1lV2VpZ2h0ICogTUFYX1YgLyBGUkFNRV9UT19NQVhfU1BFRUQ7XG4gICAgdmFyIGR4ID0gKHRoaXMuZmFjZVRhcmdldFggLSB0aGlzLmZhY2VYKTtcbiAgICB2YXIgZHkgPSAodGhpcy5mYWNlVGFyZ2V0WSAtIHRoaXMuZmFjZVkpO1xuICAgIC8vIGlmKGR4ID09IDAgJiYgZHkgPT0gMCkgcmV0dXJuO1xuICAgIGlmIChNYXRoLmFicyhkeCkgPD0gdGhpcy5FUFNJTE9OICYmIE1hdGguYWJzKGR5KSA8PSB0aGlzLkVQU0lMT04pIHJldHVybjtcbiAgICB2YXIgZCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgdmFyIHZ4ID0gTUFYX1YgKiBkeCAvIGQ7XG4gICAgdmFyIHZ5ID0gTUFYX1YgKiBkeSAvIGQ7XG4gICAgdmFyIGF4ID0gdnggLSB0aGlzLmZhY2VWWDtcbiAgICB2YXIgYXkgPSB2eSAtIHRoaXMuZmFjZVZZO1xuICAgIHZhciBhID0gTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5KTtcbiAgICBpZiAoYSA8IC1NQVhfQSB8fCBhID4gTUFYX0EpIHtcbiAgICAgICAgYXggKj0gTUFYX0EgLyBhO1xuICAgICAgICBheSAqPSBNQVhfQSAvIGE7XG4gICAgICAgIGEgPSBNQVhfQTtcbiAgICB9XG4gICAgdGhpcy5mYWNlVlggKz0gYXg7XG4gICAgdGhpcy5mYWNlVlkgKz0gYXk7XG4gICAge1xuICAgICAgICB2YXIgbWF4X3YgPSAwLjUgKiAoTWF0aC5zcXJ0KE1BWF9BICogTUFYX0EgKyAxNiAqIE1BWF9BICogZCAtIDggKiBNQVhfQSAqIGQpIC0gTUFYX0EpO1xuICAgICAgICB2YXIgY3VyX3YgPSBNYXRoLnNxcnQodGhpcy5mYWNlVlggKiB0aGlzLmZhY2VWWCArIHRoaXMuZmFjZVZZICogdGhpcy5mYWNlVlkpO1xuICAgICAgICBpZiAoY3VyX3YgPiBtYXhfdikge1xuICAgICAgICAgICAgdGhpcy5mYWNlVlggKj0gbWF4X3YgLyBjdXJfdjtcbiAgICAgICAgICAgIHRoaXMuZmFjZVZZICo9IG1heF92IC8gY3VyX3Y7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5mYWNlWCArPSB0aGlzLmZhY2VWWDtcbiAgICB0aGlzLmZhY2VZICs9IHRoaXMuZmFjZVZZO1xufVxuXG4vKipcbiAqXG4gKiAgWW91IGNhbiBtb2RpZnkgYW5kIHVzZSB0aGlzIHNvdXJjZSBmcmVlbHlcbiAqICBvbmx5IGZvciB0aGUgZGV2ZWxvcG1lbnQgb2YgYXBwbGljYXRpb24gcmVsYXRlZCBMaXZlMkQuXG4gKlxuICogIChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIGNsYXNzIEwyRFZpZXdNYXRyaXggICAgICAgIGV4dGVuZHMgICAgIEwyRE1hdHJpeDQ0XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIEwyRFZpZXdNYXRyaXgoKSB7XG4gICAgTDJETWF0cml4NDQucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5zY3JlZW5MZWZ0ID0gbnVsbDtcbiAgICB0aGlzLnNjcmVlblJpZ2h0ID0gbnVsbDtcbiAgICB0aGlzLnNjcmVlblRvcCA9IG51bGw7XG4gICAgdGhpcy5zY3JlZW5Cb3R0b20gPSBudWxsO1xuICAgIHRoaXMubWF4TGVmdCA9IG51bGw7XG4gICAgdGhpcy5tYXhSaWdodCA9IG51bGw7XG4gICAgdGhpcy5tYXhUb3AgPSBudWxsO1xuICAgIHRoaXMubWF4Qm90dG9tID0gbnVsbDtcbiAgICB0aGlzLm1heCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgdGhpcy5taW4gPSAwO1xufVxuXG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZSA9IG5ldyBMMkRNYXRyaXg0NCgpOyAvL0wyRFZpZXdNYXRyaXggZXh0ZW5kcyBMMkRNYXRyaXg0NFxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVmlld01hdHJpeCAjIGdldE1heFNjYWxlKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZS5nZXRNYXhTY2FsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXg7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRWaWV3TWF0cml4ICMgZ2V0TWluU2NhbGUoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFZpZXdNYXRyaXgucHJvdG90eXBlLmdldE1pblNjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbjtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFZpZXdNYXRyaXggIyBzZXRNYXhTY2FsZSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEVmlld01hdHJpeC5wcm90b3R5cGUuc2V0TWF4U2NhbGUgPSBmdW5jdGlvbiAodi8qZmxvYXQqLykge1xuICAgIHRoaXMubWF4ID0gdjtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFZpZXdNYXRyaXggIyBzZXRNaW5TY2FsZSgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEVmlld01hdHJpeC5wcm90b3R5cGUuc2V0TWluU2NhbGUgPSBmdW5jdGlvbiAodi8qZmxvYXQqLykge1xuICAgIHRoaXMubWluID0gdjtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFZpZXdNYXRyaXggIyBpc01heFNjYWxlKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZS5pc01heFNjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFNjYWxlWCgpID09IHRoaXMubWF4O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVmlld01hdHJpeCAjIGlzTWluU2NhbGUoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFZpZXdNYXRyaXgucHJvdG90eXBlLmlzTWluU2NhbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPT0gdGhpcy5taW47XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRWaWV3TWF0cml4ICMgYWRqdXN0VHJhbnNsYXRlKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZS5hZGp1c3RUcmFuc2xhdGUgPSBmdW5jdGlvbiAoc2hpZnRYLypmbG9hdCovLCBzaGlmdFkvKmZsb2F0Ki8pIHtcbiAgICBpZiAodGhpcy50clswXSAqIHRoaXMubWF4TGVmdCArICh0aGlzLnRyWzEyXSArIHNoaWZ0WCkgPiB0aGlzLnNjcmVlbkxlZnQpXG4gICAgICAgIHNoaWZ0WCA9IHRoaXMuc2NyZWVuTGVmdCAtIHRoaXMudHJbMF0gKiB0aGlzLm1heExlZnQgLSB0aGlzLnRyWzEyXTtcbiAgICBpZiAodGhpcy50clswXSAqIHRoaXMubWF4UmlnaHQgKyAodGhpcy50clsxMl0gKyBzaGlmdFgpIDwgdGhpcy5zY3JlZW5SaWdodClcbiAgICAgICAgc2hpZnRYID0gdGhpcy5zY3JlZW5SaWdodCAtIHRoaXMudHJbMF0gKiB0aGlzLm1heFJpZ2h0IC0gdGhpcy50clsxMl07XG4gICAgaWYgKHRoaXMudHJbNV0gKiB0aGlzLm1heFRvcCArICh0aGlzLnRyWzEzXSArIHNoaWZ0WSkgPCB0aGlzLnNjcmVlblRvcClcbiAgICAgICAgc2hpZnRZID0gdGhpcy5zY3JlZW5Ub3AgLSB0aGlzLnRyWzVdICogdGhpcy5tYXhUb3AgLSB0aGlzLnRyWzEzXTtcbiAgICBpZiAodGhpcy50cls1XSAqIHRoaXMubWF4Qm90dG9tICsgKHRoaXMudHJbMTNdICsgc2hpZnRZKSA+IHRoaXMuc2NyZWVuQm90dG9tKVxuICAgICAgICBzaGlmdFkgPSB0aGlzLnNjcmVlbkJvdHRvbSAtIHRoaXMudHJbNV0gKiB0aGlzLm1heEJvdHRvbSAtIHRoaXMudHJbMTNdO1xuXG4gICAgdmFyIHRyMSA9IFsxLCAwLCAwLCAwLFxuICAgICAgICAwLCAxLCAwLCAwLFxuICAgICAgICAwLCAwLCAxLCAwLFxuICAgICAgICBzaGlmdFgsIHNoaWZ0WSwgMCwgMV07XG4gICAgTDJETWF0cml4NDQubXVsKHRyMSwgdGhpcy50ciwgdGhpcy50cik7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRWaWV3TWF0cml4ICMgYWRqdXN0U2NhbGUoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFZpZXdNYXRyaXgucHJvdG90eXBlLmFkanVzdFNjYWxlID0gZnVuY3Rpb24gKGN4LypmbG9hdCovLCBjeS8qZmxvYXQqLywgc2NhbGUvKmZsb2F0Ki8pIHtcbiAgICB2YXIgdGFyZ2V0U2NhbGUgPSBzY2FsZSAqIHRoaXMudHJbMF07XG4gICAgaWYgKHRhcmdldFNjYWxlIDwgdGhpcy5taW4pIHtcbiAgICAgICAgaWYgKHRoaXMudHJbMF0gPiAwKSBzY2FsZSA9IHRoaXMubWluIC8gdGhpcy50clswXTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldFNjYWxlID4gdGhpcy5tYXgpIHtcbiAgICAgICAgaWYgKHRoaXMudHJbMF0gPiAwKSBzY2FsZSA9IHRoaXMubWF4IC8gdGhpcy50clswXTtcbiAgICB9XG4gICAgdmFyIHRyMSA9IFsxLCAwLCAwLCAwLFxuICAgICAgICAwLCAxLCAwLCAwLFxuICAgICAgICAwLCAwLCAxLCAwLFxuICAgICAgICBjeCwgY3ksIDAsIDFdO1xuICAgIHZhciB0cjIgPSBbc2NhbGUsIDAsIDAsIDAsXG4gICAgICAgIDAsIHNjYWxlLCAwLCAwLFxuICAgICAgICAwLCAwLCAxLCAwLFxuICAgICAgICAwLCAwLCAwLCAxXTtcbiAgICB2YXIgdHIzID0gWzEsIDAsIDAsIDAsXG4gICAgICAgIDAsIDEsIDAsIDAsXG4gICAgICAgIDAsIDAsIDEsIDAsXG4gICAgICAgIC1jeCwgLWN5LCAwLCAxXTtcbiAgICBMMkRNYXRyaXg0NC5tdWwodHIzLCB0aGlzLnRyLCB0aGlzLnRyKTtcbiAgICBMMkRNYXRyaXg0NC5tdWwodHIyLCB0aGlzLnRyLCB0aGlzLnRyKTtcbiAgICBMMkRNYXRyaXg0NC5tdWwodHIxLCB0aGlzLnRyLCB0aGlzLnRyKTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFZpZXdNYXRyaXggIyBzZXRTY3JlZW5SZWN0KClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZS5zZXRTY3JlZW5SZWN0ID0gZnVuY3Rpb24gKGxlZnQvKmZsb2F0Ki8sIHJpZ2h0LypmbG9hdCovLCBib3R0b20vKmZsb2F0Ki8sIHRvcC8qZmxvYXQqLykge1xuICAgIHRoaXMuc2NyZWVuTGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5zY3JlZW5SaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMuc2NyZWVuVG9wID0gdG9wO1xuICAgIHRoaXMuc2NyZWVuQm90dG9tID0gYm90dG9tO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVmlld01hdHJpeCAjIHNldE1heFNjcmVlblJlY3QoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFZpZXdNYXRyaXgucHJvdG90eXBlLnNldE1heFNjcmVlblJlY3QgPSBmdW5jdGlvbiAobGVmdC8qZmxvYXQqLywgcmlnaHQvKmZsb2F0Ki8sIGJvdHRvbS8qZmxvYXQqLywgdG9wLypmbG9hdCovKSB7XG4gICAgdGhpcy5tYXhMZWZ0ID0gbGVmdDtcbiAgICB0aGlzLm1heFJpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5tYXhUb3AgPSB0b3A7XG4gICAgdGhpcy5tYXhCb3R0b20gPSBib3R0b207XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRWaWV3TWF0cml4ICMgZ2V0U2NyZWVuTGVmdCgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEVmlld01hdHJpeC5wcm90b3R5cGUuZ2V0U2NyZWVuTGVmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JlZW5MZWZ0O1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVmlld01hdHJpeCAjIGdldFNjcmVlblJpZ2h0KClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZS5nZXRTY3JlZW5SaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JlZW5SaWdodDtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFZpZXdNYXRyaXggIyBnZXRTY3JlZW5Cb3R0b20oKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFZpZXdNYXRyaXgucHJvdG90eXBlLmdldFNjcmVlbkJvdHRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JlZW5Cb3R0b207XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRWaWV3TWF0cml4ICMgZ2V0U2NyZWVuVG9wKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZS5nZXRTY3JlZW5Ub3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NyZWVuVG9wO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVmlld01hdHJpeCAjIGdldE1heExlZnQoKVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkwyRFZpZXdNYXRyaXgucHJvdG90eXBlLmdldE1heExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF4TGVmdDtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIEwyRFZpZXdNYXRyaXggIyBnZXRNYXhSaWdodCgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEVmlld01hdHJpeC5wcm90b3R5cGUuZ2V0TWF4UmlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF4UmlnaHQ7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBMMkRWaWV3TWF0cml4ICMgZ2V0TWF4Qm90dG9tKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MMkRWaWV3TWF0cml4LnByb3RvdHlwZS5nZXRNYXhCb3R0b20gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF4Qm90dG9tO1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gICAgTDJEVmlld01hdHJpeCAjIGdldE1heFRvcCgpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTDJEVmlld01hdHJpeC5wcm90b3R5cGUuZ2V0TWF4VG9wID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1heFRvcDtcbn1cblxuLyoqXG4gKlxuICogIFlvdSBjYW4gbW9kaWZ5IGFuZCB1c2UgdGhpcyBzb3VyY2UgZnJlZWx5XG4gKiAgb25seSBmb3IgdGhlIGRldmVsb3BtZW50IG9mIGFwcGxpY2F0aW9uIHJlbGF0ZWQgTGl2ZTJELlxuICpcbiAqICAoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICBjbGFzcyBMaXZlMkRGcmFtZXdvcmsgICAgICBcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZnVuY3Rpb24gTGl2ZTJERnJhbWV3b3JrKCkge1xufVxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTGl2ZTJERnJhbWV3b3JrLnBsYXRmb3JtTWFuYWdlciA9IG51bGw7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgICBzdGF0aWMgTGl2ZTJERnJhbWV3b3JrLmdldFBsYXRmb3JtTWFuYWdlcigpXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuTGl2ZTJERnJhbWV3b3JrLmdldFBsYXRmb3JtTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTGl2ZTJERnJhbWV3b3JrLnBsYXRmb3JtTWFuYWdlcjtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAgIHN0YXRpYyBMaXZlMkRGcmFtZXdvcmsuc2V0UGxhdGZvcm1NYW5hZ2VyKClcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5MaXZlMkRGcmFtZXdvcmsuc2V0UGxhdGZvcm1NYW5hZ2VyID0gZnVuY3Rpb24gKHBsYXRmb3JtTWFuYWdlciAvKklQbGF0Zm9ybU1hbmFnZXIqLykge1xuICAgIExpdmUyREZyYW1ld29yay5wbGF0Zm9ybU1hbmFnZXIgPSBwbGF0Zm9ybU1hbmFnZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEwyRFRhcmdldFBvaW50OiBMMkRUYXJnZXRQb2ludCxcbiAgICBMaXZlMkRGcmFtZXdvcms6IExpdmUyREZyYW1ld29yayxcbiAgICBMMkRWaWV3TWF0cml4OiBMMkRWaWV3TWF0cml4LFxuICAgIEwyRFBvc2U6IEwyRFBvc2UsXG4gICAgTDJEUGFydHNQYXJhbTogTDJEUGFydHNQYXJhbSxcbiAgICBMMkRQaHlzaWNzOiBMMkRQaHlzaWNzLFxuICAgIEwyRE1vdGlvbk1hbmFnZXI6IEwyRE1vdGlvbk1hbmFnZXIsXG4gICAgTDJETW9kZWxNYXRyaXg6IEwyRE1vZGVsTWF0cml4LFxuICAgIEwyRE1hdHJpeDQ0OiBMMkRNYXRyaXg0NCxcbiAgICBFWUVfU1RBVEU6IEVZRV9TVEFURSxcbiAgICBMMkRFeWVCbGluazogTDJERXllQmxpbmssXG4gICAgTDJERXhwcmVzc2lvblBhcmFtOiBMMkRFeHByZXNzaW9uUGFyYW0sXG4gICAgTDJERXhwcmVzc2lvbk1vdGlvbjogTDJERXhwcmVzc2lvbk1vdGlvbixcbiAgICBMMkRCYXNlTW9kZWw6IEwyREJhc2VNb2RlbFxufSIsIi8qKlxuICpcbiAqICBZb3UgY2FuIG1vZGlmeSBhbmQgdXNlIHRoaXMgc291cmNlIGZyZWVseVxuICogIG9ubHkgZm9yIHRoZSBkZXZlbG9wbWVudCBvZiBhcHBsaWNhdGlvbiByZWxhdGVkIExpdmUyRC5cbiAqXG4gKiAgKGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbi8qKlxuICogRVlITiDkv67mlLlcbiAqIFxuICogQ29weXJpZ2h0IMKpIDIwMTYgLSAyMDE3IEVZSE5cbiAqL1xuXG5mdW5jdGlvbiBNYXRyaXhTdGFjaygpIHt9XG5cblxuTWF0cml4U3RhY2subWF0cml4U3RhY2sgPSBbMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMV07XG5cblxuTWF0cml4U3RhY2suZGVwdGggPSAwO1xuXG5cbk1hdHJpeFN0YWNrLmN1cnJlbnRNYXRyaXggPSBbMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMV07XG5cblxuTWF0cml4U3RhY2sudG1wID0gbmV3IEFycmF5KDE2KTtcblxuXG5cbk1hdHJpeFN0YWNrLnJlc2V0ID0gZnVuY3Rpb24oKVxue1xuICAgIHRoaXMuZGVwdGggPSAwO1xufVxuXG5cblxuTWF0cml4U3RhY2subG9hZElkZW50aXR5ID0gZnVuY3Rpb24oKVxue1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdHJpeFtpXSA9IChpICUgNSA9PSAwKSA/IDEgOiAwO1xuICAgIH1cbn1cblxuXG5cbk1hdHJpeFN0YWNrLnB1c2ggPSBmdW5jdGlvbigpXG57ICAgIFxuICAgIHZhciBvZmZzZXQgPSB0aGlzLmRlcHRoICogMTY7XG4gICAgdmFyIG5leHRPZmZzZXQgPSAodGhpcy5kZXB0aCArIDEpICogMTY7XG4gICAgXG4gICAgaWYgKHRoaXMubWF0cml4U3RhY2subGVuZ3RoIDwgbmV4dE9mZnNldCArIDE2KVxuICAgIHtcbiAgICAgICAgdGhpcy5tYXRyaXhTdGFjay5sZW5ndGggPSBuZXh0T2Zmc2V0ICsgMTY7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIHtcbiAgICAgICAgdGhpcy5tYXRyaXhTdGFja1tuZXh0T2Zmc2V0ICsgaV0gPSB0aGlzLmN1cnJlbnRNYXRyaXhbaV07XG4gICAgfVxuXG4gICAgdGhpcy5kZXB0aCsrO1xufVxuXG5cblxuTWF0cml4U3RhY2sucG9wID0gZnVuY3Rpb24oKVxue1xuICAgIHRoaXMuZGVwdGgtLTtcbiAgICBpZiAodGhpcy5kZXB0aCA8IDApXG4gICAge1xuICAgICAgICBteUVycm9yKFwiSW52YWxpZCBtYXRyaXggc3RhY2suXCIpO1xuICAgICAgICB0aGlzLmRlcHRoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5kZXB0aCAqIDE2O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdHJpeFtpXSA9IHRoaXMubWF0cml4U3RhY2tbb2Zmc2V0ICsgaV07XG4gICAgfVxufVxuXG5cblxuTWF0cml4U3RhY2suZ2V0TWF0cml4ID0gZnVuY3Rpb24oKVxue1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXRyaXg7XG59XG5cblxuXG5NYXRyaXhTdGFjay5tdWx0TWF0cml4ID0gZnVuY3Rpb24obWF0TmV3KVxue1xuICAgIHZhciBpLCBqLCBrO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IDE2OyBpKyspXG4gICAge1xuICAgICAgICB0aGlzLnRtcFtpXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKylcbiAgICB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCA0OyBqKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCA0OyBrKyspXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy50bXBbaSArIGogKiA0XSArPSB0aGlzLmN1cnJlbnRNYXRyaXhbaSArIGsgKiA0XSAqIG1hdE5ld1trICsgaiAqIDRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0cml4W2ldID0gdGhpcy50bXBbaV07XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdHJpeFN0YWNrOyIsImltcG9ydCB7TGl2ZTJERnJhbWV3b3JrfSBmcm9tIFwiLi9MaXZlMkRGcmFtZXdvcmtcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNb2RlbFNldHRpbmdKc29uKClcbnsgICAgXG4gICAgdGhpcy5OQU1FID0gXCJuYW1lXCI7XG4gICAgdGhpcy5JRCA9IFwiaWRcIjtcbiAgICB0aGlzLk1PREVMID0gXCJtb2RlbFwiO1xuICAgIHRoaXMuVEVYVFVSRVMgPSBcInRleHR1cmVzXCI7XG4gICAgdGhpcy5ISVRfQVJFQVMgPSBcImhpdF9hcmVhc1wiO1xuICAgIHRoaXMuUEhZU0lDUyA9IFwicGh5c2ljc1wiO1xuICAgIHRoaXMuUE9TRSA9IFwicG9zZVwiO1xuICAgIHRoaXMuRVhQUkVTU0lPTlMgPSBcImV4cHJlc3Npb25zXCI7XG4gICAgdGhpcy5NT1RJT05fR1JPVVBTID0gXCJtb3Rpb25zXCI7XG4gICAgdGhpcy5TT1VORCA9IFwic291bmRcIjtcbiAgICB0aGlzLkZBREVfSU4gPSBcImZhZGVfaW5cIjtcbiAgICB0aGlzLkZBREVfT1VUID0gXCJmYWRlX291dFwiO1xuICAgIHRoaXMuTEFZT1VUID0gXCJsYXlvdXRcIjtcbiAgICB0aGlzLkhJVF9BUkVBU19DVVNUT00gPSBcImhpdF9hcmVhc19jdXN0b21cIjtcbiAgICB0aGlzLklOSVRfUEFSQU0gPSBcImluaXRfcGFyYW1cIjtcbiAgICB0aGlzLklOSVRfUEFSVFNfVklTSUJMRSA9IFwiaW5pdF9wYXJ0c192aXNpYmxlXCI7XG4gICAgdGhpcy5WQUxVRSA9IFwidmFsXCI7XG4gICAgdGhpcy5GSUxFID0gXCJmaWxlXCI7XG4gICAgdGhpcy5NT1RJT05fRVhQUkVTU0lPTiA9IFwiZXhwcmVzc2lvblwiO1xuXG4gICAgdGhpcy5qc29uID0ge307XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUubG9hZE1vZGVsU2V0dGluZyA9IGZ1bmN0aW9uKHBhdGgsIGNhbGxiYWNrKVxueyAgICBcbiAgICB2YXIgdGhpc1JlZiA9IHRoaXM7XG4gICAgdmFyIHBtID0gTGl2ZTJERnJhbWV3b3JrLmdldFBsYXRmb3JtTWFuYWdlcigpO1xuICAgIHBtLmxvYWRCeXRlcyhwYXRoLCBmdW5jdGlvbihidWYpIHtcbiAgICAgICAgdmFyIHN0ciA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheShidWYpKTtcbiAgICAgICAgdGhpc1JlZi5qc29uID0gSlNPTi5wYXJzZShzdHIpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xufTtcblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRUZXh0dXJlRmlsZSA9IGZ1bmN0aW9uKG4pXG57ICAgIFxuICAgIGlmICh0aGlzLmpzb25bdGhpcy5URVhUVVJFU10gPT0gbnVsbCB8fCB0aGlzLmpzb25bdGhpcy5URVhUVVJFU11bbl0gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuanNvblt0aGlzLlRFWFRVUkVTXVtuXTtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRNb2RlbEZpbGUgPSBmdW5jdGlvbigpXG57ICAgICAgICBcbiAgICByZXR1cm4gdGhpcy5qc29uW3RoaXMuTU9ERUxdO1xufTtcblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRUZXh0dXJlTnVtID0gZnVuY3Rpb24oKVxueyAgICBcbiAgICBpZiAodGhpcy5qc29uW3RoaXMuVEVYVFVSRVNdID09IG51bGwpIHJldHVybiAwO1xuICAgIFxuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5URVhUVVJFU10ubGVuZ3RoO1xufVxuXG5cbk1vZGVsU2V0dGluZ0pzb24ucHJvdG90eXBlLmdldEhpdEFyZWFOdW0gPSBmdW5jdGlvbigpXG57XG4gICAgaWYgKHRoaXMuanNvblt0aGlzLkhJVF9BUkVBU10gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIDA7XG5cbiAgICByZXR1cm4gdGhpcy5qc29uW3RoaXMuSElUX0FSRUFTXS5sZW5ndGg7XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0SGl0QXJlYUlEID0gZnVuY3Rpb24obilcbntcbiAgICBpZiAodGhpcy5qc29uW3RoaXMuSElUX0FSRUFTXSA9PSBudWxsIHx8XG4gICAgICAgIHRoaXMuanNvblt0aGlzLkhJVF9BUkVBU11bbl0gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gdGhpcy5qc29uW3RoaXMuSElUX0FSRUFTXVtuXVt0aGlzLklEXTtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRIaXRBcmVhTmFtZSA9IGZ1bmN0aW9uKG4pXG57XG4gICAgaWYgKHRoaXMuanNvblt0aGlzLkhJVF9BUkVBU10gPT0gbnVsbCB8fCBcbiAgICAgICAgdGhpcy5qc29uW3RoaXMuSElUX0FSRUFTXVtuXSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5ISVRfQVJFQVNdW25dW3RoaXMuTkFNRV07XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0UGh5c2ljc0ZpbGUgPSBmdW5jdGlvbigpXG57XG4gICAgcmV0dXJuIHRoaXMuanNvblt0aGlzLlBIWVNJQ1NdO1xufVxuXG5cbk1vZGVsU2V0dGluZ0pzb24ucHJvdG90eXBlLmdldFBvc2VGaWxlID0gZnVuY3Rpb24oKVxue1xuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5QT1NFXTtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRFeHByZXNzaW9uTnVtID0gZnVuY3Rpb24oKVxue1xuICAgIHJldHVybiAodGhpcy5qc29uW3RoaXMuRVhQUkVTU0lPTlNdID09IG51bGwpID8gMCA6IHRoaXMuanNvblt0aGlzLkVYUFJFU1NJT05TXS5sZW5ndGg7XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0RXhwcmVzc2lvbkZpbGUgPSBmdW5jdGlvbihuKVxue1xuICAgIGlmICh0aGlzLmpzb25bdGhpcy5FWFBSRVNTSU9OU10gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuanNvblt0aGlzLkVYUFJFU1NJT05TXVtuXVt0aGlzLkZJTEVdO1xufVxuXG5cbk1vZGVsU2V0dGluZ0pzb24ucHJvdG90eXBlLmdldEV4cHJlc3Npb25OYW1lID0gZnVuY3Rpb24obilcbntcbiAgICBpZiAodGhpcy5qc29uW3RoaXMuRVhQUkVTU0lPTlNdID09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5FWFBSRVNTSU9OU11bbl1bdGhpcy5OQU1FXTtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRMYXlvdXQgPSBmdW5jdGlvbigpXG57XG4gICAgcmV0dXJuIHRoaXMuanNvblt0aGlzLkxBWU9VVF07XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0SGl0QXJlYXNDdXN0b20gPSBmdW5jdGlvbigpXG57XG4gICAgcmV0dXJuIHRoaXMuanNvblt0aGlzLkhJVF9BUkVBU19DVVNUT01dO1xufVxuXG5cbk1vZGVsU2V0dGluZ0pzb24ucHJvdG90eXBlLmdldEluaXRQYXJhbU51bSA9IGZ1bmN0aW9uKClcbntcbiAgICByZXR1cm4gKHRoaXMuanNvblt0aGlzLklOSVRfUEFSQU1dID09IG51bGwpID8gMCA6IHRoaXMuanNvblt0aGlzLklOSVRfUEFSQU1dLmxlbmd0aDtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRNb3Rpb25OdW0gPSBmdW5jdGlvbihuYW1lKVxue1xuICAgIGlmICh0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXSA9PSBudWxsIHx8IFxuICAgICAgICB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gMDtcbiAgICBcbiAgICByZXR1cm4gdGhpcy5qc29uW3RoaXMuTU9USU9OX0dST1VQU11bbmFtZV0ubGVuZ3RoO1xufVxuXG5cbk1vZGVsU2V0dGluZ0pzb24ucHJvdG90eXBlLmdldE1vdGlvbkZpbGUgPSBmdW5jdGlvbihuYW1lLCBuKVxue1xuICAgIGlmICh0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXSA9PSBudWxsIHx8IFxuICAgICAgICB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXSA9PSBudWxsIHx8IFxuICAgICAgICB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXVtuXSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXVtuXVt0aGlzLkZJTEVdO1xufVxuXG5cbk1vZGVsU2V0dGluZ0pzb24ucHJvdG90eXBlLmdldE1vdGlvblNvdW5kID0gZnVuY3Rpb24obmFtZSwgbilcbntcbiAgICBpZiAodGhpcy5qc29uW3RoaXMuTU9USU9OX0dST1VQU10gPT0gbnVsbCB8fCBcbiAgICAgICAgdGhpcy5qc29uW3RoaXMuTU9USU9OX0dST1VQU11bbmFtZV0gPT0gbnVsbCB8fCBcbiAgICAgICAgdGhpcy5qc29uW3RoaXMuTU9USU9OX0dST1VQU11bbmFtZV1bbl0gPT0gbnVsbCB8fCBcbiAgICAgICAgdGhpcy5qc29uW3RoaXMuTU9USU9OX0dST1VQU11bbmFtZV1bbl1bdGhpcy5TT1VORF0gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gdGhpcy5qc29uW3RoaXMuTU9USU9OX0dST1VQU11bbmFtZV1bbl1bdGhpcy5TT1VORF07XG59XG5cbk1vZGVsU2V0dGluZ0pzb24ucHJvdG90eXBlLmdldE1vdGlvbkV4cHJlc3Npb24gPSBmdW5jdGlvbihuYW1lLCBuKVxue1xuICAgIGlmICh0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXSA9PSBudWxsIHx8XG4gICAgICAgIHRoaXMuanNvblt0aGlzLk1PVElPTl9HUk9VUFNdW25hbWVdID09IG51bGwgfHxcbiAgICAgICAgdGhpcy5qc29uW3RoaXMuTU9USU9OX0dST1VQU11bbmFtZV1bbl0gPT0gbnVsbCB8fFxuICAgICAgICB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXVtuXVt0aGlzLk1PVElPTl9FWFBSRVNTSU9OXSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXVtuXVt0aGlzLk1PVElPTl9FWFBSRVNTSU9OXTtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRNb3Rpb25GYWRlSW4gPSBmdW5jdGlvbihuYW1lLCBuKVxue1xuICAgIGlmICh0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXSA9PSBudWxsIHx8IFxuICAgICAgICB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXSA9PSBudWxsIHx8IFxuICAgICAgICB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXVtuXSA9PSBudWxsIHx8IFxuICAgICAgICB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXVtuXVt0aGlzLkZBREVfSU5dID09IG51bGwpXG4gICAgICAgIHJldHVybiAxMDAwO1xuXG4gICAgcmV0dXJuIHRoaXMuanNvblt0aGlzLk1PVElPTl9HUk9VUFNdW25hbWVdW25dW3RoaXMuRkFERV9JTl07XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0TW90aW9uRmFkZU91dCA9IGZ1bmN0aW9uKG5hbWUsIG4pXG57XG4gICAgaWYgKHRoaXMuanNvblt0aGlzLk1PVElPTl9HUk9VUFNdID09IG51bGwgfHwgXG4gICAgICAgIHRoaXMuanNvblt0aGlzLk1PVElPTl9HUk9VUFNdW25hbWVdID09IG51bGwgfHwgXG4gICAgICAgIHRoaXMuanNvblt0aGlzLk1PVElPTl9HUk9VUFNdW25hbWVdW25dID09IG51bGwgfHwgXG4gICAgICAgIHRoaXMuanNvblt0aGlzLk1PVElPTl9HUk9VUFNdW25hbWVdW25dW3RoaXMuRkFERV9PVVRdID09IG51bGwpXG4gICAgICAgIHJldHVybiAxMDAwO1xuICAgIFxuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5NT1RJT05fR1JPVVBTXVtuYW1lXVtuXVt0aGlzLkZBREVfT1VUXTtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRJbml0UGFyYW1JRCA9IGZ1bmN0aW9uKG4pXG57XG4gICAgaWYgKHRoaXMuanNvblt0aGlzLklOSVRfUEFSQU1dID09IG51bGwgfHwgXG4gICAgICAgIHRoaXMuanNvblt0aGlzLklOSVRfUEFSQU1dW25dID09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgIHJldHVybiB0aGlzLmpzb25bdGhpcy5JTklUX1BBUkFNXVtuXVt0aGlzLklEXTtcbn1cblxuXG5Nb2RlbFNldHRpbmdKc29uLnByb3RvdHlwZS5nZXRJbml0UGFyYW1WYWx1ZSA9IGZ1bmN0aW9uKG4pXG57XG4gICAgaWYgKHRoaXMuanNvblt0aGlzLklOSVRfUEFSQU1dID09IG51bGwgfHwgdGhpcy5qc29uW3RoaXMuSU5JVF9QQVJBTV1bbl0gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICBcbiAgICByZXR1cm4gdGhpcy5qc29uW3RoaXMuSU5JVF9QQVJBTV1bbl1bdGhpcy5WQUxVRV07XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0SW5pdFBhcnRzVmlzaWJsZU51bSA9IGZ1bmN0aW9uKClcbntcbiAgICByZXR1cm4gKHRoaXMuanNvblt0aGlzLklOSVRfUEFSVFNfVklTSUJMRV0gPT0gbnVsbCkgPyAwIDogdGhpcy5qc29uW3RoaXMuSU5JVF9QQVJUU19WSVNJQkxFXS5sZW5ndGg7XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0SW5pdFBhcnRzVmlzaWJsZUlEID0gZnVuY3Rpb24obilcbntcbiAgICBpZiAodGhpcy5qc29uW3RoaXMuSU5JVF9QQVJUU19WSVNJQkxFXSA9PSBudWxsIHx8IHRoaXMuanNvblt0aGlzLklOSVRfUEFSVFNfVklTSUJMRV1bbl0gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuanNvblt0aGlzLklOSVRfUEFSVFNfVklTSUJMRV1bbl1bdGhpcy5JRF07XG59XG5cblxuTW9kZWxTZXR0aW5nSnNvbi5wcm90b3R5cGUuZ2V0SW5pdFBhcnRzVmlzaWJsZVZhbHVlID0gZnVuY3Rpb24obilcbntcbiAgICBpZiAodGhpcy5qc29uW3RoaXMuSU5JVF9QQVJUU19WSVNJQkxFXSA9PSBudWxsIHx8IHRoaXMuanNvblt0aGlzLklOSVRfUEFSVFNfVklTSUJMRV1bbl0gPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICBcbiAgICByZXR1cm4gdGhpcy5qc29uW3RoaXMuSU5JVF9QQVJUU19WSVNJQkxFXVtuXVt0aGlzLlZBTFVFXTtcbn0iLCJcbihmdW5jdGlvbigpe3ZhciBqPXRydWU7ZnVuY3Rpb24gYWEoKXtpZihqKXtyZXR1cm47fXRoaXMuXyRNVD1udWxsO3RoaXMuXyQ1Uz1udWxsO3RoaXMuXyROUD0wO2FhLl8kNDIrKzt0aGlzLl8kNVM9bmV3IHkodGhpcyk7fWFhLl8kMHM9MTthYS5fJDRzPTI7YWEuXyQ0Mj0wO2FhLl8kNjI9ZnVuY3Rpb24oYVEsYVUpe3RyeXtpZihhVSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXthVT1uZXcgRGF0YVZpZXcoYVUpO31pZighKGFVIGluc3RhbmNlb2YgRGF0YVZpZXcpKXt0aHJvdyBuZXcgSihcIl8kU1MjbG9hZE1vZGVsKGIpIC8gYiBfJHggYmUgRGF0YVZpZXcgb3IgQXJyYXlCdWZmZXJcIik7fXZhciBhUz1uZXcgSyhhVSk7dmFyIGFNPWFTLl8kU1QoKTt2YXIgYUs9YVMuXyRTVCgpO3ZhciBhSj1hUy5fJFNUKCk7dmFyIGFOO2lmKGFNPT0xMDkmJmFLPT0xMTEmJmFKPT05OSl7YU49YVMuXyRTVCgpO31lbHNle3Rocm93IG5ldyBKKFwiXyRnaSBfJEMgXyRsaSAsIF8kUTAgXyRQMC5cIik7fWFTLl8kZ3IoYU4pO2lmKGFOPmF5Ll8kVDcpe2FRLl8kTlB8PWFhLl8kNHM7dmFyIGFSPWF5Ll8kVDc7dmFyIGFJPVwiXyRnaSBfJEMgXyRsaSAsIF8kbjAgXyRfIHZlcnNpb24gXyRsaSAoIFNESyA6IFwiK2FSK1wiIDwgXyRmMCA6IFwiK2FOK1wiIClAXyRTUyNsb2FkTW9kZWwoKVxcblwiO3Rocm93IG5ldyBKKGFJKTt9dmFyIGFMPWFTLl8kblAoKTtpZihhTj49YXkuXyRzNyl7dmFyIGFIPWFTLl8kOVQoKTt2YXIgYVQ9YVMuXyQ5VCgpO2lmKGFIIT0tMzA1ODR8fGFUIT0tMzA1ODQpe2FRLl8kTlB8PWFhLl8kMHM7dGhyb3cgbmV3IEooXCJfJGdpIF8kQyBfJGxpICwgXyQwIF8kNiBfJFVpLlwiKTt9fWFRLl8kS1MoYUwpO3ZhciBhUD1hUS5nZXRNb2RlbENvbnRleHQoKTthUC5zZXREcmF3UGFyYW0oYVEuZ2V0RHJhd1BhcmFtKCkpO2FQLmluaXQoKTt9Y2F0Y2goYU8pe3EuXyRSYihhTyk7fX07YWEucHJvdG90eXBlLl8kS1M9ZnVuY3Rpb24oYUgpe3RoaXMuXyRNVD1hSDt9O2FhLnByb3RvdHlwZS5nZXRNb2RlbEltcGw9ZnVuY3Rpb24oKXtpZih0aGlzLl8kTVQ9PW51bGwpe3RoaXMuXyRNVD1uZXcgdygpO3RoaXMuXyRNVC5fJHpQKCk7fXJldHVybiB0aGlzLl8kTVQ7fTthYS5wcm90b3R5cGUuZ2V0Q2FudmFzV2lkdGg9ZnVuY3Rpb24oKXtpZih0aGlzLl8kTVQ9PW51bGwpe3JldHVybiAwO31yZXR1cm4gdGhpcy5fJE1ULmdldENhbnZhc1dpZHRoKCk7fTthYS5wcm90b3R5cGUuZ2V0Q2FudmFzSGVpZ2h0PWZ1bmN0aW9uKCl7aWYodGhpcy5fJE1UPT1udWxsKXtyZXR1cm4gMDt9cmV0dXJuIHRoaXMuXyRNVC5nZXRDYW52YXNIZWlnaHQoKTt9O2FhLnByb3RvdHlwZS5nZXRQYXJhbUZsb2F0PWZ1bmN0aW9uKGFIKXtpZih0eXBlb2YgYUghPVwibnVtYmVyXCIpe2FIPXRoaXMuXyQ1Uy5nZXRQYXJhbUluZGV4KHouZ2V0SUQoYUgpKTt9cmV0dXJuIHRoaXMuXyQ1Uy5nZXRQYXJhbUZsb2F0KGFIKTt9O2FhLnByb3RvdHlwZS5zZXRQYXJhbUZsb2F0PWZ1bmN0aW9uKGFILGFKLGFJKXtpZih0eXBlb2YgYUghPVwibnVtYmVyXCIpe2FIPXRoaXMuXyQ1Uy5nZXRQYXJhbUluZGV4KHouZ2V0SUQoYUgpKTt9aWYoYXJndW1lbnRzLmxlbmd0aDwzKXthST0xO310aGlzLl8kNVMuc2V0UGFyYW1GbG9hdChhSCx0aGlzLl8kNVMuZ2V0UGFyYW1GbG9hdChhSCkqKDEtYUkpK2FKKmFJKTt9O2FhLnByb3RvdHlwZS5hZGRUb1BhcmFtRmxvYXQ9ZnVuY3Rpb24oYUgsYUosYUkpe2lmKHR5cGVvZiBhSCE9XCJudW1iZXJcIil7YUg9dGhpcy5fJDVTLmdldFBhcmFtSW5kZXgoei5nZXRJRChhSCkpO31pZihhcmd1bWVudHMubGVuZ3RoPDMpe2FJPTE7fXRoaXMuXyQ1Uy5zZXRQYXJhbUZsb2F0KGFILHRoaXMuXyQ1Uy5nZXRQYXJhbUZsb2F0KGFIKSthSiphSSk7fTthYS5wcm90b3R5cGUubXVsdFBhcmFtRmxvYXQ9ZnVuY3Rpb24oYUgsYUosYUkpe2lmKHR5cGVvZiBhSCE9XCJudW1iZXJcIil7YUg9dGhpcy5fJDVTLmdldFBhcmFtSW5kZXgoei5nZXRJRChhSCkpO31pZihhcmd1bWVudHMubGVuZ3RoPDMpe2FJPTE7fXRoaXMuXyQ1Uy5zZXRQYXJhbUZsb2F0KGFILHRoaXMuXyQ1Uy5nZXRQYXJhbUZsb2F0KGFIKSooMSsoYUotMSkqYUkpKTt9O2FhLnByb3RvdHlwZS5nZXRQYXJhbUluZGV4PWZ1bmN0aW9uKGFIKXtyZXR1cm4gdGhpcy5fJDVTLmdldFBhcmFtSW5kZXgoei5nZXRJRChhSCkpO307YWEucHJvdG90eXBlLmxvYWRQYXJhbT1mdW5jdGlvbigpe3RoaXMuXyQ1Uy5sb2FkUGFyYW0oKTt9O2FhLnByb3RvdHlwZS5zYXZlUGFyYW09ZnVuY3Rpb24oKXt0aGlzLl8kNVMuc2F2ZVBhcmFtKCk7fTthYS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3RoaXMuXyQ1Uy5pbml0KCk7fTthYS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dGhpcy5fJDVTLnVwZGF0ZSgpO307YWEucHJvdG90eXBlLl8kUnM9ZnVuY3Rpb24oKXtxLl8kbGkoXCJfJDYwIF8kUFQgXyRScygpXCIpO3JldHVybiAtMTt9O2FhLnByb3RvdHlwZS5fJERzPWZ1bmN0aW9uKGFIKXtxLl8kbGkoXCJfJDYwIF8kUFQgXyRTUyNfJERzKCkgXFxuXCIpO307YWEucHJvdG90eXBlLl8kSzI9ZnVuY3Rpb24oKXt9O2FhLnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKCl7fTthYS5wcm90b3R5cGUuZ2V0TW9kZWxDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyQ1Uzt9O2FhLnByb3RvdHlwZS5fJHMyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyROUDt9O2FhLnByb3RvdHlwZS5fJFA3PWZ1bmN0aW9uKGFLLGFSLGFILGEwKXt2YXIgYVU9LTE7dmFyIGFZPTA7dmFyIGFNPXRoaXM7dmFyIGFKPTAuNTt2YXIgYUk9MC4xNTt2YXIgYVg9dHJ1ZTtpZihhSD09MCl7Zm9yKHZhciBhVj0wO2FWPGFLLmxlbmd0aDthVisrKXt2YXIgYVA9YUtbYVZdO3ZhciBhTz1hUlthVl07dmFyIGFTPShhTS5nZXRQYXJhbUZsb2F0KGFQKSE9MCk7YU0uc2V0UGFydHNPcGFjaXR5KGFPLChhUz8xOjApKTt9cmV0dXJuO31lbHNle2lmKGFLLmxlbmd0aD09MSl7dmFyIGFQPWFLWzBdO3ZhciBhVD0oYU0uZ2V0UGFyYW1GbG9hdChhUCkhPTApO3ZhciBhTz1hUlswXTt2YXIgYVE9YU0uZ2V0UGFydHNPcGFjaXR5KGFPKTt2YXIgYVc9YUgvYTA7aWYoYVQpe2FRKz1hVztpZihhUT4xKXthUT0xO319ZWxzZXthUS09YVc7aWYoYVE8MCl7YVE9MDt9fWFNLnNldFBhcnRzT3BhY2l0eShhTyxhUSk7fWVsc2V7Zm9yKHZhciBhVj0wO2FWPGFLLmxlbmd0aDthVisrKXt2YXIgYVA9YUtbYVZdO3ZhciBhUz0oYU0uZ2V0UGFyYW1GbG9hdChhUCkhPTApO2lmKGFTKXtpZihhVT49MCl7YnJlYWs7fWFVPWFWO3ZhciBhTz1hUlthVl07YVk9YU0uZ2V0UGFydHNPcGFjaXR5KGFPKTthWSs9YUgvYTA7aWYoYVk+MSl7YVk9MTt9fX1pZihhVTwwKXtjb25zb2xlLmxvZyhcIk5vIF8kd2kgXyRxMC8gXyRVIGRlZmF1bHRbJXNdXCIsYUtbMF0pO2FVPTA7YVk9MTthTS5sb2FkUGFyYW0oKTthTS5zZXRQYXJhbUZsb2F0KGFLW2FVXSxhWSk7YU0uc2F2ZVBhcmFtKCk7fWZvcih2YXIgYVY9MDthVjxhSy5sZW5ndGg7YVYrKyl7dmFyIGFPPWFSW2FWXTtpZihhVT09YVYpe2FNLnNldFBhcnRzT3BhY2l0eShhTyxhWSk7fWVsc2V7dmFyIGFMPWFNLmdldFBhcnRzT3BhY2l0eShhTyk7dmFyIGFaO2lmKGFZPGFKKXthWj1hWSooYUotMSkvYUorMTt9ZWxzZXthWj0oMS1hWSkqYUovKDEtYUopO31pZihhWCl7dmFyIGFOPSgxLWFaKSooMS1hWSk7aWYoYU4+YUkpe2FaPTEtYUkvKDEtYVkpO319aWYoYUw+YVope2FMPWFaO31hTS5zZXRQYXJ0c09wYWNpdHkoYU8sYUwpO319fX19O2FhLnByb3RvdHlwZS5zZXRQYXJ0c09wYWNpdHk9ZnVuY3Rpb24oYUksYUgpe2lmKHR5cGVvZiBhSSE9XCJudW1iZXJcIil7YUk9dGhpcy5fJDVTLmdldFBhcnRzRGF0YUluZGV4KGkuZ2V0SUQoYUkpKTt9dGhpcy5fJDVTLnNldFBhcnRzT3BhY2l0eShhSSxhSCk7fTthYS5wcm90b3R5cGUuZ2V0UGFydHNEYXRhSW5kZXg9ZnVuY3Rpb24oYUgpe2lmKCEoYUggaW5zdGFuY2VvZiBpKSl7YUg9aS5nZXRJRChhSCk7fXJldHVybiB0aGlzLl8kNVMuZ2V0UGFydHNEYXRhSW5kZXgoYUgpO307YWEucHJvdG90eXBlLmdldFBhcnRzT3BhY2l0eT1mdW5jdGlvbihhSCl7aWYodHlwZW9mIGFIIT1cIm51bWJlclwiKXthSD10aGlzLl8kNVMuZ2V0UGFydHNEYXRhSW5kZXgoaS5nZXRJRChhSCkpO31pZihhSDwwKXtyZXR1cm4gMDt9cmV0dXJuIHRoaXMuXyQ1Uy5nZXRQYXJ0c09wYWNpdHkoYUgpO307YWEucHJvdG90eXBlLmdldERyYXdQYXJhbT1mdW5jdGlvbigpe307YWEucHJvdG90eXBlLmdldERyYXdEYXRhSW5kZXg9ZnVuY3Rpb24oYUgpe3JldHVybiB0aGlzLl8kNVMuZ2V0RHJhd0RhdGFJbmRleChaLmdldElEKGFIKSk7fTthYS5wcm90b3R5cGUuZ2V0RHJhd0RhdGE9ZnVuY3Rpb24oYUgpe3JldHVybiB0aGlzLl8kNVMuZ2V0RHJhd0RhdGEoYUgpO307YWEucHJvdG90eXBlLmdldFRyYW5zZm9ybWVkUG9pbnRzPWZ1bmN0aW9uKGFIKXt2YXIgYUk9dGhpcy5fJDVTLl8kQzIoYUgpO2lmKGFJIGluc3RhbmNlb2YgYWcpe3JldHVybihhSSkuZ2V0VHJhbnNmb3JtZWRQb2ludHMoKTt9cmV0dXJuIG51bGw7fTthYS5wcm90b3R5cGUuZ2V0SW5kZXhBcnJheT1mdW5jdGlvbihhSSl7aWYoYUk8MHx8YUk+PXRoaXMuXyQ1Uy5fJGFTLmxlbmd0aCl7cmV0dXJuIG51bGw7fXZhciBhSD10aGlzLl8kNVMuXyRhU1thSV07aWYoYUghPW51bGwmJmFILmdldFR5cGUoKT09YS5fJHdiKXtpZihhSCBpbnN0YW5jZW9mIGIpe3JldHVybiBhSC5nZXRJbmRleEFycmF5KCk7fX1yZXR1cm4gbnVsbDt9O2Z1bmN0aW9uIFcoYUope2lmKGope3JldHVybjt9dGhpcy5jbGlwQ29udGV4dExpc3Q9bmV3IEFycmF5KCk7dGhpcy5nbGNvbnRleHQ9YUouZ2w7dGhpcy5kcF93ZWJnbD1hSjt0aGlzLmN1ckZyYW1lTm89MDt0aGlzLmZpcnN0RXJyb3JfY2xpcEluTm90VXBkYXRlPXRydWU7dGhpcy5jb2xvckJ1ZmZlcj0wO3RoaXMuaXNJbml0R0xGQkZ1bmM9ZmFsc2U7dGhpcy50bXBCb3VuZHNPbk1vZGVsPW5ldyBhdigpO2lmKFEuZ2xDb250ZXh0Lmxlbmd0aD5RLmZyYW1lQnVmZmVycy5sZW5ndGgpe3RoaXMuY3VyRnJhbWVObz10aGlzLmdldE1hc2tSZW5kZXJUZXh0dXJlKCk7fWVsc2V7fXRoaXMudG1wTW9kZWxUb1ZpZXdNYXRyaXg9bmV3IGFjKCk7dGhpcy50bXBNYXRyaXgyPW5ldyBhYygpO3RoaXMudG1wTWF0cml4Rm9yTWFzaz1uZXcgYWMoKTt0aGlzLnRtcE1hdHJpeEZvckRyYXc9bmV3IGFjKCk7dGhpcy5DSEFOTkVMX0NPTE9SUz1uZXcgQXJyYXkoKTt2YXIgYUk9bmV3IG8oKTthST1uZXcgbygpO2FJLnI9MDthSS5nPTA7YUkuYj0wO2FJLmE9MTt0aGlzLkNIQU5ORUxfQ09MT1JTLnB1c2goYUkpO2FJPW5ldyBvKCk7YUkucj0xO2FJLmc9MDthSS5iPTA7YUkuYT0wO3RoaXMuQ0hBTk5FTF9DT0xPUlMucHVzaChhSSk7YUk9bmV3IG8oKTthSS5yPTA7YUkuZz0xO2FJLmI9MDthSS5hPTA7dGhpcy5DSEFOTkVMX0NPTE9SUy5wdXNoKGFJKTthST1uZXcgbygpO2FJLnI9MDthSS5nPTA7YUkuYj0xO2FJLmE9MDt0aGlzLkNIQU5ORUxfQ09MT1JTLnB1c2goYUkpO2Zvcih2YXIgYUg9MDthSDx0aGlzLkNIQU5ORUxfQ09MT1JTLmxlbmd0aDthSCsrKXt0aGlzLmRwX3dlYmdsLnNldENoYW5uZWxGbGFnQXNDb2xvcihhSCx0aGlzLkNIQU5ORUxfQ09MT1JTW2FIXSk7fX1XLkNIQU5ORUxfQ09VTlQ9NDtXLlJFTkRFUl9URVhUVVJFX1VTRV9NSVBNQVA9ZmFsc2U7Vy5OT1RfVVNFRF9GUkFNRT0tMTAwO1cucHJvdG90eXBlLl8kTDc9ZnVuY3Rpb24oKXtpZih0aGlzLnRtcE1vZGVsVG9WaWV3TWF0cml4KXt0aGlzLnRtcE1vZGVsVG9WaWV3TWF0cml4PW51bGw7fWlmKHRoaXMudG1wTWF0cml4Mil7dGhpcy50bXBNYXRyaXgyPW51bGw7fWlmKHRoaXMudG1wTWF0cml4Rm9yTWFzayl7dGhpcy50bXBNYXRyaXhGb3JNYXNrPW51bGw7fWlmKHRoaXMudG1wTWF0cml4Rm9yRHJhdyl7dGhpcy50bXBNYXRyaXhGb3JEcmF3PW51bGw7fWlmKHRoaXMudG1wQm91bmRzT25Nb2RlbCl7dGhpcy50bXBCb3VuZHNPbk1vZGVsPW51bGw7fWlmKHRoaXMuQ0hBTk5FTF9DT0xPUlMpe2Zvcih2YXIgYUg9dGhpcy5DSEFOTkVMX0NPTE9SUy5sZW5ndGgtMTthSD49MDstLWFIKXt0aGlzLkNIQU5ORUxfQ09MT1JTLnNwbGljZShhSCwxKTt9dGhpcy5DSEFOTkVMX0NPTE9SUz1bXTt9dGhpcy5yZWxlYXNlU2hhZGVyKCk7fTtXLnByb3RvdHlwZS5yZWxlYXNlU2hhZGVyPWZ1bmN0aW9uKCl7dmFyIGFJPVEuZnJhbWVCdWZmZXJzLmxlbmd0aDtmb3IodmFyIGFIPTA7YUg8YUk7YUgrKyl7dGhpcy5nbC5kZWxldGVGcmFtZWJ1ZmZlcihRLmZyYW1lQnVmZmVyc1thSF0uZnJhbWVidWZmZXIpO31RLmZyYW1lQnVmZmVycz1bXTtRLmdsQ29udGV4dD1bXTt9O1cucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oYU8sYU4sYUwpe2Zvcih2YXIgYU09MDthTTxhTi5sZW5ndGg7YU0rKyl7dmFyIGFIPWFOW2FNXS5nZXRDbGlwSURMaXN0KCk7aWYoYUg9PW51bGwpe2NvbnRpbnVlO312YXIgYUo9dGhpcy5maW5kU2FtZUNsaXAoYUgpO2lmKGFKPT1udWxsKXthSj1uZXcgVSh0aGlzLGFPLGFIKTt0aGlzLmNsaXBDb250ZXh0TGlzdC5wdXNoKGFKKTt9dmFyIGFJPWFOW2FNXS5nZXREcmF3RGF0YUlEKCk7dmFyIGFLPWFPLmdldERyYXdEYXRhSW5kZXgoYUkpO2FKLmFkZENsaXBwZWREcmF3RGF0YShhSSxhSyk7dmFyIGFQPWFMW2FNXTthUC5jbGlwQnVmUHJlX2NsaXBDb250ZXh0PWFKO319O1cucHJvdG90eXBlLmdldE1hc2tSZW5kZXJUZXh0dXJlPWZ1bmN0aW9uKCl7dmFyIGFIPW51bGw7YUg9dGhpcy5kcF93ZWJnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1EuZnJhbWVCdWZmZXJzW3RoaXMuZHBfd2ViZ2wuZ2xub109YUg7cmV0dXJuIHRoaXMuZHBfd2ViZ2wuZ2xubzt9O1cucHJvdG90eXBlLnNldHVwQ2xpcD1mdW5jdGlvbihhMSxhUSl7dmFyIGFLPTA7Zm9yKHZhciBhTz0wO2FPPHRoaXMuY2xpcENvbnRleHRMaXN0Lmxlbmd0aDthTysrKXt2YXIgYVA9dGhpcy5jbGlwQ29udGV4dExpc3RbYU9dO3RoaXMuY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHMoYTEsYVApO2lmKGFQLmlzVXNpbmcpe2FLKys7fX1pZihhSz4wKXt2YXIgYU09YVEuZ2wuZ2V0UGFyYW1ldGVyKGFRLmdsLkZSQU1FQlVGRkVSX0JJTkRJTkcpO3ZhciBhVz1uZXcgQXJyYXkoNCk7YVdbMF09MDthV1sxXT0wO2FXWzJdPWFRLmdsLmNhbnZhcy53aWR0aDthV1szXT1hUS5nbC5jYW52YXMuaGVpZ2h0O2FRLmdsLnZpZXdwb3J0KDAsMCxRLmNsaXBwaW5nTWFza0J1ZmZlclNpemUsUS5jbGlwcGluZ01hc2tCdWZmZXJTaXplKTt0aGlzLnNldHVwTGF5b3V0Qm91bmRzKGFLKTthUS5nbC5iaW5kRnJhbWVidWZmZXIoYVEuZ2wuRlJBTUVCVUZGRVIsUS5mcmFtZUJ1ZmZlcnNbdGhpcy5jdXJGcmFtZU5vXS5mcmFtZWJ1ZmZlcik7YVEuZ2wuY2xlYXJDb2xvcigwLDAsMCwwKTthUS5nbC5jbGVhcihhUS5nbC5DT0xPUl9CVUZGRVJfQklUKTtmb3IodmFyIGFPPTA7YU88dGhpcy5jbGlwQ29udGV4dExpc3QubGVuZ3RoO2FPKyspe3ZhciBhUD10aGlzLmNsaXBDb250ZXh0TGlzdFthT107dmFyIGFUPWFQLmFsbENsaXBwZWREcmF3UmVjdDt2YXIgYU49YVAubGF5b3V0Q2hhbm5lbE5vO3ZhciBhVj1hUC5sYXlvdXRCb3VuZHM7dmFyIGFKPTAuMDU7dGhpcy50bXBCb3VuZHNPbk1vZGVsLl8kakwoYVQpO3RoaXMudG1wQm91bmRzT25Nb2RlbC5leHBhbmQoYVQud2lkdGgqYUosYVQuaGVpZ2h0KmFKKTt2YXIgYVo9YVYud2lkdGgvdGhpcy50bXBCb3VuZHNPbk1vZGVsLndpZHRoO3ZhciBhWT1hVi5oZWlnaHQvdGhpcy50bXBCb3VuZHNPbk1vZGVsLmhlaWdodDt0aGlzLnRtcE1hdHJpeDIuaWRlbnRpdHkoKTt0aGlzLnRtcE1hdHJpeDIudHJhbnNsYXRlKC0xLC0xLDApO3RoaXMudG1wTWF0cml4Mi5zY2FsZSgyLDIsMSk7dGhpcy50bXBNYXRyaXgyLnRyYW5zbGF0ZShhVi54LGFWLnksMCk7dGhpcy50bXBNYXRyaXgyLnNjYWxlKGFaLGFZLDEpO3RoaXMudG1wTWF0cml4Mi50cmFuc2xhdGUoLXRoaXMudG1wQm91bmRzT25Nb2RlbC54LC10aGlzLnRtcEJvdW5kc09uTW9kZWwueSwwKTt0aGlzLnRtcE1hdHJpeEZvck1hc2suc2V0TWF0cml4KHRoaXMudG1wTWF0cml4Mi5tKTt0aGlzLnRtcE1hdHJpeDIuaWRlbnRpdHkoKTt0aGlzLnRtcE1hdHJpeDIudHJhbnNsYXRlKGFWLngsYVYueSwwKTt0aGlzLnRtcE1hdHJpeDIuc2NhbGUoYVosYVksMSk7dGhpcy50bXBNYXRyaXgyLnRyYW5zbGF0ZSgtdGhpcy50bXBCb3VuZHNPbk1vZGVsLngsLXRoaXMudG1wQm91bmRzT25Nb2RlbC55LDApO3RoaXMudG1wTWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy50bXBNYXRyaXgyLm0pO3ZhciBhSD10aGlzLnRtcE1hdHJpeEZvck1hc2suZ2V0QXJyYXkoKTtmb3IodmFyIGFYPTA7YVg8MTY7YVgrKyl7YVAubWF0cml4Rm9yTWFza1thWF09YUhbYVhdO312YXIgYTA9dGhpcy50bXBNYXRyaXhGb3JEcmF3LmdldEFycmF5KCk7Zm9yKHZhciBhWD0wO2FYPDE2O2FYKyspe2FQLm1hdHJpeEZvckRyYXdbYVhdPWEwW2FYXTt9dmFyIGFTPWFQLmNsaXBwaW5nTWFza0RyYXdJbmRleExpc3QubGVuZ3RoO2Zvcih2YXIgYVU9MDthVTxhUzthVSsrKXt2YXIgYVI9YVAuY2xpcHBpbmdNYXNrRHJhd0luZGV4TGlzdFthVV07dmFyIGFJPWExLmdldERyYXdEYXRhKGFSKTt2YXIgYUw9YTEuXyRDMihhUik7YVEuc2V0Q2xpcEJ1ZlByZV9jbGlwQ29udGV4dEZvck1hc2soYVApO2FJLmRyYXcoYVEsYTEsYUwpO319YVEuZ2wuYmluZEZyYW1lYnVmZmVyKGFRLmdsLkZSQU1FQlVGRkVSLGFNKTthUS5zZXRDbGlwQnVmUHJlX2NsaXBDb250ZXh0Rm9yTWFzayhudWxsKTthUS5nbC52aWV3cG9ydChhV1swXSxhV1sxXSxhV1syXSxhV1szXSk7fX07Vy5wcm90b3R5cGUuZ2V0Q29sb3JCdWZmZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2xvckJ1ZmZlcjt9O1cucHJvdG90eXBlLmZpbmRTYW1lQ2xpcD1mdW5jdGlvbihhSyl7Zm9yKHZhciBhTj0wO2FOPHRoaXMuY2xpcENvbnRleHRMaXN0Lmxlbmd0aDthTisrKXt2YXIgYU89dGhpcy5jbGlwQ29udGV4dExpc3RbYU5dO3ZhciBhSD1hTy5jbGlwSURMaXN0Lmxlbmd0aDtpZihhSCE9YUsubGVuZ3RoKXtjb250aW51ZTt9dmFyIGFJPTA7Zm9yKHZhciBhTT0wO2FNPGFIO2FNKyspe3ZhciBhTD1hTy5jbGlwSURMaXN0W2FNXTtmb3IodmFyIGFKPTA7YUo8YUg7YUorKyl7aWYoYUtbYUpdPT1hTCl7YUkrKzticmVhazt9fX1pZihhST09YUgpe3JldHVybiBhTzt9fXJldHVybiBudWxsO307Vy5wcm90b3R5cGUuY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHM9ZnVuY3Rpb24oYTYsYVYpe3ZhciBhVT1hNi5fJFJpLmdldE1vZGVsSW1wbCgpLmdldENhbnZhc1dpZHRoKCk7dmFyIGE1PWE2Ll8kUmkuZ2V0TW9kZWxJbXBsKCkuZ2V0Q2FudmFzSGVpZ2h0KCk7dmFyIGFKPWFVPmE1P2FVOmE1O3ZhciBhVD1hSjt2YXIgYVI9YUo7dmFyIGFTPTA7dmFyIGFQPTA7dmFyIGFMPWFWLmNsaXBwZWREcmF3Q29udGV4dExpc3QubGVuZ3RoO2Zvcih2YXIgYU09MDthTTxhTDthTSsrKXt2YXIgYVc9YVYuY2xpcHBlZERyYXdDb250ZXh0TGlzdFthTV07dmFyIGFOPWFXLmRyYXdEYXRhSW5kZXg7dmFyIGFLPWE2Ll8kQzIoYU4pO2lmKGFLLl8keW8oKSl7dmFyIGFYPWFLLmdldFRyYW5zZm9ybWVkUG9pbnRzKCk7dmFyIGE0PWFYLmxlbmd0aDt2YXIgYUk9W107dmFyIGFIPVtdO3ZhciBhTz0wO2Zvcih2YXIgYTM9YXcuXyRpMjthMzxhNDthMys9YXcuXyRObyl7YUlbYU9dPWFYW2EzXTthSFthT109YVhbYTMrMV07YU8rKzt9dmFyIGEyPU1hdGgubWluLmFwcGx5KG51bGwsYUkpO3ZhciBhMT1NYXRoLm1pbi5hcHBseShudWxsLGFIKTt2YXIgYTA9TWF0aC5tYXguYXBwbHkobnVsbCxhSSk7dmFyIGFaPU1hdGgubWF4LmFwcGx5KG51bGwsYUgpO2lmKGEyPGFUKXthVD1hMjt9aWYoYTE8YVIpe2FSPWExO31pZihhMD5hUyl7YVM9YTA7fWlmKGFaPmFQKXthUD1hWjt9fX1pZihhVD09YUope2FWLmFsbENsaXBwZWREcmF3UmVjdC54PTA7YVYuYWxsQ2xpcHBlZERyYXdSZWN0Lnk9MDthVi5hbGxDbGlwcGVkRHJhd1JlY3Qud2lkdGg9MDthVi5hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0PTA7YVYuaXNVc2luZz1mYWxzZTt9ZWxzZXt2YXIgYVE9YVMtYVQ7dmFyIGFZPWFQLWFSO2FWLmFsbENsaXBwZWREcmF3UmVjdC54PWFUO2FWLmFsbENsaXBwZWREcmF3UmVjdC55PWFSO2FWLmFsbENsaXBwZWREcmF3UmVjdC53aWR0aD1hUTthVi5hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0PWFZO2FWLmlzVXNpbmc9dHJ1ZTt9fTtXLnByb3RvdHlwZS5zZXR1cExheW91dEJvdW5kcz1mdW5jdGlvbihhUSl7dmFyIGFJPWFRL1cuQ0hBTk5FTF9DT1VOVDt2YXIgYVA9YVElVy5DSEFOTkVMX0NPVU5UO2FJPX5+YUk7YVA9fn5hUDt2YXIgYUg9MDtmb3IodmFyIGFKPTA7YUo8Vy5DSEFOTkVMX0NPVU5UO2FKKyspe3ZhciBhTT1hSSsoYUo8YVA/MTowKTtpZihhTT09MCl7fWVsc2V7aWYoYU09PTEpe3ZhciBhTD10aGlzLmNsaXBDb250ZXh0TGlzdFthSCsrXTthTC5sYXlvdXRDaGFubmVsTm89YUo7YUwubGF5b3V0Qm91bmRzLng9MDthTC5sYXlvdXRCb3VuZHMueT0wO2FMLmxheW91dEJvdW5kcy53aWR0aD0xO2FMLmxheW91dEJvdW5kcy5oZWlnaHQ9MTt9ZWxzZXtpZihhTT09Mil7Zm9yKHZhciBhTz0wO2FPPGFNO2FPKyspe3ZhciBhTj1hTyUyO3ZhciBhSz0wO2FOPX5+YU47dmFyIGFMPXRoaXMuY2xpcENvbnRleHRMaXN0W2FIKytdO2FMLmxheW91dENoYW5uZWxObz1hSjthTC5sYXlvdXRCb3VuZHMueD1hTiowLjU7YUwubGF5b3V0Qm91bmRzLnk9MDthTC5sYXlvdXRCb3VuZHMud2lkdGg9MC41O2FMLmxheW91dEJvdW5kcy5oZWlnaHQ9MTt9fWVsc2V7aWYoYU08PTQpe2Zvcih2YXIgYU89MDthTzxhTTthTysrKXt2YXIgYU49YU8lMjt2YXIgYUs9YU8vMjthTj1+fmFOO2FLPX5+YUs7dmFyIGFMPXRoaXMuY2xpcENvbnRleHRMaXN0W2FIKytdO2FMLmxheW91dENoYW5uZWxObz1hSjthTC5sYXlvdXRCb3VuZHMueD1hTiowLjU7YUwubGF5b3V0Qm91bmRzLnk9YUsqMC41O2FMLmxheW91dEJvdW5kcy53aWR0aD0wLjU7YUwubGF5b3V0Qm91bmRzLmhlaWdodD0wLjU7fX1lbHNle2lmKGFNPD05KXtmb3IodmFyIGFPPTA7YU88YU07YU8rKyl7dmFyIGFOPWFPJTM7dmFyIGFLPWFPLzM7YU49fn5hTjthSz1+fmFLO3ZhciBhTD10aGlzLmNsaXBDb250ZXh0TGlzdFthSCsrXTthTC5sYXlvdXRDaGFubmVsTm89YUo7YUwubGF5b3V0Qm91bmRzLng9YU4vMzthTC5sYXlvdXRCb3VuZHMueT1hSy8zO2FMLmxheW91dEJvdW5kcy53aWR0aD0xLzM7YUwubGF5b3V0Qm91bmRzLmhlaWdodD0xLzM7fX1lbHNle3EuXyRsaShcIl8kNiBfJDBQIG1hc2sgY291bnQgOiAlZFwiLGFNKTt9fX19fX19O2Z1bmN0aW9uIFUoYUgsYUssYUkpe3RoaXMuY2xpcElETGlzdD1uZXcgQXJyYXkoKTt0aGlzLmNsaXBJRExpc3Q9YUk7dGhpcy5jbGlwcGluZ01hc2tEcmF3SW5kZXhMaXN0PW5ldyBBcnJheSgpO2Zvcih2YXIgYUo9MDthSjxhSS5sZW5ndGg7YUorKyl7dGhpcy5jbGlwcGluZ01hc2tEcmF3SW5kZXhMaXN0LnB1c2goYUsuZ2V0RHJhd0RhdGFJbmRleChhSVthSl0pKTt9dGhpcy5jbGlwcGVkRHJhd0NvbnRleHRMaXN0PW5ldyBBcnJheSgpO3RoaXMuaXNVc2luZz10cnVlO3RoaXMubGF5b3V0Q2hhbm5lbE5vPTA7dGhpcy5sYXlvdXRCb3VuZHM9bmV3IGF2KCk7dGhpcy5hbGxDbGlwcGVkRHJhd1JlY3Q9bmV3IGF2KCk7dGhpcy5tYXRyaXhGb3JNYXNrPW5ldyBGbG9hdDMyQXJyYXkoMTYpO3RoaXMubWF0cml4Rm9yRHJhdz1uZXcgRmxvYXQzMkFycmF5KDE2KTt0aGlzLm93bmVyPWFIO31VLnByb3RvdHlwZS5hZGRDbGlwcGVkRHJhd0RhdGE9ZnVuY3Rpb24oYUosYUkpe3ZhciBhSD1uZXcgUihhSixhSSk7dGhpcy5jbGlwcGVkRHJhd0NvbnRleHRMaXN0LnB1c2goYUgpO307ZnVuY3Rpb24gUihhSSxhSCl7dGhpcy5fJGdQPWFJO3RoaXMuZHJhd0RhdGFJbmRleD1hSDt9ZnVuY3Rpb24gSSgpe2lmKGope3JldHVybjt9dGhpcy5jb2xvcj1udWxsO31mdW5jdGlvbiBhaCgpe2lmKGope3JldHVybjt9dGhpcy5fJGRQPW51bGw7dGhpcy5fJGVvPW51bGw7dGhpcy5fJFYwPW51bGw7dGhpcy5fJGRQPTEwMDA7dGhpcy5fJGVvPTEwMDA7dGhpcy5fJFYwPTE7dGhpcy5fJGEwKCk7fWFoLl8kSlQ9ZnVuY3Rpb24oYVAsYU4sYU8pe3ZhciBhUT1hUC9hTjt2YXIgYTE9YU8vYU47dmFyIGFVPWExO3ZhciBhWj0xLzM7dmFyIGFSPTIvMzt2YXIgYTA9MS0oMS1hMSkqKDEtYTEpO3ZhciBhMj0xLSgxLWFVKSooMS1hVSk7dmFyIGFNPTA7dmFyIGFMPSgoMS1hMSkqYVopKmEwKyhhVSphUisoMS1hVSkqYVopKigxLWEwKTt2YXIgYUs9KGFVKygxLWFVKSphUikqYTIrKGExKmFaKygxLWExKSphUikqKDEtYTIpO3ZhciBhSj0xO3ZhciBhWT1hSi0zKmFLKzMqYUwtYU07dmFyIGFYPTMqYUstNiphTCszKmFNO3ZhciBhVz0zKmFMLTMqYU07dmFyIGFWPWFNO2lmKGFRPD0wKXtyZXR1cm4gMDt9ZWxzZXtpZihhUT49MSl7cmV0dXJuIDE7fX12YXIgYVM9YVE7dmFyIGFJPWFTKmFTO3ZhciBhSD1hUyphSTt2YXIgYVQ9YVkqYUgrYVgqYUkrYVcqYVMrYVY7cmV0dXJuIGFUO307YWgucHJvdG90eXBlLl8kYTA9ZnVuY3Rpb24oKXt9O2FoLnByb3RvdHlwZS5zZXRGYWRlSW49ZnVuY3Rpb24oYUgpe3RoaXMuXyRkUD1hSDt9O2FoLnByb3RvdHlwZS5zZXRGYWRlT3V0PWZ1bmN0aW9uKGFIKXt0aGlzLl8kZW89YUg7fTthaC5wcm90b3R5cGUuXyRwVD1mdW5jdGlvbihhSCl7dGhpcy5fJFYwPWFIO307YWgucHJvdG90eXBlLmdldEZhZGVPdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJGVvO307YWgucHJvdG90eXBlLl8kNFQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJGVvO307YWgucHJvdG90eXBlLl8kbVQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJFYwO307YWgucHJvdG90eXBlLmdldER1cmF0aW9uTVNlYz1mdW5jdGlvbigpe3JldHVybiAtMTt9O2FoLnByb3RvdHlwZS5nZXRMb29wRHVyYXRpb25NU2VjPWZ1bmN0aW9uKCl7cmV0dXJuIC0xO307YWgucHJvdG90eXBlLnVwZGF0ZVBhcmFtPWZ1bmN0aW9uKGFKLGFOKXtpZighYU4uXyRBVHx8YU4uXyQ5TCl7cmV0dXJuO312YXIgYUw9UC5nZXRVc2VyVGltZU1TZWMoKTtpZihhTi5fJHoyPDApe2FOLl8kejI9YUw7YU4uXyRicz1hTDt2YXIgYU09dGhpcy5nZXREdXJhdGlvbk1TZWMoKTtpZihhTi5fJERvPDApe2FOLl8kRG89KGFNPD0wKT8tMTphTi5fJHoyK2FNO319dmFyIGFJPXRoaXMuXyRWMDt2YXIgYUg9KHRoaXMuXyRkUD09MCk/MTpBLl8kcjIoKChhTC1hTi5fJGJzKS8odGhpcy5fJGRQKSkpO3ZhciBhSz0odGhpcy5fJGVvPT0wfHxhTi5fJERvPDApPzE6QS5fJHIyKCgoYU4uXyREby1hTCkvKHRoaXMuXyRlbykpKTthST1hSSphSCphSztpZighKCgwPD1hSSYmYUk8PTEpKSl7Y29uc29sZS5sb2coXCIjIyMgYXNzZXJ0ISEgIyMjIFwiKTt9dGhpcy51cGRhdGVQYXJhbUV4ZShhSixhTCxhSSxhTik7aWYoYU4uXyREbz4wJiZhTi5fJERvPGFMKXthTi5fJDlMPXRydWU7fX07YWgucHJvdG90eXBlLnVwZGF0ZVBhcmFtRXhlPWZ1bmN0aW9uKGFILGFJLGFKLGFLKXt9O2Z1bmN0aW9uIHEoKXt9cS5fJDhzPTA7cS5fJGZUPW5ldyBPYmplY3QoKTtxLnN0YXJ0PWZ1bmN0aW9uKGFJKXt2YXIgYUg9cS5fJGZUW2FJXTtpZihhSD09bnVsbCl7YUg9bmV3IGFmKCk7YUguXyRyPWFJO3EuXyRmVFthSV09YUg7fWFILl8kMFM9UC5nZXRTeXN0ZW1UaW1lTVNlYygpO307cS5kdW1wPWZ1bmN0aW9uKGFKKXt2YXIgYUg9cS5fJGZUW2FKXTtpZihhSCE9bnVsbCl7dmFyIGFJPVAuZ2V0U3lzdGVtVGltZU1TZWMoKTt2YXIgYUs9YUktYUguXyQwUztjb25zb2xlLmxvZyhhSitcIiA6IFwiK2FLK1wibXNcIik7cmV0dXJuIGFLO31lbHNle3JldHVybiAtMTt9fTtxLmVuZD1mdW5jdGlvbihhSil7dmFyIGFIPXEuXyRmVFthSl07aWYoYUghPW51bGwpe3ZhciBhST1QLmdldFN5c3RlbVRpbWVNU2VjKCk7cmV0dXJuIGFJLWFILl8kMFM7fWVsc2V7cmV0dXJuIC0xO319O3EuXyRsaT1mdW5jdGlvbihhSSxhSCl7Y29uc29sZS5sb2coXCJfJGxpIDogXCIrYUkrXCJcXG5cIixhSCk7fTtxLl8kSmk9ZnVuY3Rpb24oYUksYUgpe2NvbnNvbGUubG9nKGFJLGFIKTt9O3EuXyRkTD1mdW5jdGlvbihhSSxhSCl7Y29uc29sZS5sb2coYUksYUgpO2NvbnNvbGUubG9nKFwiXFxuXCIpO307cS5fJEtMPWZ1bmN0aW9uKGFKLGFJKXtmb3IodmFyIGFIPTA7YUg8YUk7YUgrKyl7aWYoYUglMTY9PTAmJmFIPjApe2NvbnNvbGUubG9nKFwiXFxuXCIpO31lbHNle2lmKGFIJTg9PTAmJmFIPjApe2NvbnNvbGUubG9nKFwiICBcIik7fX1jb25zb2xlLmxvZyhcIiUwMlggXCIsKGFKW2FIXSYyNTUpKTt9Y29uc29sZS5sb2coXCJcXG5cIik7fTtxLl8kbnI9ZnVuY3Rpb24oYUwsYUksYUspe2NvbnNvbGUubG9nKFwiJXNcXG5cIixhTCk7dmFyIGFIPWFJLmxlbmd0aDtmb3IodmFyIGFKPTA7YUo8YUg7KythSil7Y29uc29sZS5sb2coXCIlNWRcIixhSVthSl0pO2NvbnNvbGUubG9nKFwiJXNcXG5cIixhSyk7Y29uc29sZS5sb2coXCIsXCIpO31jb25zb2xlLmxvZyhcIlxcblwiKTt9O3EuXyRSYj1mdW5jdGlvbihhSCl7Y29uc29sZS5sb2coXCJkdW1wIGV4Y2VwdGlvbiA6IFwiK2FIKTtjb25zb2xlLmxvZyhcInN0YWNrIDo6IFwiK2FILnN0YWNrKTt9O2Z1bmN0aW9uIGFmKCl7dGhpcy5fJHI9bnVsbDt0aGlzLl8kMFM9bnVsbDt9ZnVuY3Rpb24gRigpe2lmKGope3JldHVybjt9dGhpcy54PW51bGw7dGhpcy55PW51bGw7dGhpcy53aWR0aD1udWxsO3RoaXMuaGVpZ2h0PW51bGw7fUYucHJvdG90eXBlLl8kOFA9ZnVuY3Rpb24oKXtyZXR1cm4gMC41Kih0aGlzLngrdGhpcy54K3RoaXMud2lkdGgpO307Ri5wcm90b3R5cGUuXyQ2UD1mdW5jdGlvbigpe3JldHVybiAwLjUqKHRoaXMueSt0aGlzLnkrdGhpcy5oZWlnaHQpO307Ri5wcm90b3R5cGUuXyRFTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLngrdGhpcy53aWR0aDt9O0YucHJvdG90eXBlLl8kNVQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy55K3RoaXMuaGVpZ2h0O307Ri5wcm90b3R5cGUuXyRqTD1mdW5jdGlvbihhSSxhSyxhSixhSCl7dGhpcy54PWFJO3RoaXMueT1hSzt0aGlzLndpZHRoPWFKO3RoaXMuaGVpZ2h0PWFIO307Ri5wcm90b3R5cGUuXyRqTD1mdW5jdGlvbihhSCl7dGhpcy54PWFILng7dGhpcy55PWFILnk7dGhpcy53aWR0aD1hSC53aWR0aDt0aGlzLmhlaWdodD1hSC5oZWlnaHQ7fTtmdW5jdGlvbiBpKGFIKXtpZihqKXtyZXR1cm47fWFrLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYUgpO31pLnByb3RvdHlwZT1uZXcgYWsoKTtpLl8kdFA9bmV3IE9iamVjdCgpO2kuXyQyNz1mdW5jdGlvbigpe2kuXyR0UC5jbGVhcigpO307aS5nZXRJRD1mdW5jdGlvbihhSCl7dmFyIGFJPWkuXyR0UFthSF07aWYoYUk9PW51bGwpe2FJPW5ldyBpKGFIKTtpLl8kdFBbYUhdPWFJO31yZXR1cm4gYUk7fTtpLnByb3RvdHlwZS5fJDNzPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBpKCk7fTtmdW5jdGlvbiBTKCl7fWZ1bmN0aW9uIHooYUgpe2lmKGope3JldHVybjt9YWsucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhSCk7fXoucHJvdG90eXBlPW5ldyBhaygpO3ouXyR0UD1uZXcgT2JqZWN0KCk7ei5fJDI3PWZ1bmN0aW9uKCl7ei5fJHRQLmNsZWFyKCk7fTt6LmdldElEPWZ1bmN0aW9uKGFIKXt2YXIgYUk9ei5fJHRQW2FIXTtpZihhST09bnVsbCl7YUk9bmV3IHooYUgpO3ouXyR0UFthSF09YUk7fXJldHVybiBhSTt9O3oucHJvdG90eXBlLl8kM3M9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHooKTt9O2Z1bmN0aW9uIHcoKXtpZihqKXtyZXR1cm47fXRoaXMuXyR2bz1udWxsO3RoaXMuXyRGMj1udWxsO3RoaXMuXyRhbz00MDA7dGhpcy5fJDFTPTQwMDt3Ll8kNDIrKzt9dy5fJDQyPTA7dy5wcm90b3R5cGUuXyR6UD1mdW5jdGlvbigpe2lmKHRoaXMuXyR2bz09bnVsbCl7dGhpcy5fJHZvPW5ldyBhbigpO31pZih0aGlzLl8kRjI9PW51bGwpe3RoaXMuXyRGMj1uZXcgQXJyYXkoKTt9fTt3LnByb3RvdHlwZS5nZXRDYW52YXNXaWR0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kYW87fTt3LnByb3RvdHlwZS5nZXRDYW52YXNIZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJDFTO307dy5wcm90b3R5cGUuXyRGMD1mdW5jdGlvbihhSCl7dGhpcy5fJHZvPWFILl8kblAoKTt0aGlzLl8kRjI9YUguXyRuUCgpO3RoaXMuXyRhbz1hSC5fJDZMKCk7dGhpcy5fJDFTPWFILl8kNkwoKTt9O3cucHJvdG90eXBlLl8kNlM9ZnVuY3Rpb24oYUgpe3RoaXMuXyRGMi5wdXNoKGFIKTt9O3cucHJvdG90eXBlLl8kWHI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJEYyO307dy5wcm90b3R5cGUuXyRFMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kdm87fTtmdW5jdGlvbiB1KCl7aWYoail7cmV0dXJuO310aGlzLnAxPW5ldyBOKCk7dGhpcy5wMj1uZXcgTigpO3RoaXMuXyRGbz0wO3RoaXMuXyREYj0wO3RoaXMuXyRMMj0wO3RoaXMuXyRNMj0wO3RoaXMuXyRrcz0wO3RoaXMuXyQ5Yj0wO3RoaXMuXyRpUD0wO3RoaXMuXyRpVD0wO3RoaXMuXyRsTD1uZXcgQXJyYXkoKTt0aGlzLl8kcVA9bmV3IEFycmF5KCk7dGhpcy5zZXR1cCgwLjMsMC41LDAuMSk7fXUucHJvdG90eXBlLnNldHVwPWZ1bmN0aW9uKGFKLGFJLGFIKXt0aGlzLl8ka3M9dGhpcy5fJFliKCk7dGhpcy5wMi5fJHhUKCk7aWYoYXJndW1lbnRzLmxlbmd0aD09Myl7dGhpcy5fJEZvPWFKO3RoaXMuXyRMMj1hSTt0aGlzLnAxLl8kcD1hSDt0aGlzLnAyLl8kcD1hSDt0aGlzLnAyLnk9YUo7dGhpcy5zZXR1cCgpO319O3UucHJvdG90eXBlLmdldFBoeXNpY3NQb2ludDE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wMTt9O3UucHJvdG90eXBlLmdldFBoeXNpY3NQb2ludDI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wMjt9O3UucHJvdG90eXBlLl8kcXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJERiO307dS5wcm90b3R5cGUuXyRwcj1mdW5jdGlvbihhSCl7dGhpcy5fJERiPWFIO307dS5wcm90b3R5cGUuXyQ1cj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kTTI7fTt1LnByb3RvdHlwZS5fJENzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyQ5Yjt9O3UucHJvdG90eXBlLl8kWWI9ZnVuY3Rpb24oKXtyZXR1cm4oLTE4MCooTWF0aC5hdGFuMih0aGlzLnAxLngtdGhpcy5wMi54LC0odGhpcy5wMS55LXRoaXMucDIueSkpKS9NYXRoLlBJKTt9O3UucHJvdG90eXBlLmFkZFNyY1BhcmFtPWZ1bmN0aW9uKGFKLGFILGFMLGFJKXt2YXIgYUs9bmV3IGgoYUosYUgsYUwsYUkpO3RoaXMuXyRsTC5wdXNoKGFLKTt9O3UucHJvdG90eXBlLmFkZFRhcmdldFBhcmFtPWZ1bmN0aW9uKGFKLGFILGFLLGFJKXt2YXIgYUw9bmV3IGFGKGFKLGFILGFLLGFJKTt0aGlzLl8kcVAucHVzaChhTCk7fTt1LnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYUksYUwpe2lmKHRoaXMuXyRpUD09MCl7dGhpcy5fJGlQPXRoaXMuXyRpVD1hTDt0aGlzLl8kRm89KE1hdGguc3FydCgodGhpcy5wMS54LXRoaXMucDIueCkqKHRoaXMucDEueC10aGlzLnAyLngpKyh0aGlzLnAxLnktdGhpcy5wMi55KSoodGhpcy5wMS55LXRoaXMucDIueSkpKTtyZXR1cm47fXZhciBhSz0oYUwtdGhpcy5fJGlUKS8xMDAwO2lmKGFLIT0wKXtmb3IodmFyIGFKPXRoaXMuXyRsTC5sZW5ndGgtMTthSj49MDstLWFKKXt2YXIgYU09dGhpcy5fJGxMW2FKXTthTS5fJG9QKGFJLHRoaXMpO310aGlzLl8kb28oYUksYUspO3RoaXMuXyRNMj10aGlzLl8kWWIoKTt0aGlzLl8kOWI9KHRoaXMuXyRNMi10aGlzLl8ka3MpL2FLO3RoaXMuXyRrcz10aGlzLl8kTTI7fWZvcih2YXIgYUo9dGhpcy5fJHFQLmxlbmd0aC0xO2FKPj0wOy0tYUope3ZhciBhSD10aGlzLl8kcVBbYUpdO2FILl8kWVMoYUksdGhpcyk7fXRoaXMuXyRpVD1hTDt9O3UucHJvdG90eXBlLl8kb289ZnVuY3Rpb24oYU4sYUkpe2lmKGFJPDAuMDMzKXthST0wLjAzMzt9dmFyIGFVPTEvYUk7dGhpcy5wMS52eD0odGhpcy5wMS54LXRoaXMucDEuXyRzMCkqYVU7dGhpcy5wMS52eT0odGhpcy5wMS55LXRoaXMucDEuXyQ3MCkqYVU7dGhpcy5wMS5heD0odGhpcy5wMS52eC10aGlzLnAxLl8kN0wpKmFVO3RoaXMucDEuYXk9KHRoaXMucDEudnktdGhpcy5wMS5fJEhMKSphVTt0aGlzLnAxLmZ4PXRoaXMucDEuYXgqdGhpcy5wMS5fJHA7dGhpcy5wMS5meT10aGlzLnAxLmF5KnRoaXMucDEuXyRwO3RoaXMucDEuXyR4VCgpO3ZhciBhTT0tKE1hdGguYXRhbjIoKHRoaXMucDEueS10aGlzLnAyLnkpLHRoaXMucDEueC10aGlzLnAyLngpKTt2YXIgYUw7dmFyIGFWO3ZhciBhUj1NYXRoLmNvcyhhTSk7dmFyIGFIPU1hdGguc2luKGFNKTt2YXIgYVc9OS44KnRoaXMucDIuXyRwO3ZhciBhUT0odGhpcy5fJERiKmFDLl8kYlMpO3ZhciBhUD0oYVcqTWF0aC5jb3MoYU0tYVEpKTthTD0oYVAqYUgpO2FWPShhUCphUik7dmFyIGFLPSgtdGhpcy5wMS5meCphSCphSCk7dmFyIGFUPSgtdGhpcy5wMS5meSphSCphUik7dmFyIGFKPSgoLXRoaXMucDIudngqdGhpcy5fJEwyKSk7dmFyIGFTPSgoLXRoaXMucDIudnkqdGhpcy5fJEwyKSk7dGhpcy5wMi5meD0oKGFMK2FLK2FKKSk7dGhpcy5wMi5meT0oKGFWK2FUK2FTKSk7dGhpcy5wMi5heD10aGlzLnAyLmZ4L3RoaXMucDIuXyRwO3RoaXMucDIuYXk9dGhpcy5wMi5meS90aGlzLnAyLl8kcDt0aGlzLnAyLnZ4Kz10aGlzLnAyLmF4KmFJO3RoaXMucDIudnkrPXRoaXMucDIuYXkqYUk7dGhpcy5wMi54Kz10aGlzLnAyLnZ4KmFJO3RoaXMucDIueSs9dGhpcy5wMi52eSphSTt2YXIgYU89KE1hdGguc3FydCgodGhpcy5wMS54LXRoaXMucDIueCkqKHRoaXMucDEueC10aGlzLnAyLngpKyh0aGlzLnAxLnktdGhpcy5wMi55KSoodGhpcy5wMS55LXRoaXMucDIueSkpKTt0aGlzLnAyLng9dGhpcy5wMS54K3RoaXMuXyRGbyoodGhpcy5wMi54LXRoaXMucDEueCkvYU87dGhpcy5wMi55PXRoaXMucDEueSt0aGlzLl8kRm8qKHRoaXMucDIueS10aGlzLnAxLnkpL2FPO3RoaXMucDIudng9KHRoaXMucDIueC10aGlzLnAyLl8kczApKmFVO3RoaXMucDIudnk9KHRoaXMucDIueS10aGlzLnAyLl8kNzApKmFVO3RoaXMucDIuXyR4VCgpO307ZnVuY3Rpb24gTigpe3RoaXMuXyRwPTE7dGhpcy54PTA7dGhpcy55PTA7dGhpcy52eD0wO3RoaXMudnk9MDt0aGlzLmF4PTA7dGhpcy5heT0wO3RoaXMuZng9MDt0aGlzLmZ5PTA7dGhpcy5fJHMwPTA7dGhpcy5fJDcwPTA7dGhpcy5fJDdMPTA7dGhpcy5fJEhMPTA7fU4ucHJvdG90eXBlLl8keFQ9ZnVuY3Rpb24oKXt0aGlzLl8kczA9dGhpcy54O3RoaXMuXyQ3MD10aGlzLnk7dGhpcy5fJDdMPXRoaXMudng7dGhpcy5fJEhMPXRoaXMudnk7fTtmdW5jdGlvbiBhdChhSixhSSxhSCl7dGhpcy5fJHdMPW51bGw7dGhpcy5zY2FsZT1udWxsO3RoaXMuXyRWMD1udWxsO3RoaXMuXyR3TD1hSjt0aGlzLnNjYWxlPWFJO3RoaXMuXyRWMD1hSDt9YXQucHJvdG90eXBlLl8kb1A9ZnVuY3Rpb24oYUksYUgpe307ZnVuY3Rpb24gaChhSixhSyxhSSxhSCl7YXQucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhSyxhSSxhSCk7dGhpcy5fJHRMPW51bGw7dGhpcy5fJHRMPWFKO31oLnByb3RvdHlwZT1uZXcgYXQoKTtoLnByb3RvdHlwZS5fJG9QPWZ1bmN0aW9uKGFKLGFIKXt2YXIgYUs9dGhpcy5zY2FsZSphSi5nZXRQYXJhbUZsb2F0KHRoaXMuXyR3TCk7dmFyIGFMPWFILmdldFBoeXNpY3NQb2ludDEoKTtzd2l0Y2godGhpcy5fJHRMKXtkZWZhdWx0OmNhc2UgdS5TcmMuU1JDX1RPX1g6YUwueD1hTC54KyhhSy1hTC54KSp0aGlzLl8kVjA7YnJlYWs7Y2FzZSB1LlNyYy5TUkNfVE9fWTphTC55PWFMLnkrKGFLLWFMLnkpKnRoaXMuXyRWMDticmVhaztjYXNlIHUuU3JjLlNSQ19UT19HX0FOR0xFOnZhciBhST1hSC5fJHFyKCk7YUk9YUkrKGFLLWFJKSp0aGlzLl8kVjA7YUguXyRwcihhSSk7YnJlYWs7fX07ZnVuY3Rpb24gZChhSixhSSxhSCl7dGhpcy5fJHdMPW51bGw7dGhpcy5zY2FsZT1udWxsO3RoaXMuXyRWMD1udWxsO3RoaXMuXyR3TD1hSjt0aGlzLnNjYWxlPWFJO3RoaXMuXyRWMD1hSDt9ZC5wcm90b3R5cGUuXyRZUz1mdW5jdGlvbihhSSxhSCl7fTtmdW5jdGlvbiBhRihhSSxhSyxhSixhSCl7ZC5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLGFLLGFKLGFIKTt0aGlzLl8kWVA9bnVsbDt0aGlzLl8kWVA9YUk7fWFGLnByb3RvdHlwZT1uZXcgZCgpO2FGLnByb3RvdHlwZS5fJFlTPWZ1bmN0aW9uKGFJLGFIKXtzd2l0Y2godGhpcy5fJFlQKXtkZWZhdWx0OmNhc2UgdS5UYXJnZXQuVEFSR0VUX0ZST01fQU5HTEU6YUkuc2V0UGFyYW1GbG9hdCh0aGlzLl8kd0wsdGhpcy5zY2FsZSphSC5fJDVyKCksdGhpcy5fJFYwKTticmVhaztjYXNlIHUuVGFyZ2V0LlRBUkdFVF9GUk9NX0FOR0xFX1Y6YUkuc2V0UGFyYW1GbG9hdCh0aGlzLl8kd0wsdGhpcy5zY2FsZSphSC5fJENzKCksdGhpcy5fJFYwKTticmVhazt9fTt1LlNyYz1mdW5jdGlvbigpe307dS5TcmMuU1JDX1RPX1g9XCJTUkNfVE9fWFwiO3UuU3JjLlNSQ19UT19ZPVwiU1JDX1RPX1lcIjt1LlNyYy5TUkNfVE9fR19BTkdMRT1cIlNSQ19UT19HX0FOR0xFXCI7dS5UYXJnZXQ9ZnVuY3Rpb24oKXt9O3UuVGFyZ2V0LlRBUkdFVF9GUk9NX0FOR0xFPVwiVEFSR0VUX0ZST01fQU5HTEVcIjt1LlRhcmdldC5UQVJHRVRfRlJPTV9BTkdMRV9WPVwiVEFSR0VUX0ZST01fQU5HTEVfVlwiO2Z1bmN0aW9uIFgoKXtpZihqKXtyZXR1cm47fXRoaXMuXyRmTD0wO3RoaXMuXyRnTD0wO3RoaXMuXyRCMD0xO3RoaXMuXyR6MD0xO3RoaXMuXyRxVD0wO3RoaXMucmVmbGVjdFg9ZmFsc2U7dGhpcy5yZWZsZWN0WT1mYWxzZTt9WC5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbihhSCl7dGhpcy5fJGZMPWFILl8kZkw7dGhpcy5fJGdMPWFILl8kZ0w7dGhpcy5fJEIwPWFILl8kQjA7dGhpcy5fJHowPWFILl8kejA7dGhpcy5fJHFUPWFILl8kcVQ7dGhpcy5yZWZsZWN0WD1hSC5yZWZsZWN0WDt0aGlzLnJlZmxlY3RZPWFILnJlZmxlY3RZO307WC5wcm90b3R5cGUuXyRGMD1mdW5jdGlvbihhSCl7dGhpcy5fJGZMPWFILl8kX1QoKTt0aGlzLl8kZ0w9YUguXyRfVCgpO3RoaXMuXyRCMD1hSC5fJF9UKCk7dGhpcy5fJHowPWFILl8kX1QoKTt0aGlzLl8kcVQ9YUguXyRfVCgpO2lmKGFILmdldEZvcm1hdFZlcnNpb24oKT49YXkuTElWRTJEX0ZPUk1BVF9WRVJTSU9OX1YyXzEwX1NESzIpe3RoaXMucmVmbGVjdFg9YUguXyRwbygpO3RoaXMucmVmbGVjdFk9YUguXyRwbygpO319O1gucHJvdG90eXBlLl8kZT1mdW5jdGlvbigpe307dmFyIGFkPWZ1bmN0aW9uKCl7fTthZC5fJG5pPWZ1bmN0aW9uKGFMLGFKLGFSLGFRLGFLLGFJLGFILGFTLGFOKXt2YXIgYU09KGFIKmFJLWFTKmFLKTtpZihhTT09MCl7cmV0dXJuIG51bGw7fWVsc2V7dmFyIGFPPSgoYUwtYVIpKmFJLShhSi1hUSkqYUspL2FNO3ZhciBhUDtpZihhSyE9MCl7YVA9KGFMLWFSLWFPKmFIKS9hSzt9ZWxzZXthUD0oYUotYVEtYU8qYVMpL2FJO31pZihpc05hTihhUCkpe2FQPShhTC1hUi1hTyphSCkvYUs7aWYoaXNOYU4oYVApKXthUD0oYUotYVEtYU8qYVMpL2FJO31pZihpc05hTihhUCkpe2NvbnNvbGUubG9nKFwiYSBpcyBOYU4gQFV0VmVjdG9yI18kbmkoKSBcIik7Y29uc29sZS5sb2coXCJ2MXggOiBcIithSyk7Y29uc29sZS5sb2coXCJ2MXggIT0gMCA/IFwiKyhhSyE9MCkpO319aWYoYU49PW51bGwpe3JldHVybiBuZXcgQXJyYXkoYVAsYU8pO31lbHNle2FOWzBdPWFQO2FOWzFdPWFPO3JldHVybiBhTjt9fX07ZnVuY3Rpb24gYXYoKXtpZihqKXtyZXR1cm47fXRoaXMueD1udWxsO3RoaXMueT1udWxsO3RoaXMud2lkdGg9bnVsbDt0aGlzLmhlaWdodD1udWxsO31hdi5wcm90b3R5cGUuXyQ4UD1mdW5jdGlvbigpe3JldHVybiB0aGlzLngrMC41KnRoaXMud2lkdGg7fTthdi5wcm90b3R5cGUuXyQ2UD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnkrMC41KnRoaXMuaGVpZ2h0O307YXYucHJvdG90eXBlLl8kRUw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54K3RoaXMud2lkdGg7fTthdi5wcm90b3R5cGUuXyQ1VD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnkrdGhpcy5oZWlnaHQ7fTthdi5wcm90b3R5cGUuXyRqTD1mdW5jdGlvbihhSSxhSyxhSixhSCl7dGhpcy54PWFJO3RoaXMueT1hSzt0aGlzLndpZHRoPWFKO3RoaXMuaGVpZ2h0PWFIO307YXYucHJvdG90eXBlLl8kakw9ZnVuY3Rpb24oYUgpe3RoaXMueD1hSC54O3RoaXMueT1hSC55O3RoaXMud2lkdGg9YUgud2lkdGg7dGhpcy5oZWlnaHQ9YUguaGVpZ2h0O307YXYucHJvdG90eXBlLmNvbnRhaW5zPWZ1bmN0aW9uKGFILGFJKXtyZXR1cm4gdGhpcy54PD10aGlzLngmJnRoaXMueTw9dGhpcy55JiYodGhpcy54PD10aGlzLngrdGhpcy53aWR0aCkmJih0aGlzLnk8PXRoaXMueSt0aGlzLmhlaWdodCk7fTthdi5wcm90b3R5cGUuZXhwYW5kPWZ1bmN0aW9uKGFILGFJKXt0aGlzLngtPWFIO3RoaXMueS09YUk7dGhpcy53aWR0aCs9YUgqMjt0aGlzLmhlaWdodCs9YUkqMjt9O2Z1bmN0aW9uIGFHKCl7fWFHLl8kWjI9ZnVuY3Rpb24oYmIsYm8sYnAsYTIpe3ZhciBhMT1iby5fJFEyKGJiLGJwKTt2YXIgYTM9YmIuXyR2cygpO3ZhciBiYT1iYi5fJFRyKCk7Ym8uXyR6cihhMyxiYSxhMSk7aWYoYTE8PTApe3JldHVybiBhMlthM1swXV07fWVsc2V7aWYoYTE9PTEpe3ZhciBiaj1hMlthM1swXV07dmFyIGJpPWEyW2EzWzFdXTt2YXIgYTk9YmFbMF07cmV0dXJuKGJqKyhiaS1iaikqYTkpfDA7fWVsc2V7aWYoYTE9PTIpe3ZhciBiaj1hMlthM1swXV07dmFyIGJpPWEyW2EzWzFdXTt2YXIgYTA9YTJbYTNbMl1dO3ZhciBhWj1hMlthM1szXV07dmFyIGE5PWJhWzBdO3ZhciBhOD1iYVsxXTt2YXIgYnI9KGJqKyhiaS1iaikqYTkpfDA7dmFyIGJxPShhMCsoYVotYTApKmE5KXwwO3JldHVybihicisoYnEtYnIpKmE4KXwwO31lbHNle2lmKGExPT0zKXt2YXIgYVA9YTJbYTNbMF1dO3ZhciBhTz1hMlthM1sxXV07dmFyIGJuPWEyW2EzWzJdXTt2YXIgYm09YTJbYTNbM11dO3ZhciBhSz1hMlthM1s0XV07dmFyIGFKPWEyW2EzWzVdXTt2YXIgYmc9YTJbYTNbNl1dO3ZhciBiZj1hMlthM1s3XV07dmFyIGE5PWJhWzBdO3ZhciBhOD1iYVsxXTt2YXIgYTY9YmFbMl07dmFyIGJqPShhUCsoYU8tYVApKmE5KXwwO3ZhciBiaT0oYm4rKGJtLWJuKSphOSl8MDt2YXIgYTA9KGFLKyhhSi1hSykqYTkpfDA7dmFyIGFaPShiZysoYmYtYmcpKmE5KXwwO3ZhciBicj0oYmorKGJpLWJqKSphOCl8MDt2YXIgYnE9KGEwKyhhWi1hMCkqYTgpfDA7cmV0dXJuKGJyKyhicS1icikqYTYpfDA7fWVsc2V7aWYoYTE9PTQpe3ZhciBhVD1hMlthM1swXV07dmFyIGFTPWEyW2EzWzFdXTt2YXIgYnU9YTJbYTNbMl1dO3ZhciBidD1hMlthM1szXV07dmFyIGFOPWEyW2EzWzRdXTt2YXIgYU09YTJbYTNbNV1dO3ZhciBibD1hMlthM1s2XV07dmFyIGJrPWEyW2EzWzddXTt2YXIgYmU9YTJbYTNbOF1dO3ZhciBiYz1hMlthM1s5XV07dmFyIGFYPWEyW2EzWzEwXV07dmFyIGFXPWEyW2EzWzExXV07dmFyIGE3PWEyW2EzWzEyXV07dmFyIGE1PWEyW2EzWzEzXV07dmFyIGFSPWEyW2EzWzE0XV07dmFyIGFRPWEyW2EzWzE1XV07dmFyIGE5PWJhWzBdO3ZhciBhOD1iYVsxXTt2YXIgYTY9YmFbMl07dmFyIGE0PWJhWzNdO3ZhciBhUD0oYVQrKGFTLWFUKSphOSl8MDt2YXIgYU89KGJ1KyhidC1idSkqYTkpfDA7dmFyIGJuPShhTisoYU0tYU4pKmE5KXwwO3ZhciBibT0oYmwrKGJrLWJsKSphOSl8MDt2YXIgYUs9KGJlKyhiYy1iZSkqYTkpfDA7dmFyIGFKPShhWCsoYVctYVgpKmE5KXwwO3ZhciBiZz0oYTcrKGE1LWE3KSphOSl8MDt2YXIgYmY9KGFSKyhhUS1hUikqYTkpfDA7dmFyIGJqPShhUCsoYU8tYVApKmE4KXwwO3ZhciBiaT0oYm4rKGJtLWJuKSphOCl8MDt2YXIgYTA9KGFLKyhhSi1hSykqYTgpfDA7dmFyIGFaPShiZysoYmYtYmcpKmE4KXwwO3ZhciBicj0oYmorKGJpLWJqKSphNil8MDt2YXIgYnE9KGEwKyhhWi1hMCkqYTYpfDA7cmV0dXJuKGJyKyhicS1icikqYTQpfDA7fWVsc2V7dmFyIGFWPTE8PGExO3ZhciBhWT1uZXcgRmxvYXQzMkFycmF5KGFWKTtmb3IodmFyIGJoPTA7Ymg8YVY7YmgrKyl7dmFyIGFJPWJoO3ZhciBhSD0xO2Zvcih2YXIgYUw9MDthTDxhMTthTCsrKXthSCo9KGFJJTI9PTApPygxLWJhW2FMXSk6YmFbYUxdO2FJLz0yO31hWVtiaF09YUg7fXZhciBicz1uZXcgRmxvYXQzMkFycmF5KGFWKTtmb3IodmFyIGFVPTA7YVU8YVY7YVUrKyl7YnNbYVVdPWEyW2EzW2FVXV07fXZhciBiZD0wO2Zvcih2YXIgYVU9MDthVTxhVjthVSsrKXtiZCs9YVlbYVVdKmJzW2FVXTt9cmV0dXJuKGJkKzAuNSl8MDt9fX19fX07YUcuXyRicj1mdW5jdGlvbihiYSxibyxicCxiZyl7dmFyIGExPWJvLl8kUTIoYmEsYnApO3ZhciBhMj1iYS5fJHZzKCk7dmFyIGE5PWJhLl8kVHIoKTtiby5fJHpyKGEyLGE5LGExKTtpZihhMTw9MCl7cmV0dXJuIGJnW2EyWzBdXTt9ZWxzZXtpZihhMT09MSl7dmFyIGJqPWJnW2EyWzBdXTt2YXIgYmk9YmdbYTJbMV1dO3ZhciBhOD1hOVswXTtyZXR1cm4gYmorKGJpLWJqKSphODt9ZWxzZXtpZihhMT09Mil7dmFyIGJqPWJnW2EyWzBdXTt2YXIgYmk9YmdbYTJbMV1dO3ZhciBhMD1iZ1thMlsyXV07dmFyIGFaPWJnW2EyWzNdXTt2YXIgYTg9YTlbMF07dmFyIGE3PWE5WzFdO3JldHVybigxLWE3KSooYmorKGJpLWJqKSphOCkrYTcqKGEwKyhhWi1hMCkqYTgpO31lbHNle2lmKGExPT0zKXt2YXIgYVA9YmdbYTJbMF1dO3ZhciBhTz1iZ1thMlsxXV07dmFyIGJuPWJnW2EyWzJdXTt2YXIgYm09YmdbYTJbM11dO3ZhciBhSz1iZ1thMls0XV07dmFyIGFKPWJnW2EyWzVdXTt2YXIgYmY9YmdbYTJbNl1dO3ZhciBiZT1iZ1thMls3XV07dmFyIGE4PWE5WzBdO3ZhciBhNz1hOVsxXTt2YXIgYTU9YTlbMl07cmV0dXJuKDEtYTUpKigoMS1hNykqKGFQKyhhTy1hUCkqYTgpK2E3KihibisoYm0tYm4pKmE4KSkrYTUqKCgxLWE3KSooYUsrKGFKLWFLKSphOCkrYTcqKGJmKyhiZS1iZikqYTgpKTt9ZWxzZXtpZihhMT09NCl7dmFyIGFUPWJnW2EyWzBdXTt2YXIgYVM9YmdbYTJbMV1dO3ZhciBicz1iZ1thMlsyXV07dmFyIGJyPWJnW2EyWzNdXTt2YXIgYU49YmdbYTJbNF1dO3ZhciBhTT1iZ1thMls1XV07dmFyIGJsPWJnW2EyWzZdXTt2YXIgYms9YmdbYTJbN11dO3ZhciBiZD1iZ1thMls4XV07dmFyIGJiPWJnW2EyWzldXTt2YXIgYVg9YmdbYTJbMTBdXTt2YXIgYVc9YmdbYTJbMTFdXTt2YXIgYTY9YmdbYTJbMTJdXTt2YXIgYTQ9YmdbYTJbMTNdXTt2YXIgYVI9YmdbYTJbMTRdXTt2YXIgYVE9YmdbYTJbMTVdXTt2YXIgYTg9YTlbMF07dmFyIGE3PWE5WzFdO3ZhciBhNT1hOVsyXTt2YXIgYTM9YTlbM107cmV0dXJuKDEtYTMpKigoMS1hNSkqKCgxLWE3KSooYVQrKGFTLWFUKSphOCkrYTcqKGJzKyhici1icykqYTgpKSthNSooKDEtYTcpKihhTisoYU0tYU4pKmE4KSthNyooYmwrKGJrLWJsKSphOCkpKSthMyooKDEtYTUpKigoMS1hNykqKGJkKyhiYi1iZCkqYTgpK2E3KihhWCsoYVctYVgpKmE4KSkrYTUqKCgxLWE3KSooYTYrKGE0LWE2KSphOCkrYTcqKGFSKyhhUS1hUikqYTgpKSk7fWVsc2V7dmFyIGFWPTE8PGExO3ZhciBhWT1uZXcgRmxvYXQzMkFycmF5KGFWKTtmb3IodmFyIGJoPTA7Ymg8YVY7YmgrKyl7dmFyIGFJPWJoO3ZhciBhSD0xO2Zvcih2YXIgYUw9MDthTDxhMTthTCsrKXthSCo9KGFJJTI9PTApPygxLWE5W2FMXSk6YTlbYUxdO2FJLz0yO31hWVtiaF09YUg7fXZhciBicT1uZXcgRmxvYXQzMkFycmF5KGFWKTtmb3IodmFyIGFVPTA7YVU8YVY7YVUrKyl7YnFbYVVdPWJnW2EyW2FVXV07fXZhciBiYz0wO2Zvcih2YXIgYVU9MDthVTxhVjthVSsrKXtiYys9YVlbYVVdKmJxW2FVXTt9cmV0dXJuIGJjO319fX19fTthRy5fJFZyPWZ1bmN0aW9uKGJWLGJXLGE1LGFJLGJDLGEzLGJYLGJIKXt2YXIgYU49YlcuXyRRMihiVixhNSk7dmFyIGJ3PWJWLl8kdnMoKTt2YXIgYTI9YlYuXyRUcigpO2JXLl8kenIoYncsYTIsYU4pO3ZhciBhSj1hSSoyO3ZhciBhUT1iWDtpZihhTjw9MCl7dmFyIGJJPWJ3WzBdO3ZhciBicT1iQ1tiSV07aWYoYkg9PTImJmJYPT0wKXtQLl8kalQoYnEsMCxhMywwLGFKKTt9ZWxzZXtmb3IodmFyIGJ0PTA7YnQ8YUo7KXthM1thUV09YnFbYnQrK107YTNbYVErMV09YnFbYnQrK107YVErPWJIO319fWVsc2V7aWYoYU49PTEpe3ZhciBicT1iQ1tid1swXV07dmFyIGJwPWJDW2J3WzFdXTt2YXIgYjM9YTJbMF07dmFyIGJUPTEtYjM7Zm9yKHZhciBidD0wO2J0PGFKOyl7YTNbYVFdPWJxW2J0XSpiVCticFtidF0qYjM7KytidDthM1thUSsxXT1icVtidF0qYlQrYnBbYnRdKmIzOysrYnQ7YVErPWJIO319ZWxzZXtpZihhTj09Mil7dmFyIGJxPWJDW2J3WzBdXTt2YXIgYnA9YkNbYndbMV1dO3ZhciBhWj1iQ1tid1syXV07dmFyIGFZPWJDW2J3WzNdXTt2YXIgYjM9YTJbMF07dmFyIGIxPWEyWzFdO3ZhciBiVD0xLWIzO3ZhciBiUD0xLWIxO3ZhciBiMj1iUCpiVDt2YXIgYjA9YlAqYjM7dmFyIGJNPWIxKmJUO3ZhciBiTD1iMSpiMztmb3IodmFyIGJ0PTA7YnQ8YUo7KXthM1thUV09YjIqYnFbYnRdK2IwKmJwW2J0XStiTSphWltidF0rYkwqYVlbYnRdOysrYnQ7YTNbYVErMV09YjIqYnFbYnRdK2IwKmJwW2J0XStiTSphWltidF0rYkwqYVlbYnRdOysrYnQ7YVErPWJIO319ZWxzZXtpZihhTj09Myl7dmFyIGJhPWJDW2J3WzBdXTt2YXIgYTk9YkNbYndbMV1dO3ZhciBhUD1iQ1tid1syXV07dmFyIGFPPWJDW2J3WzNdXTt2YXIgYTY9YkNbYndbNF1dO3ZhciBhND1iQ1tid1s1XV07dmFyIGFMPWJDW2J3WzZdXTt2YXIgYUs9YkNbYndbN11dO3ZhciBiMz1hMlswXTt2YXIgYjE9YTJbMV07dmFyIGJaPWEyWzJdO3ZhciBiVD0xLWIzO3ZhciBiUD0xLWIxO3ZhciBiTj0xLWJaO3ZhciBiOD1iTipiUCpiVDt2YXIgYjc9Yk4qYlAqYjM7dmFyIGJVPWJOKmIxKmJUO3ZhciBiUz1iTipiMSpiMzt2YXIgYjY9YloqYlAqYlQ7dmFyIGI1PWJaKmJQKmIzO3ZhciBiUT1iWipiMSpiVDt2YXIgYk89YloqYjEqYjM7Zm9yKHZhciBidD0wO2J0PGFKOyl7YTNbYVFdPWI4KmJhW2J0XStiNyphOVtidF0rYlUqYVBbYnRdK2JTKmFPW2J0XStiNiphNltidF0rYjUqYTRbYnRdK2JRKmFMW2J0XStiTyphS1tidF07KytidDthM1thUSsxXT1iOCpiYVtidF0rYjcqYTlbYnRdK2JVKmFQW2J0XStiUyphT1tidF0rYjYqYTZbYnRdK2I1KmE0W2J0XStiUSphTFtidF0rYk8qYUtbYnRdOysrYnQ7YVErPWJIO319ZWxzZXtpZihhTj09NCl7dmFyIGJEPWJDW2J3WzBdXTt2YXIgYkI9YkNbYndbMV1dO3ZhciBibz1iQ1tid1syXV07dmFyIGJtPWJDW2J3WzNdXTt2YXIgYnk9YkNbYndbNF1dO3ZhciBieD1iQ1tid1s1XV07dmFyIGJlPWJDW2J3WzZdXTt2YXIgYmQ9YkNbYndbN11dO3ZhciBiRz1iQ1tid1s4XV07dmFyIGJFPWJDW2J3WzldXTt2YXIgYnY9YkNbYndbMTBdXTt2YXIgYnU9YkNbYndbMTFdXTt2YXIgYkE9YkNbYndbMTJdXTt2YXIgYno9YkNbYndbMTNdXTt2YXIgYm49YkNbYndbMTRdXTt2YXIgYmw9YkNbYndbMTVdXTt2YXIgYjM9YTJbMF07dmFyIGIxPWEyWzFdO3ZhciBiWj1hMlsyXTt2YXIgYlk9YTJbM107dmFyIGJUPTEtYjM7dmFyIGJQPTEtYjE7dmFyIGJOPTEtYlo7dmFyIGJLPTEtYlk7dmFyIGJrPWJLKmJOKmJQKmJUO3ZhciBiaT1iSypiTipiUCpiMzt2YXIgYVc9YksqYk4qYjEqYlQ7dmFyIGFWPWJLKmJOKmIxKmIzO3ZhciBiYz1iSypiWipiUCpiVDt2YXIgYmI9YksqYloqYlAqYjM7dmFyIGFTPWJLKmJaKmIxKmJUO3ZhciBhUj1iSypiWipiMSpiMzt2YXIgYnM9YlkqYk4qYlAqYlQ7dmFyIGJyPWJZKmJOKmJQKmIzO3ZhciBhMT1iWSpiTipiMSpiVDt2YXIgYTA9YlkqYk4qYjEqYjM7dmFyIGJoPWJZKmJaKmJQKmJUO3ZhciBiZj1iWSpiWipiUCpiMzt2YXIgYVU9YlkqYloqYjEqYlQ7dmFyIGFUPWJZKmJaKmIxKmIzO2Zvcih2YXIgYnQ9MDtidDxhSjspe2EzW2FRXT1iaypiRFtidF0rYmkqYkJbYnRdK2FXKmJvW2J0XSthVipibVtidF0rYmMqYnlbYnRdK2JiKmJ4W2J0XSthUypiZVtidF0rYVIqYmRbYnRdK2JzKmJHW2J0XSticipiRVtidF0rYTEqYnZbYnRdK2EwKmJ1W2J0XStiaCpiQVtidF0rYmYqYnpbYnRdK2FVKmJuW2J0XSthVCpibFtidF07KytidDthM1thUSsxXT1iaypiRFtidF0rYmkqYkJbYnRdK2FXKmJvW2J0XSthVipibVtidF0rYmMqYnlbYnRdK2JiKmJ4W2J0XSthUypiZVtidF0rYVIqYmRbYnRdK2JzKmJHW2J0XSticipiRVtidF0rYTEqYnZbYnRdK2EwKmJ1W2J0XStiaCpiQVtidF0rYmYqYnpbYnRdK2FVKmJuW2J0XSthVCpibFtidF07KytidDthUSs9Ykg7fX1lbHNle3ZhciBiND0xPDxhTjt2YXIgYko9bmV3IEZsb2F0MzJBcnJheShiNCk7Zm9yKHZhciBiaj0wO2JqPGI0O2JqKyspe3ZhciBhSD1iajt2YXIgYU09MTtmb3IodmFyIGJGPTA7YkY8YU47YkYrKyl7YU0qPShhSCUyPT0wKT8oMS1hMltiRl0pOmEyW2JGXTthSC89Mjt9YkpbYmpdPWFNO312YXIgYmc9bmV3IEZsb2F0MzJBcnJheShiNCk7Zm9yKHZhciBhWD0wO2FYPGI0O2FYKyspe2JnW2FYXT1iQ1tid1thWF1dO31mb3IodmFyIGJ0PTA7YnQ8YUo7KXt2YXIgYTg9MCxhNz0wO3ZhciBiUj1idCsxO2Zvcih2YXIgYVg9MDthWDxiNDthWCsrKXthOCs9YkpbYVhdKmJnW2FYXVtidF07YTcrPWJKW2FYXSpiZ1thWF1bYlJdO31idCs9MjthM1thUV09YTg7YTNbYVErMV09YTc7YVErPWJIO319fX19fX07ZnVuY3Rpb24gZSgpe2lmKGope3JldHVybjt9dGhpcy54PW51bGw7dGhpcy55PW51bGw7fWUucHJvdG90eXBlLl8kSFQ9ZnVuY3Rpb24oYUgsYUkpe3RoaXMueD1hSDt0aGlzLnk9YUk7fTtlLnByb3RvdHlwZS5fJEhUPWZ1bmN0aW9uKGFIKXt0aGlzLng9YUgueDt0aGlzLnk9YUgueTt9O2Z1bmN0aW9uIGFlKCl7aWYoail7cmV0dXJuO310aGlzLl8kZ1A9bnVsbDt0aGlzLl8kZHI9bnVsbDt0aGlzLl8kR1M9bnVsbDt0aGlzLl8kcWI9bnVsbDt0aGlzLl8kTGI9bnVsbDt0aGlzLl8kbVM9bnVsbDt0aGlzLmNsaXBJRD1udWxsO3RoaXMuY2xpcElETGlzdD1uZXcgQXJyYXkoKTt9YWUuXyR1cj0tMjthZS5fJEVTPTUwMDthZS5fJHdiPTI7YWUuXyQ4Uz0zO2FlLl8kNTI9YWUuXyRFUzthZS5fJFIyPWFlLl8kRVM7YWUuXyRvcj1mdW5jdGlvbigpe3JldHVybiBhZS5fJDUyO307YWUuXyRQcj1mdW5jdGlvbigpe3JldHVybiBhZS5fJFIyO307YWUucHJvdG90eXBlLmNvbnZlcnRDbGlwSURGb3JWMl8xMT1mdW5jdGlvbihhSSl7dmFyIGFIPVtdO2lmKGFJPT1udWxsKXtyZXR1cm4gbnVsbDt9aWYoYUkubGVuZ3RoPT0wKXtyZXR1cm4gbnVsbDt9aWYoIS8sLy50ZXN0KGFJKSl7YUgucHVzaChhSS5pZCk7cmV0dXJuIGFIO31hSD1hSS5pZC5zcGxpdChcIixcIik7cmV0dXJuIGFIO307YWUucHJvdG90eXBlLl8kRjA9ZnVuY3Rpb24oYUgpe3RoaXMuXyRnUD1hSC5fJG5QKCk7dGhpcy5fJGRyPWFILl8kblAoKTt0aGlzLl8kR1M9YUguXyRuUCgpO3RoaXMuXyRxYj1hSC5fJDZMKCk7dGhpcy5fJExiPWFILl8kY1MoKTt0aGlzLl8kbVM9YUguXyRUYigpO2lmKGFILmdldEZvcm1hdFZlcnNpb24oKT49YXkuXyRUNyl7dGhpcy5jbGlwSUQ9YUguXyRuUCgpO3RoaXMuY2xpcElETGlzdD10aGlzLmNvbnZlcnRDbGlwSURGb3JWMl8xMSh0aGlzLmNsaXBJRCk7fWVsc2V7dGhpcy5jbGlwSURMaXN0PVtdO310aGlzLl8kTVModGhpcy5fJExiKTt9O2FlLnByb3RvdHlwZS5nZXRDbGlwSURMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xpcElETGlzdDt9O2FlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGFIKXt9O2FlLnByb3RvdHlwZS5fJE5yPWZ1bmN0aW9uKGFILGFJKXthSS5fJElTWzBdPWZhbHNlO2FJLl8kVXM9YUcuXyRaMihhSCx0aGlzLl8kR1MsYUkuXyRJUyx0aGlzLl8kTGIpO2lmKFEuXyRacyl7fWVsc2V7aWYoYUkuXyRJU1swXSl7cmV0dXJuO319YUkuXyQ3cz1hRy5fJGJyKGFILHRoaXMuXyRHUyxhSS5fJElTLHRoaXMuXyRtUyk7fTthZS5wcm90b3R5cGUuXyQyYj1mdW5jdGlvbihhSCxhSSl7fTthZS5wcm90b3R5cGUuZ2V0RHJhd0RhdGFJRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kZ1A7fTthZS5wcm90b3R5cGUuXyRqMj1mdW5jdGlvbihhSCl7dGhpcy5fJGdQPWFIO307YWUucHJvdG90eXBlLmdldE9wYWNpdHk9ZnVuY3Rpb24oYUgsYUkpe3JldHVybiBhSS5fJDdzO307YWUucHJvdG90eXBlLl8kelM9ZnVuY3Rpb24oYUgsYUkpe3JldHVybiBhSS5fJFVzO307YWUucHJvdG90eXBlLl8kTVM9ZnVuY3Rpb24oYUope2Zvcih2YXIgYUk9YUoubGVuZ3RoLTE7YUk+PTA7LS1hSSl7dmFyIGFIPWFKW2FJXTtpZihhSDxhZS5fJDUyKXthZS5fJDUyPWFIO31lbHNle2lmKGFIPmFlLl8kUjIpe2FlLl8kUjI9YUg7fX19fTthZS5wcm90b3R5cGUuZ2V0VGFyZ2V0QmFzZURhdGFJRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kZHI7fTthZS5wcm90b3R5cGUuXyRncz1mdW5jdGlvbihhSCl7dGhpcy5fJGRyPWFIO307YWUucHJvdG90eXBlLl8kMzI9ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5fJGRyIT1udWxsJiYodGhpcy5fJGRyIT1uLl8kMm8oKSkpO307YWUucHJvdG90eXBlLnByZURyYXc9ZnVuY3Rpb24oYUosYUgsYUkpe307YWUucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oYUosYUgsYUkpe307YWUucHJvdG90eXBlLmdldFR5cGU9ZnVuY3Rpb24oKXt9O2FlLnByb3RvdHlwZS5fJEIyPWZ1bmN0aW9uKGFJLGFILGFKKXt9O2Z1bmN0aW9uIGF4KCl7aWYoail7cmV0dXJuO310aGlzLl8kRWI9YXguXyRwczt0aGlzLl8kbFQ9MTt0aGlzLl8kQzA9MTt0aGlzLl8kdFQ9MTt0aGlzLl8kV0w9MTt0aGlzLmN1bGxpbmc9ZmFsc2U7dGhpcy5tYXRyaXg0eDQ9bmV3IEZsb2F0MzJBcnJheSgxNik7dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGE9ZmFsc2U7dGhpcy5hbmlzb3Ryb3B5PTA7dGhpcy5jbGlwcGluZ1Byb2Nlc3M9YXguQ0xJUFBJTkdfUFJPQ0VTU19OT05FO3RoaXMuY2xpcEJ1ZlByZV9jbGlwQ29udGV4dE1hc2s9bnVsbDt0aGlzLmNsaXBCdWZQcmVfY2xpcENvbnRleHREcmF3PW51bGw7dGhpcy5DSEFOTkVMX0NPTE9SUz1uZXcgQXJyYXkoKTt9YXguXyRwcz0zMjtheC5DTElQUElOR19QUk9DRVNTX05PTkU9MDtheC5DTElQUElOR19QUk9DRVNTX09WRVJXUklURV9BTFBIQT0xO2F4LkNMSVBQSU5HX1BST0NFU1NfTVVMVElQTFlfQUxQSEE9MjtheC5DTElQUElOR19QUk9DRVNTX0RSQVc9MztheC5DTElQUElOR19QUk9DRVNTX0NMRUFSX0FMUEhBPTQ7YXgucHJvdG90eXBlLnNldENoYW5uZWxGbGFnQXNDb2xvcj1mdW5jdGlvbihhSCxhSSl7dGhpcy5DSEFOTkVMX0NPTE9SU1thSF09YUk7fTtheC5wcm90b3R5cGUuZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yPWZ1bmN0aW9uKGFIKXtyZXR1cm4gdGhpcy5DSEFOTkVMX0NPTE9SU1thSF07fTtheC5wcm90b3R5cGUuXyRaVD1mdW5jdGlvbigpe307YXgucHJvdG90eXBlLl8kVW89ZnVuY3Rpb24oYU0sYUssYUosYUwsYU4sYUksYUgpe307YXgucHJvdG90eXBlLl8kUnM9ZnVuY3Rpb24oKXtyZXR1cm4gLTE7fTtheC5wcm90b3R5cGUuXyREcz1mdW5jdGlvbihhSCl7fTtheC5wcm90b3R5cGUuc2V0QmFzZUNvbG9yPWZ1bmN0aW9uKGFLLGFKLGFJLGFIKXtpZihhSzwwKXthSz0wO31lbHNle2lmKGFLPjEpe2FLPTE7fX1pZihhSjwwKXthSj0wO31lbHNle2lmKGFKPjEpe2FKPTE7fX1pZihhSTwwKXthST0wO31lbHNle2lmKGFJPjEpe2FJPTE7fX1pZihhSDwwKXthSD0wO31lbHNle2lmKGFIPjEpe2FIPTE7fX10aGlzLl8kbFQ9YUs7dGhpcy5fJEMwPWFKO3RoaXMuXyR0VD1hSTt0aGlzLl8kV0w9YUg7fTtheC5wcm90b3R5cGUuXyRXUD1mdW5jdGlvbihhSCl7dGhpcy5jdWxsaW5nPWFIO307YXgucHJvdG90eXBlLnNldE1hdHJpeD1mdW5jdGlvbihhSCl7Zm9yKHZhciBhST0wO2FJPDE2O2FJKyspe3RoaXMubWF0cml4NHg0W2FJXT1hSFthSV07fX07YXgucHJvdG90eXBlLl8kSVQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXRyaXg0eDQ7fTtheC5wcm90b3R5cGUuc2V0UHJlbXVsdGlwbGllZEFscGhhPWZ1bmN0aW9uKGFIKXt0aGlzLnByZW11bHRpcGxpZWRBbHBoYT1hSDt9O2F4LnByb3RvdHlwZS5pc1ByZW11bHRpcGxpZWRBbHBoYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByZW11bHRpcGxpZWRBbHBoYTt9O2F4LnByb3RvdHlwZS5zZXRBbmlzb3Ryb3B5PWZ1bmN0aW9uKGFIKXt0aGlzLmFuaXNvdHJvcHk9YUg7fTtheC5wcm90b3R5cGUuZ2V0QW5pc290cm9weT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFuaXNvdHJvcHk7fTtheC5wcm90b3R5cGUuZ2V0Q2xpcHBpbmdQcm9jZXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xpcHBpbmdQcm9jZXNzO307YXgucHJvdG90eXBlLnNldENsaXBwaW5nUHJvY2Vzcz1mdW5jdGlvbihhSCl7dGhpcy5jbGlwcGluZ1Byb2Nlc3M9YUg7fTtheC5wcm90b3R5cGUuc2V0Q2xpcEJ1ZlByZV9jbGlwQ29udGV4dEZvck1hc2s9ZnVuY3Rpb24oYUgpe3RoaXMuY2xpcEJ1ZlByZV9jbGlwQ29udGV4dE1hc2s9YUg7fTtheC5wcm90b3R5cGUuZ2V0Q2xpcEJ1ZlByZV9jbGlwQ29udGV4dE1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGlwQnVmUHJlX2NsaXBDb250ZXh0TWFzazt9O2F4LnByb3RvdHlwZS5zZXRDbGlwQnVmUHJlX2NsaXBDb250ZXh0Rm9yRHJhdz1mdW5jdGlvbihhSCl7dGhpcy5jbGlwQnVmUHJlX2NsaXBDb250ZXh0RHJhdz1hSDt9O2F4LnByb3RvdHlwZS5nZXRDbGlwQnVmUHJlX2NsaXBDb250ZXh0RHJhdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNsaXBCdWZQcmVfY2xpcENvbnRleHREcmF3O307ZnVuY3Rpb24gbygpe2lmKGope3JldHVybjt9dGhpcy5hPTE7dGhpcy5yPTE7dGhpcy5nPTE7dGhpcy5iPTE7dGhpcy5zY2FsZT0xO3RoaXMuXyRobz0xO3RoaXMuYmxlbmRNb2RlPVEuTDJEX0NPTE9SX0JMRU5EX01PREVfTVVMVDt9ZnVuY3Rpb24gYygpe2lmKGope3JldHVybjt9dGhpcy5fJGtQPW51bGw7dGhpcy5fJGRyPW51bGw7dGhpcy5fJEFpPXRydWU7dGhpcy5fJG1TPW51bGw7fWMuXyR1cj0tMjtjLl8kYzI9MTtjLl8kX2I9MjtjLnByb3RvdHlwZS5fJEYwPWZ1bmN0aW9uKGFIKXt0aGlzLl8ka1A9YUguXyRuUCgpO3RoaXMuXyRkcj1hSC5fJG5QKCk7fTtjLnByb3RvdHlwZS5yZWFkVjJfb3BhY2l0eT1mdW5jdGlvbihhSCl7aWYoYUguZ2V0Rm9ybWF0VmVyc2lvbigpPj1heS5MSVZFMkRfRk9STUFUX1ZFUlNJT05fVjJfMTBfU0RLMil7dGhpcy5fJG1TPWFILl8kVGIoKTt9fTtjLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGFIKXt9O2MucHJvdG90eXBlLl8kTnI9ZnVuY3Rpb24oYUksYUgpe307Yy5wcm90b3R5cGUuaW50ZXJwb2xhdGVPcGFjaXR5PWZ1bmN0aW9uKGFKLGFLLGFJLGFIKXtpZih0aGlzLl8kbVM9PW51bGwpe2FJLnNldEludGVycG9sYXRlZE9wYWNpdHkoMSk7fWVsc2V7YUkuc2V0SW50ZXJwb2xhdGVkT3BhY2l0eShhRy5fJGJyKGFKLGFLLGFILHRoaXMuXyRtUykpO319O2MucHJvdG90eXBlLl8kMmI9ZnVuY3Rpb24oYUksYUgpe307Yy5wcm90b3R5cGUuXyRuYj1mdW5jdGlvbihhTCxhSyxhTSxhSCxhSSxhSixhTil7fTtjLnByb3RvdHlwZS5nZXRUeXBlPWZ1bmN0aW9uKCl7fTtjLnByb3RvdHlwZS5fJGdzPWZ1bmN0aW9uKGFIKXt0aGlzLl8kZHI9YUg7fTtjLnByb3RvdHlwZS5fJGEyPWZ1bmN0aW9uKGFIKXt0aGlzLl8ka1A9YUg7fTtjLnByb3RvdHlwZS5nZXRUYXJnZXRCYXNlRGF0YUlEPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRkcjt9O2MucHJvdG90eXBlLmdldEJhc2VEYXRhSUQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJGtQO307Yy5wcm90b3R5cGUuXyQzMj1mdW5jdGlvbigpe3JldHVybih0aGlzLl8kZHIhPW51bGwmJih0aGlzLl8kZHIhPW4uXyQybygpKSk7fTtmdW5jdGlvbiBQKCl7fVAuXyRXMj0wO1AuXyRDUz1QLl8kVzI7UC5fJE1vPWZ1bmN0aW9uKCl7cmV0dXJuIHRydWU7fTtQLl8kWFA9ZnVuY3Rpb24oYUkpe3RyeXt2YXIgYUo9Z2V0VGltZU1TZWMoKTt3aGlsZShnZXRUaW1lTVNlYygpLWFKPGFJKXt9fWNhdGNoKGFIKXthSC5fJFJiKCk7fX07UC5nZXRVc2VyVGltZU1TZWM9ZnVuY3Rpb24oKXtyZXR1cm4oUC5fJENTPT1QLl8kVzIpP1AuZ2V0U3lzdGVtVGltZU1TZWMoKTpQLl8kQ1M7fTtQLnNldFVzZXJUaW1lTVNlYz1mdW5jdGlvbihhSCl7UC5fJENTPWFIO307UC51cGRhdGVVc2VyVGltZU1TZWM9ZnVuY3Rpb24oKXtyZXR1cm4oUC5fJENTPVAuZ2V0U3lzdGVtVGltZU1TZWMoKSk7fTtQLmdldFRpbWVNU2VjPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO307UC5nZXRTeXN0ZW1UaW1lTVNlYz1mdW5jdGlvbigpe3JldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTt9O1AuXyRRPWZ1bmN0aW9uKGFIKXt9O1AuXyRqVD1mdW5jdGlvbihhTSxhSixhSSxhTCxhSCl7Zm9yKHZhciBhSz0wO2FLPGFIO2FLKyspe2FJW2FMK2FLXT1hTVthSithS107fX07ZnVuY3Rpb24gYUEoKXtpZihqKXtyZXR1cm47fXRoaXMuXyRWUD0wO3RoaXMuXyR3TD1udWxsO3RoaXMuXyRHUD1udWxsO3RoaXMuXyQ4bz1hQS5fJGRzO3RoaXMuXyQycj0tMTt0aGlzLl8kTzI9MDt0aGlzLl8kcmk9MDt9YUEuXyRkcz0tMjthQS5wcm90b3R5cGUuXyRGMD1mdW5jdGlvbihhSCl7dGhpcy5fJHdMPWFILl8kblAoKTt0aGlzLl8kVlA9YUguXyQ2TCgpO3RoaXMuXyRHUD1hSC5fJG5QKCk7fTthQS5wcm90b3R5cGUuZ2V0UGFyYW1JbmRleD1mdW5jdGlvbihhSCl7aWYodGhpcy5fJDJyIT1hSCl7dGhpcy5fJDhvPWFBLl8kZHM7fXJldHVybiB0aGlzLl8kOG87fTthQS5wcm90b3R5cGUuXyRQYj1mdW5jdGlvbihhSSxhSCl7dGhpcy5fJDhvPWFJO3RoaXMuXyQycj1hSDt9O2FBLnByb3RvdHlwZS5nZXRQYXJhbUlEPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyR3TDt9O2FBLnByb3RvdHlwZS5fJHlQPWZ1bmN0aW9uKGFIKXt0aGlzLl8kd0w9YUg7fTthQS5wcm90b3R5cGUuXyROMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kVlA7fTthQS5wcm90b3R5cGUuXyRkMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kR1A7fTthQS5wcm90b3R5cGUuXyR0Mj1mdW5jdGlvbihhSSxhSCl7dGhpcy5fJFZQPWFJO3RoaXMuXyRHUD1hSDt9O2FBLnByb3RvdHlwZS5fJExyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRPMjt9O2FBLnByb3RvdHlwZS5fJHdyPWZ1bmN0aW9uKGFIKXt0aGlzLl8kTzI9YUg7fTthQS5wcm90b3R5cGUuXyRTTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kcmk7fTthQS5wcm90b3R5cGUuXyRBTD1mdW5jdGlvbihhSCl7dGhpcy5fJHJpPWFIO307ZnVuY3Rpb24gRygpe31HLnN0YXJ0c1dpdGg9ZnVuY3Rpb24oYUosYUwsYUspe3ZhciBhSD1hTCthSy5sZW5ndGg7aWYoYUg+PWFKLmxlbmd0aCl7cmV0dXJuIGZhbHNlO31mb3IodmFyIGFJPWFMO2FJPGFIO2FJKyspe2lmKEcuZ2V0Q2hhcihhSixhSSkhPWFLLmNoYXJBdChhSS1hTCkpe3JldHVybiBmYWxzZTt9fXJldHVybiB0cnVlO307Ry5nZXRDaGFyPWZ1bmN0aW9uKGFJLGFIKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShhSS5nZXRVaW50OChhSCkpO307Ry5jcmVhdGVTdHJpbmc9ZnVuY3Rpb24oYU0sYUwsYUope3ZhciBhSD1uZXcgQXJyYXlCdWZmZXIoYUoqMik7dmFyIGFLPW5ldyBVaW50MTZBcnJheShhSCk7Zm9yKHZhciBhST0wO2FJPGFKO2FJKyspe2FLW2FJXT1hTS5nZXRVaW50OChhTCthSSk7fXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsYUspO307Ry5fJExTPWZ1bmN0aW9uKGFQLGFNLGFSLGFLKXtpZihhUCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXthUD1uZXcgRGF0YVZpZXcoYVApO312YXIgYUw9YVI7dmFyIGFKPWZhbHNlO3ZhciBhUT1mYWxzZTt2YXIgYVM9MDt2YXIgYU89Ry5nZXRDaGFyKGFQLGFMKTtpZihhTz09XCItXCIpe2FKPXRydWU7YUwrKzt9dmFyIGFOPWZhbHNlO2Zvcig7YUw8YU07YUwrKyl7YU89Ry5nZXRDaGFyKGFQLGFMKTtzd2l0Y2goYU8pe2Nhc2VcIjBcIjphUz1hUyoxMDticmVhaztjYXNlXCIxXCI6YVM9YVMqMTArMTticmVhaztjYXNlXCIyXCI6YVM9YVMqMTArMjticmVhaztjYXNlXCIzXCI6YVM9YVMqMTArMzticmVhaztjYXNlXCI0XCI6YVM9YVMqMTArNDticmVhaztjYXNlXCI1XCI6YVM9YVMqMTArNTticmVhaztjYXNlXCI2XCI6YVM9YVMqMTArNjticmVhaztjYXNlXCI3XCI6YVM9YVMqMTArNzticmVhaztjYXNlXCI4XCI6YVM9YVMqMTArODticmVhaztjYXNlXCI5XCI6YVM9YVMqMTArOTticmVhaztjYXNlXCIuXCI6YVE9dHJ1ZTthTCsrO2FOPXRydWU7YnJlYWs7ZGVmYXVsdDphTj10cnVlO2JyZWFrO31pZihhTil7YnJlYWs7fX1pZihhUSl7dmFyIGFJPTAuMTt2YXIgYUg9ZmFsc2U7Zm9yKDthTDxhTTthTCsrKXthTz1HLmdldENoYXIoYVAsYUwpO3N3aXRjaChhTyl7Y2FzZVwiMFwiOmJyZWFrO2Nhc2VcIjFcIjphUys9YUkqMTticmVhaztjYXNlXCIyXCI6YVMrPWFJKjI7YnJlYWs7Y2FzZVwiM1wiOmFTKz1hSSozO2JyZWFrO2Nhc2VcIjRcIjphUys9YUkqNDticmVhaztjYXNlXCI1XCI6YVMrPWFJKjU7YnJlYWs7Y2FzZVwiNlwiOmFTKz1hSSo2O2JyZWFrO2Nhc2VcIjdcIjphUys9YUkqNzticmVhaztjYXNlXCI4XCI6YVMrPWFJKjg7YnJlYWs7Y2FzZVwiOVwiOmFTKz1hSSo5O2JyZWFrO2RlZmF1bHQ6YUg9dHJ1ZTticmVhazt9YUkqPTAuMTtpZihhSCl7YnJlYWs7fX19aWYoYUope2FTPS1hUzt9YUtbMF09YUw7cmV0dXJuIGFTO307ZnVuY3Rpb24gZygpe2lmKGope3JldHVybjt9dGhpcy5fJE9iPW51bGw7fWcucHJvdG90eXBlLl8kelA9ZnVuY3Rpb24oKXt0aGlzLl8kT2I9bmV3IEFycmF5KCk7fTtnLnByb3RvdHlwZS5fJEYwPWZ1bmN0aW9uKGFIKXt0aGlzLl8kT2I9YUguXyRuUCgpO307Zy5wcm90b3R5cGUuXyRVcj1mdW5jdGlvbihhSyl7aWYoYUsuXyRXUygpKXtyZXR1cm4gdHJ1ZTt9dmFyIGFIPWFLLl8kdjIoKTtmb3IodmFyIGFKPXRoaXMuXyRPYi5sZW5ndGgtMTthSj49MDstLWFKKXt2YXIgYUk9dGhpcy5fJE9iW2FKXS5nZXRQYXJhbUluZGV4KGFIKTtpZihhST09YUEuXyRkcyl7YUk9YUsuZ2V0UGFyYW1JbmRleCh0aGlzLl8kT2JbYUpdLmdldFBhcmFtSUQoKSk7fWlmKGFLLl8kWGIoYUkpKXtyZXR1cm4gdHJ1ZTt9fXJldHVybiBmYWxzZTt9O2cucHJvdG90eXBlLl8kUTI9ZnVuY3Rpb24oYUwsYVYpe3ZhciBhWD10aGlzLl8kT2IubGVuZ3RoO3ZhciBhSj1hTC5fJHYyKCk7dmFyIGFOPTA7dmFyIGFJO3ZhciBhUTtmb3IodmFyIGFLPTA7YUs8YVg7YUsrKyl7dmFyIGFIPXRoaXMuXyRPYlthS107YUk9YUguZ2V0UGFyYW1JbmRleChhSik7aWYoYUk9PWFBLl8kZHMpe2FJPWFMLmdldFBhcmFtSW5kZXgoYUguZ2V0UGFyYW1JRCgpKTthSC5fJFBiKGFJLGFKKTt9aWYoYUk8MCl7dGhyb3cgbmV3IEV4Y2VwdGlvbihcImVyciAyMzI0MiA6IFwiK2FILmdldFBhcmFtSUQoKSk7fXZhciBhVT1hSTwwPzA6YUwuZ2V0UGFyYW1GbG9hdChhSSk7YVE9YUguXyROMigpO3ZhciBhTT1hSC5fJGQyKCk7dmFyIGFQPS0xO3ZhciBhVD0wO3ZhciBhUzt2YXIgYVI7aWYoYVE8MSl7fWVsc2V7aWYoYVE9PTEpe2FTPWFNWzBdO2lmKGFTLWF3Ll8kSjxhVSYmYVU8YVMrYXcuXyRKKXthUD0wO2FUPTA7fWVsc2V7YVA9MDthVlswXT10cnVlO319ZWxzZXthUz1hTVswXTtpZihhVTxhUy1hdy5fJEope2FQPTA7YVZbMF09dHJ1ZTt9ZWxzZXtpZihhVTxhUythdy5fJEope2FQPTA7fWVsc2V7dmFyIGFXPWZhbHNlO2Zvcih2YXIgYU89MTthTzxhUTsrK2FPKXthUj1hTVthT107aWYoYVU8YVIrYXcuXyRKKXtpZihhUi1hdy5fJEo8YVUpe2FQPWFPO31lbHNle2FQPWFPLTE7YVQ9KGFVLWFTKS8oYVItYVMpO2FOKys7fWFXPXRydWU7YnJlYWs7fWFTPWFSO31pZighYVcpe2FQPWFRLTE7YVQ9MDthVlswXT10cnVlO319fX19YUguXyR3cihhUCk7YUguXyRBTChhVCk7fXJldHVybiBhTjt9O2cucHJvdG90eXBlLl8kenI9ZnVuY3Rpb24oYU4sYVQsYVApe3ZhciBhUj0xPDxhUDtpZihhUisxPmF3Ll8kUWIpe2NvbnNvbGUubG9nKFwiZXJyIDIzMjQ1XFxuXCIpO312YXIgYVM9dGhpcy5fJE9iLmxlbmd0aDt2YXIgYUs9MTt2YXIgYUg9MTt2YXIgYUo9MDtmb3IodmFyIGFRPTA7YVE8YVI7KythUSl7YU5bYVFdPTA7fWZvcih2YXIgYUw9MDthTDxhUzsrK2FMKXt2YXIgYUk9dGhpcy5fJE9iW2FMXTtpZihhSS5fJFNMKCk9PTApe3ZhciBhTz1hSS5fJExyKCkqYUs7aWYoYU88MCYmUS5fJDNUKXt0aHJvdyBuZXcgRXhjZXB0aW9uKFwiZXJyIDIzMjQ2XCIpO31mb3IodmFyIGFRPTA7YVE8YVI7KythUSl7YU5bYVFdKz1hTzt9fWVsc2V7dmFyIGFPPWFLKmFJLl8kTHIoKTt2YXIgYU09YUsqKGFJLl8kTHIoKSsxKTtmb3IodmFyIGFRPTA7YVE8YVI7KythUSl7YU5bYVFdKz0oKGFRL2FIfDApJTI9PTApP2FPOmFNO31hVFthSisrXT1hSS5fJFNMKCk7YUgqPTI7fWFLKj1hSS5fJE4yKCk7fWFOW2FSXT02NTUzNTthVFthSl09LTE7fTtnLnByb3RvdHlwZS5fJGgyPWZ1bmN0aW9uKGFKLGFILGFLKXt2YXIgYU09bmV3IEZsb2F0MzJBcnJheShhSCk7Zm9yKHZhciBhTD0wO2FMPGFIOysrYUwpe2FNW2FMXT1hS1thTF07fXZhciBhST1uZXcgYUEoKTthSS5fJHlQKGFKKTthSS5fJHQyKGFILGFNKTt0aGlzLl8kT2IucHVzaChhSSk7fTtnLnByb3RvdHlwZS5fJEoyPWZ1bmN0aW9uKGFPKXt2YXIgYU49YU87dmFyIGFNPXRoaXMuXyRPYi5sZW5ndGg7Zm9yKHZhciBhSz0wO2FLPGFNOysrYUspe3ZhciBhST10aGlzLl8kT2JbYUtdO3ZhciBhSD1hSS5fJE4yKCk7dmFyIGFKPWFOJWFJLl8kTjIoKTt2YXIgYUw9YUkuXyRkMigpW2FKXTtjb25zb2xlLmxvZyhcIiVzWyVkXT0lNy4yZiAvIFwiLGFJLmdldFBhcmFtSUQoKSxhSixhTCk7YU4vPWFIO31jb25zb2xlLmxvZyhcIlxcblwiKTt9O2cucHJvdG90eXBlLmdldFBhcmFtQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJE9iLmxlbmd0aDt9O2cucHJvdG90eXBlLl8kenM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJE9iO307ZnVuY3Rpb24gYWMoKXt0aGlzLm09bmV3IEZsb2F0MzJBcnJheSgxNik7dGhpcy5pZGVudGl0eSgpO31hYy5wcm90b3R5cGUuaWRlbnRpdHk9ZnVuY3Rpb24oKXtmb3IodmFyIGFIPTA7YUg8MTY7YUgrKyl7dGhpcy5tW2FIXT0oKGFIJTUpPT0wKT8xOjA7fX07YWMucHJvdG90eXBlLmdldEFycmF5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubTt9O2FjLnByb3RvdHlwZS5nZXRDb3B5TWF0cml4PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodGhpcy5tKTt9O2FjLnByb3RvdHlwZS5zZXRNYXRyaXg9ZnVuY3Rpb24oYUkpe2lmKGFJPT1udWxsfHxhSS5sZW5ndGghPTE2KXtyZXR1cm47fWZvcih2YXIgYUg9MDthSDwxNjthSCsrKXt0aGlzLm1bYUhdPWFJW2FIXTt9fTthYy5wcm90b3R5cGUubXVsdD1mdW5jdGlvbihhSCxhSixhSSl7aWYoYUo9PW51bGwpe3JldHVybiBudWxsO31pZih0aGlzPT1hSil7dGhpcy5tdWx0X3NhZmUodGhpcy5tLGFILm0sYUoubSxhSSk7fWVsc2V7dGhpcy5tdWx0X2Zhc3QodGhpcy5tLGFILm0sYUoubSxhSSk7fXJldHVybiBhSjt9O2FjLnByb3RvdHlwZS5tdWx0X3NhZmU9ZnVuY3Rpb24oYUksYUgsYU0sYUope2lmKGFJPT1hTSl7dmFyIGFMPW5ldyBBcnJheSgxNik7dGhpcy5tdWx0X2Zhc3QoYUksYUgsYUwsYUopO2Zvcih2YXIgYUs9MTU7YUs+PTA7LS1hSyl7YU1bYUtdPWFMW2FLXTt9fWVsc2V7dGhpcy5tdWx0X2Zhc3QoYUksYUgsYU0sYUopO319O2FjLnByb3RvdHlwZS5tdWx0X2Zhc3Q9ZnVuY3Rpb24oYUksYUgsYUssYUope2lmKGFKKXthS1swXT1hSVswXSphSFswXSthSVs0XSphSFsxXSthSVs4XSphSFsyXTthS1s0XT1hSVswXSphSFs0XSthSVs0XSphSFs1XSthSVs4XSphSFs2XTthS1s4XT1hSVswXSphSFs4XSthSVs0XSphSFs5XSthSVs4XSphSFsxMF07YUtbMTJdPWFJWzBdKmFIWzEyXSthSVs0XSphSFsxM10rYUlbOF0qYUhbMTRdK2FJWzEyXTthS1sxXT1hSVsxXSphSFswXSthSVs1XSphSFsxXSthSVs5XSphSFsyXTthS1s1XT1hSVsxXSphSFs0XSthSVs1XSphSFs1XSthSVs5XSphSFs2XTthS1s5XT1hSVsxXSphSFs4XSthSVs1XSphSFs5XSthSVs5XSphSFsxMF07YUtbMTNdPWFJWzFdKmFIWzEyXSthSVs1XSphSFsxM10rYUlbOV0qYUhbMTRdK2FJWzEzXTthS1syXT1hSVsyXSphSFswXSthSVs2XSphSFsxXSthSVsxMF0qYUhbMl07YUtbNl09YUlbMl0qYUhbNF0rYUlbNl0qYUhbNV0rYUlbMTBdKmFIWzZdO2FLWzEwXT1hSVsyXSphSFs4XSthSVs2XSphSFs5XSthSVsxMF0qYUhbMTBdO2FLWzE0XT1hSVsyXSphSFsxMl0rYUlbNl0qYUhbMTNdK2FJWzEwXSphSFsxNF0rYUlbMTRdO2FLWzNdPWFLWzddPWFLWzExXT0wO2FLWzE1XT0xO31lbHNle2FLWzBdPWFJWzBdKmFIWzBdK2FJWzRdKmFIWzFdK2FJWzhdKmFIWzJdK2FJWzEyXSphSFszXTthS1s0XT1hSVswXSphSFs0XSthSVs0XSphSFs1XSthSVs4XSphSFs2XSthSVsxMl0qYUhbN107YUtbOF09YUlbMF0qYUhbOF0rYUlbNF0qYUhbOV0rYUlbOF0qYUhbMTBdK2FJWzEyXSphSFsxMV07YUtbMTJdPWFJWzBdKmFIWzEyXSthSVs0XSphSFsxM10rYUlbOF0qYUhbMTRdK2FJWzEyXSphSFsxNV07YUtbMV09YUlbMV0qYUhbMF0rYUlbNV0qYUhbMV0rYUlbOV0qYUhbMl0rYUlbMTNdKmFIWzNdO2FLWzVdPWFJWzFdKmFIWzRdK2FJWzVdKmFIWzVdK2FJWzldKmFIWzZdK2FJWzEzXSphSFs3XTthS1s5XT1hSVsxXSphSFs4XSthSVs1XSphSFs5XSthSVs5XSphSFsxMF0rYUlbMTNdKmFIWzExXTthS1sxM109YUlbMV0qYUhbMTJdK2FJWzVdKmFIWzEzXSthSVs5XSphSFsxNF0rYUlbMTNdKmFIWzE1XTthS1syXT1hSVsyXSphSFswXSthSVs2XSphSFsxXSthSVsxMF0qYUhbMl0rYUlbMTRdKmFIWzNdO2FLWzZdPWFJWzJdKmFIWzRdK2FJWzZdKmFIWzVdK2FJWzEwXSphSFs2XSthSVsxNF0qYUhbN107YUtbMTBdPWFJWzJdKmFIWzhdK2FJWzZdKmFIWzldK2FJWzEwXSphSFsxMF0rYUlbMTRdKmFIWzExXTthS1sxNF09YUlbMl0qYUhbMTJdK2FJWzZdKmFIWzEzXSthSVsxMF0qYUhbMTRdK2FJWzE0XSphSFsxNV07YUtbM109YUlbM10qYUhbMF0rYUlbN10qYUhbMV0rYUlbMTFdKmFIWzJdK2FJWzE1XSphSFszXTthS1s3XT1hSVszXSphSFs0XSthSVs3XSphSFs1XSthSVsxMV0qYUhbNl0rYUlbMTVdKmFIWzddO2FLWzExXT1hSVszXSphSFs4XSthSVs3XSphSFs5XSthSVsxMV0qYUhbMTBdK2FJWzE1XSphSFsxMV07YUtbMTVdPWFJWzNdKmFIWzEyXSthSVs3XSphSFsxM10rYUlbMTFdKmFIWzE0XSthSVsxNV0qYUhbMTVdO319O2FjLnByb3RvdHlwZS50cmFuc2xhdGU9ZnVuY3Rpb24oYUgsYUosYUkpe3RoaXMubVsxMl09dGhpcy5tWzBdKmFIK3RoaXMubVs0XSphSit0aGlzLm1bOF0qYUkrdGhpcy5tWzEyXTt0aGlzLm1bMTNdPXRoaXMubVsxXSphSCt0aGlzLm1bNV0qYUordGhpcy5tWzldKmFJK3RoaXMubVsxM107dGhpcy5tWzE0XT10aGlzLm1bMl0qYUgrdGhpcy5tWzZdKmFKK3RoaXMubVsxMF0qYUkrdGhpcy5tWzE0XTt0aGlzLm1bMTVdPXRoaXMubVszXSphSCt0aGlzLm1bN10qYUordGhpcy5tWzExXSphSSt0aGlzLm1bMTVdO307YWMucHJvdG90eXBlLnNjYWxlPWZ1bmN0aW9uKGFKLGFJLGFIKXt0aGlzLm1bMF0qPWFKO3RoaXMubVs0XSo9YUk7dGhpcy5tWzhdKj1hSDt0aGlzLm1bMV0qPWFKO3RoaXMubVs1XSo9YUk7dGhpcy5tWzldKj1hSDt0aGlzLm1bMl0qPWFKO3RoaXMubVs2XSo9YUk7dGhpcy5tWzEwXSo9YUg7dGhpcy5tWzNdKj1hSjt0aGlzLm1bN10qPWFJO3RoaXMubVsxMV0qPWFIO307YWMucHJvdG90eXBlLnJvdGF0ZVg9ZnVuY3Rpb24oYUgpe3ZhciBhSz1hQy5mY29zKGFIKTt2YXIgYUo9YUMuXyQ5KGFIKTt2YXIgYUk9dGhpcy5tWzRdO3RoaXMubVs0XT1hSSphSyt0aGlzLm1bOF0qYUo7dGhpcy5tWzhdPWFJKi1hSit0aGlzLm1bOF0qYUs7YUk9dGhpcy5tWzVdO3RoaXMubVs1XT1hSSphSyt0aGlzLm1bOV0qYUo7dGhpcy5tWzldPWFJKi1hSit0aGlzLm1bOV0qYUs7YUk9dGhpcy5tWzZdO3RoaXMubVs2XT1hSSphSyt0aGlzLm1bMTBdKmFKO3RoaXMubVsxMF09YUkqLWFKK3RoaXMubVsxMF0qYUs7YUk9dGhpcy5tWzddO3RoaXMubVs3XT1hSSphSyt0aGlzLm1bMTFdKmFKO3RoaXMubVsxMV09YUkqLWFKK3RoaXMubVsxMV0qYUs7fTthYy5wcm90b3R5cGUucm90YXRlWT1mdW5jdGlvbihhSCl7dmFyIGFLPWFDLmZjb3MoYUgpO3ZhciBhSj1hQy5fJDkoYUgpO3ZhciBhST10aGlzLm1bMF07dGhpcy5tWzBdPWFJKmFLK3RoaXMubVs4XSotYUo7dGhpcy5tWzhdPWFJKmFKK3RoaXMubVs4XSphSzthST10aGlzLm1bMV07dGhpcy5tWzFdPWFJKmFLK3RoaXMubVs5XSotYUo7dGhpcy5tWzldPWFJKmFKK3RoaXMubVs5XSphSzthST1tWzJdO3RoaXMubVsyXT1hSSphSyt0aGlzLm1bMTBdKi1hSjt0aGlzLm1bMTBdPWFJKmFKK3RoaXMubVsxMF0qYUs7YUk9bVszXTt0aGlzLm1bM109YUkqYUsrdGhpcy5tWzExXSotYUo7dGhpcy5tWzExXT1hSSphSit0aGlzLm1bMTFdKmFLO307YWMucHJvdG90eXBlLnJvdGF0ZVo9ZnVuY3Rpb24oYUgpe3ZhciBhSz1hQy5mY29zKGFIKTt2YXIgYUo9YUMuXyQ5KGFIKTt2YXIgYUk9dGhpcy5tWzBdO3RoaXMubVswXT1hSSphSyt0aGlzLm1bNF0qYUo7dGhpcy5tWzRdPWFJKi1hSit0aGlzLm1bNF0qYUs7YUk9dGhpcy5tWzFdO3RoaXMubVsxXT1hSSphSyt0aGlzLm1bNV0qYUo7dGhpcy5tWzVdPWFJKi1hSit0aGlzLm1bNV0qYUs7YUk9dGhpcy5tWzJdO3RoaXMubVsyXT1hSSphSyt0aGlzLm1bNl0qYUo7dGhpcy5tWzZdPWFJKi1hSit0aGlzLm1bNl0qYUs7YUk9dGhpcy5tWzNdO3RoaXMubVszXT1hSSphSyt0aGlzLm1bN10qYUo7dGhpcy5tWzddPWFJKi1hSit0aGlzLm1bN10qYUs7fTtmdW5jdGlvbiBaKGFIKXtpZihqKXtyZXR1cm47fWFrLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYUgpO31aLnByb3RvdHlwZT1uZXcgYWsoKTtaLl8kdFA9bmV3IE9iamVjdCgpO1ouXyQyNz1mdW5jdGlvbigpe1ouXyR0UC5jbGVhcigpO307Wi5nZXRJRD1mdW5jdGlvbihhSCl7dmFyIGFJPVouXyR0UFthSF07aWYoYUk9PW51bGwpe2FJPW5ldyBaKGFIKTtaLl8kdFBbYUhdPWFJO31yZXR1cm4gYUk7fTtaLnByb3RvdHlwZS5fJDNzPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBaKCk7fTtmdW5jdGlvbiBhRCgpe2lmKGope3JldHVybjt9dGhpcy5fJDc9MTt0aGlzLl8kZj0wO3RoaXMuXyRIPTA7dGhpcy5fJGc9MTt0aGlzLl8kaz0wO3RoaXMuXyR3PTA7dGhpcy5fJGhpPVNUQVRFX0lERU5USVRZO3RoaXMuXyRaPV8kcFM7fWFELl8ka1M9LTE7YUQuXyRwUz0wO2FELl8kaGI9MTthRC5TVEFURV9JREVOVElUWT0wO2FELl8kZ2I9MTthRC5fJGZvPTI7YUQuXyRnbz00O2FELnByb3RvdHlwZS50cmFuc2Zvcm09ZnVuY3Rpb24oYUssYUksYUgpe3ZhciBhVCxhUyxhUixhTSxhTCxhSjt2YXIgYVE9MDt2YXIgYU49MDtzd2l0Y2godGhpcy5fJGhpKXtkZWZhdWx0OnJldHVybjtjYXNlIChhRC5fJGdvfGFELl8kZm98YUQuXyRnYik6YVQ9dGhpcy5fJDc7YVM9dGhpcy5fJEg7YVI9dGhpcy5fJGs7YU09dGhpcy5fJGY7YUw9dGhpcy5fJGc7YUo9dGhpcy5fJHc7d2hpbGUoLS1hSD49MCl7dmFyIGFQPWFLW2FRKytdO3ZhciBhTz1hS1thUSsrXTthSVthTisrXT0oYVQqYVArYVMqYU8rYVIpO2FJW2FOKytdPShhTSphUCthTCphTythSik7fXJldHVybjtjYXNlIChhRC5fJGdvfGFELl8kZm8pOmFUPXRoaXMuXyQ3O2FTPXRoaXMuXyRIO2FNPXRoaXMuXyRmO2FMPXRoaXMuXyRnO3doaWxlKC0tYUg+PTApe3ZhciBhUD1hS1thUSsrXTt2YXIgYU89YUtbYVErK107YUlbYU4rK109KGFUKmFQK2FTKmFPKTthSVthTisrXT0oYU0qYVArYUwqYU8pO31yZXR1cm47Y2FzZSAoYUQuXyRnb3xhRC5fJGdiKTphUz10aGlzLl8kSDthUj10aGlzLl8kazthTT10aGlzLl8kZjthSj10aGlzLl8kdzt3aGlsZSgtLWFIPj0wKXt2YXIgYVA9YUtbYVErK107YUlbYU4rK109KGFTKmFLW2FRKytdK2FSKTthSVthTisrXT0oYU0qYVArYUopO31yZXR1cm47Y2FzZSAoYUQuXyRnbyk6YVM9dGhpcy5fJEg7YU09dGhpcy5fJGY7d2hpbGUoLS1hSD49MCl7dmFyIGFQPWFLW2FRKytdO2FJW2FOKytdPShhUyphS1thUSsrXSk7YUlbYU4rK109KGFNKmFQKTt9cmV0dXJuO2Nhc2UgKGFELl8kZm98YUQuXyRnYik6YVQ9dGhpcy5fJDc7YVI9dGhpcy5fJGs7YUw9dGhpcy5fJGc7YUo9dGhpcy5fJHc7d2hpbGUoLS1hSD49MCl7YUlbYU4rK109KGFUKmFLW2FRKytdK2FSKTthSVthTisrXT0oYUwqYUtbYVErK10rYUopO31yZXR1cm47Y2FzZSAoYUQuXyRmbyk6YVQ9dGhpcy5fJDc7YUw9dGhpcy5fJGc7d2hpbGUoLS1hSD49MCl7YUlbYU4rK109KGFUKmFLW2FRKytdKTthSVthTisrXT0oYUwqYUtbYVErK10pO31yZXR1cm47Y2FzZSAoYUQuXyRnYik6YVI9dGhpcy5fJGs7YUo9dGhpcy5fJHc7d2hpbGUoLS1hSD49MCl7YUlbYU4rK109KGFLW2FRKytdK2FSKTthSVthTisrXT0oYUtbYVErK10rYUopO31yZXR1cm47Y2FzZSAoYUQuU1RBVEVfSURFTlRJVFkpOmlmKGFLIT1hSXx8YVEhPWFOKXtQLl8kalQoYUssYVEsYUksYU4sYUgqMik7fXJldHVybjt9fTthRC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7aWYodGhpcy5fJEg9PTAmJnRoaXMuXyRmPT0wKXtpZih0aGlzLl8kNz09MSYmdGhpcy5fJGc9PTEpe2lmKHRoaXMuXyRrPT0wJiZ0aGlzLl8kdz09MCl7dGhpcy5fJGhpPWFELlNUQVRFX0lERU5USVRZO3RoaXMuXyRaPWFELl8kcFM7fWVsc2V7dGhpcy5fJGhpPWFELl8kZ2I7dGhpcy5fJFo9YUQuXyRoYjt9fWVsc2V7aWYodGhpcy5fJGs9PTAmJnRoaXMuXyR3PT0wKXt0aGlzLl8kaGk9YUQuXyRmbzt0aGlzLl8kWj1hRC5fJGtTO31lbHNle3RoaXMuXyRoaT0oYUQuXyRmb3xhRC5fJGdiKTt0aGlzLl8kWj1hRC5fJGtTO319fWVsc2V7aWYodGhpcy5fJDc9PTAmJnRoaXMuXyRnPT0wKXtpZih0aGlzLl8kaz09MCYmdGhpcy5fJHc9PTApe3RoaXMuXyRoaT1hRC5fJGdvO3RoaXMuXyRaPWFELl8ka1M7fWVsc2V7dGhpcy5fJGhpPShhRC5fJGdvfGFELl8kZ2IpO3RoaXMuXyRaPWFELl8ka1M7fX1lbHNle2lmKHRoaXMuXyRrPT0wJiZ0aGlzLl8kdz09MCl7dGhpcy5fJGhpPShhRC5fJGdvfGFELl8kZm8pO3RoaXMuXyRaPWFELl8ka1M7fWVsc2V7dGhpcy5fJGhpPShhRC5fJGdvfGFELl8kZm98YUQuXyRnYik7dGhpcy5fJFo9YUQuXyRrUzt9fX19O2FELnByb3RvdHlwZS5fJFJUPWZ1bmN0aW9uKGFLKXt0aGlzLl8kSVQoYUspO3ZhciBhSj1hS1swXTt2YXIgYUg9YUtbMl07dmFyIGFOPWFLWzFdO3ZhciBhTT1hS1szXTt2YXIgYUk9TWF0aC5zcXJ0KGFKKmFKK2FOKmFOKTt2YXIgYUw9YUoqYU0tYUgqYU47aWYoYUk9PTApe2lmKFEuXyRzbyl7Y29uc29sZS5sb2coXCJhZmZpbmUuXyRSVCgpIC8gcnQ9PTBcIik7fX1lbHNle2FLWzBdPWFJO2FLWzFdPWFML2FJO2FLWzJdPShhTiphTSthSiphSCkvYUw7YUtbM109TWF0aC5hdGFuMihhTixhSik7fX07YUQucHJvdG90eXBlLl8kaG89ZnVuY3Rpb24oYU4sYU0sYUksYUgpe3ZhciBhTD1uZXcgRmxvYXQzMkFycmF5KDYpO3ZhciBhSz1uZXcgRmxvYXQzMkFycmF5KDYpO2FOLl8kUlQoYUwpO2FNLl8kUlQoYUspO3ZhciBhSj1uZXcgRmxvYXQzMkFycmF5KDYpO2FKWzBdPWFMWzBdKyhhS1swXS1hTFswXSkqYUk7YUpbMV09YUxbMV0rKGFLWzFdLWFMWzFdKSphSTthSlsyXT1hTFsyXSsoYUtbMl0tYUxbMl0pKmFJO2FKWzNdPWFMWzNdKyhhS1szXS1hTFszXSkqYUk7YUpbNF09YUxbNF0rKGFLWzRdLWFMWzRdKSphSTthSls1XT1hTFs1XSsoYUtbNV0tYUxbNV0pKmFJO2FILl8kQ1QoYUopO307YUQucHJvdG90eXBlLl8kQ1Q9ZnVuY3Rpb24oYUope3ZhciBhST1NYXRoLmNvcyhhSlszXSk7dmFyIGFIPU1hdGguc2luKGFKWzNdKTt0aGlzLl8kNz1hSlswXSphSTt0aGlzLl8kZj1hSlswXSphSDt0aGlzLl8kSD1hSlsxXSooYUpbMl0qYUktYUgpO3RoaXMuXyRnPWFKWzFdKihhSlsyXSphSCthSSk7dGhpcy5fJGs9YUpbNF07dGhpcy5fJHc9YUpbNV07dGhpcy51cGRhdGUoKTt9O2FELnByb3RvdHlwZS5fJElUPWZ1bmN0aW9uKGFIKXthSFswXT10aGlzLl8kNzthSFsxXT10aGlzLl8kZjthSFsyXT10aGlzLl8kSDthSFszXT10aGlzLl8kZzthSFs0XT10aGlzLl8kazthSFs1XT10aGlzLl8kdzt9O2Z1bmN0aW9uIFkoKXtpZihqKXtyZXR1cm47fWFoLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMubW90aW9ucz1uZXcgQXJyYXkoKTt0aGlzLl8kN3I9bnVsbDt0aGlzLl8kN3I9WS5fJENvKys7dGhpcy5fJEQwPTMwO3RoaXMuXyR5VD0wO3RoaXMuXyRFPXRydWU7dGhpcy5sb29wRmFkZUluPXRydWU7dGhpcy5fJEFTPS0xO18kYTAoKTt9WS5wcm90b3R5cGU9bmV3IGFoKCk7WS5fJGNzPVwiVklTSUJMRTpcIjtZLl8kYXI9XCJMQVlPVVQ6XCI7WS5fJENvPTA7WS5fJEQyPVtdO1kuXyQxVD0xO1kubG9hZE1vdGlvbj1mdW5jdGlvbihhUil7dmFyIGFNPW5ldyBZKCk7dmFyIGFJPVswXTt2YXIgYVA9YVIubGVuZ3RoO2FNLl8keVQ9MDtmb3IodmFyIGFKPTA7YUo8YVA7KythSil7dmFyIGFRPShhUlthSl0mMjU1KTtpZihhUT09XCJcXG5cInx8YVE9PVwiXFxyXCIpe2NvbnRpbnVlO31pZihhUT09XCIjXCIpe2Zvcig7YUo8YVA7KythSil7aWYoYVJbYUpdPT1cIlxcblwifHxhUlthSl09PVwiXFxyXCIpe2JyZWFrO319Y29udGludWU7fWlmKGFRPT1cIiRcIil7dmFyIGFUPWFKO3ZhciBhSz0tMTtmb3IoO2FKPGFQOysrYUope2FRPShhUlthSl0mMjU1KTtpZihhUT09XCJcXHJcInx8YVE9PVwiXFxuXCIpe2JyZWFrO31pZihhUT09XCI9XCIpe2FLPWFKO2JyZWFrO319dmFyIGFPPWZhbHNlO2lmKGFLPj0wKXtpZihhSz09YVQrNCYmYVJbYVQrMV09PVwiZlwiJiZhUlthVCsyXT09XCJwXCImJmFSW2FUKzNdPT1cInNcIil7YU89dHJ1ZTt9Zm9yKGFKPWFLKzE7YUo8YVA7KythSil7YVE9KGFSW2FKXSYyNTUpO2lmKGFRPT1cIlxcclwifHxhUT09XCJcXG5cIil7YnJlYWs7fWlmKGFRPT1cIixcInx8YVE9PVwiIFwifHxhUT09XCJcXHRcIil7Y29udGludWU7fXZhciBhTD1HLl8kTFMoYVIsYVAsYUosYUkpO2lmKGFJWzBdPjApe2lmKGFPJiY1PGFMJiZhTDwxMjEpe2FNLl8kRDA9YUw7fX1hSj1hSVswXTt9fWZvcig7YUo8YVA7KythSil7aWYoYVJbYUpdPT1cIlxcblwifHxhUlthSl09PVwiXFxyXCIpe2JyZWFrO319Y29udGludWU7fWlmKChcImFcIjw9YVEmJmFRPD1cInpcIil8fChcIkFcIjw9YVEmJmFRPD1cIlpcIil8fGFRPT1cIl9cIil7dmFyIGFUPWFKO3ZhciBhSz0tMTtmb3IoO2FKPGFQOysrYUope2FRPShhUlthSl0mMjU1KTtpZihhUT09XCJcXHJcInx8YVE9PVwiXFxuXCIpe2JyZWFrO31pZihhUT09XCI9XCIpe2FLPWFKO2JyZWFrO319aWYoYUs+PTApe3ZhciBhTj1uZXcgdCgpO2lmKEcuc3RhcnRzV2l0aChhUixhVCxZLl8kY3MpKXthTi5fJFJQPXQuXyRoczthTi5fJDRQPW5ldyBTdHJpbmcoYVIsYVQsYUstYVQpO31lbHNle2lmKEcuc3RhcnRzV2l0aChhUixhVCxZLl8kYXIpKXthTi5fJDRQPW5ldyBTdHJpbmcoYVIsYVQrNyxhSy1hVC03KTtpZihHLnN0YXJ0c1dpdGgoYVIsYVQrNyxcIkFOQ0hPUl9YXCIpKXthTi5fJFJQPXQuXyR4czt9ZWxzZXtpZihHLnN0YXJ0c1dpdGgoYVIsYVQrNyxcIkFOQ0hPUl9ZXCIpKXthTi5fJFJQPXQuXyR1czt9ZWxzZXtpZihHLnN0YXJ0c1dpdGgoYVIsYVQrNyxcIlNDQUxFX1hcIikpe2FOLl8kUlA9dC5fJHFzO31lbHNle2lmKEcuc3RhcnRzV2l0aChhUixhVCs3LFwiU0NBTEVfWVwiKSl7YU4uXyRSUD10Ll8kWXM7fWVsc2V7aWYoRy5zdGFydHNXaXRoKGFSLGFUKzcsXCJYXCIpKXthTi5fJFJQPXQuXyR3czt9ZWxzZXtpZihHLnN0YXJ0c1dpdGgoYVIsYVQrNyxcIllcIikpe2FOLl8kUlA9dC5fJE5zO319fX19fX1lbHNle2FOLl8kUlA9dC5fJEZyO2FOLl8kNFA9bmV3IFN0cmluZyhhUixhVCxhSy1hVCk7fX1hTS5tb3Rpb25zLnB1c2goYU4pO3ZhciBhUz0wO1kuXyREMi5jbGVhcigpO2ZvcihhSj1hSysxO2FKPGFQOysrYUope2FRPShhUlthSl0mMjU1KTtpZihhUT09XCJcXHJcInx8YVE9PVwiXFxuXCIpe2JyZWFrO31pZihhUT09XCIsXCJ8fGFRPT1cIiBcInx8YVE9PVwiXFx0XCIpe2NvbnRpbnVlO312YXIgYUw9Ry5fJExTKGFSLGFQLGFKLGFJKTtpZihhSVswXT4wKXtZLl8kRDIucHVzaChhTCk7YVMrKzt2YXIgYUg9YUlbMF07aWYoYUg8YUope2NvbnNvbGUubG9nKFwiXyRuMCBfJGhpIC4gQExpdmUyRE1vdGlvbiBsb2FkTW90aW9uKClcXG5cIik7YnJlYWs7fWFKPWFIO319YU4uXyRJMD1ZLl8kRDIuXyRCTCgpO2lmKGFTPmFNLl8keVQpe2FNLl8keVQ9YVM7fX19fWFNLl8kQVM9KCgxMDAwKmFNLl8keVQpL2FNLl8kRDApfDA7cmV0dXJuIGFNO307WS5wcm90b3R5cGUuZ2V0RHVyYXRpb25NU2VjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRBUzt9O1kucHJvdG90eXBlLmR1bXA9ZnVuY3Rpb24oKXtmb3IodmFyIGFKPTA7YUo8dGhpcy5tb3Rpb25zLmxlbmd0aDthSisrKXt2YXIgYUg9dGhpcy5tb3Rpb25zW2FKXTtjb25zb2xlLmxvZyhcIl8kd0xbJXNdIFslZF0uIFwiLGFILl8kNFAsYUguXyRJMC5sZW5ndGgpO2Zvcih2YXIgYUk9MDthSTxhSC5fJEkwLmxlbmd0aCYmYUk8MTA7YUkrKyl7Y29uc29sZS5sb2coXCIlNS4yZiAsXCIsYUguXyRJMFthSV0pO31jb25zb2xlLmxvZyhcIlxcblwiKTt9fTtZLnByb3RvdHlwZS51cGRhdGVQYXJhbUV4ZT1mdW5jdGlvbihhSCxhTCxhTyxhWCl7dmFyIGFNPWFMLWFYLl8kejI7dmFyIGFWPWFNKnRoaXMuXyREMC8xMDAwO3ZhciBhSj1hVnwwO3ZhciBhUD1hVi1hSjtmb3IodmFyIGFVPTA7YVU8dGhpcy5tb3Rpb25zLmxlbmd0aDthVSsrKXt2YXIgYVM9dGhpcy5tb3Rpb25zW2FVXTt2YXIgYUs9YVMuXyRJMC5sZW5ndGg7dmFyIGFRPWFTLl8kNFA7aWYoYVMuXyRSUD09dC5fJGhzKXt2YXIgYVQ9YVMuXyRJMFsoYUo+PWFLP2FLLTE6YUopXTthSC5zZXRQYXJhbUZsb2F0KGFRLGFUKTt9ZWxzZXtpZih0Ll8kd3M8PWFTLl8kUlAmJmFTLl8kUlA8PXQuXyRZcyl7fWVsc2V7dmFyIGFSPWFILmdldFBhcmFtRmxvYXQoYVEpO3ZhciBhWT1hUy5fJEkwWyhhSj49YUs/YUstMTphSildO3ZhciBhVz1hUy5fJEkwWyhhSisxPj1hSz9hSy0xOmFKKzEpXTt2YXIgYUk9YVkrKGFXLWFZKSphUDt2YXIgYU49YVIrKGFJLWFSKSphTzthSC5zZXRQYXJhbUZsb2F0KGFRLGFOKTt9fX1pZihhSj49dGhpcy5fJHlUKXtpZih0aGlzLl8kRSl7YVguXyR6Mj1hTDtpZih0aGlzLmxvb3BGYWRlSW4pe2FYLl8kYnM9YUw7fX1lbHNle2FYLl8kOUw9dHJ1ZTt9fX07WS5wcm90b3R5cGUuXyRyMD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kRTt9O1kucHJvdG90eXBlLl8kYUw9ZnVuY3Rpb24oYUgpe3RoaXMuXyRFPWFIO307WS5wcm90b3R5cGUuaXNMb29wRmFkZUluPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9vcEZhZGVJbjt9O1kucHJvdG90eXBlLnNldExvb3BGYWRlSW49ZnVuY3Rpb24oYUgpe3RoaXMubG9vcEZhZGVJbj1hSDt9O2Z1bmN0aW9uIGFFKCl7dGhpcy5fJFA9bmV3IEZsb2F0MzJBcnJheSgxMDApO3RoaXMuc2l6ZT0wO31hRS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLnNpemU9MDt9O2FFLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYUkpe2lmKHRoaXMuXyRQLmxlbmd0aDw9dGhpcy5zaXplKXt2YXIgYUg9bmV3IEZsb2F0MzJBcnJheSh0aGlzLnNpemUqMik7UC5fJGpUKHRoaXMuXyRQLDAsYUgsMCx0aGlzLnNpemUpO3RoaXMuXyRQPWFIO310aGlzLl8kUFt0aGlzLnNpemUrK109YUk7fTthRS5wcm90b3R5cGUuXyRCTD1mdW5jdGlvbigpe3ZhciBhSD1uZXcgRmxvYXQzMkFycmF5KHRoaXMuc2l6ZSk7UC5fJGpUKHRoaXMuXyRQLDAsYUgsMCx0aGlzLnNpemUpO3JldHVybiBhSDt9O2Z1bmN0aW9uIHQoKXt0aGlzLl8kNFA9bnVsbDt0aGlzLl8kSTA9bnVsbDt0aGlzLl8kUlA9bnVsbDt9dC5fJEZyPTA7dC5fJGhzPTE7dC5fJHdzPTEwMDt0Ll8kTnM9MTAxO3QuXyR4cz0xMDI7dC5fJHVzPTEwMzt0Ll8kcXM9MTA0O3QuXyRZcz0xMDU7ZnVuY3Rpb24gYXcoKXt9YXcuXyRNcz0xO2F3Ll8kUXM9Mjthdy5fJGkyPTA7YXcuXyRObz0yO2F3Ll8kZG89YXcuXyRNczthdy5fJExzPXRydWU7YXcuXyQxcj01O2F3Ll8kUWI9NjU7YXcuXyRKPTAuMDAwMTthdy5fJEZUPTAuMDAxO2F3Ll8kU3M9MztmdW5jdGlvbiBheSgpe31heS5fJG83PTY7YXkuXyRTNz03O2F5Ll8kczc9ODtheS5fJDc3PTk7YXkuTElWRTJEX0ZPUk1BVF9WRVJTSU9OX1YyXzEwX1NESzI9MTA7YXkuTElWRTJEX0ZPUk1BVF9WRVJTSU9OX1YyXzExX1NESzJfMT0xMTtheS5fJFQ3PWF5LkxJVkUyRF9GT1JNQVRfVkVSU0lPTl9WMl8xMV9TREsyXzE7YXkuXyRJcz0tMjAwNDMxODA3MjtheS5fJGgwPTA7YXkuXyQ0TD0yMztheS5fJDdQPTMzO2F5Ll8kdVQ9ZnVuY3Rpb24oYUgpe2NvbnNvbGUubG9nKFwiXyRibyA6OiBfJDYgXyRtbyBfJEUwIDogJWRcXG5cIixhSCk7fTtheS5fJDlvPWZ1bmN0aW9uKGFIKXtpZihhSDw0MCl7YXkuXyR1VChhSCk7cmV0dXJuIG51bGw7fWVsc2V7aWYoYUg8NTApe2F5Ll8kdVQoYUgpO3JldHVybiBudWxsO31lbHNle2lmKGFIPDYwKXtheS5fJHVUKGFIKTtyZXR1cm4gbnVsbDt9ZWxzZXtpZihhSDwxMDApe3N3aXRjaChhSCl7Y2FzZSA2NTpyZXR1cm4gbmV3IEUoKTtjYXNlIDY2OnJldHVybiBuZXcgZygpO2Nhc2UgNjc6cmV0dXJuIG5ldyBhQSgpO2Nhc2UgNjg6cmV0dXJuIG5ldyBhYigpO2Nhc2UgNjk6cmV0dXJuIG5ldyBYKCk7Y2FzZSA3MDpyZXR1cm4gbmV3IGIoKTtkZWZhdWx0OmF5Ll8kdVQoYUgpO3JldHVybiBudWxsO319ZWxzZXtpZihhSDwxNTApe3N3aXRjaChhSCl7Y2FzZSAxMzE6cmV0dXJuIG5ldyBmKCk7Y2FzZSAxMzM6cmV0dXJuIG5ldyBzKCk7Y2FzZSAxMzY6cmV0dXJuIG5ldyB3KCk7Y2FzZSAxMzc6cmV0dXJuIG5ldyBhbigpO2Nhc2UgMTQyOnJldHVybiBuZXcgYXEoKTt9fX19fX1heS5fJHVUKGFIKTtyZXR1cm4gbnVsbDt9O2Z1bmN0aW9uIHkoYUgpe2lmKGope3JldHVybjt9dGhpcy5fJFFUPXRydWU7dGhpcy5fJGNvPS0xO3RoaXMuXyRxbz0wO3RoaXMuXyRwYj1uZXcgQXJyYXkoeS5fJGlzKTt0aGlzLl8kXzI9bmV3IEZsb2F0MzJBcnJheSh5Ll8kaXMpO3RoaXMuXyR2cj1uZXcgRmxvYXQzMkFycmF5KHkuXyRpcyk7dGhpcy5fJFJyPW5ldyBGbG9hdDMyQXJyYXkoeS5fJGlzKTt0aGlzLl8kT3I9bmV3IEZsb2F0MzJBcnJheSh5Ll8kaXMpO3RoaXMuXyRmcz1uZXcgRmxvYXQzMkFycmF5KHkuXyRpcyk7dGhpcy5fJEpzPW5ldyBBcnJheSh5Ll8kaXMpO3RoaXMuXyQzUz1uZXcgQXJyYXkoKTt0aGlzLl8kYVM9bmV3IEFycmF5KCk7dGhpcy5fJEJvPW51bGw7dGhpcy5fJEYyPW5ldyBBcnJheSgpO3RoaXMuXyRkYj1uZXcgQXJyYXkoKTt0aGlzLl8kOGI9bmV3IEFycmF5KCk7dGhpcy5fJEhyPW5ldyBBcnJheSgpO3RoaXMuXyRXcz1udWxsO3RoaXMuXyRWcz1udWxsO3RoaXMuXyRFcj1udWxsO3RoaXMuXyRFcz1uZXcgSW50MTZBcnJheShhdy5fJFFiKTt0aGlzLl8kWlA9bmV3IEZsb2F0MzJBcnJheShhdy5fJDFyKjIpO3RoaXMuXyRSaT1hSDt0aGlzLl8kYjA9eS5fJEhQKys7dGhpcy5jbGlwTWFuYWdlcj1udWxsO3RoaXMuZHBfd2ViZ2w9bnVsbDt9eS5fJEhQPTA7eS5fJF8wPXRydWU7eS5fJFYyPS0xO3kuXyRXMD0tMTt5Ll8kanI9ZmFsc2U7eS5fJFpTPXRydWU7eS5fJHRyPSgtMTAwMDAwMCk7eS5fJGxyPSgxMDAwMDAwKTt5Ll8kaXM9MzI7eS5fJGU9ZmFsc2U7eS5wcm90b3R5cGUuZ2V0RHJhd0RhdGFJbmRleD1mdW5jdGlvbihhSSl7Zm9yKHZhciBhSD10aGlzLl8kYVMubGVuZ3RoLTE7YUg+PTA7LS1hSCl7aWYodGhpcy5fJGFTW2FIXSE9bnVsbCYmdGhpcy5fJGFTW2FIXS5nZXREcmF3RGF0YUlEKCk9PWFJKXtyZXR1cm4gYUg7fX1yZXR1cm4gLTE7fTt5LnByb3RvdHlwZS5nZXREcmF3RGF0YT1mdW5jdGlvbihhSCl7aWYoYUggaW5zdGFuY2VvZiBaKXtpZih0aGlzLl8kQm89PW51bGwpe3RoaXMuXyRCbz1uZXcgT2JqZWN0KCk7dmFyIGFKPXRoaXMuXyRhUy5sZW5ndGg7Zm9yKHZhciBhST0wO2FJPGFKO2FJKyspe3ZhciBhTD10aGlzLl8kYVNbYUldO3ZhciBhSz1hTC5nZXREcmF3RGF0YUlEKCk7aWYoYUs9PW51bGwpe2NvbnRpbnVlO310aGlzLl8kQm9bYUtdPWFMO319cmV0dXJuIHRoaXMuXyRCb1tpZF07fWVsc2V7aWYoYUg8dGhpcy5fJGFTLmxlbmd0aCl7cmV0dXJuIHRoaXMuXyRhU1thSF07fWVsc2V7cmV0dXJuIG51bGw7fX19O3kucHJvdG90eXBlLnJlbGVhc2U9ZnVuY3Rpb24oKXt0aGlzLl8kM1MuY2xlYXIoKTt0aGlzLl8kYVMuY2xlYXIoKTt0aGlzLl8kRjIuY2xlYXIoKTtpZih0aGlzLl8kQm8hPW51bGwpe3RoaXMuXyRCby5jbGVhcigpO310aGlzLl8kZGIuY2xlYXIoKTt0aGlzLl8kOGIuY2xlYXIoKTt0aGlzLl8kSHIuY2xlYXIoKTt9O3kucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXt0aGlzLl8kY28rKztpZih0aGlzLl8kRjIubGVuZ3RoPjApe3RoaXMucmVsZWFzZSgpO312YXIgYU89dGhpcy5fJFJpLmdldE1vZGVsSW1wbCgpO3ZhciBhVD1hTy5fJFhyKCk7dmFyIGFTPWFULmxlbmd0aDt2YXIgYUg9bmV3IEFycmF5KCk7dmFyIGEzPW5ldyBBcnJheSgpO2Zvcih2YXIgYVY9MDthVjxhUzsrK2FWKXt2YXIgYTQ9YVRbYVZdO3RoaXMuXyRGMi5wdXNoKGE0KTt0aGlzLl8kSHIucHVzaChhNC5pbml0KHRoaXMpKTt2YXIgYUs9YTQuZ2V0QmFzZURhdGEoKTt2YXIgYVI9YUsubGVuZ3RoO2Zvcih2YXIgYVU9MDthVTxhUjsrK2FVKXthSC5wdXNoKGFLW2FVXSk7fWZvcih2YXIgYVU9MDthVTxhUjsrK2FVKXt2YXIgYU09YUtbYVVdLmluaXQodGhpcyk7YU0uXyRsMihhVik7YTMucHVzaChhTSk7fXZhciBhMT1hNC5nZXREcmF3RGF0YSgpO3ZhciBhUD1hMS5sZW5ndGg7Zm9yKHZhciBhVT0wO2FVPGFQOysrYVUpe3ZhciBhWj1hMVthVV07dmFyIGEwPWFaLmluaXQodGhpcyk7YTAuXyRJUD1hVjt0aGlzLl8kYVMucHVzaChhWik7dGhpcy5fJDhiLnB1c2goYTApO319dmFyIGFZPWFILmxlbmd0aDt2YXIgYU49bi5fJDJvKCk7d2hpbGUodHJ1ZSl7dmFyIGFYPWZhbHNlO2Zvcih2YXIgYVY9MDthVjxhWTsrK2FWKXt2YXIgYUw9YUhbYVZdO2lmKGFMPT1udWxsKXtjb250aW51ZTt9dmFyIGEyPWFMLmdldFRhcmdldEJhc2VEYXRhSUQoKTtpZihhMj09bnVsbHx8YTI9PWFOfHx0aGlzLmdldEJhc2VEYXRhSW5kZXgoYTIpPj0wKXt0aGlzLl8kM1MucHVzaChhTCk7dGhpcy5fJGRiLnB1c2goYTNbYVZdKTthSFthVl09bnVsbDthWD10cnVlO319aWYoIWFYKXticmVhazt9fXZhciBhST1hTy5fJEUyKCk7aWYoYUkhPW51bGwpe3ZhciBhSj1hSS5fJDFzKCk7aWYoYUohPW51bGwpe3ZhciBhVz1hSi5sZW5ndGg7Zm9yKHZhciBhVj0wO2FWPGFXOysrYVYpe3ZhciBhUT1hSlthVl07aWYoYVE9PW51bGwpe2NvbnRpbnVlO310aGlzLl8kMDIoYVEuZ2V0UGFyYW1JRCgpLGFRLmdldERlZmF1bHRWYWx1ZSgpLGFRLmdldE1pblZhbHVlKCksYVEuZ2V0TWF4VmFsdWUoKSk7fX19dGhpcy5jbGlwTWFuYWdlcj1uZXcgVyh0aGlzLmRwX3dlYmdsKTt0aGlzLmNsaXBNYW5hZ2VyLmluaXQodGhpcyx0aGlzLl8kYVMsdGhpcy5fJDhiKTt0aGlzLl8kUVQ9dHJ1ZTt9O3kucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe2lmKHkuXyRlKXtxLnN0YXJ0KFwiXyR6TFwiKTt9dmFyIGFLPXRoaXMuXyRfMi5sZW5ndGg7Zm9yKHZhciBhVz0wO2FXPGFLO2FXKyspe2lmKHRoaXMuXyRfMlthV10hPXRoaXMuXyR2clthV10pe3RoaXMuXyRKc1thV109eS5fJFpTO3RoaXMuXyR2clthV109dGhpcy5fJF8yW2FXXTt9fXZhciBhWD1mYWxzZTt2YXIgYVE9dGhpcy5fJDNTLmxlbmd0aDt2YXIgYU49dGhpcy5fJGFTLmxlbmd0aDt2YXIgYVM9YS5fJG9yKCk7dmFyIGFaPWEuXyRQcigpO3ZhciBhVT1hWi1hUysxO2lmKHRoaXMuXyRXcz09bnVsbHx8dGhpcy5fJFdzLmxlbmd0aDxhVSl7dGhpcy5fJFdzPW5ldyBJbnQxNkFycmF5KGFVKTt0aGlzLl8kVnM9bmV3IEludDE2QXJyYXkoYVUpO31mb3IodmFyIGFXPTA7YVc8YVU7YVcrKyl7dGhpcy5fJFdzW2FXXT15Ll8kVjI7dGhpcy5fJFZzW2FXXT15Ll8kVjI7fWlmKHRoaXMuXyRFcj09bnVsbHx8dGhpcy5fJEVyLmxlbmd0aDxhTil7dGhpcy5fJEVyPW5ldyBJbnQxNkFycmF5KGFOKTt9Zm9yKHZhciBhVz0wO2FXPGFOO2FXKyspe3RoaXMuXyRFclthV109eS5fJFcwO31pZih5Ll8kZSl7cS5kdW1wKFwiXyR6TFwiKTt9aWYoeS5fJGUpe3Euc3RhcnQoXCJfJFVMXCIpO312YXIgYUw9bnVsbDtmb3IodmFyIGFWPTA7YVY8YVE7KythVil7dmFyIGFKPXRoaXMuXyQzU1thVl07dmFyIGFIPXRoaXMuXyRkYlthVl07dHJ5e2FKLl8kTnIodGhpcyxhSCk7YUouXyQyYih0aGlzLGFIKTt9Y2F0Y2goYVkpe2lmKGFMPT1udWxsKXthTD1hWTt9fX1pZihhTCE9bnVsbCl7aWYoeS5fJF8wKXtxLl8kUmIoYUwpO319aWYoeS5fJGUpe3EuZHVtcChcIl8kVUxcIik7fWlmKHkuXyRlKXtxLnN0YXJ0KFwiXyRETFwiKTt9dmFyIGFSPW51bGw7Zm9yKHZhciBhTz0wO2FPPGFOOysrYU8pe3ZhciBhTT10aGlzLl8kYVNbYU9dO3ZhciBhST10aGlzLl8kOGJbYU9dO3RyeXthTS5fJE5yKHRoaXMsYUkpO2lmKGFJLl8kdTIoKSl7Y29udGludWU7fWFNLl8kMmIodGhpcyxhSSk7dmFyIGFUPU1hdGguZmxvb3IoYU0uXyR6Uyh0aGlzLGFJKS1hUyk7dmFyIGFQO3RyeXthUD10aGlzLl8kVnNbYVRdO31jYXRjaChhWSl7Y29uc29sZS5sb2coXCJfJGxpIDo6ICVzIC8gJXMgXHRcdFx0XHRAQF8kZlNcXG5cIixhWS50b1N0cmluZygpLGFNLmdldERyYXdEYXRhSUQoKS50b1N0cmluZygpKTthVD1NYXRoLmZsb29yKGFNLl8kelModGhpcyxhSSktYVMpO2NvbnRpbnVlO31pZihhUD09eS5fJFYyKXt0aGlzLl8kV3NbYVRdPWFPO31lbHNle3RoaXMuXyRFclthUF09YU87fXRoaXMuXyRWc1thVF09YU87fWNhdGNoKGFZKXtpZihhUj09bnVsbCl7YVI9YVk7US5fJHNUKFEuXyRINyk7fX19aWYoYVIhPW51bGwpe2lmKHkuXyRfMCl7cS5fJFJiKGFSKTt9fWlmKHkuXyRlKXtxLmR1bXAoXCJfJERMXCIpO31pZih5Ll8kZSl7cS5zdGFydChcIl8kZUxcIik7fWZvcih2YXIgYVc9dGhpcy5fJEpzLmxlbmd0aC0xO2FXPj0wO2FXLS0pe3RoaXMuXyRKc1thV109eS5fJGpyO310aGlzLl8kUVQ9ZmFsc2U7aWYoeS5fJGUpe3EuZHVtcChcIl8kZUxcIik7fXJldHVybiBhWDt9O3kucHJvdG90eXBlLnByZURyYXc9ZnVuY3Rpb24oYUgpe2lmKHRoaXMuY2xpcE1hbmFnZXIhPW51bGwpe2FILl8kWlQoKTt0aGlzLmNsaXBNYW5hZ2VyLnNldHVwQ2xpcCh0aGlzLGFIKTt9fTt5LnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKGFNKXtpZih0aGlzLl8kV3M9PW51bGwpe3EuXyRsaShcImNhbGwgXyRSaS51cGRhdGUoKSBiZWZvcmUgXyRSaS5kcmF3KCkgXCIpO3JldHVybjt9dmFyIGFQPXRoaXMuXyRXcy5sZW5ndGg7YU0uXyRaVCgpO2Zvcih2YXIgYUs9MDthSzxhUDsrK2FLKXt2YXIgYU49dGhpcy5fJFdzW2FLXTtpZihhTj09eS5fJFYyKXtjb250aW51ZTt9ZG97dmFyIGFIPXRoaXMuXyRhU1thTl07dmFyIGFJPXRoaXMuXyQ4YlthTl07aWYoYUkuXyR5bygpKXt2YXIgYUo9YUkuXyRJUDt2YXIgYUw9dGhpcy5fJEhyW2FKXTthSS5fJFZTPWFMLmdldFBhcnRzT3BhY2l0eSgpO2FILmRyYXcoYU0sdGhpcyxhSSk7fXZhciBhTz10aGlzLl8kRXJbYU5dO2lmKGFPPD1hTnx8YU89PXkuXyRXMCl7YnJlYWs7fWFOPWFPO313aGlsZSh0cnVlKTt9fTt5LnByb3RvdHlwZS5nZXRQYXJhbUluZGV4PWZ1bmN0aW9uKGFIKXtmb3IodmFyIGFJPXRoaXMuXyRwYi5sZW5ndGgtMTthST49MDstLWFJKXtpZih0aGlzLl8kcGJbYUldPT1hSCl7cmV0dXJuIGFJO319cmV0dXJuIHRoaXMuXyQwMihhSCwwLHkuXyR0cix5Ll8kbHIpO307eS5wcm90b3R5cGUuXyRCUz1mdW5jdGlvbihhSCl7cmV0dXJuIHRoaXMuZ2V0QmFzZURhdGFJbmRleChhSCk7fTt5LnByb3RvdHlwZS5nZXRCYXNlRGF0YUluZGV4PWZ1bmN0aW9uKGFIKXtmb3IodmFyIGFJPXRoaXMuXyQzUy5sZW5ndGgtMTthST49MDstLWFJKXtpZih0aGlzLl8kM1NbYUldIT1udWxsJiZ0aGlzLl8kM1NbYUldLmdldEJhc2VEYXRhSUQoKT09YUgpe3JldHVybiBhSTt9fXJldHVybiAtMTt9O3kucHJvdG90eXBlLl8kVVQ9ZnVuY3Rpb24oYUosYUgpe3ZhciBhST1uZXcgRmxvYXQzMkFycmF5KGFIKTtQLl8kalQoYUosMCxhSSwwLGFKLmxlbmd0aCk7cmV0dXJuIGFJO307eS5wcm90b3R5cGUuXyQwMj1mdW5jdGlvbihhTixhTSxhTCxhSCl7aWYodGhpcy5fJHFvPj10aGlzLl8kcGIubGVuZ3RoKXt2YXIgYUs9dGhpcy5fJHBiLmxlbmd0aDt2YXIgYUo9bmV3IEFycmF5KGFLKjIpO1AuXyRqVCh0aGlzLl8kcGIsMCxhSiwwLGFLKTt0aGlzLl8kcGI9YUo7dGhpcy5fJF8yPXRoaXMuXyRVVCh0aGlzLl8kXzIsYUsqMik7dGhpcy5fJHZyPXRoaXMuXyRVVCh0aGlzLl8kdnIsYUsqMik7dGhpcy5fJFJyPXRoaXMuXyRVVCh0aGlzLl8kUnIsYUsqMik7dGhpcy5fJE9yPXRoaXMuXyRVVCh0aGlzLl8kT3IsYUsqMik7dmFyIGFJPW5ldyBBcnJheSgpO1AuXyRqVCh0aGlzLl8kSnMsMCxhSSwwLGFLKTt0aGlzLl8kSnM9YUk7fXRoaXMuXyRwYlt0aGlzLl8kcW9dPWFOO3RoaXMuXyRfMlt0aGlzLl8kcW9dPWFNO3RoaXMuXyR2clt0aGlzLl8kcW9dPWFNO3RoaXMuXyRSclt0aGlzLl8kcW9dPWFMO3RoaXMuXyRPclt0aGlzLl8kcW9dPWFIO3RoaXMuXyRKc1t0aGlzLl8kcW9dPXkuXyRaUztyZXR1cm4gdGhpcy5fJHFvKys7fTt5LnByb3RvdHlwZS5fJFpvPWZ1bmN0aW9uKGFJLGFIKXt0aGlzLl8kM1NbYUldPWFIO307eS5wcm90b3R5cGUuc2V0UGFyYW1GbG9hdD1mdW5jdGlvbihhSCxhSSl7aWYoYUk8dGhpcy5fJFJyW2FIXSl7YUk9dGhpcy5fJFJyW2FIXTt9aWYoYUk+dGhpcy5fJE9yW2FIXSl7YUk9dGhpcy5fJE9yW2FIXTt9dGhpcy5fJF8yW2FIXT1hSTt9O3kucHJvdG90eXBlLmxvYWRQYXJhbT1mdW5jdGlvbigpe3ZhciBhSD10aGlzLl8kXzIubGVuZ3RoO2lmKGFIPnRoaXMuXyRmcy5sZW5ndGgpe2FIPXRoaXMuXyRmcy5sZW5ndGg7fVAuXyRqVCh0aGlzLl8kZnMsMCx0aGlzLl8kXzIsMCxhSCk7fTt5LnByb3RvdHlwZS5zYXZlUGFyYW09ZnVuY3Rpb24oKXt2YXIgYUg9dGhpcy5fJF8yLmxlbmd0aDtpZihhSD50aGlzLl8kZnMubGVuZ3RoKXt0aGlzLl8kZnM9bmV3IEZsb2F0MzJBcnJheShhSCk7fVAuXyRqVCh0aGlzLl8kXzIsMCx0aGlzLl8kZnMsMCxhSCk7fTt5LnByb3RvdHlwZS5fJHYyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRjbzt9O3kucHJvdG90eXBlLl8kV1M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJFFUO307eS5wcm90b3R5cGUuXyRYYj1mdW5jdGlvbihhSCl7cmV0dXJuIHRoaXMuXyRKc1thSF09PXkuXyRaUzt9O3kucHJvdG90eXBlLl8kdnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJEVzO307eS5wcm90b3R5cGUuXyRUcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kWlA7fTt5LnByb3RvdHlwZS5nZXRCYXNlRGF0YT1mdW5jdGlvbihhSCl7cmV0dXJuIHRoaXMuXyQzU1thSF07fTt5LnByb3RvdHlwZS5nZXRQYXJhbUZsb2F0PWZ1bmN0aW9uKGFIKXtyZXR1cm4gdGhpcy5fJF8yW2FIXTt9O3kucHJvdG90eXBlLmdldFBhcmFtTWF4PWZ1bmN0aW9uKGFIKXtyZXR1cm4gdGhpcy5fJE9yW2FIXTt9O3kucHJvdG90eXBlLmdldFBhcmFtTWluPWZ1bmN0aW9uKGFIKXtyZXR1cm4gdGhpcy5fJFJyW2FIXTt9O3kucHJvdG90eXBlLnNldFBhcnRzT3BhY2l0eT1mdW5jdGlvbihhSixhSCl7dmFyIGFJPXRoaXMuXyRIclthSl07YUkuc2V0UGFydHNPcGFjaXR5KGFIKTt9O3kucHJvdG90eXBlLmdldFBhcnRzT3BhY2l0eT1mdW5jdGlvbihhSSl7dmFyIGFIPXRoaXMuXyRIclthSV07cmV0dXJuIGFILmdldFBhcnRzT3BhY2l0eSgpO307eS5wcm90b3R5cGUuZ2V0UGFydHNEYXRhSW5kZXg9ZnVuY3Rpb24oYUkpe2Zvcih2YXIgYUg9dGhpcy5fJEYyLmxlbmd0aC0xO2FIPj0wOy0tYUgpe2lmKHRoaXMuXyRGMlthSF0hPW51bGwmJnRoaXMuXyRGMlthSF0uXyRwMigpPT1hSSl7cmV0dXJuIGFIO319cmV0dXJuIC0xO307eS5wcm90b3R5cGUuXyRxMj1mdW5jdGlvbihhSCl7cmV0dXJuIHRoaXMuXyRkYlthSF07fTt5LnByb3RvdHlwZS5fJEMyPWZ1bmN0aW9uKGFIKXtyZXR1cm4gdGhpcy5fJDhiW2FIXTt9O3kucHJvdG90eXBlLl8kQmI9ZnVuY3Rpb24oYUgpe3JldHVybiB0aGlzLl8kSHJbYUhdO307eS5wcm90b3R5cGUuXyQ1cz1mdW5jdGlvbihhTyxhSyl7dmFyIGFKPXRoaXMuXyRXcy5sZW5ndGg7dmFyIGFOPWFPO2Zvcih2YXIgYUw9MDthTDxhSjsrK2FMKXt2YXIgYUk9dGhpcy5fJFdzW2FMXTtpZihhST09eS5fJFYyKXtjb250aW51ZTt9ZG97dmFyIGFNPXRoaXMuXyQ4YlthSV07aWYoYU0uXyR5bygpKXthTS5fJEdUKCkuXyRCMih0aGlzLGFNLGFOKTthTis9YUs7fXZhciBhSD10aGlzLl8kRXJbYUldO2lmKGFIPD1hSXx8YUg9PXkuXyRXMCl7YnJlYWs7fWFJPWFIO313aGlsZSh0cnVlKTt9fTt5LnByb3RvdHlwZS5zZXREcmF3UGFyYW09ZnVuY3Rpb24oYUgpe3RoaXMuZHBfd2ViZ2w9YUg7fTt5LnByb3RvdHlwZS5nZXREcmF3UGFyYW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kcF93ZWJnbDt9O2Z1bmN0aW9uIGFwKCl7fWFwLl8kMFQ9ZnVuY3Rpb24oYUgpe3JldHVybiBhcC5fJDBUKG5ldyBfJDUoYUgpKTt9O2FwLl8kMFQ9ZnVuY3Rpb24oYUope2lmKCFhSi5leGlzdHMoKSl7dGhyb3cgbmV3IF8kbHMoYUouXyQzYigpKTt9dmFyIGFIPWFKLmxlbmd0aCgpO3ZhciBhST1uZXcgSW50OEFycmF5KGFIKTt2YXIgYU09bmV3IF8kWHMobmV3IF8ka2IoYUopLDgxOTIpO3ZhciBhSzt2YXIgYUw9MDt3aGlsZSgoYUs9YU0ucmVhZChhSSxhTCxhSC1hTCkpPjApe2FMKz1hSzt9cmV0dXJuIGFJO307YXAuXyRDPWZ1bmN0aW9uKGFKKXt2YXIgYUk9bnVsbDt2YXIgYUw9bnVsbDt0cnl7YUk9KGFKIGluc3RhbmNlb2YgQXJyYXkpP2FKOm5ldyBfJFhzKGFKLDgxOTIpO2FMPW5ldyBfJGpzKCk7dmFyIGFNPTEwMDA7dmFyIGFLO3ZhciBhSD1uZXcgSW50OEFycmF5KGFNKTt3aGlsZSgoYUs9YUkucmVhZChhSCkpPjApe2FMLndyaXRlKGFILDAsYUspO31yZXR1cm4gYUwuXyRUUygpO31maW5hbGx5e2lmKGFKIT1udWxsKXthSi5jbG9zZSgpO31pZihhTCE9bnVsbCl7YUwuZmx1c2goKTthTC5jbG9zZSgpO319fTtmdW5jdGlvbiBhcigpe2lmKGope3JldHVybjt9dGhpcy5fJDEyPW51bGw7dGhpcy5fJGJiPW51bGw7dGhpcy5fJF9MPW51bGw7dGhpcy5fJGpvPW51bGw7dGhpcy5fJGlMPW51bGw7dGhpcy5fJDBMPW51bGw7dGhpcy5fJEJyPW51bGw7dGhpcy5fJERyPW51bGw7dGhpcy5fJENiPW51bGw7dGhpcy5fJG1yPW51bGw7dGhpcy5fJF9MPWF6LlNUQVRFX0ZJUlNUO3RoaXMuXyRCcj00MDAwO3RoaXMuXyREcj0xMDA7dGhpcy5fJENiPTUwO3RoaXMuXyRtcj0xNTA7dGhpcy5fJGpvPXRydWU7dGhpcy5fJGlMPVwiUEFSQU1fRVlFX0xfT1BFTlwiO3RoaXMuXyQwTD1cIlBBUkFNX0VZRV9SX09QRU5cIjt9YXIucHJvdG90eXBlLl8kVDI9ZnVuY3Rpb24oKXt2YXIgYUk9UC5nZXRVc2VyVGltZU1TZWMoKTt2YXIgYUg9TWF0aC5fJDEwKCk7cmV0dXJuKGFJK2FIKigyKnRoaXMuXyRCci0xKSk7fTthci5wcm90b3R5cGUuXyR1bz1mdW5jdGlvbihhSCl7dGhpcy5fJEJyPWFIO307YXIucHJvdG90eXBlLl8kUVM9ZnVuY3Rpb24oYUksYUgsYUope3RoaXMuXyREcj1hSTt0aGlzLl8kQ2I9YUg7dGhpcy5fJG1yPWFKO307YXIucHJvdG90eXBlLl8kN1Q9ZnVuY3Rpb24oYUkpe3ZhciBhSz1QLmdldFVzZXJUaW1lTVNlYygpO3ZhciBhSDt2YXIgYUo9MDtzd2l0Y2godGhpcy5fJF9MKXtjYXNlIFNUQVRFX0NMT1NJTkc6YUo9KGFLLXRoaXMuXyRiYikvdGhpcy5fJERyO2lmKGFKPj0xKXthSj0xO3RoaXMuXyRfTD1hei5TVEFURV9DTE9TRUQ7dGhpcy5fJGJiPWFLO31hSD0xLWFKO2JyZWFrO2Nhc2UgU1RBVEVfQ0xPU0VEOmFKPShhSy10aGlzLl8kYmIpL3RoaXMuXyRDYjtpZihhSj49MSl7dGhpcy5fJF9MPWF6LlNUQVRFX09QRU5JTkc7dGhpcy5fJGJiPWFLO31hSD0wO2JyZWFrO2Nhc2UgU1RBVEVfT1BFTklORzphSj0oYUstdGhpcy5fJGJiKS90aGlzLl8kbXI7aWYoYUo+PTEpe2FKPTE7dGhpcy5fJF9MPWF6LlNUQVRFX0lOVEVSVkFMO3RoaXMuXyQxMj10aGlzLl8kVDIoKTt9YUg9YUo7YnJlYWs7Y2FzZSBTVEFURV9JTlRFUlZBTDppZih0aGlzLl8kMTI8YUspe3RoaXMuXyRfTD1hei5TVEFURV9DTE9TSU5HO3RoaXMuXyRiYj1hSzt9YUg9MTticmVhaztjYXNlIFNUQVRFX0ZJUlNUOmRlZmF1bHQ6dGhpcy5fJF9MPWF6LlNUQVRFX0lOVEVSVkFMO3RoaXMuXyQxMj10aGlzLl8kVDIoKTthSD0xO2JyZWFrO31pZighdGhpcy5fJGpvKXthSD0tYUg7fWFJLnNldFBhcmFtRmxvYXQodGhpcy5fJGlMLGFIKTthSS5zZXRQYXJhbUZsb2F0KHRoaXMuXyQwTCxhSCk7fTt2YXIgYXo9ZnVuY3Rpb24oKXt9O2F6LlNUQVRFX0ZJUlNUPVwiU1RBVEVfRklSU1RcIjthei5TVEFURV9JTlRFUlZBTD1cIlNUQVRFX0lOVEVSVkFMXCI7YXouU1RBVEVfQ0xPU0lORz1cIlNUQVRFX0NMT1NJTkdcIjthei5TVEFURV9DTE9TRUQ9XCJTVEFURV9DTE9TRURcIjthei5TVEFURV9PUEVOSU5HPVwiU1RBVEVfT1BFTklOR1wiO2Z1bmN0aW9uIHgoKXtpZihqKXtyZXR1cm47fWF4LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuXyRzYj1uZXcgSW50MzJBcnJheSh4Ll8kQXMpO3RoaXMuXyRVMj1uZXcgQXJyYXkoKTt0aGlzLnRyYW5zZm9ybT1udWxsO3RoaXMuZ2w9bnVsbDtpZih4Ll8kTlQ9PW51bGwpe3guXyROVD14Ll8kOXIoMjU2KTt4Ll8kdlM9eC5fJDlyKDI1Nik7eC5fJG5vPXguXyR2YigyNTYpO319eC5wcm90b3R5cGU9bmV3IGF4KCk7eC5fJEFzPTMyO3guXyRHcj1mYWxzZTt4Ll8kTlQ9bnVsbDt4Ll8kdlM9bnVsbDt4Ll8kbm89bnVsbDt4Ll8kOXI9ZnVuY3Rpb24oYUgpe3ZhciBhST1uZXcgRmxvYXQzMkFycmF5KGFIKTtyZXR1cm4gYUk7fTt4Ll8kdmI9ZnVuY3Rpb24oYUgpe3ZhciBhST1uZXcgSW50MTZBcnJheShhSCk7cmV0dXJuIGFJO307eC5fJGNyPWZ1bmN0aW9uKGFJLGFIKXtpZihhST09bnVsbHx8YUkuXyR5TCgpPGFILmxlbmd0aCl7YUk9eC5fJDlyKGFILmxlbmd0aCoyKTthSS5wdXQoYUgpO2FJLl8kb1QoMCk7fWVsc2V7YUkuY2xlYXIoKTthSS5wdXQoYUgpO2FJLl8kb1QoMCk7fXJldHVybiBhSTt9O3guXyRtYj1mdW5jdGlvbihhSSxhSCl7aWYoYUk9PW51bGx8fGFJLl8keUwoKTxhSC5sZW5ndGgpe2FJPXguXyR2YihhSC5sZW5ndGgqMik7YUkucHV0KGFIKTthSS5fJG9UKDApO31lbHNle2FJLmNsZWFyKCk7YUkucHV0KGFIKTthSS5fJG9UKDApO31yZXR1cm4gYUk7fTt4Ll8kSHM9ZnVuY3Rpb24oKXtyZXR1cm4geC5fJEdyO307eC5fJGFzPWZ1bmN0aW9uKGFIKXt4Ll8kR3I9YUg7fTt4LnByb3RvdHlwZS5zZXRHTD1mdW5jdGlvbihhSCl7dGhpcy5nbD1hSDt9O3gucHJvdG90eXBlLnNldFRyYW5zZm9ybT1mdW5jdGlvbihhSCl7dGhpcy50cmFuc2Zvcm09YUg7fTt4LnByb3RvdHlwZS5fJFpUPWZ1bmN0aW9uKCl7fTt4LnByb3RvdHlwZS5fJFVvPWZ1bmN0aW9uKGFPLGFILGFQLGFJLGFRLGFNLGFLLGFKKXtpZihhTTwwLjAxKXtyZXR1cm47fXZhciBhTD10aGlzLl8kVTJbYU9dO3ZhciBhTj1hTT4wLjk/US5FWFBBTkRfVzowO3RoaXMuZ2wuZHJhd0VsZW1lbnRzKGFMLGFQLGFJLGFRLGFNLGFOLHRoaXMudHJhbnNmb3JtLGFKKTt9O3gucHJvdG90eXBlLl8kUnM9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJfJFJzXCIpO307eC5wcm90b3R5cGUuXyREcz1mdW5jdGlvbihhSCl7dGhyb3cgbmV3IEVycm9yKFwiXyREc1wiKTt9O3gucHJvdG90eXBlLl8kSzI9ZnVuY3Rpb24oKXtmb3IodmFyIGFIPTA7YUg8dGhpcy5fJHNiLmxlbmd0aDthSCsrKXt2YXIgYUk9dGhpcy5fJHNiW2FIXTtpZihhSSE9MCl7dGhpcy5nbC5fJFNyKDEsdGhpcy5fJHNiLGFIKTt0aGlzLl8kc2JbYUhdPTA7fX19O3gucHJvdG90eXBlLnNldFRleHR1cmU9ZnVuY3Rpb24oYUksYUgpe2lmKHRoaXMuXyRzYi5sZW5ndGg8YUkrMSl7dGhpcy5fJG5TKGFJKTt9dGhpcy5fJHNiW2FJXT1hSDt9O3gucHJvdG90eXBlLnNldFRleHR1cmU9ZnVuY3Rpb24oYUgsYUkpe2lmKHRoaXMuXyRzYi5sZW5ndGg8YUgrMSl7dGhpcy5fJG5TKGFIKTt9dGhpcy5fJFUyW2FIXT1hSTt9O3gucHJvdG90eXBlLl8kblM9ZnVuY3Rpb24oYUgpe3ZhciBhSz1NYXRoLm1heCh0aGlzLl8kc2IubGVuZ3RoKjIsYUgrMSsxMCk7dmFyIGFJPW5ldyBJbnQzMkFycmF5KGFLKTtQLl8kalQodGhpcy5fJHNiLDAsYUksMCx0aGlzLl8kc2IubGVuZ3RoKTt0aGlzLl8kc2I9YUk7dmFyIGFKPW5ldyBBcnJheSgpO1AuXyRqVCh0aGlzLl8kVTIsMCxhSiwwLHRoaXMuXyRVMi5sZW5ndGgpO3RoaXMuXyRVMj1hSjt9O2Z1bmN0aW9uIGFiKCl7aWYoail7cmV0dXJuO31jLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuXyRHUz1udWxsO3RoaXMuXyRZMD1udWxsO31hYi5wcm90b3R5cGU9bmV3IGMoKTthYi5fJFhvPW5ldyBGbG9hdDMyQXJyYXkoMik7YWIuXyRpbz1uZXcgRmxvYXQzMkFycmF5KDIpO2FiLl8kMG89bmV3IEZsb2F0MzJBcnJheSgyKTthYi5fJExvPW5ldyBGbG9hdDMyQXJyYXkoMik7YWIuXyRUbz1uZXcgRmxvYXQzMkFycmF5KDIpO2FiLl8kUG89bmV3IEZsb2F0MzJBcnJheSgyKTthYi5fJGdUPW5ldyBBcnJheSgpO2FiLnByb3RvdHlwZS5fJHpQPWZ1bmN0aW9uKCl7dGhpcy5fJEdTPW5ldyBnKCk7dGhpcy5fJEdTLl8kelAoKTt0aGlzLl8kWTA9bmV3IEFycmF5KCk7fTthYi5wcm90b3R5cGUuZ2V0VHlwZT1mdW5jdGlvbigpe3JldHVybiBjLl8kYzI7fTthYi5wcm90b3R5cGUuXyRGMD1mdW5jdGlvbihhSCl7Yy5wcm90b3R5cGUuXyRGMC5jYWxsKHRoaXMsYUgpO3RoaXMuXyRHUz1hSC5fJG5QKCk7dGhpcy5fJFkwPWFILl8kblAoKTtjLnByb3RvdHlwZS5yZWFkVjJfb3BhY2l0eS5jYWxsKHRoaXMsYUgpO307YWIucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oYUgpe3ZhciBhST1uZXcgYWwodGhpcyk7YUkuXyRZcj1uZXcgWCgpO2lmKHRoaXMuXyQzMigpKXthSS5fJFdyPW5ldyBYKCk7fXJldHVybiBhSTt9O2FiLnByb3RvdHlwZS5fJE5yPWZ1bmN0aW9uKGJmLGJ4KXtpZighKCh0aGlzPT1ieC5fJEdUKCkpKSl7Y29uc29sZS5sb2coXCIjIyMgYXNzZXJ0ISEgIyMjIFwiKTt9dmFyIGJtPWJ4O2lmKCF0aGlzLl8kR1MuXyRVcihiZikpe3JldHVybjt9dmFyIGJ3PWFiLl8kZ1Q7YndbMF09ZmFsc2U7dmFyIGEyPXRoaXMuXyRHUy5fJFEyKGJmLGJ3KTtieC5fJEliKGJ3WzBdKTt0aGlzLmludGVycG9sYXRlT3BhY2l0eShiZix0aGlzLl8kR1MsYngsYncpO3ZhciBhMz1iZi5fJHZzKCk7dmFyIGJhPWJmLl8kVHIoKTt0aGlzLl8kR1MuXyR6cihhMyxiYSxhMik7aWYoYTI8PTApe3ZhciBibj10aGlzLl8kWTBbYTNbMF1dO2JtLl8kWXIuaW5pdChibik7fWVsc2V7aWYoYTI9PTEpe3ZhciBibj10aGlzLl8kWTBbYTNbMF1dO3ZhciBibD10aGlzLl8kWTBbYTNbMV1dO3ZhciBhOT1iYVswXTtibS5fJFlyLl8kZkw9Ym4uXyRmTCsoYmwuXyRmTC1ibi5fJGZMKSphOTtibS5fJFlyLl8kZ0w9Ym4uXyRnTCsoYmwuXyRnTC1ibi5fJGdMKSphOTtibS5fJFlyLl8kQjA9Ym4uXyRCMCsoYmwuXyRCMC1ibi5fJEIwKSphOTtibS5fJFlyLl8kejA9Ym4uXyR6MCsoYmwuXyR6MC1ibi5fJHowKSphOTtibS5fJFlyLl8kcVQ9Ym4uXyRxVCsoYmwuXyRxVC1ibi5fJHFUKSphOTt9ZWxzZXtpZihhMj09Mil7dmFyIGJuPXRoaXMuXyRZMFthM1swXV07dmFyIGJsPXRoaXMuXyRZMFthM1sxXV07dmFyIGExPXRoaXMuXyRZMFthM1syXV07dmFyIGEwPXRoaXMuXyRZMFthM1szXV07dmFyIGE5PWJhWzBdO3ZhciBhOD1iYVsxXTt2YXIgYkM9Ym4uXyRmTCsoYmwuXyRmTC1ibi5fJGZMKSphOTt2YXIgYkI9YTEuXyRmTCsoYTAuXyRmTC1hMS5fJGZMKSphOTtibS5fJFlyLl8kZkw9YkMrKGJCLWJDKSphODtiQz1ibi5fJGdMKyhibC5fJGdMLWJuLl8kZ0wpKmE5O2JCPWExLl8kZ0wrKGEwLl8kZ0wtYTEuXyRnTCkqYTk7Ym0uXyRZci5fJGdMPWJDKyhiQi1iQykqYTg7YkM9Ym4uXyRCMCsoYmwuXyRCMC1ibi5fJEIwKSphOTtiQj1hMS5fJEIwKyhhMC5fJEIwLWExLl8kQjApKmE5O2JtLl8kWXIuXyRCMD1iQysoYkItYkMpKmE4O2JDPWJuLl8kejArKGJsLl8kejAtYm4uXyR6MCkqYTk7YkI9YTEuXyR6MCsoYTAuXyR6MC1hMS5fJHowKSphOTtibS5fJFlyLl8kejA9YkMrKGJCLWJDKSphODtiQz1ibi5fJHFUKyhibC5fJHFULWJuLl8kcVQpKmE5O2JCPWExLl8kcVQrKGEwLl8kcVQtYTEuXyRxVCkqYTk7Ym0uXyRZci5fJHFUPWJDKyhiQi1iQykqYTg7fWVsc2V7aWYoYTI9PTMpe3ZhciBhUD10aGlzLl8kWTBbYTNbMF1dO3ZhciBhTz10aGlzLl8kWTBbYTNbMV1dO3ZhciBidT10aGlzLl8kWTBbYTNbMl1dO3ZhciBicz10aGlzLl8kWTBbYTNbM11dO3ZhciBhSz10aGlzLl8kWTBbYTNbNF1dO3ZhciBhSj10aGlzLl8kWTBbYTNbNV1dO3ZhciBiaj10aGlzLl8kWTBbYTNbNl1dO3ZhciBiaT10aGlzLl8kWTBbYTNbN11dO3ZhciBhOT1iYVswXTt2YXIgYTg9YmFbMV07dmFyIGE2PWJhWzJdO3ZhciBiQz1hUC5fJGZMKyhhTy5fJGZMLWFQLl8kZkwpKmE5O3ZhciBiQj1idS5fJGZMKyhicy5fJGZMLWJ1Ll8kZkwpKmE5O3ZhciBiej1hSy5fJGZMKyhhSi5fJGZMLWFLLl8kZkwpKmE5O3ZhciBieT1iai5fJGZMKyhiaS5fJGZMLWJqLl8kZkwpKmE5O2JtLl8kWXIuXyRmTD0oMS1hNikqKGJDKyhiQi1iQykqYTgpK2E2KihieisoYnktYnopKmE4KTtiQz1hUC5fJGdMKyhhTy5fJGdMLWFQLl8kZ0wpKmE5O2JCPWJ1Ll8kZ0wrKGJzLl8kZ0wtYnUuXyRnTCkqYTk7Yno9YUsuXyRnTCsoYUouXyRnTC1hSy5fJGdMKSphOTtieT1iai5fJGdMKyhiaS5fJGdMLWJqLl8kZ0wpKmE5O2JtLl8kWXIuXyRnTD0oMS1hNikqKGJDKyhiQi1iQykqYTgpK2E2KihieisoYnktYnopKmE4KTtiQz1hUC5fJEIwKyhhTy5fJEIwLWFQLl8kQjApKmE5O2JCPWJ1Ll8kQjArKGJzLl8kQjAtYnUuXyRCMCkqYTk7Yno9YUsuXyRCMCsoYUouXyRCMC1hSy5fJEIwKSphOTtieT1iai5fJEIwKyhiaS5fJEIwLWJqLl8kQjApKmE5O2JtLl8kWXIuXyRCMD0oMS1hNikqKGJDKyhiQi1iQykqYTgpK2E2KihieisoYnktYnopKmE4KTtiQz1hUC5fJHowKyhhTy5fJHowLWFQLl8kejApKmE5O2JCPWJ1Ll8kejArKGJzLl8kejAtYnUuXyR6MCkqYTk7Yno9YUsuXyR6MCsoYUouXyR6MC1hSy5fJHowKSphOTtieT1iai5fJHowKyhiaS5fJHowLWJqLl8kejApKmE5O2JtLl8kWXIuXyR6MD0oMS1hNikqKGJDKyhiQi1iQykqYTgpK2E2KihieisoYnktYnopKmE4KTtiQz1hUC5fJHFUKyhhTy5fJHFULWFQLl8kcVQpKmE5O2JCPWJ1Ll8kcVQrKGJzLl8kcVQtYnUuXyRxVCkqYTk7Yno9YUsuXyRxVCsoYUouXyRxVC1hSy5fJHFUKSphOTtieT1iai5fJHFUKyhiaS5fJHFULWJqLl8kcVQpKmE5O2JtLl8kWXIuXyRxVD0oMS1hNikqKGJDKyhiQi1iQykqYTgpK2E2KihieisoYnktYnopKmE4KTt9ZWxzZXtpZihhMj09NCl7dmFyIGFUPXRoaXMuXyRZMFthM1swXV07dmFyIGFTPXRoaXMuXyRZMFthM1sxXV07dmFyIGJFPXRoaXMuXyRZMFthM1syXV07dmFyIGJEPXRoaXMuXyRZMFthM1szXV07dmFyIGFOPXRoaXMuXyRZMFthM1s0XV07dmFyIGFNPXRoaXMuXyRZMFthM1s1XV07dmFyIGJwPXRoaXMuXyRZMFthM1s2XV07dmFyIGJvPXRoaXMuXyRZMFthM1s3XV07dmFyIGJoPXRoaXMuXyRZMFthM1s4XV07dmFyIGJnPXRoaXMuXyRZMFthM1s5XV07dmFyIGFZPXRoaXMuXyRZMFthM1sxMF1dO3ZhciBhVz10aGlzLl8kWTBbYTNbMTFdXTt2YXIgYTc9dGhpcy5fJFkwW2EzWzEyXV07dmFyIGE1PXRoaXMuXyRZMFthM1sxM11dO3ZhciBhUj10aGlzLl8kWTBbYTNbMTRdXTt2YXIgYVE9dGhpcy5fJFkwW2EzWzE1XV07dmFyIGE5PWJhWzBdO3ZhciBhOD1iYVsxXTt2YXIgYTY9YmFbMl07dmFyIGE0PWJhWzNdO3ZhciBiQz1hVC5fJGZMKyhhUy5fJGZMLWFULl8kZkwpKmE5O3ZhciBiQj1iRS5fJGZMKyhiRC5fJGZMLWJFLl8kZkwpKmE5O3ZhciBiej1hTi5fJGZMKyhhTS5fJGZMLWFOLl8kZkwpKmE5O3ZhciBieT1icC5fJGZMKyhiby5fJGZMLWJwLl8kZkwpKmE5O3ZhciBidj1iaC5fJGZMKyhiZy5fJGZMLWJoLl8kZkwpKmE5O3ZhciBidD1hWS5fJGZMKyhhVy5fJGZMLWFZLl8kZkwpKmE5O3ZhciBicj1hNy5fJGZMKyhhNS5fJGZMLWE3Ll8kZkwpKmE5O3ZhciBicT1hUi5fJGZMKyhhUS5fJGZMLWFSLl8kZkwpKmE5O2JtLl8kWXIuXyRmTD0oMS1hNCkqKCgxLWE2KSooYkMrKGJCLWJDKSphOCkrYTYqKGJ6KyhieS1ieikqYTgpKSthNCooKDEtYTYpKihidisoYnQtYnYpKmE4KSthNiooYnIrKGJxLWJyKSphOCkpO2JDPWFULl8kZ0wrKGFTLl8kZ0wtYVQuXyRnTCkqYTk7YkI9YkUuXyRnTCsoYkQuXyRnTC1iRS5fJGdMKSphOTtiej1hTi5fJGdMKyhhTS5fJGdMLWFOLl8kZ0wpKmE5O2J5PWJwLl8kZ0wrKGJvLl8kZ0wtYnAuXyRnTCkqYTk7YnY9YmguXyRnTCsoYmcuXyRnTC1iaC5fJGdMKSphOTtidD1hWS5fJGdMKyhhVy5fJGdMLWFZLl8kZ0wpKmE5O2JyPWE3Ll8kZ0wrKGE1Ll8kZ0wtYTcuXyRnTCkqYTk7YnE9YVIuXyRnTCsoYVEuXyRnTC1hUi5fJGdMKSphOTtibS5fJFlyLl8kZ0w9KDEtYTQpKigoMS1hNikqKGJDKyhiQi1iQykqYTgpK2E2KihieisoYnktYnopKmE4KSkrYTQqKCgxLWE2KSooYnYrKGJ0LWJ2KSphOCkrYTYqKGJyKyhicS1icikqYTgpKTtiQz1hVC5fJEIwKyhhUy5fJEIwLWFULl8kQjApKmE5O2JCPWJFLl8kQjArKGJELl8kQjAtYkUuXyRCMCkqYTk7Yno9YU4uXyRCMCsoYU0uXyRCMC1hTi5fJEIwKSphOTtieT1icC5fJEIwKyhiby5fJEIwLWJwLl8kQjApKmE5O2J2PWJoLl8kQjArKGJnLl8kQjAtYmguXyRCMCkqYTk7YnQ9YVkuXyRCMCsoYVcuXyRCMC1hWS5fJEIwKSphOTticj1hNy5fJEIwKyhhNS5fJEIwLWE3Ll8kQjApKmE5O2JxPWFSLl8kQjArKGFRLl8kQjAtYVIuXyRCMCkqYTk7Ym0uXyRZci5fJEIwPSgxLWE0KSooKDEtYTYpKihiQysoYkItYkMpKmE4KSthNiooYnorKGJ5LWJ6KSphOCkpK2E0KigoMS1hNikqKGJ2KyhidC1idikqYTgpK2E2KihicisoYnEtYnIpKmE4KSk7YkM9YVQuXyR6MCsoYVMuXyR6MC1hVC5fJHowKSphOTtiQj1iRS5fJHowKyhiRC5fJHowLWJFLl8kejApKmE5O2J6PWFOLl8kejArKGFNLl8kejAtYU4uXyR6MCkqYTk7Ynk9YnAuXyR6MCsoYm8uXyR6MC1icC5fJHowKSphOTtidj1iaC5fJHowKyhiZy5fJHowLWJoLl8kejApKmE5O2J0PWFZLl8kejArKGFXLl8kejAtYVkuXyR6MCkqYTk7YnI9YTcuXyR6MCsoYTUuXyR6MC1hNy5fJHowKSphOTticT1hUi5fJHowKyhhUS5fJHowLWFSLl8kejApKmE5O2JtLl8kWXIuXyR6MD0oMS1hNCkqKCgxLWE2KSooYkMrKGJCLWJDKSphOCkrYTYqKGJ6KyhieS1ieikqYTgpKSthNCooKDEtYTYpKihidisoYnQtYnYpKmE4KSthNiooYnIrKGJxLWJyKSphOCkpO2JDPWFULl8kcVQrKGFTLl8kcVQtYVQuXyRxVCkqYTk7YkI9YkUuXyRxVCsoYkQuXyRxVC1iRS5fJHFUKSphOTtiej1hTi5fJHFUKyhhTS5fJHFULWFOLl8kcVQpKmE5O2J5PWJwLl8kcVQrKGJvLl8kcVQtYnAuXyRxVCkqYTk7YnY9YmguXyRxVCsoYmcuXyRxVC1iaC5fJHFUKSphOTtidD1hWS5fJHFUKyhhVy5fJHFULWFZLl8kcVQpKmE5O2JyPWE3Ll8kcVQrKGE1Ll8kcVQtYTcuXyRxVCkqYTk7YnE9YVIuXyRxVCsoYVEuXyRxVC1hUi5fJHFUKSphOTtibS5fJFlyLl8kcVQ9KDEtYTQpKigoMS1hNikqKGJDKyhiQi1iQykqYTgpK2E2KihieisoYnktYnopKmE4KSkrYTQqKCgxLWE2KSooYnYrKGJ0LWJ2KSphOCkrYTYqKGJyKyhicS1icikqYTgpKTt9ZWxzZXt2YXIgYVY9TWF0aC5wb3coMixhMil8MDt2YXIgYVo9bmV3IEZsb2F0MzJBcnJheShhVik7Zm9yKHZhciBiaz0wO2JrPGFWO2JrKyspe3ZhciBhST1iazt2YXIgYUg9MTtmb3IodmFyIGFMPTA7YUw8YTI7YUwrKyl7YUgqPShhSSUyPT0wKT8oMS1iYVthTF0pOmJhW2FMXTthSS89Mjt9YVpbYmtdPWFIO312YXIgYkE9bmV3IEFycmF5KCk7Zm9yKHZhciBhVT0wO2FVPGFWO2FVKyspe2JBW2FVXT10aGlzLl8kWTBbYTNbYVVdXTt9dmFyIGJlPTAsYmM9MCxiZD0wLGJiPTAsYVg9MDtmb3IodmFyIGFVPTA7YVU8YVY7YVUrKyl7YmUrPWFaW2FVXSpiQVthVV0uXyRmTDtiYys9YVpbYVVdKmJBW2FVXS5fJGdMO2JkKz1hWlthVV0qYkFbYVVdLl8kQjA7YmIrPWFaW2FVXSpiQVthVV0uXyR6MDthWCs9YVpbYVVdKmJBW2FVXS5fJHFUO31ibS5fJFlyLl8kZkw9YmU7Ym0uXyRZci5fJGdMPWJjO2JtLl8kWXIuXyRCMD1iZDtibS5fJFlyLl8kejA9YmI7Ym0uXyRZci5fJHFUPWFYO319fX19dmFyIGJuPXRoaXMuXyRZMFthM1swXV07Ym0uXyRZci5yZWZsZWN0WD1ibi5yZWZsZWN0WDtibS5fJFlyLnJlZmxlY3RZPWJuLnJlZmxlY3RZO307YWIucHJvdG90eXBlLl8kMmI9ZnVuY3Rpb24oYU0sYUgpe2lmKCEoKHRoaXM9PWFILl8kR1QoKSkpKXtjb25zb2xlLmxvZyhcIiMjIyBhc3NlcnQhISAjIyMgXCIpO312YXIgYVI9YUg7YVIuXyRoUyh0cnVlKTtpZighdGhpcy5fJDMyKCkpe2FSLnNldFRvdGFsU2NhbGVfbm90Rm9yQ2xpZW50KGFSLl8kWXIuXyRCMCk7YVIuc2V0VG90YWxPcGFjaXR5KGFSLmdldEludGVycG9sYXRlZE9wYWNpdHkoKSk7fWVsc2V7dmFyIGFUPXRoaXMuZ2V0VGFyZ2V0QmFzZURhdGFJRCgpO2lmKGFSLl8kOHI9PWMuXyR1cil7YVIuXyQ4cj1hTS5nZXRCYXNlRGF0YUluZGV4KGFUKTt9aWYoYVIuXyQ4cjwwKXtpZihRLl8kc28pe3EuXyRsaShcIl8kTCBfJDBQIF8kRyA6OiAlc1wiLGFUKTt9YVIuXyRoUyhmYWxzZSk7fWVsc2V7dmFyIGFJPWFNLmdldEJhc2VEYXRhKGFSLl8kOHIpO2lmKGFJIT1udWxsKXt2YXIgYUw9YU0uXyRxMihhUi5fJDhyKTt2YXIgYVM9YWIuXyRYbzthU1swXT1hUi5fJFlyLl8kZkw7YVNbMV09YVIuXyRZci5fJGdMO3ZhciBhSj1hYi5fJGlvO2FKWzBdPTA7YUpbMV09LTAuMTt2YXIgYU89YUwuXyRHVCgpLmdldFR5cGUoKTtpZihhTz09Yy5fJGMyKXthSlsxXT0tMTA7fWVsc2V7YUpbMV09LTAuMTt9dmFyIGFRPWFiLl8kMG87dGhpcy5fJEpyKGFNLGFJLGFMLGFTLGFKLGFRKTt2YXIgYVA9YUMuXyQ5MihhSixhUSk7YUkuXyRuYihhTSxhTCxhUyxhUywxLDAsMik7YVIuXyRXci5fJGZMPWFTWzBdO2FSLl8kV3IuXyRnTD1hU1sxXTthUi5fJFdyLl8kQjA9YVIuXyRZci5fJEIwO2FSLl8kV3IuXyR6MD1hUi5fJFlyLl8kejA7YVIuXyRXci5fJHFUPWFSLl8kWXIuXyRxVC1hUCphQy5fJE5TO3ZhciBhSz1hTC5nZXRUb3RhbFNjYWxlKCk7YVIuc2V0VG90YWxTY2FsZV9ub3RGb3JDbGllbnQoYUsqYVIuXyRXci5fJEIwKTt2YXIgYU49YUwuZ2V0VG90YWxPcGFjaXR5KCk7YVIuc2V0VG90YWxPcGFjaXR5KGFOKmFSLmdldEludGVycG9sYXRlZE9wYWNpdHkoKSk7YVIuXyRXci5yZWZsZWN0WD1hUi5fJFlyLnJlZmxlY3RYO2FSLl8kV3IucmVmbGVjdFk9YVIuXyRZci5yZWZsZWN0WTthUi5fJGhTKGFMLl8keW8oKSk7fWVsc2V7YVIuXyRoUyhmYWxzZSk7fX19fTthYi5wcm90b3R5cGUuXyRuYj1mdW5jdGlvbihhSixhUixhTCxhNCxhVCxhTyxhMil7aWYoISgodGhpcz09YVIuXyRHVCgpKSkpe2NvbnNvbGUubG9nKFwiIyMjIGFzc2VydCEhICMjIyBcIik7fXZhciBhSD1hUjt2YXIgYVU9YUguXyRXciE9bnVsbD9hSC5fJFdyOmFILl8kWXI7dmFyIGEwPU1hdGguc2luKGFDLl8kYlMqYVUuXyRxVCk7dmFyIGFQPU1hdGguY29zKGFDLl8kYlMqYVUuXyRxVCk7dmFyIGEzPWFILmdldFRvdGFsU2NhbGUoKTt2YXIgYVc9YVUucmVmbGVjdFg/LTE6MTt2YXIgYVY9YVUucmVmbGVjdFk/LTE6MTt2YXIgYVM9YVAqYTMqYVc7dmFyIGFRPS1hMCphMyphVjt2YXIgYTE9YTAqYTMqYVc7dmFyIGFaPWFQKmEzKmFWO3ZhciBhWT1hVS5fJGZMO3ZhciBhWD1hVS5fJGdMO3ZhciBhTixhTTt2YXIgYUk9YVQqYTI7Zm9yKHZhciBhSz1hTzthSzxhSTthSys9YTIpe2FOPWFMW2FLXTthTT1hTFthSysxXTthNFthS109YVMqYU4rYVEqYU0rYVk7YTRbYUsrMV09YTEqYU4rYVoqYU0rYVg7fX07YWIucHJvdG90eXBlLl8kSnI9ZnVuY3Rpb24oYVAsYUssYUksYVIsYVEsYUgpe2lmKCEoKGFLPT1hSS5fJEdUKCkpKSl7Y29uc29sZS5sb2coXCIjIyMgYXNzZXJ0ISEgIyMjIFwiKTt9dmFyIGFPPWFiLl8kTG87YWIuXyRMb1swXT1hUlswXTthYi5fJExvWzFdPWFSWzFdO2FLLl8kbmIoYVAsYUksYU8sYU8sMSwwLDIpO3ZhciBhTD1hYi5fJFRvO3ZhciBhUz1hYi5fJFBvO3ZhciBhTj0xMDt2YXIgYUo9MTtmb3IodmFyIGFNPTA7YU08YU47YU0rKyl7YVNbMF09YVJbMF0rYUoqYVFbMF07YVNbMV09YVJbMV0rYUoqYVFbMV07YUsuXyRuYihhUCxhSSxhUyxhTCwxLDAsMik7YUxbMF0tPWFPWzBdO2FMWzFdLT1hT1sxXTtpZihhTFswXSE9MHx8YUxbMV0hPTApe2FIWzBdPWFMWzBdO2FIWzFdPWFMWzFdO3JldHVybjt9YVNbMF09YVJbMF0tYUoqYVFbMF07YVNbMV09YVJbMV0tYUoqYVFbMV07YUsuXyRuYihhUCxhSSxhUyxhTCwxLDAsMik7YUxbMF0tPWFPWzBdO2FMWzFdLT1hT1sxXTtpZihhTFswXSE9MHx8YUxbMV0hPTApe2FMWzBdPS1hTFswXTthTFswXT0tYUxbMF07YUhbMF09YUxbMF07YUhbMV09YUxbMV07cmV0dXJuO31hSio9MC4xO31pZihRLl8kc28pe2NvbnNvbGUubG9nKFwiXyRMMCB0byB0cmFuc2Zvcm0gXyRTUFxcblwiKTt9fTtmdW5jdGlvbiBhbChhSCl7Qi5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLGFIKTt0aGlzLl8kOHI9Yy5fJHVyO3RoaXMuXyRZcj1udWxsO3RoaXMuXyRXcj1udWxsO31hbC5wcm90b3R5cGU9bmV3IEIoKTtmdW5jdGlvbiBhKCl7aWYoail7cmV0dXJuO31hZS5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLl8kZ1A9bnVsbDt0aGlzLl8kZHI9bnVsbDt0aGlzLl8kR1M9bnVsbDt0aGlzLl8kcWI9bnVsbDt0aGlzLl8kTGI9bnVsbDt0aGlzLl8kbVM9bnVsbDt9YS5wcm90b3R5cGU9bmV3IGFlKCk7YS5fJHVyPS0yO2EuXyRFUz01MDA7YS5fJHdiPTI7YS5fJDhTPTM7YS5fJG9zPTQ7YS5fJDUyPWEuXyRFUzthLl8kUjI9YS5fJEVTO2EuXyRTYj1mdW5jdGlvbihhSil7Zm9yKHZhciBhST1hSi5sZW5ndGgtMTthST49MDstLWFJKXt2YXIgYUg9YUpbYUldO2lmKGFIPGEuXyQ1Mil7YS5fJDUyPWFIO31lbHNle2lmKGFIPmEuXyRSMil7YS5fJFIyPWFIO319fX07YS5fJG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGEuXyQ1Mjt9O2EuXyRQcj1mdW5jdGlvbigpe3JldHVybiBhLl8kUjI7fTthLnByb3RvdHlwZS5fJEYwPWZ1bmN0aW9uKGFIKXt0aGlzLl8kZ1A9YUguXyRuUCgpO3RoaXMuXyRkcj1hSC5fJG5QKCk7dGhpcy5fJEdTPWFILl8kblAoKTt0aGlzLl8kcWI9YUguXyQ2TCgpO3RoaXMuXyRMYj1hSC5fJGNTKCk7dGhpcy5fJG1TPWFILl8kVGIoKTtpZihhSC5nZXRGb3JtYXRWZXJzaW9uKCk+PWF5Ll8kVDcpe3RoaXMuY2xpcElEPWFILl8kblAoKTt0aGlzLmNsaXBJRExpc3Q9dGhpcy5jb252ZXJ0Q2xpcElERm9yVjJfMTEodGhpcy5jbGlwSUQpO31lbHNle3RoaXMuY2xpcElETGlzdD1udWxsO31hLl8kU2IodGhpcy5fJExiKTt9O2EucHJvdG90eXBlLmdldENsaXBJRExpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGlwSURMaXN0O307YS5wcm90b3R5cGUuXyROcj1mdW5jdGlvbihhSSxhSCl7YUguXyRJU1swXT1mYWxzZTthSC5fJFVzPWFHLl8kWjIoYUksdGhpcy5fJEdTLGFILl8kSVMsdGhpcy5fJExiKTtpZihRLl8kWnMpe31lbHNle2lmKGFILl8kSVNbMF0pe3JldHVybjt9fWFILl8kN3M9YUcuXyRicihhSSx0aGlzLl8kR1MsYUguXyRJUyx0aGlzLl8kbVMpO307YS5wcm90b3R5cGUuXyQyYj1mdW5jdGlvbihhSCl7fTthLnByb3RvdHlwZS5nZXREcmF3RGF0YUlEPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRnUDt9O2EucHJvdG90eXBlLl8kajI9ZnVuY3Rpb24oYUgpe3RoaXMuXyRnUD1hSDt9O2EucHJvdG90eXBlLmdldE9wYWNpdHk9ZnVuY3Rpb24oYUgsYUkpe3JldHVybiBhSS5fJDdzO307YS5wcm90b3R5cGUuXyR6Uz1mdW5jdGlvbihhSCxhSSl7cmV0dXJuIGFJLl8kVXM7fTthLnByb3RvdHlwZS5nZXRUYXJnZXRCYXNlRGF0YUlEPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRkcjt9O2EucHJvdG90eXBlLl8kZ3M9ZnVuY3Rpb24oYUgpe3RoaXMuXyRkcj1hSDt9O2EucHJvdG90eXBlLl8kMzI9ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5fJGRyIT1udWxsJiYodGhpcy5fJGRyIT1uLl8kMm8oKSkpO307YS5wcm90b3R5cGUuZ2V0VHlwZT1mdW5jdGlvbigpe307ZnVuY3Rpb24gYXEoKXtpZihqKXtyZXR1cm47fXRoaXMuXyROTD1udWxsO3RoaXMuXyQzUz1udWxsO3RoaXMuXyRhUz1udWxsO2FxLl8kNDIrKzt9YXEuXyQ0Mj0wO2FxLnByb3RvdHlwZS5fJDFiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyQzUzt9O2FxLnByb3RvdHlwZS5nZXREcmF3RGF0YUxpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJGFTO307YXEucHJvdG90eXBlLl8kRjA9ZnVuY3Rpb24oYUgpe3RoaXMuXyROTD1hSC5fJG5QKCk7dGhpcy5fJGFTPWFILl8kblAoKTt0aGlzLl8kM1M9YUguXyRuUCgpO307YXEucHJvdG90eXBlLl8ka3I9ZnVuY3Rpb24oYUgpe2FILl8kWm8odGhpcy5fJDNTKTthSC5fJHhvKHRoaXMuXyRhUyk7dGhpcy5fJDNTPW51bGw7dGhpcy5fJGFTPW51bGw7fTtmdW5jdGlvbiB2KCl7aWYoail7cmV0dXJuO31hYS5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLl8kem89bmV3IHgoKTt9di5wcm90b3R5cGU9bmV3IGFhKCk7di5sb2FkTW9kZWw9ZnVuY3Rpb24oYUkpe3ZhciBhSD1uZXcgdigpO2FhLl8kNjIoYUgsYUkpO3JldHVybiBhSDt9O3YubG9hZE1vZGVsPWZ1bmN0aW9uKGFJKXt2YXIgYUg9bmV3IHYoKTthYS5fJDYyKGFILGFJKTtyZXR1cm4gYUg7fTt2Ll8kdG89ZnVuY3Rpb24oKXt2YXIgYUg9bmV3IHYoKTtyZXR1cm4gYUg7fTt2Ll8kZXI9ZnVuY3Rpb24oYU0pe3ZhciBhSj1uZXcgXyQ1KFwiLi4vXyRfci9fJHQwL18kUmkvXyRfUC5fJGRcIik7aWYoYUouZXhpc3RzKCk9PWZhbHNlKXt0aHJvdyBuZXcgXyRscyhcIl8kdDAgXyRfIF8kNiBfJFVpIDo6IFwiK2FKLl8kUEwoKSk7fXZhciBhSD1bXCIuLi9fJF9yL18kdDAvXyRSaS9fJF9QLjUxMi9fJENQLl8kMVwiLFwiLi4vXyRfci9fJHQwL18kUmkvXyRfUC41MTIvXyR2UC5fJDFcIixcIi4uL18kX3IvXyR0MC9fJFJpL18kX1AuNTEyL18kRVAuXyQxXCIsXCIuLi9fJF9yL18kdDAvXyRSaS9fJF9QLjUxMi9fJHBQLl8kMVwiXTt2YXIgYUs9di5sb2FkTW9kZWwoYUouXyQzYigpKTtmb3IodmFyIGFJPTA7YUk8YUgubGVuZ3RoO2FJKyspe3ZhciBhTD1uZXcgXyQ1KGFIW2FJXSk7aWYoYUwuZXhpc3RzKCk9PWZhbHNlKXt0aHJvdyBuZXcgXyRscyhcIl8kdDAgXyRfIF8kNiBfJFVpIDo6IFwiK2FMLl8kUEwoKSk7fWFLLnNldFRleHR1cmUoYUksXyRuTC5fJF9vKGFNLGFMLl8kM2IoKSkpO31yZXR1cm4gYUs7fTt2LnByb3RvdHlwZS5zZXRHTD1mdW5jdGlvbihhSCl7dGhpcy5fJHpvLnNldEdMKGFIKTt9O3YucHJvdG90eXBlLnNldFRyYW5zZm9ybT1mdW5jdGlvbihhSCl7dGhpcy5fJHpvLnNldFRyYW5zZm9ybShhSCk7fTt2LnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKCl7dGhpcy5fJDVTLmRyYXcodGhpcy5fJHpvKTt9O3YucHJvdG90eXBlLl8kSzI9ZnVuY3Rpb24oKXt0aGlzLl8kem8uXyRLMigpO307di5wcm90b3R5cGUuc2V0VGV4dHVyZT1mdW5jdGlvbihhSSxhSCl7aWYodGhpcy5fJHpvPT1udWxsKXtxLl8kbGkoXCJfJFlpIGZvciBRVCBfJGtpIC8gXyRYUygpIGlzIF8kNiBfJHVpISFcIik7fXRoaXMuXyR6by5zZXRUZXh0dXJlKGFJLGFIKTt9O3YucHJvdG90eXBlLnNldFRleHR1cmU9ZnVuY3Rpb24oYUksYUgpe2lmKHRoaXMuXyR6bz09bnVsbCl7cS5fJGxpKFwiXyRZaSBmb3IgUVQgXyRraSAvIF8kWFMoKSBpcyBfJDYgXyR1aSEhXCIpO310aGlzLl8kem8uc2V0VGV4dHVyZShhSSxhSCk7fTt2LnByb3RvdHlwZS5fJFJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyR6by5fJFJzKCk7fTt2LnByb3RvdHlwZS5fJERzPWZ1bmN0aW9uKGFIKXt0aGlzLl8kem8uXyREcyhhSCk7fTt2LnByb3RvdHlwZS5nZXREcmF3UGFyYW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJHpvO307ZnVuY3Rpb24gYW8oKXtpZihqKXtyZXR1cm47fWFoLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMubW90aW9ucz1uZXcgQXJyYXkoKTt0aGlzLl8kbzI9bnVsbDt0aGlzLl8kN3I9YW8uXyRDbysrO3RoaXMuXyREMD0zMDt0aGlzLl8keVQ9MDt0aGlzLl8kRT1mYWxzZTt0aGlzLmxvb3BGYWRlSW49dHJ1ZTt0aGlzLl8kcnI9LTE7dGhpcy5fJGVQPTA7fWFvLnByb3RvdHlwZT1uZXcgYWgoKTthby5fJGNzPVwiVklTSUJMRTpcIjthby5fJGFyPVwiTEFZT1VUOlwiO2FvLk1UTl9QUkVGSVhfRkFERUlOPVwiRkFERUlOOlwiO2FvLk1UTl9QUkVGSVhfRkFERU9VVD1cIkZBREVPVVQ6XCI7YW8uXyRDbz0wO2FvLl8kMVQ9MTthby5sb2FkTW90aW9uPWZ1bmN0aW9uKGFKKXt2YXIgYUk9YXAuXyRDKGFKKTt2YXIgYUg9YW8ubG9hZE1vdGlvbihhSSk7cmV0dXJuIGFIO307ZnVuY3Rpb24gcChhSSxhSCl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYUkuZ2V0VWludDgoYUgpKTt9YW8ubG9hZE1vdGlvbj1mdW5jdGlvbihhVCl7aWYoYVQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7YVQ9bmV3IERhdGFWaWV3KGFUKTt9dmFyIGFOPW5ldyBhbygpO3ZhciBhST1bMF07dmFyIGFRPWFULmJ5dGVMZW5ndGg7YU4uXyR5VD0wO2Zvcih2YXIgYUo9MDthSjxhUTsrK2FKKXt2YXIgYVM9cChhVCxhSik7dmFyIGFMPWFTLmNoYXJDb2RlQXQoMCk7aWYoYVM9PVwiXFxuXCJ8fGFTPT1cIlxcclwiKXtjb250aW51ZTt9aWYoYVM9PVwiI1wiKXtmb3IoO2FKPGFROysrYUope2lmKHAoYVQsYUopPT1cIlxcblwifHxwKGFULGFKKT09XCJcXHJcIil7YnJlYWs7fX1jb250aW51ZTt9aWYoYVM9PVwiJFwiKXt2YXIgYVY9YUo7dmFyIGFLPS0xO2Zvcig7YUo8YVE7KythSil7YVM9cChhVCxhSik7aWYoYVM9PVwiXFxyXCJ8fGFTPT1cIlxcblwiKXticmVhazt9aWYoYVM9PVwiPVwiKXthSz1hSjticmVhazt9fXZhciBhUD1mYWxzZTtpZihhSz49MCl7aWYoYUs9PWFWKzQmJnAoYVQsYVYrMSk9PVwiZlwiJiZwKGFULGFWKzIpPT1cInBcIiYmcChhVCxhViszKT09XCJzXCIpe2FQPXRydWU7fWZvcihhSj1hSysxO2FKPGFROysrYUope2FTPXAoYVQsYUopO2lmKGFTPT1cIlxcclwifHxhUz09XCJcXG5cIil7YnJlYWs7fWlmKGFTPT1cIixcInx8YVM9PVwiIFwifHxhUz09XCJcXHRcIil7Y29udGludWU7fXZhciBhTT1HLl8kTFMoYVQsYVEsYUosYUkpO2lmKGFJWzBdPjApe2lmKGFQJiY1PGFNJiZhTTwxMjEpe2FOLl8kRDA9YU07fX1hSj1hSVswXTt9fWZvcig7YUo8YVE7KythSil7aWYocChhVCxhSik9PVwiXFxuXCJ8fHAoYVQsYUopPT1cIlxcclwiKXticmVhazt9fWNvbnRpbnVlO31pZigoOTc8PWFMJiZhTDw9MTIyKXx8KDY1PD1hTCYmYUw8PTkwKXx8YVM9PVwiX1wiKXt2YXIgYVY9YUo7dmFyIGFLPS0xO2Zvcig7YUo8YVE7KythSil7YVM9cChhVCxhSik7aWYoYVM9PVwiXFxyXCJ8fGFTPT1cIlxcblwiKXticmVhazt9aWYoYVM9PVwiPVwiKXthSz1hSjticmVhazt9fWlmKGFLPj0wKXt2YXIgYU89bmV3IHQoKTtpZihHLnN0YXJ0c1dpdGgoYVQsYVYsYW8uXyRjcykpe2FPLl8kUlA9dC5fJGhzO2FPLl8kNFA9Ry5jcmVhdGVTdHJpbmcoYVQsYVYsYUstYVYpO31lbHNle2lmKEcuc3RhcnRzV2l0aChhVCxhVixhby5fJGFyKSl7YU8uXyQ0UD1HLmNyZWF0ZVN0cmluZyhhVCxhVis3LGFLLWFWLTcpO2lmKEcuc3RhcnRzV2l0aChhVCxhVis3LFwiQU5DSE9SX1hcIikpe2FPLl8kUlA9dC5fJHhzO31lbHNle2lmKEcuc3RhcnRzV2l0aChhVCxhVis3LFwiQU5DSE9SX1lcIikpe2FPLl8kUlA9dC5fJHVzO31lbHNle2lmKEcuc3RhcnRzV2l0aChhVCxhVis3LFwiU0NBTEVfWFwiKSl7YU8uXyRSUD10Ll8kcXM7fWVsc2V7aWYoRy5zdGFydHNXaXRoKGFULGFWKzcsXCJTQ0FMRV9ZXCIpKXthTy5fJFJQPXQuXyRZczt9ZWxzZXtpZihHLnN0YXJ0c1dpdGgoYVQsYVYrNyxcIlhcIikpe2FPLl8kUlA9dC5fJHdzO31lbHNle2lmKEcuc3RhcnRzV2l0aChhVCxhVis3LFwiWVwiKSl7YU8uXyRSUD10Ll8kTnM7fX19fX19fWVsc2V7YU8uXyRSUD10Ll8kRnI7YU8uXyQ0UD1HLmNyZWF0ZVN0cmluZyhhVCxhVixhSy1hVik7fX1hTi5tb3Rpb25zLnB1c2goYU8pO3ZhciBhVT0wO3ZhciBhUj1bXTtmb3IoYUo9YUsrMTthSjxhUTsrK2FKKXthUz1wKGFULGFKKTtpZihhUz09XCJcXHJcInx8YVM9PVwiXFxuXCIpe2JyZWFrO31pZihhUz09XCIsXCJ8fGFTPT1cIiBcInx8YVM9PVwiXFx0XCIpe2NvbnRpbnVlO312YXIgYU09Ry5fJExTKGFULGFRLGFKLGFJKTtpZihhSVswXT4wKXthUi5wdXNoKGFNKTthVSsrO3ZhciBhSD1hSVswXTtpZihhSDxhSil7Y29uc29sZS5sb2coXCJfJG4wIF8kaGkgLiBATGl2ZTJETW90aW9uIGxvYWRNb3Rpb24oKVxcblwiKTticmVhazt9YUo9YUgtMTt9fWFPLl8kSTA9bmV3IEZsb2F0MzJBcnJheShhUik7aWYoYVU+YU4uXyR5VCl7YU4uXyR5VD1hVTt9fX19YU4uXyRycj0oKDEwMDAqYU4uXyR5VCkvYU4uXyREMCl8MDtyZXR1cm4gYU47fTthby5wcm90b3R5cGUuZ2V0RHVyYXRpb25NU2VjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRFPy0xOnRoaXMuXyRycjt9O2FvLnByb3RvdHlwZS5nZXRMb29wRHVyYXRpb25NU2VjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRycjt9O2FvLnByb3RvdHlwZS5kdW1wPWZ1bmN0aW9uKCl7Zm9yKHZhciBhSj0wO2FKPHRoaXMubW90aW9ucy5sZW5ndGg7YUorKyl7dmFyIGFIPXRoaXMubW90aW9uc1thSl07Y29uc29sZS5sb2coXCJfJHdMWyVzXSBbJWRdLiBcIixhSC5fJDRQLGFILl8kSTAubGVuZ3RoKTtmb3IodmFyIGFJPTA7YUk8YUguXyRJMC5sZW5ndGgmJmFJPDEwO2FJKyspe2NvbnNvbGUubG9nKFwiJTUuMmYgLFwiLGFILl8kSTBbYUldKTt9Y29uc29sZS5sb2coXCJcXG5cIik7fX07YW8ucHJvdG90eXBlLnVwZGF0ZVBhcmFtRXhlPWZ1bmN0aW9uKGFKLGFOLGFRLGEzKXt2YXIgYU89YU4tYTMuXyR6Mjt2YXIgYTA9YU8qdGhpcy5fJEQwLzEwMDA7dmFyIGFLPWEwfDA7dmFyIGFSPWEwLWFLO2Zvcih2YXIgYVo9MDthWjx0aGlzLm1vdGlvbnMubGVuZ3RoO2FaKyspe3ZhciBhVj10aGlzLm1vdGlvbnNbYVpdO3ZhciBhTD1hVi5fJEkwLmxlbmd0aDt2YXIgYVQ9YVYuXyQ0UDtpZihhVi5fJFJQPT10Ll8kaHMpe3ZhciBhWD1hVi5fJEkwWyhhSz49YUw/YUwtMTphSyldO2FKLnNldFBhcmFtRmxvYXQoYVQsYVgpO31lbHNle2lmKHQuXyR3czw9YVYuXyRSUCYmYVYuXyRSUDw9dC5fJFlzKXt9ZWxzZXt2YXIgYUg9YUouZ2V0UGFyYW1JbmRleChhVCk7dmFyIGE0PWFKLmdldE1vZGVsQ29udGV4dCgpO3ZhciBhWT1hNC5nZXRQYXJhbU1heChhSCk7dmFyIGFXPWE0LmdldFBhcmFtTWluKGFIKTt2YXIgYU09MC40O3ZhciBhUz1hTSooYVktYVcpO3ZhciBhVT1hNC5nZXRQYXJhbUZsb2F0KGFIKTt2YXIgYTI9YVYuXyRJMFsoYUs+PWFMP2FMLTE6YUspXTt2YXIgYTE9YVYuXyRJMFsoYUsrMT49YUw/YUwtMTphSysxKV07dmFyIGFJO2lmKChhMjxhMSYmYTEtYTI+YVMpfHwoYTI+YTEmJmEyLWExPmFTKSl7YUk9YTI7fWVsc2V7YUk9YTIrKGExLWEyKSphUjt9dmFyIGFQPWFVKyhhSS1hVSkqYVE7YUouc2V0UGFyYW1GbG9hdChhVCxhUCk7fX19aWYoYUs+PXRoaXMuXyR5VCl7aWYodGhpcy5fJEUpe2EzLl8kejI9YU47aWYodGhpcy5sb29wRmFkZUluKXthMy5fJGJzPWFOO319ZWxzZXthMy5fJDlMPXRydWU7fX10aGlzLl8kZVA9YVE7fTthby5wcm90b3R5cGUuXyRyMD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kRTt9O2FvLnByb3RvdHlwZS5fJGFMPWZ1bmN0aW9uKGFIKXt0aGlzLl8kRT1hSDt9O2FvLnByb3RvdHlwZS5fJFMwPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyREMDt9O2FvLnByb3RvdHlwZS5fJFUwPWZ1bmN0aW9uKGFIKXt0aGlzLl8kRDA9YUg7fTthby5wcm90b3R5cGUuaXNMb29wRmFkZUluPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9vcEZhZGVJbjt9O2FvLnByb3RvdHlwZS5zZXRMb29wRmFkZUluPWZ1bmN0aW9uKGFIKXt0aGlzLmxvb3BGYWRlSW49YUg7fTtmdW5jdGlvbiBhRSgpe3RoaXMuXyRQPW5ldyBGbG9hdDMyQXJyYXkoMTAwKTt0aGlzLnNpemU9MDt9YUUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5zaXplPTA7fTthRS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGFJKXtpZih0aGlzLl8kUC5sZW5ndGg8PXRoaXMuc2l6ZSl7dmFyIGFIPW5ldyBGbG9hdDMyQXJyYXkodGhpcy5zaXplKjIpO1AuXyRqVCh0aGlzLl8kUCwwLGFILDAsdGhpcy5zaXplKTt0aGlzLl8kUD1hSDt9dGhpcy5fJFBbdGhpcy5zaXplKytdPWFJO307YUUucHJvdG90eXBlLl8kQkw9ZnVuY3Rpb24oKXt2YXIgYUg9bmV3IEZsb2F0MzJBcnJheSh0aGlzLnNpemUpO1AuXyRqVCh0aGlzLl8kUCwwLGFILDAsdGhpcy5zaXplKTtyZXR1cm4gYUg7fTtmdW5jdGlvbiB0KCl7dGhpcy5fJDRQPW51bGw7dGhpcy5fJEkwPW51bGw7dGhpcy5fJFJQPW51bGw7fXQuXyRGcj0wO3QuXyRocz0xO3QuXyR3cz0xMDA7dC5fJE5zPTEwMTt0Ll8keHM9MTAyO3QuXyR1cz0xMDM7dC5fJHFzPTEwNDt0Ll8kWXM9MTA1O2Z1bmN0aW9uIEUoKXtpZihqKXtyZXR1cm47fWMucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5fJG89MDt0aGlzLl8kQT0wO3RoaXMuXyRHUz1udWxsO3RoaXMuXyRFbz1udWxsO31FLnByb3RvdHlwZT1uZXcgYygpO0UuXyRnVD1uZXcgQXJyYXkoKTtFLnByb3RvdHlwZS5fJHpQPWZ1bmN0aW9uKCl7dGhpcy5fJEdTPW5ldyBnKCk7dGhpcy5fJEdTLl8kelAoKTt9O0UucHJvdG90eXBlLl8kRjA9ZnVuY3Rpb24oYUgpe2MucHJvdG90eXBlLl8kRjAuY2FsbCh0aGlzLGFIKTt0aGlzLl8kQT1hSC5fJDZMKCk7dGhpcy5fJG89YUguXyQ2TCgpO3RoaXMuXyRHUz1hSC5fJG5QKCk7dGhpcy5fJEVvPWFILl8kblAoKTtjLnByb3RvdHlwZS5yZWFkVjJfb3BhY2l0eS5jYWxsKHRoaXMsYUgpO307RS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbihhSCl7dmFyIGFJPW5ldyBIKHRoaXMpO3ZhciBhSj0odGhpcy5fJG8rMSkqKHRoaXMuXyRBKzEpO2lmKGFJLl8kQ3IhPW51bGwpe2FJLl8kQ3I9bnVsbDt9YUkuXyRDcj1uZXcgRmxvYXQzMkFycmF5KGFKKjIpO2lmKGFJLl8kaHIhPW51bGwpe2FJLl8kaHI9bnVsbDt9aWYodGhpcy5fJDMyKCkpe2FJLl8kaHI9bmV3IEZsb2F0MzJBcnJheShhSioyKTt9ZWxzZXthSS5fJGhyPW51bGw7fXJldHVybiBhSTt9O0UucHJvdG90eXBlLl8kTnI9ZnVuY3Rpb24oYUosYUkpe3ZhciBhSz1hSTtpZighdGhpcy5fJEdTLl8kVXIoYUopKXtyZXR1cm47fXZhciBhTD10aGlzLl8kVlQoKTt2YXIgYUg9RS5fJGdUO2FIWzBdPWZhbHNlO2FHLl8kVnIoYUosdGhpcy5fJEdTLGFILGFMLHRoaXMuXyRFbyxhSy5fJENyLDAsMik7YUkuXyRJYihhSFswXSk7dGhpcy5pbnRlcnBvbGF0ZU9wYWNpdHkoYUosdGhpcy5fJEdTLGFJLGFIKTt9O0UucHJvdG90eXBlLl8kMmI9ZnVuY3Rpb24oYUssYUope3ZhciBhTD1hSjthTC5fJGhTKHRydWUpO2lmKCF0aGlzLl8kMzIoKSl7YUwuc2V0VG90YWxPcGFjaXR5KGFMLmdldEludGVycG9sYXRlZE9wYWNpdHkoKSk7fWVsc2V7dmFyIGFIPXRoaXMuZ2V0VGFyZ2V0QmFzZURhdGFJRCgpO2lmKGFMLl8kOHI9PWMuXyR1cil7YUwuXyQ4cj1hSy5nZXRCYXNlRGF0YUluZGV4KGFIKTt9aWYoYUwuXyQ4cjwwKXtpZihRLl8kc28pe3EuXyRsaShcIl8kTCBfJDBQIF8kRyA6OiAlc1wiLGFIKTt9YUwuXyRoUyhmYWxzZSk7fWVsc2V7dmFyIGFOPWFLLmdldEJhc2VEYXRhKGFMLl8kOHIpO3ZhciBhST1hSy5fJHEyKGFMLl8kOHIpO2lmKGFOIT1udWxsJiZhSS5fJHlvKCkpe3ZhciBhTT1hSS5nZXRUb3RhbFNjYWxlKCk7YUwuc2V0VG90YWxTY2FsZV9ub3RGb3JDbGllbnQoYU0pO3ZhciBhTz1hSS5nZXRUb3RhbE9wYWNpdHkoKTthTC5zZXRUb3RhbE9wYWNpdHkoYU8qYUwuZ2V0SW50ZXJwb2xhdGVkT3BhY2l0eSgpKTthTi5fJG5iKGFLLGFJLGFMLl8kQ3IsYUwuXyRocix0aGlzLl8kVlQoKSwwLDIpO2FMLl8kaFModHJ1ZSk7fWVsc2V7YUwuXyRoUyhmYWxzZSk7fX19fTtFLnByb3RvdHlwZS5fJG5iPWZ1bmN0aW9uKGFMLGFJLGFILGFNLGFPLGFLLGFKKXtpZih0cnVlKXt2YXIgYU49YUk7dmFyIGFQPShhTi5fJGhyIT1udWxsKT9hTi5fJGhyOmFOLl8kQ3I7RS50cmFuc2Zvcm1Qb2ludHNfc2RrMihhSCxhTSxhTyxhSyxhSixhUCx0aGlzLl8kbyx0aGlzLl8kQSk7fWVsc2V7dGhpcy50cmFuc2Zvcm1Qb2ludHNfc2RrMShhTCxhSSxhSCxhTSxhTyxhSyxhSik7fX07RS50cmFuc2Zvcm1Qb2ludHNfc2RrMj1mdW5jdGlvbihhMCxiYyxhNSxhUCxhSSxhUixhUSxhVSl7dmFyIGFXPWE1KmFJO3ZhciBhVjt2YXIgYm4sYm07dmFyIGFUPTA7dmFyIGFTPTA7dmFyIGJsPTA7dmFyIGJrPTA7dmFyIGJmPTA7dmFyIGJlPTA7dmFyIGFaPWZhbHNlO2Zvcih2YXIgYmE9YVA7YmE8YVc7YmErPWFJKXt2YXIgYmQsYTcsYTQsYVg7YTQ9YTBbYmFdO2FYPWEwW2JhKzFdO2JkPWE0KmFRO2E3PWFYKmFVO2lmKGJkPDB8fGE3PDB8fGFRPD1iZHx8YVU8PWE3KXt2YXIgYTE9YVErMTtpZighYVope2FaPXRydWU7YVQ9MC4yNSooYVJbKCgwKSsoMCkqYTEpKjJdK2FSWygoYVEpKygwKSphMSkqMl0rYVJbKCgwKSsoYVUpKmExKSoyXSthUlsoKGFRKSsoYVUpKmExKSoyXSk7YVM9MC4yNSooYVJbKCgwKSsoMCkqYTEpKjIrMV0rYVJbKChhUSkrKDApKmExKSoyKzFdK2FSWygoMCkrKGFVKSphMSkqMisxXSthUlsoKGFRKSsoYVUpKmExKSoyKzFdKTt2YXIgYU09YVJbKChhUSkrKGFVKSphMSkqMl0tYVJbKCgwKSsoMCkqYTEpKjJdO3ZhciBhTD1hUlsoKGFRKSsoYVUpKmExKSoyKzFdLWFSWygoMCkrKDApKmExKSoyKzFdO3ZhciBiaD1hUlsoKGFRKSsoMCkqYTEpKjJdLWFSWygoMCkrKGFVKSphMSkqMl07dmFyIGJnPWFSWygoYVEpKygwKSphMSkqMisxXS1hUlsoKDApKyhhVSkqYTEpKjIrMV07Ymw9KGFNK2JoKSowLjU7Yms9KGFMK2JnKSowLjU7YmY9KGFNLWJoKSowLjU7YmU9KGFMLWJnKSowLjU7aWYoYmw9PTAmJmJrPT0wKXt9aWYoYmY9PTAmJmJlPT0wKXt9YVQtPTAuNSooYmwrYmYpO2FTLT0wLjUqKGJrK2JlKTt9aWYoKC0yPGE0JiZhNDwzKSYmKC0yPGFYJiZhWDwzKSl7aWYoYTQ8PTApe2lmKGFYPD0wKXt2YXIgYTM9YVJbKCgwKSsoMCkqYTEpKjJdO3ZhciBhMj1hUlsoKDApKygwKSphMSkqMisxXTt2YXIgYTg9YVQtMipibDt2YXIgYTY9YVMtMipiazt2YXIgYUs9YVQtMipiZjt2YXIgYUo9YVMtMipiZTt2YXIgYU89YVQtMipibC0yKmJmO3ZhciBhTj1hUy0yKmJrLTIqYmU7dmFyIGJqPTAuNSooYTQtKC0yKSk7dmFyIGJpPTAuNSooYVgtKC0yKSk7aWYoYmorYmk8PTEpe2JjW2JhXT1hTysoYUstYU8pKmJqKyhhOC1hTykqYmk7YmNbYmErMV09YU4rKGFKLWFOKSpiaisoYTYtYU4pKmJpO31lbHNle2JjW2JhXT1hMysoYTgtYTMpKigxLWJqKSsoYUstYTMpKigxLWJpKTtiY1tiYSsxXT1hMisoYTYtYTIpKigxLWJqKSsoYUotYTIpKigxLWJpKTt9fWVsc2V7aWYoYVg+PTEpe3ZhciBhSz1hUlsoKDApKyhhVSkqYTEpKjJdO3ZhciBhSj1hUlsoKDApKyhhVSkqYTEpKjIrMV07dmFyIGFPPWFULTIqYmwrMSpiZjt2YXIgYU49YVMtMipiaysxKmJlO3ZhciBhMz1hVCszKmJmO3ZhciBhMj1hUyszKmJlO3ZhciBhOD1hVC0yKmJsKzMqYmY7dmFyIGE2PWFTLTIqYmsrMypiZTt2YXIgYmo9MC41KihhNC0oLTIpKTt2YXIgYmk9MC41KihhWC0oMSkpO2lmKGJqK2JpPD0xKXtiY1tiYV09YU8rKGFLLWFPKSpiaisoYTgtYU8pKmJpO2JjW2JhKzFdPWFOKyhhSi1hTikqYmorKGE2LWFOKSpiaTt9ZWxzZXtiY1tiYV09YTMrKGE4LWEzKSooMS1iaikrKGFLLWEzKSooMS1iaSk7YmNbYmErMV09YTIrKGE2LWEyKSooMS1iaikrKGFKLWEyKSooMS1iaSk7fX1lbHNle3ZhciBhSD0oYTd8MCk7aWYoYUg9PWFVKXthSD1hVS0xO312YXIgYmo9MC41KihhNC0oLTIpKTt2YXIgYmk9YTctYUg7dmFyIGJiPWFIL2FVO3ZhciBhOT0oYUgrMSkvYVU7dmFyIGFLPWFSWygoMCkrKGFIKSphMSkqMl07dmFyIGFKPWFSWygoMCkrKGFIKSphMSkqMisxXTt2YXIgYTM9YVJbKCgwKSsoYUgrMSkqYTEpKjJdO3ZhciBhMj1hUlsoKDApKyhhSCsxKSphMSkqMisxXTt2YXIgYU89YVQtMipibCtiYipiZjt2YXIgYU49YVMtMipiaytiYipiZTt2YXIgYTg9YVQtMipibCthOSpiZjt2YXIgYTY9YVMtMipiaythOSpiZTtpZihiaitiaTw9MSl7YmNbYmFdPWFPKyhhSy1hTykqYmorKGE4LWFPKSpiaTtiY1tiYSsxXT1hTisoYUotYU4pKmJqKyhhNi1hTikqYmk7fWVsc2V7YmNbYmFdPWEzKyhhOC1hMykqKDEtYmopKyhhSy1hMykqKDEtYmkpO2JjW2JhKzFdPWEyKyhhNi1hMikqKDEtYmopKyhhSi1hMikqKDEtYmkpO319fX1lbHNle2lmKDE8PWE0KXtpZihhWDw9MCl7dmFyIGE4PWFSWygoYVEpKygwKSphMSkqMl07dmFyIGE2PWFSWygoYVEpKygwKSphMSkqMisxXTt2YXIgYTM9YVQrMypibDt2YXIgYTI9YVMrMypiazt2YXIgYU89YVQrMSpibC0yKmJmO3ZhciBhTj1hUysxKmJrLTIqYmU7dmFyIGFLPWFUKzMqYmwtMipiZjt2YXIgYUo9YVMrMypiay0yKmJlO3ZhciBiaj0wLjUqKGE0LSgxKSk7dmFyIGJpPTAuNSooYVgtKC0yKSk7aWYoYmorYmk8PTEpe2JjW2JhXT1hTysoYUstYU8pKmJqKyhhOC1hTykqYmk7YmNbYmErMV09YU4rKGFKLWFOKSpiaisoYTYtYU4pKmJpO31lbHNle2JjW2JhXT1hMysoYTgtYTMpKigxLWJqKSsoYUstYTMpKigxLWJpKTtiY1tiYSsxXT1hMisoYTYtYTIpKigxLWJqKSsoYUotYTIpKigxLWJpKTt9fWVsc2V7aWYoYVg+PTEpe3ZhciBhTz1hUlsoKGFRKSsoYVUpKmExKSoyXTt2YXIgYU49YVJbKChhUSkrKGFVKSphMSkqMisxXTt2YXIgYUs9YVQrMypibCsxKmJmO3ZhciBhSj1hUyszKmJrKzEqYmU7dmFyIGE4PWFUKzEqYmwrMypiZjt2YXIgYTY9YVMrMSpiayszKmJlO3ZhciBhMz1hVCszKmJsKzMqYmY7dmFyIGEyPWFTKzMqYmsrMypiZTt2YXIgYmo9MC41KihhNC0oMSkpO3ZhciBiaT0wLjUqKGFYLSgxKSk7aWYoYmorYmk8PTEpe2JjW2JhXT1hTysoYUstYU8pKmJqKyhhOC1hTykqYmk7YmNbYmErMV09YU4rKGFKLWFOKSpiaisoYTYtYU4pKmJpO31lbHNle2JjW2JhXT1hMysoYTgtYTMpKigxLWJqKSsoYUstYTMpKigxLWJpKTtiY1tiYSsxXT1hMisoYTYtYTIpKigxLWJqKSsoYUotYTIpKigxLWJpKTt9fWVsc2V7dmFyIGFIPShhN3wwKTtpZihhSD09YVUpe2FIPWFVLTE7fXZhciBiaj0wLjUqKGE0LSgxKSk7dmFyIGJpPWE3LWFIO3ZhciBiYj1hSC9hVTt2YXIgYTk9KGFIKzEpL2FVO3ZhciBhTz1hUlsoKGFRKSsoYUgpKmExKSoyXTt2YXIgYU49YVJbKChhUSkrKGFIKSphMSkqMisxXTt2YXIgYTg9YVJbKChhUSkrKGFIKzEpKmExKSoyXTt2YXIgYTY9YVJbKChhUSkrKGFIKzEpKmExKSoyKzFdO3ZhciBhSz1hVCszKmJsK2JiKmJmO3ZhciBhSj1hUyszKmJrK2JiKmJlO3ZhciBhMz1hVCszKmJsK2E5KmJmO3ZhciBhMj1hUyszKmJrK2E5KmJlO2lmKGJqK2JpPD0xKXtiY1tiYV09YU8rKGFLLWFPKSpiaisoYTgtYU8pKmJpO2JjW2JhKzFdPWFOKyhhSi1hTikqYmorKGE2LWFOKSpiaTt9ZWxzZXtiY1tiYV09YTMrKGE4LWEzKSooMS1iaikrKGFLLWEzKSooMS1iaSk7YmNbYmErMV09YTIrKGE2LWEyKSooMS1iaikrKGFKLWEyKSooMS1iaSk7fX19fWVsc2V7aWYoYVg8PTApe3ZhciBhWT0oYmR8MCk7aWYoYVk9PWFRKXthWT1hUS0xO312YXIgYmo9YmQtYVk7dmFyIGJpPTAuNSooYVgtKC0yKSk7dmFyIGJwPWFZL2FRO3ZhciBibz0oYVkrMSkvYVE7dmFyIGE4PWFSWygoYVkpKygwKSphMSkqMl07dmFyIGE2PWFSWygoYVkpKygwKSphMSkqMisxXTt2YXIgYTM9YVJbKChhWSsxKSsoMCkqYTEpKjJdO3ZhciBhMj1hUlsoKGFZKzEpKygwKSphMSkqMisxXTt2YXIgYU89YVQrYnAqYmwtMipiZjt2YXIgYU49YVMrYnAqYmstMipiZTt2YXIgYUs9YVQrYm8qYmwtMipiZjt2YXIgYUo9YVMrYm8qYmstMipiZTtpZihiaitiaTw9MSl7YmNbYmFdPWFPKyhhSy1hTykqYmorKGE4LWFPKSpiaTtiY1tiYSsxXT1hTisoYUotYU4pKmJqKyhhNi1hTikqYmk7fWVsc2V7YmNbYmFdPWEzKyhhOC1hMykqKDEtYmopKyhhSy1hMykqKDEtYmkpO2JjW2JhKzFdPWEyKyhhNi1hMikqKDEtYmopKyhhSi1hMikqKDEtYmkpO319ZWxzZXtpZihhWD49MSl7dmFyIGFZPShiZHwwKTtpZihhWT09YVEpe2FZPWFRLTE7fXZhciBiaj1iZC1hWTt2YXIgYmk9MC41KihhWC0oMSkpO3ZhciBicD1hWS9hUTt2YXIgYm89KGFZKzEpL2FRO3ZhciBhTz1hUlsoKGFZKSsoYVUpKmExKSoyXTt2YXIgYU49YVJbKChhWSkrKGFVKSphMSkqMisxXTt2YXIgYUs9YVJbKChhWSsxKSsoYVUpKmExKSoyXTt2YXIgYUo9YVJbKChhWSsxKSsoYVUpKmExKSoyKzFdO3ZhciBhOD1hVCticCpibCszKmJmO3ZhciBhNj1hUyticCpiayszKmJlO3ZhciBhMz1hVCtibypibCszKmJmO3ZhciBhMj1hUytibypiayszKmJlO2lmKGJqK2JpPD0xKXtiY1tiYV09YU8rKGFLLWFPKSpiaisoYTgtYU8pKmJpO2JjW2JhKzFdPWFOKyhhSi1hTikqYmorKGE2LWFOKSpiaTt9ZWxzZXtiY1tiYV09YTMrKGE4LWEzKSooMS1iaikrKGFLLWEzKSooMS1iaSk7YmNbYmErMV09YTIrKGE2LWEyKSooMS1iaikrKGFKLWEyKSooMS1iaSk7fX1lbHNle1N5c3RlbS5lcnIucHJpbnRmKFwiXyRsaSBjYWxjIDogJS40ZiAsICUuNGZcdFx0XHRcdFx0QEBCREJveEdyaWRcXG5cIixhNCxhWCk7fX19fX1lbHNle2JjW2JhXT1hVCthNCpibCthWCpiZjtiY1tiYSsxXT1hUythNCpiaythWCpiZTt9fWVsc2V7Ym49YmQtKGJkfDApO2JtPWE3LShhN3wwKTthVj0yKigoYmR8MCkrKChhN3wwKSkqKGFRKzEpKTtpZihibitibTwxKXtiY1tiYV09YVJbYVZdKigxLWJuLWJtKSthUlthVisyXSpibithUlthVisyKihhUSsxKV0qYm07YmNbYmErMV09YVJbYVYrMV0qKDEtYm4tYm0pK2FSW2FWKzNdKmJuK2FSW2FWKzIqKGFRKzEpKzFdKmJtO31lbHNle2JjW2JhXT1hUlthVisyKihhUSsxKSsyXSooYm4tMStibSkrYVJbYVYrMiooYVErMSldKigxLWJuKSthUlthVisyXSooMS1ibSk7YmNbYmErMV09YVJbYVYrMiooYVErMSkrM10qKGJuLTErYm0pK2FSW2FWKzIqKGFRKzEpKzFdKigxLWJuKSthUlthViszXSooMS1ibSk7fX19fTtFLnByb3RvdHlwZS50cmFuc2Zvcm1Qb2ludHNfc2RrMT1mdW5jdGlvbihhSixhUixhTCxhMCxhVSxhUCxhWil7dmFyIGFIPWFSO3ZhciBhTyxhTjt2YXIgYU09dGhpcy5fJG87dmFyIGFRPXRoaXMuXyRBO3ZhciBhST1hVSphWjt2YXIgYVMsYVk7dmFyIGFWO3ZhciBhWCxhVzt2YXIgYVQ9KGFILl8kaHIhPW51bGwpP2FILl8kaHI6YUguXyRDcjtmb3IodmFyIGFLPWFQO2FLPGFJO2FLKz1hWil7aWYoUS5fJHRzKXthTz1hTFthS107YU49YUxbYUsrMV07aWYoYU88MCl7YU89MDt9ZWxzZXtpZihhTz4xKXthTz0xO319aWYoYU48MCl7YU49MDt9ZWxzZXtpZihhTj4xKXthTj0xO319YU8qPWFNO2FOKj1hUTthUz0oYU98MCk7YVk9KGFOfDApO2lmKGFTPmFNLTEpe2FTPWFNLTE7fWlmKGFZPmFRLTEpe2FZPWFRLTE7fWFYPWFPLWFTO2FXPWFOLWFZO2FWPTIqKGFTK2FZKihhTSsxKSk7fWVsc2V7YU89YUxbYUtdKmFNO2FOPWFMW2FLKzFdKmFRO2FYPWFPLShhT3wwKTthVz1hTi0oYU58MCk7YVY9MiooKGFPfDApKyhhTnwwKSooYU0rMSkpO31pZihhWCthVzwxKXthMFthS109YVRbYVZdKigxLWFYLWFXKSthVFthVisyXSphWCthVFthVisyKihhTSsxKV0qYVc7YTBbYUsrMV09YVRbYVYrMV0qKDEtYVgtYVcpK2FUW2FWKzNdKmFYK2FUW2FWKzIqKGFNKzEpKzFdKmFXO31lbHNle2EwW2FLXT1hVFthVisyKihhTSsxKSsyXSooYVgtMSthVykrYVRbYVYrMiooYU0rMSldKigxLWFYKSthVFthVisyXSooMS1hVyk7YTBbYUsrMV09YVRbYVYrMiooYU0rMSkrM10qKGFYLTErYVcpK2FUW2FWKzIqKGFNKzEpKzFdKigxLWFYKSthVFthViszXSooMS1hVyk7fX19O0UucHJvdG90eXBlLl8kVlQ9ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5fJG8rMSkqKHRoaXMuXyRBKzEpO307RS5wcm90b3R5cGUuZ2V0VHlwZT1mdW5jdGlvbigpe3JldHVybiBjLl8kX2I7fTtmdW5jdGlvbiBIKGFIKXtCLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYUgpO3RoaXMuXyQ4cj1jLl8kdXI7dGhpcy5fJENyPW51bGw7dGhpcy5fJGhyPW51bGw7fUgucHJvdG90eXBlPW5ldyBCKCk7ZnVuY3Rpb24gcygpe2lmKGope3JldHVybjt9dGhpcy52aXNpYmxlPXRydWU7dGhpcy5fJGcwPWZhbHNlO3RoaXMuXyROTD1udWxsO3RoaXMuXyQzUz1udWxsO3RoaXMuXyRhUz1udWxsO3MuXyQ0MisrO31zLl8kNDI9MDtzLnByb3RvdHlwZS5fJHpQPWZ1bmN0aW9uKCl7dGhpcy5fJDNTPW5ldyBBcnJheSgpO3RoaXMuXyRhUz1uZXcgQXJyYXkoKTt9O3MucHJvdG90eXBlLl8kRjA9ZnVuY3Rpb24oYUgpe3RoaXMuXyRnMD1hSC5fJDhMKCk7dGhpcy52aXNpYmxlPWFILl8kOEwoKTt0aGlzLl8kTkw9YUguXyRuUCgpO3RoaXMuXyQzUz1hSC5fJG5QKCk7dGhpcy5fJGFTPWFILl8kblAoKTt9O3MucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oYUkpe3ZhciBhSD1uZXcgYWoodGhpcyk7YUguc2V0UGFydHNPcGFjaXR5KHRoaXMuaXNWaXNpYmxlKCk/MTowKTtyZXR1cm4gYUg7fTtzLnByb3RvdHlwZS5fJDZvPWZ1bmN0aW9uKGFIKXtpZih0aGlzLl8kM1M9PW51bGwpe3Rocm93IG5ldyBFcnJvcihcIl8kM1MgXyQ2IF8kV29AXyQ2b1wiKTt9dGhpcy5fJDNTLnB1c2goYUgpO307cy5wcm90b3R5cGUuXyQzbz1mdW5jdGlvbihhSCl7aWYodGhpcy5fJGFTPT1udWxsKXt0aHJvdyBuZXcgRXJyb3IoXCJfJGFTIF8kNiBfJFdvQF8kM29cIik7fXRoaXMuXyRhUy5wdXNoKGFIKTt9O3MucHJvdG90eXBlLl8kWm89ZnVuY3Rpb24oYUgpe3RoaXMuXyQzUz1hSDt9O3MucHJvdG90eXBlLl8keG89ZnVuY3Rpb24oYUgpe3RoaXMuXyRhUz1hSDt9O3MucHJvdG90eXBlLmlzVmlzaWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZpc2libGU7fTtzLnByb3RvdHlwZS5fJHVMPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRnMDt9O3MucHJvdG90eXBlLl8kS1A9ZnVuY3Rpb24oYUgpe3RoaXMudmlzaWJsZT1hSDt9O3MucHJvdG90eXBlLl8kRVQ9ZnVuY3Rpb24oYUgpe3RoaXMuXyRnMD1hSDt9O3MucHJvdG90eXBlLmdldEJhc2VEYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyQzUzt9O3MucHJvdG90eXBlLmdldERyYXdEYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRhUzt9O3MucHJvdG90eXBlLl8kcDI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJE5MO307cy5wcm90b3R5cGUuXyRvYj1mdW5jdGlvbihhSCl7dGhpcy5fJE5MPWFIO307cy5wcm90b3R5cGUuZ2V0UGFydHNJRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kTkw7fTtzLnByb3RvdHlwZS5fJE1QPWZ1bmN0aW9uKGFIKXt0aGlzLl8kTkw9YUg7fTtmdW5jdGlvbiBhaihhSCl7dGhpcy5fJFZTPW51bGw7dGhpcy5fJGUwPW51bGw7dGhpcy5fJGUwPWFIO31hai5wcm90b3R5cGU9bmV3IFMoKTthai5wcm90b3R5cGUuZ2V0UGFydHNPcGFjaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRWUzt9O2FqLnByb3RvdHlwZS5zZXRQYXJ0c09wYWNpdHk9ZnVuY3Rpb24oYUgpe3RoaXMuXyRWUz1hSDt9O2Z1bmN0aW9uIGFrKGFIKXtpZihqKXtyZXR1cm47fXRoaXMuaWQ9YUg7fWFrLl8kTDc9ZnVuY3Rpb24oKXt6Ll8kMjcoKTtuLl8kMjcoKTtaLl8kMjcoKTtpLl8kMjcoKTt9O2FrLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlkO307ZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZS5fJEYwPWZ1bmN0aW9uKGFIKXt9O2Z1bmN0aW9uIGFuKCl7aWYoail7cmV0dXJuO310aGlzLl8kNFM9bnVsbDt9YW4ucHJvdG90eXBlLl8kMXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJDRTO307YW4ucHJvdG90eXBlLl8kelA9ZnVuY3Rpb24oKXt0aGlzLl8kNFM9bmV3IEFycmF5KCk7fTthbi5wcm90b3R5cGUuXyRGMD1mdW5jdGlvbihhSCl7dGhpcy5fJDRTPWFILl8kblAoKTt9O2FuLnByb3RvdHlwZS5fJEtzPWZ1bmN0aW9uKGFIKXt0aGlzLl8kNFMucHVzaChhSCk7fTtmdW5jdGlvbiBhdShhSCxhSSl7dGhpcy5jYW52YXM9YUg7dGhpcy5jb250ZXh0PWFJO3RoaXMudmlld3BvcnQ9bmV3IEFycmF5KDAsMCxhSC53aWR0aCxhSC5oZWlnaHQpO3RoaXMuXyQ2cj0xO3RoaXMuXyR4UD0wO3RoaXMuXyQzcj0xO3RoaXMuXyR1UD0wO3RoaXMuXyRRbz0tMTt0aGlzLmNhY2hlSW1hZ2VzPXt9O31hdS50cj1uZXcgYW0oKTthdS5fJDUwPW5ldyBhbSgpO2F1Ll8kVGk9bmV3IEFycmF5KDAsMCk7YXUuXyRQaT1uZXcgQXJyYXkoMCwwKTthdS5fJEI9bmV3IEFycmF5KDAsMCk7YXUucHJvdG90eXBlLl8kbFA9ZnVuY3Rpb24oYUksYUssYUosYUgpe3RoaXMudmlld3BvcnQ9bmV3IEFycmF5KGFJLGFLLGFKLGFIKTt9O2F1LnByb3RvdHlwZS5fJGJMPWZ1bmN0aW9uKCl7dGhpcy5jb250ZXh0LnNhdmUoKTt2YXIgYUg9dGhpcy52aWV3cG9ydDtpZihhSCE9bnVsbCl7dGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO3RoaXMuY29udGV4dC5fJExpKGFIWzBdLGFIWzFdLGFIWzJdLGFIWzNdKTt0aGlzLmNvbnRleHQuY2xpcCgpO319O2F1LnByb3RvdHlwZS5fJGVpPWZ1bmN0aW9uKCl7dGhpcy5jb250ZXh0LnJlc3RvcmUoKTt9O2F1LnByb3RvdHlwZS5kcmF3RWxlbWVudHM9ZnVuY3Rpb24oYmMsYm0sYVgsYUosYkEsYU0sYmwsYnope3RyeXtpZihiQSE9dGhpcy5fJFFvKXt0aGlzLl8kUW89YkE7dGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhPWJBO312YXIgYTI9Ym0ubGVuZ3RoO3ZhciBhUD1iYy53aWR0aDt2YXIgYTU9YmMuaGVpZ2h0O3ZhciBiRT10aGlzLmNvbnRleHQ7dmFyIGE3PXRoaXMuXyR4UDt2YXIgYTY9dGhpcy5fJHVQO3ZhciBhMT10aGlzLl8kNnI7dmFyIGFaPXRoaXMuXyQzcjt2YXIgYkQ9YXUudHI7dmFyIGFJPWF1Ll8kVGk7dmFyIGFIPWF1Ll8kUGk7dmFyIGJ1PWF1Ll8kQjtmb3IodmFyIGJ5PTA7Ynk8YTI7YnkrPTMpe2JFLnNhdmUoKTt2YXIgYVc9Ym1bYnldO3ZhciBhVj1ibVtieSsxXTt2YXIgYVQ9Ym1bYnkrMl07dmFyIGFMPWE3K2ExKmFYW2FXKjJdO3ZhciBhSz1hNithWiphWFthVyoyKzFdO3ZhciBicj1hNythMSphWFthVioyXTt2YXIgYnA9YTYrYVoqYVhbYVYqMisxXTt2YXIgYmg9YTcrYTEqYVhbYVQqMl07dmFyIGJmPWE2K2FaKmFYW2FUKjIrMV07aWYoYmwpe2JsLl8kUFMoYUwsYUssYnUpO2FMPWJ1WzBdO2FLPWJ1WzFdO2JsLl8kUFMoYnIsYnAsYnUpO2JyPWJ1WzBdO2JwPWJ1WzFdO2JsLl8kUFMoYmgsYmYsYnUpO2JoPWJ1WzBdO2JmPWJ1WzFdO312YXIgYVM9YVAqYUpbYVcqMl07dmFyIGFRPWE1LWE1KmFKW2FXKjIrMV07dmFyIGJ4PWFQKmFKW2FWKjJdO3ZhciBidz1hNS1hNSphSlthVioyKzFdO3ZhciBiaz1hUCphSlthVCoyXTt2YXIgYmo9YTUtYTUqYUpbYVQqMisxXTt2YXIgYTM9TWF0aC5hdGFuMihidy1hUSxieC1hUyk7dmFyIGEwPU1hdGguYXRhbjIoYnAtYUssYnItYUwpO3ZhciBhTz1ici1hTDt2YXIgYU49YnAtYUs7dmFyIGJpPU1hdGguc3FydChhTyphTythTiphTik7dmFyIGFVPWJ4LWFTO3ZhciBhUj1idy1hUTt2YXIgYnQ9TWF0aC5zcXJ0KGFVKmFVK2FSKmFSKTt2YXIgYnY9YmkvYnQ7YWQuXyRuaShiayxiaixhUyxhUSwoYngtYVMpLChidy1hUSksLShidy1hUSksKGJ4LWFTKSxhSSk7YWQuXyRuaShiaCxiZixhTCxhSywoYnItYUwpLChicC1hSyksLShicC1hSyksKGJyLWFMKSxhSCk7dmFyIGFZPShhSFswXS1hSVswXSkvYUlbMV07dmFyIGJzPU1hdGgubWluKGFTLGJ4LGJrKTt2YXIgYmc9TWF0aC5tYXgoYVMsYngsYmspO3ZhciBicT1NYXRoLm1pbihhUSxidyxiaik7dmFyIGJlPU1hdGgubWF4KGFRLGJ3LGJqKTt2YXIgYm89TWF0aC5mbG9vcihicyk7dmFyIGJiPU1hdGguZmxvb3IoYnEpO3ZhciBhND1NYXRoLmNlaWwoYmcpO3ZhciBiQz1NYXRoLmNlaWwoYmUpO2JELmlkZW50aXR5KCk7YkQudHJhbnNsYXRlKGFMLGFLKTtiRC5yb3RhdGUoYTApO2JELnNjYWxlKDEsYUhbMV0vYUlbMV0pO2JELnNoZWFyKGFZLDApO2JELnNjYWxlKGJ2LGJ2KTtiRC5yb3RhdGUoLWEzKTtiRC50cmFuc2xhdGUoLWFTLC1hUSk7YkQuc2V0Q29udGV4dChiRSk7dmFyIGE4PXRydWU7dmFyIGE5PTEuMjtpZighYU0pe2FNPWE4P2E5OjA7fWlmKFEuSUdOT1JFX0VYUEFORCl7YU09MDt9aWYoUS5VU0VfQ0FDSEVEX1BPTFlHT05fSU1BR0Upe3ZhciBiZD1iei5fJGUwO2JkLmdsX2NhY2hlSW1hZ2U9YmQuZ2xfY2FjaGVJbWFnZXx8e307aWYoIWJkLmdsX2NhY2hlSW1hZ2VbYnldKXt2YXIgYm49YXUuY3JlYXRlQ2FudmFzKGE0LWJvLGJDLWJiKTtRLkRFQlVHX0RBVEEuTERHTF9DQU5WQVNfTUI9US5ERUJVR19EQVRBLkxER0xfQ0FOVkFTX01CfHwwO1EuREVCVUdfREFUQS5MREdMX0NBTlZBU19NQis9KGE0LWJvKSooYkMtYmIpKjQ7dmFyIGJhPWJuLmdldENvbnRleHQoXCIyZFwiKTtiYS50cmFuc2xhdGUoLWJvLC1iYik7YXUuY2xpcChiYSxiRCxhTSxiaSxhUyxhUSxieCxidyxiayxiaixhTCxhSyxicixicCxiaCxiZik7YmEuZHJhd0ltYWdlKGJjLDAsMCk7YmQuZ2xfY2FjaGVJbWFnZVtieV09e2NhY2hlQ2FudmFzOmJuLGNhY2hlQ29udGV4dDpiYX07fWJFLmRyYXdJbWFnZShiZC5nbF9jYWNoZUltYWdlW2J5XVtcImNhY2hlQ2FudmFzXCJdLGJvLGJiKTt9ZWxzZXtpZighUS5JR05PUkVfQ0xJUCl7YXUuY2xpcChiRSxiRCxhTSxiaSxhUyxhUSxieCxidyxiayxiaixhTCxhSyxicixicCxiaCxiZik7fWlmKFEuVVNFX0FESlVTVF9UUkFOU0xBVElPTil7YnM9MDtiZz1hUDticT0wO2JlPWE1O31iRS5kcmF3SW1hZ2UoYmMsYnMsYnEsYmctYnMsYmUtYnEsYnMsYnEsYmctYnMsYmUtYnEpO31iRS5yZXN0b3JlKCk7fX1jYXRjaChiQil7cS5fJFJiKGJCKTt9fTthdS5jbGlwPWZ1bmN0aW9uKGFLLGFKLGFWLGFJLGFNLGFMLGFVLGFULGFRLGFQLGFPLGFOLGFILGFXLGFTLGFSKXtpZihhVj4wLjAyKXthdS5leHBhbmRDbGlwKGFLLGFKLGFWLGFJLGFPLGFOLGFILGFXLGFTLGFSKTt9ZWxzZXthdS5jbGlwV2l0aFRyYW5zZm9ybShhSyxudWxsLGFNLGFMLGFVLGFULGFRLGFQKTt9fTthdS5leHBhbmRDbGlwPWZ1bmN0aW9uKGFWLGJnLGFLLGEzLGFKLGFJLGJlLGJhLGFaLGFYKXt2YXIgYVA9YmUtYUo7dmFyIGFPPWJhLWFJO3ZhciBiaT1hWi1hSjt2YXIgYmg9YVgtYUk7dmFyIGJqPWFQKmJoLWFPKmJpPjA/YUs6LWFLO3ZhciBhTD0tYU87dmFyIGFIPWFQO3ZhciBiYz1hWi1iZTt2YXIgYTg9YVgtYmE7dmFyIGE3PS1hODt2YXIgYTY9YmM7dmFyIGFRPU1hdGguc3FydChiYypiYythOCphOCk7dmFyIGJmPS1iaDt2YXIgYmI9Ymk7dmFyIGEyPU1hdGguc3FydChiaSpiaStiaCpiaCk7dmFyIGJkPWFKLWJqKmFML2EzO3ZhciBhOT1hSS1iaiphSC9hMzt2YXIgYVk9YmUtYmoqYUwvYTM7dmFyIGFXPWJhLWJqKmFIL2EzO3ZhciBhNT1iZS1iaiphNy9hUTt2YXIgYTQ9YmEtYmoqYTYvYVE7dmFyIGFTPWFaLWJqKmE3L2FRO3ZhciBhUj1hWC1iaiphNi9hUTt2YXIgYU49YUorYmoqYmYvYTI7dmFyIGFNPWFJK2JqKmJiL2EyO3ZhciBhMT1hWitiaipiZi9hMjt2YXIgYTA9YVgrYmoqYmIvYTI7dmFyIGFVPWF1Ll8kNTA7dmFyIGFUPWJnLl8kUDIoYVUpO2lmKGFUPT1udWxsKXtyZXR1cm4gZmFsc2U7fWF1LmNsaXBXaXRoVHJhbnNmb3JtKGFWLGFVLGJkLGE5LGFZLGFXLGE1LGE0LGFTLGFSLGExLGEwLGFOLGFNKTtyZXR1cm4gdHJ1ZTt9O2F1LmNsaXBXaXRoVHJhbnNmb3JtPWZ1bmN0aW9uKGFILGFJLGFTLGFOLGFRLGFLLGFQLGFKKXtpZihhcmd1bWVudHMubGVuZ3RoPCgxKzMqMikpe3EuXyRsaShcImVyciA6IEBMREdMLmNsaXAoKVwiKTtyZXR1cm47fWlmKCEoYXJndW1lbnRzWzFdIGluc3RhbmNlb2YgYW0pKXtxLl8kbGkoXCJlcnIgOiBhWzBdIGlzIF8kNiBMRFRyYW5zZm9ybSBATERHTC5jbGlwKClcIik7cmV0dXJuO312YXIgYU09YXUuXyRCO3ZhciBhTz1hSTt2YXIgYVI9YXJndW1lbnRzO2FILmJlZ2luUGF0aCgpO2lmKGFPKXthTy5fJFBTKGFSWzJdLGFSWzNdLGFNKTthSC5tb3ZlVG8oYU1bMF0sYU1bMV0pO2Zvcih2YXIgYUw9NDthTDxhUi5sZW5ndGg7YUwrPTIpe2FPLl8kUFMoYVJbYUxdLGFSW2FMKzFdLGFNKTthSC5saW5lVG8oYU1bMF0sYU1bMV0pO319ZWxzZXthSC5tb3ZlVG8oYVJbMl0sYVJbM10pO2Zvcih2YXIgYUw9NDthTDxhUi5sZW5ndGg7YUwrPTIpe2FILmxpbmVUbyhhUlthTF0sYVJbYUwrMV0pO319YUguY2xpcCgpO307YXUuY3JlYXRlQ2FudmFzPWZ1bmN0aW9uKGFILGFKKXt2YXIgYUk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTthSS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLGFIKTthSS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIixhSik7aWYoIWFJKXtxLl8kbGkoXCJlcnIgOiBcIithSSk7fXJldHVybiBhSTt9O2F1LmR1bXBWYWx1ZXM9ZnVuY3Rpb24oKXt2YXIgYUk9XCJcIjtmb3IodmFyIGFIPTA7YUg8YXJndW1lbnRzLmxlbmd0aDthSCsrKXthSSs9XCJbXCIrYUgrXCJdPSBcIithcmd1bWVudHNbYUhdLnRvRml4ZWQoMykrXCIgLCBcIjt9Y29uc29sZS5sb2coYUkpO307ZnVuY3Rpb24gZigpe2lmKGope3JldHVybjt9dGhpcy5fJFRUPW51bGw7dGhpcy5fJExUPW51bGw7dGhpcy5fJEZTPW51bGw7dGhpcy5fJHdMPW51bGw7fWYucHJvdG90eXBlLl8kRjA9ZnVuY3Rpb24oYUgpe3RoaXMuXyRUVD1hSC5fJF9UKCk7dGhpcy5fJExUPWFILl8kX1QoKTt0aGlzLl8kRlM9YUguXyRfVCgpO3RoaXMuXyR3TD1hSC5fJG5QKCk7fTtmLnByb3RvdHlwZS5nZXRNaW5WYWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kVFQ7fTtmLnByb3RvdHlwZS5nZXRNYXhWYWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kTFQ7fTtmLnByb3RvdHlwZS5nZXREZWZhdWx0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJEZTO307Zi5wcm90b3R5cGUuZ2V0UGFyYW1JRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kd0w7fTtmdW5jdGlvbiBCKGFIKXtpZihqKXtyZXR1cm47fXRoaXMuXyRlMD1udWxsO3RoaXMuXyRJUD1udWxsO3RoaXMuXyRKUz1mYWxzZTt0aGlzLl8kQVQ9dHJ1ZTt0aGlzLl8kZTA9YUg7dGhpcy50b3RhbFNjYWxlPTE7dGhpcy5fJDdzPTE7dGhpcy50b3RhbE9wYWNpdHk9MTt9Qi5wcm90b3R5cGUuXyR5bz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kQVQmJiF0aGlzLl8kSlM7fTtCLnByb3RvdHlwZS5fJGhTPWZ1bmN0aW9uKGFIKXt0aGlzLl8kQVQ9YUg7fTtCLnByb3RvdHlwZS5fJEdUPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRlMDt9O0IucHJvdG90eXBlLl8kbDI9ZnVuY3Rpb24oYUgpe3RoaXMuXyRJUD1hSDt9O0IucHJvdG90eXBlLmdldFBhcnRzSW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJElQO307Qi5wcm90b3R5cGUuXyR4Mj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kSlM7fTtCLnByb3RvdHlwZS5fJEliPWZ1bmN0aW9uKGFIKXt0aGlzLl8kSlM9YUg7fTtCLnByb3RvdHlwZS5nZXRUb3RhbFNjYWxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG90YWxTY2FsZTt9O0IucHJvdG90eXBlLnNldFRvdGFsU2NhbGVfbm90Rm9yQ2xpZW50PWZ1bmN0aW9uKGFIKXt0aGlzLnRvdGFsU2NhbGU9YUg7fTtCLnByb3RvdHlwZS5nZXRJbnRlcnBvbGF0ZWRPcGFjaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyQ3czt9O0IucHJvdG90eXBlLnNldEludGVycG9sYXRlZE9wYWNpdHk9ZnVuY3Rpb24oYUgpe3RoaXMuXyQ3cz1hSDt9O0IucHJvdG90eXBlLmdldFRvdGFsT3BhY2l0eT1mdW5jdGlvbihhSCl7cmV0dXJuIHRoaXMudG90YWxPcGFjaXR5O307Qi5wcm90b3R5cGUuc2V0VG90YWxPcGFjaXR5PWZ1bmN0aW9uKGFIKXt0aGlzLnRvdGFsT3BhY2l0eT1hSDt9O2Z1bmN0aW9uIFEoKXt9US5fJDJzPVwiMi4xLjAwXzFcIjtRLl8kS3I9MjAxMDAxMDAwO1EuXyRzUD10cnVlO1EuXyRzbz10cnVlO1EuXyRjYj1mYWxzZTtRLl8kM1Q9dHJ1ZTtRLl8kVHM9dHJ1ZTtRLl8kZmI9dHJ1ZTtRLl8kdHM9dHJ1ZTtRLkwyRF9ERUZPUk1FUl9FWFRFTkQ9dHJ1ZTtRLl8kV2I9ZmFsc2U7US5fJHlyPWZhbHNlO1EuXyRacz1mYWxzZTtRLkwyRF9OT19FUlJPUj0wO1EuXyRpNz0xMDAwO1EuXyQ5cz0xMDAxO1EuXyRlcz0xMTAwO1EuXyRyNz0yMDAwO1EuXyQwNz0yMDAxO1EuXyRiNz0yMDAyO1EuXyRINz00MDAwO1EuTDJEX0NPTE9SX0JMRU5EX01PREVfTVVMVD0wO1EuTDJEX0NPTE9SX0JMRU5EX01PREVfQUREPTE7US5MMkRfQ09MT1JfQkxFTkRfTU9ERV9JTlRFUlBPTEFURT0yO1EuXyQ2Yj10cnVlO1EuXyRjVD0wO1EuY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZT0yNTY7US5nbENvbnRleHQ9bmV3IEFycmF5KCk7US5mcmFtZUJ1ZmZlcnM9bmV3IEFycmF5KCk7US5mVGV4dHVyZT1uZXcgQXJyYXkoKTtRLklHTk9SRV9DTElQPWZhbHNlO1EuSUdOT1JFX0VYUEFORD1mYWxzZTtRLkVYUEFORF9XPTI7US5VU0VfQURKVVNUX1RSQU5TTEFUSU9OPXRydWU7US5VU0VfQ0FOVkFTX1RSQU5TRk9STT10cnVlO1EuVVNFX0NBQ0hFRF9QT0xZR09OX0lNQUdFPWZhbHNlO1EuREVCVUdfREFUQT17fTtRLlBST0ZJTEVfSU9TX1NQRUVEPXtQUk9GSUxFX05BTUU6XCJpT1MgU3BlZWRcIixVU0VfQURKVVNUX1RSQU5TTEFUSU9OOnRydWUsVVNFX0NBQ0hFRF9QT0xZR09OX0lNQUdFOnRydWUsRVhQQU5EX1c6NH07US5QUk9GSUxFX0lPU19RVUFMSVRZPXtQUk9GSUxFX05BTUU6XCJpT1MgSGlRXCIsVVNFX0FESlVTVF9UUkFOU0xBVElPTjp0cnVlLFVTRV9DQUNIRURfUE9MWUdPTl9JTUFHRTpmYWxzZSxFWFBBTkRfVzoyfTtRLlBST0ZJTEVfSU9TX0RFRkFVTFQ9US5QUk9GSUxFX0lPU19RVUFMSVRZO1EuUFJPRklMRV9BTkRST0lEPXtQUk9GSUxFX05BTUU6XCJBbmRyb2lkXCIsVVNFX0FESlVTVF9UUkFOU0xBVElPTjpmYWxzZSxVU0VfQ0FDSEVEX1BPTFlHT05fSU1BR0U6ZmFsc2UsRVhQQU5EX1c6Mn07US5QUk9GSUxFX0RFU0tUT1A9e1BST0ZJTEVfTkFNRTpcIkRlc2t0b3BcIixVU0VfQURKVVNUX1RSQU5TTEFUSU9OOmZhbHNlLFVTRV9DQUNIRURfUE9MWUdPTl9JTUFHRTpmYWxzZSxFWFBBTkRfVzoyfTtRLmluaXRQcm9maWxlPWZ1bmN0aW9uKCl7aWYoci5pc0lPUygpKXtRLnNldHVwUHJvZmlsZShRLlBST0ZJTEVfSU9TX0RFRkFVTFQpO31lbHNle2lmKHIuaXNBbmRyb2lkKCkpe1Euc2V0dXBQcm9maWxlKFEuUFJPRklMRV9BTkRST0lEKTt9ZWxzZXtRLnNldHVwUHJvZmlsZShRLlBST0ZJTEVfREVTS1RPUCk7fX19O1Euc2V0dXBQcm9maWxlPWZ1bmN0aW9uKGFJLGFKKXtpZih0eXBlb2YgYUk9PVwibnVtYmVyXCIpe3N3aXRjaChhSSl7Y2FzZSA5OTAxOmFJPVEuUFJPRklMRV9JT1NfU1BFRUQ7YnJlYWs7Y2FzZSA5OTAyOmFJPVEuUFJPRklMRV9JT1NfUVVBTElUWTticmVhaztjYXNlIDk5MDM6YUk9US5QUk9GSUxFX0lPU19ERUZBVUxUO2JyZWFrO2Nhc2UgOTkwNDphST1RLlBST0ZJTEVfQU5EUk9JRDticmVhaztjYXNlIDk5MDU6YUk9US5QUk9GSUxFX0RFU0tUT1A7YnJlYWs7ZGVmYXVsdDphbGVydChcInByb2ZpbGUgXyQ2IF8kVWkgOiBcIithSSk7YnJlYWs7fX1pZihhcmd1bWVudHMubGVuZ3RoPDIpe2FKPXRydWU7fWlmKGFKKXtjb25zb2xlLmxvZyhcInByb2ZpbGUgOiBcIithSS5QUk9GSUxFX05BTUUpO31mb3IodmFyIGFIIGluIGFJKXtRW2FIXT1hSVthSF07aWYoYUope2NvbnNvbGUubG9nKFwiICBbXCIrYUgrXCJdID0gXCIrYUlbYUhdKTt9fX07US5pbml0PWZ1bmN0aW9uKCl7aWYoUS5fJDZiKXtjb25zb2xlLmxvZyhcIkxpdmUyRCAlc1wiLFEuXyQycyk7US5fJDZiPWZhbHNlO3ZhciBhSD1mYWxzZTthSD10cnVlO1EuaW5pdFByb2ZpbGUoKTt9fTtRLmdldFZlcnNpb25TdHI9ZnVuY3Rpb24oKXtyZXR1cm4gUS5fJDJzO307US5nZXRWZXJzaW9uTm89ZnVuY3Rpb24oKXtyZXR1cm4gUS5fJEtyO307US5fJHNUPWZ1bmN0aW9uKGFIKXtRLl8kY1Q9YUg7fTtRLmdldEVycm9yPWZ1bmN0aW9uKCl7dmFyIGFIPVEuXyRjVDtRLl8kY1Q9MDtyZXR1cm4gYUg7fTtRLmRpc3Bvc2U9ZnVuY3Rpb24oKXtRLmdsQ29udGV4dD1bXTtRLmZyYW1lQnVmZmVycz1bXTtRLmZUZXh0dXJlPVtdO307US5zZXRHTD1mdW5jdGlvbihhSixhSSl7dmFyIGFIPWFJfHwwO1EuZ2xDb250ZXh0W2FIXT1hSjt9O1EuZ2V0R0w9ZnVuY3Rpb24oYUgpe3JldHVybiBRLmdsQ29udGV4dFthSF07fTtRLnNldENsaXBwaW5nTWFza0J1ZmZlclNpemU9ZnVuY3Rpb24oYUgpe1EuY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZT1hSDt9O1EuZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZT1mdW5jdGlvbigpe3JldHVybiBRLmNsaXBwaW5nTWFza0J1ZmZlclNpemU7fTtRLmRlbGV0ZUJ1ZmZlcj1mdW5jdGlvbihhSSl7dmFyIGFIPVEuZ2V0R0woYUkpO2FILmRlbGV0ZUZyYW1lYnVmZmVyKFEuZnJhbWVCdWZmZXJzW2FJXS5mcmFtZWJ1ZmZlcik7ZGVsZXRlIFEuZnJhbWVCdWZmZXJzW2FJXTtkZWxldGUgUS5nbENvbnRleHRbYUldO307ZnVuY3Rpb24gQSgpe31BLl8kcjI9ZnVuY3Rpb24oYUgpe2lmKGFIPDApe3JldHVybiAwO31lbHNle2lmKGFIPjEpe3JldHVybiAxO319cmV0dXJuKDAuNS0wLjUqTWF0aC5jb3MoYUgqYUMuUElfRikpO307ZnVuY3Rpb24gSihhSCl7aWYoail7cmV0dXJuO310aGlzLl8kaWI9YUg7fUouXyRmcj0tMTtKLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kaWI7fTtmdW5jdGlvbiBiKCl7aWYoail7cmV0dXJuO31hLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuXyRMUD0tMTt0aGlzLl8kZDA9MDt0aGlzLl8kWW89MDt0aGlzLl8kSlA9bnVsbDt0aGlzLl8kNVA9bnVsbDt0aGlzLl8kQlA9bnVsbDt0aGlzLl8kRW89bnVsbDt0aGlzLl8kUWk9bnVsbDt0aGlzLl8kNnM9Yi5fJG1zO3RoaXMuY3VsbGluZz10cnVlO3RoaXMuZ2xfY2FjaGVJbWFnZT1udWxsO3RoaXMuaW5zdGFuY2VObz1iLl8kNDIrKzt9Yi5wcm90b3R5cGU9bmV3IGEoKTtiLl8kNDI9MDtiLl8kT3M9MzA7Yi5fJG1zPTA7Yi5fJG5zPTE7Yi5fJF9zPTI7Yi5fJGdUPW5ldyBBcnJheSgpO2IucHJvdG90eXBlLl8kX1M9ZnVuY3Rpb24oYUgpe3RoaXMuXyRMUD1hSDt9O2IucHJvdG90eXBlLmdldFRleHR1cmVObz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kTFA7fTtiLnByb3RvdHlwZS5fJFpMPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRRaTt9O2IucHJvdG90eXBlLl8kSDI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJEpQO307Yi5wcm90b3R5cGUuZ2V0TnVtUG9pbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRkMDt9O2IucHJvdG90eXBlLmdldFR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5fJHdiO307Yi5wcm90b3R5cGUuXyRCMj1mdW5jdGlvbihhTCxhSCxhTyl7dmFyIGFNPWFIO3ZhciBhTj0oYU0uXyRociE9bnVsbCk/YU0uXyRocjphTS5fJENyO3ZhciBhSz1hdy5fJGRvO3N3aXRjaChhSyl7ZGVmYXVsdDpjYXNlIGF3Ll8kTXM6dGhyb3cgbmV3IEVycm9yKFwiXyRMIF8kcm8gXCIpO2Nhc2UgYXcuXyRRczpmb3IodmFyIGFKPXRoaXMuXyRkMC0xO2FKPj0wOy0tYUope3ZhciBhST1hSiphdy5fJE5vO2FOW2FJKzRdPWFPO31icmVhazt9fTtiLnByb3RvdHlwZS5fJHpQPWZ1bmN0aW9uKCl7dGhpcy5fJEdTPW5ldyBnKCk7dGhpcy5fJEdTLl8kelAoKTt9O2IucHJvdG90eXBlLl8kRjA9ZnVuY3Rpb24oYUspe2EucHJvdG90eXBlLl8kRjAuY2FsbCh0aGlzLGFLKTt0aGlzLl8kTFA9YUsuXyQ2TCgpO3RoaXMuXyRkMD1hSy5fJDZMKCk7dGhpcy5fJFlvPWFLLl8kNkwoKTt2YXIgYUg9YUsuXyRuUCgpO3RoaXMuXyRCUD1uZXcgSW50MTZBcnJheSh0aGlzLl8kWW8qMyk7Zm9yKHZhciBhSj10aGlzLl8kWW8qMy0xO2FKPj0wOy0tYUope3RoaXMuXyRCUFthSl09YUhbYUpdO310aGlzLl8kRW89YUsuXyRuUCgpO3RoaXMuXyRRaT1hSy5fJG5QKCk7aWYoYUsuZ2V0Rm9ybWF0VmVyc2lvbigpPj1heS5fJHM3KXt0aGlzLl8kSlA9YUsuXyQ2TCgpO2lmKHRoaXMuXyRKUCE9MCl7aWYoKHRoaXMuXyRKUCYxKSE9MCl7dmFyIGFJPWFLLl8kNkwoKTtpZih0aGlzLl8kNVA9PW51bGwpe3RoaXMuXyQ1UD1uZXcgT2JqZWN0KCk7fXRoaXMuXyQ1UC5fJEhiPXBhcnNlSW50KGFJKTt9aWYoKHRoaXMuXyRKUCZiLl8kT3MpIT0wKXt0aGlzLl8kNnM9KHRoaXMuXyRKUCZiLl8kT3MpPj4xO31lbHNle3RoaXMuXyQ2cz1iLl8kbXM7fWlmKCh0aGlzLl8kSlAmMzIpIT0wKXt0aGlzLmN1bGxpbmc9ZmFsc2U7fX19ZWxzZXt0aGlzLl8kSlA9MDt9fTtiLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGFMKXt2YXIgYU49bmV3IGFnKHRoaXMpO3ZhciBhST10aGlzLl8kZDAqYXcuXyRObzt2YXIgYUg9dGhpcy5fJDMyKCk7aWYoYU4uXyRDciE9bnVsbCl7YU4uXyRDcj1udWxsO31hTi5fJENyPW5ldyBGbG9hdDMyQXJyYXkoYUkpO2lmKGFOLl8kaHIhPW51bGwpe2FOLl8kaHI9bnVsbDt9YU4uXyRocj1hSD9uZXcgRmxvYXQzMkFycmF5KGFJKTpudWxsO3ZhciBhTT1hdy5fJGRvO3N3aXRjaChhTSl7ZGVmYXVsdDpjYXNlIGF3Ll8kTXM6aWYoYXcuXyRMcyl7Zm9yKHZhciBhSj10aGlzLl8kZDAtMTthSj49MDstLWFKKXt2YXIgYU89YUo8PDE7dGhpcy5fJFFpW2FPKzFdPTEtdGhpcy5fJFFpW2FPKzFdO319YnJlYWs7Y2FzZSBhdy5fJFFzOmZvcih2YXIgYUo9dGhpcy5fJGQwLTE7YUo+PTA7LS1hSil7dmFyIGFPPWFKPDwxO3ZhciBhSz1hSiphdy5fJE5vO3ZhciBhUT10aGlzLl8kUWlbYU9dO3ZhciBhUD10aGlzLl8kUWlbYU8rMV07YU4uXyRDclthS109YVE7YU4uXyRDclthSysxXT1hUDthTi5fJENyW2FLKzRdPTA7aWYoYUgpe2FOLl8kaHJbYUtdPWFRO2FOLl8kaHJbYUsrMV09YVA7YU4uXyRoclthSys0XT0wO319YnJlYWs7fXJldHVybiBhTjt9O2IucHJvdG90eXBlLl8kTnI9ZnVuY3Rpb24oYUosYUgpe3ZhciBhSz1hSDtpZighKCh0aGlzPT1hSy5fJEdUKCkpKSl7Y29uc29sZS5sb2coXCIjIyMgYXNzZXJ0ISEgIyMjIFwiKTt9aWYoIXRoaXMuXyRHUy5fJFVyKGFKKSl7cmV0dXJuO31hLnByb3RvdHlwZS5fJE5yLmNhbGwodGhpcyxhSixhSyk7aWYoYUsuXyRJU1swXSl7cmV0dXJuO312YXIgYUk9Yi5fJGdUO2FJWzBdPWZhbHNlO2FHLl8kVnIoYUosdGhpcy5fJEdTLGFJLHRoaXMuXyRkMCx0aGlzLl8kRW8sYUsuXyRDcixhdy5fJGkyLGF3Ll8kTm8pO307Yi5wcm90b3R5cGUuXyQyYj1mdW5jdGlvbihhSyxhSSl7dHJ5e2lmKCEoKHRoaXM9PWFJLl8kR1QoKSkpKXtjb25zb2xlLmxvZyhcIiMjIyBhc3NlcnQhISAjIyMgXCIpO312YXIgYUw9ZmFsc2U7aWYoYUkuXyRJU1swXSl7YUw9dHJ1ZTt9dmFyIGFNPWFJO2lmKCFhTCl7YS5wcm90b3R5cGUuXyQyYi5jYWxsKHRoaXMsYUspO2lmKHRoaXMuXyQzMigpKXt2YXIgYUg9dGhpcy5nZXRUYXJnZXRCYXNlRGF0YUlEKCk7aWYoYU0uXyQ4cj09YS5fJHVyKXthTS5fJDhyPWFLLmdldEJhc2VEYXRhSW5kZXgoYUgpO31pZihhTS5fJDhyPDApe2lmKFEuXyRzbyl7cS5fJGxpKFwiXyRMIF8kMFAgXyRHIDo6ICVzXCIsYUgpO319ZWxzZXt2YXIgYU89YUsuZ2V0QmFzZURhdGEoYU0uXyQ4cik7dmFyIGFKPWFLLl8kcTIoYU0uXyQ4cik7aWYoYU8hPW51bGwmJiFhSi5fJHgyKCkpe2FPLl8kbmIoYUssYUosYU0uXyRDcixhTS5fJGhyLHRoaXMuXyRkMCxhdy5fJGkyLGF3Ll8kTm8pO2FNLl8kQVQ9dHJ1ZTt9ZWxzZXthTS5fJEFUPWZhbHNlO31hTS5iYXNlT3BhY2l0eT1hSi5nZXRUb3RhbE9wYWNpdHkoKTt9fX19Y2F0Y2goYU4pe3Rocm93IGFOO319O2IucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oYU4sYUssYUkpe2lmKCEoKHRoaXM9PWFJLl8kR1QoKSkpKXtjb25zb2xlLmxvZyhcIiMjIyBhc3NlcnQhISAjIyMgXCIpO31pZihhSS5fJElTWzBdKXtyZXR1cm47fXZhciBhTD1hSTt2YXIgYUo9dGhpcy5fJExQO2lmKGFKPDApe2FKPTE7fXZhciBhSD10aGlzLmdldE9wYWNpdHkoYUssYUwpKmFJLl8kVlMqYUkuYmFzZU9wYWNpdHk7dmFyIGFNPShhTC5fJGhyIT1udWxsKT9hTC5fJGhyOmFMLl8kQ3I7YU4uc2V0Q2xpcEJ1ZlByZV9jbGlwQ29udGV4dEZvckRyYXcoYUkuY2xpcEJ1ZlByZV9jbGlwQ29udGV4dCk7YU4uXyRXUCh0aGlzLmN1bGxpbmcpO2FOLl8kVW8oYUosMyp0aGlzLl8kWW8sdGhpcy5fJEJQLGFNLHRoaXMuXyRRaSxhSCx0aGlzLl8kNnMsYUwpO307Yi5wcm90b3R5cGUuZHVtcD1mdW5jdGlvbigpe2NvbnNvbGUubG9nKFwiICBfJHlpKCAlZCApICwgXyRkMCggJWQgKSAsIF8kWW8oICVkICkgXFxuXCIsdGhpcy5fJExQLHRoaXMuXyRkMCx0aGlzLl8kWW8pO2NvbnNvbGUubG9nKFwiICBfJE9pIF8kZGkgPSB7IFwiKTtmb3IodmFyIGFKPTA7YUo8dGhpcy5fJEJQLmxlbmd0aDthSisrKXtjb25zb2xlLmxvZyhcIiU1ZCAsXCIsdGhpcy5fJEJQW2FKXSk7fWNvbnNvbGUubG9nKFwiXFxuICBfJDVpIF8kMzBcIik7Zm9yKHZhciBhSj0wO2FKPHRoaXMuXyRFby5sZW5ndGg7YUorKyl7Y29uc29sZS5sb2coXCJcXG4gICAgXyQzMFslZF0gPSBcIixhSik7dmFyIGFIPXRoaXMuXyRFb1thSl07Zm9yKHZhciBhST0wO2FJPGFILmxlbmd0aDthSSsrKXtjb25zb2xlLmxvZyhcIiU2LjJmLCBcIixhSFthSV0pO319Y29uc29sZS5sb2coXCJcXG5cIik7fTtiLnByb3RvdHlwZS5fJDcyPWZ1bmN0aW9uKGFIKXtpZih0aGlzLl8kNVA9PW51bGwpe3JldHVybiBudWxsO31yZXR1cm4gdGhpcy5fJDVQW2FIXTt9O2IucHJvdG90eXBlLmdldEluZGV4QXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJEJQO307ZnVuY3Rpb24gYWcoYUgpe2FCLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYUgpO3RoaXMuXyQ4cj1hLl8kdXI7dGhpcy5fJENyPW51bGw7dGhpcy5fJGhyPW51bGw7fWFnLnByb3RvdHlwZT1uZXcgYUIoKTthZy5wcm90b3R5cGUuZ2V0VHJhbnNmb3JtZWRQb2ludHM9ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5fJGhyIT1udWxsKT90aGlzLl8kaHI6dGhpcy5fJENyO307ZnVuY3Rpb24gaygpe2lmKGope3JldHVybjt9dGhpcy54PW51bGw7dGhpcy55PW51bGw7fWsucHJvdG90eXBlLl8kSFQ9ZnVuY3Rpb24oYUgpe3RoaXMueD1hSC54O3RoaXMueT1hSC55O307ay5wcm90b3R5cGUuXyRIVD1mdW5jdGlvbihhSCxhSSl7dGhpcy54PWFIO3RoaXMueT1hSTt9O2Z1bmN0aW9uIGwoYUgpe2lmKGope3JldHVybjt9YWEucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5kcmF3UGFyYW1XZWJHTD1uZXcgQyhhSCk7dGhpcy5kcmF3UGFyYW1XZWJHTC5zZXRHTChRLmdldEdMKGFIKSk7fWwucHJvdG90eXBlPW5ldyBhYSgpO2wubG9hZE1vZGVsPWZ1bmN0aW9uKGFJKXt2YXIgYUg9bmV3IGwoKTthYS5fJDYyKGFILGFJKTtyZXR1cm4gYUg7fTtsLmxvYWRNb2RlbD1mdW5jdGlvbihhSSxhSyl7dmFyIGFKPWFLfHwwO3ZhciBhSD1uZXcgbChhSik7YWEuXyQ2MihhSCxhSSk7cmV0dXJuIGFIO307bC5fJHRvPWZ1bmN0aW9uKCl7dmFyIGFIPW5ldyBsKCk7cmV0dXJuIGFIO307bC5fJGVyPWZ1bmN0aW9uKGFNKXt2YXIgYUo9bmV3IF8kNShcIi4uL18kX3IvXyR0MC9fJFJpL18kX1AuXyRkXCIpO2lmKGFKLmV4aXN0cygpPT1mYWxzZSl7dGhyb3cgbmV3IF8kbHMoXCJfJHQwIF8kXyBfJDYgXyRVaSA6OiBcIithSi5fJFBMKCkpO312YXIgYUg9W1wiLi4vXyRfci9fJHQwL18kUmkvXyRfUC41MTIvXyRDUC5fJDFcIixcIi4uL18kX3IvXyR0MC9fJFJpL18kX1AuNTEyL18kdlAuXyQxXCIsXCIuLi9fJF9yL18kdDAvXyRSaS9fJF9QLjUxMi9fJEVQLl8kMVwiLFwiLi4vXyRfci9fJHQwL18kUmkvXyRfUC41MTIvXyRwUC5fJDFcIl07dmFyIGFLPWwubG9hZE1vZGVsKGFKLl8kM2IoKSk7Zm9yKHZhciBhST0wO2FJPGFILmxlbmd0aDthSSsrKXt2YXIgYUw9bmV3IF8kNShhSFthSV0pO2lmKGFMLmV4aXN0cygpPT1mYWxzZSl7dGhyb3cgbmV3IF8kbHMoXCJfJHQwIF8kXyBfJDYgXyRVaSA6OiBcIithTC5fJFBMKCkpO31hSy5zZXRUZXh0dXJlKGFJLF8kbkwuXyRfbyhhTSxhTC5fJDNiKCkpKTt9cmV0dXJuIGFLO307bC5wcm90b3R5cGUuc2V0R0w9ZnVuY3Rpb24oYUgpe1Euc2V0R0woYUgpO307bC5wcm90b3R5cGUuc2V0VHJhbnNmb3JtPWZ1bmN0aW9uKGFIKXt0aGlzLmRyYXdQYXJhbVdlYkdMLnNldFRyYW5zZm9ybShhSCk7fTtsLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl8kNVMudXBkYXRlKCk7dGhpcy5fJDVTLnByZURyYXcodGhpcy5kcmF3UGFyYW1XZWJHTCk7fTtsLnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKCl7dGhpcy5fJDVTLmRyYXcodGhpcy5kcmF3UGFyYW1XZWJHTCk7fTtsLnByb3RvdHlwZS5fJEsyPWZ1bmN0aW9uKCl7dGhpcy5kcmF3UGFyYW1XZWJHTC5fJEsyKCk7fTtsLnByb3RvdHlwZS5zZXRUZXh0dXJlPWZ1bmN0aW9uKGFJLGFIKXtpZih0aGlzLmRyYXdQYXJhbVdlYkdMPT1udWxsKXtxLl8kbGkoXCJfJFlpIGZvciBRVCBfJGtpIC8gXyRYUygpIGlzIF8kNiBfJHVpISFcIik7fXRoaXMuZHJhd1BhcmFtV2ViR0wuc2V0VGV4dHVyZShhSSxhSCk7fTtsLnByb3RvdHlwZS5zZXRUZXh0dXJlPWZ1bmN0aW9uKGFJLGFIKXtpZih0aGlzLmRyYXdQYXJhbVdlYkdMPT1udWxsKXtxLl8kbGkoXCJfJFlpIGZvciBRVCBfJGtpIC8gXyRYUygpIGlzIF8kNiBfJHVpISFcIik7fXRoaXMuZHJhd1BhcmFtV2ViR0wuc2V0VGV4dHVyZShhSSxhSCk7fTtsLnByb3RvdHlwZS5fJFJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZHJhd1BhcmFtV2ViR0wuXyRScygpO307bC5wcm90b3R5cGUuXyREcz1mdW5jdGlvbihhSCl7dGhpcy5kcmF3UGFyYW1XZWJHTC5fJERzKGFIKTt9O2wucHJvdG90eXBlLmdldERyYXdQYXJhbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRyYXdQYXJhbVdlYkdMO307bC5wcm90b3R5cGUuc2V0TWF0cml4PWZ1bmN0aW9uKGFIKXt0aGlzLmRyYXdQYXJhbVdlYkdMLnNldE1hdHJpeChhSCk7fTtsLnByb3RvdHlwZS5zZXRQcmVtdWx0aXBsaWVkQWxwaGE9ZnVuY3Rpb24oYUgpe3RoaXMuZHJhd1BhcmFtV2ViR0wuc2V0UHJlbXVsdGlwbGllZEFscGhhKGFIKTt9O2wucHJvdG90eXBlLmlzUHJlbXVsdGlwbGllZEFscGhhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZHJhd1BhcmFtV2ViR0wuaXNQcmVtdWx0aXBsaWVkQWxwaGEoKTt9O2wucHJvdG90eXBlLnNldEFuaXNvdHJvcHk9ZnVuY3Rpb24oYUgpe3RoaXMuZHJhd1BhcmFtV2ViR0wuc2V0QW5pc290cm9weShhSCk7fTtsLnByb3RvdHlwZS5nZXRBbmlzb3Ryb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZHJhd1BhcmFtV2ViR0wuZ2V0QW5pc290cm9weSgpO307ZnVuY3Rpb24gVigpe2lmKGope3JldHVybjt9dGhpcy5tb3Rpb25zPW51bGw7dGhpcy5fJGViPWZhbHNlO3RoaXMubW90aW9ucz1uZXcgQXJyYXkoKTt9Vi5wcm90b3R5cGUuXyR0Yj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1vdGlvbnM7fTtWLnByb3RvdHlwZS5zdGFydE1vdGlvbj1mdW5jdGlvbihhSixhSSl7dmFyIGFNPW51bGw7dmFyIGFMPW51bGw7dmFyIGFIPXRoaXMubW90aW9ucy5sZW5ndGg7Zm9yKHZhciBhSz0wO2FLPGFIOysrYUspe2FMPXRoaXMubW90aW9uc1thS107aWYoYUw9PW51bGwpe2NvbnRpbnVlO31hTC5fJHFTKGFMLl8kdzAuZ2V0RmFkZU91dCgpKTtpZih0aGlzLl8kZWIpe3EuXyRKaShcIk1vdGlvblF1ZXVlTWFuYWdlcltzaXplOiUyZF0tPnN0YXJ0TW90aW9uKCkgLyBzdGFydCBfJEsgXyQzIChtJWQpXFxuXCIsYUgsYUwuXyRzcik7fX1pZihhSj09bnVsbCl7cmV0dXJuIC0xO31hTD1uZXcgTSgpO2FMLl8kdzA9YUo7dGhpcy5tb3Rpb25zLnB1c2goYUwpO3ZhciBhTj1hTC5fJHNyO2lmKHRoaXMuXyRlYil7cS5fJEppKFwiTW90aW9uUXVldWVNYW5hZ2VyW3NpemU6JTJkXS0+c3RhcnRNb3Rpb24oKSAvIG5ldyBfJHcwIChtJWQpXFxuXCIsYUgsYU4pO31yZXR1cm4gYU47fTtWLnByb3RvdHlwZS51cGRhdGVQYXJhbT1mdW5jdGlvbihhSil7dHJ5e3ZhciBhST1mYWxzZTtmb3IodmFyIGFLPTA7YUs8dGhpcy5tb3Rpb25zLmxlbmd0aDthSysrKXt2YXIgYUw9dGhpcy5tb3Rpb25zW2FLXTtpZihhTD09bnVsbCl7dGhpcy5tb3Rpb25zLnNwbGljZShhSywxKTthSy0tO2NvbnRpbnVlO312YXIgYUg9YUwuXyR3MDtpZihhSD09bnVsbCl7dGhpcy5tb3Rpb25zPXRoaXMubW90aW9ucy5zcGxpY2UoYUssMSk7YUstLTtjb250aW51ZTt9YUgudXBkYXRlUGFyYW0oYUosYUwpO2FJPXRydWU7aWYoYUwuaXNGaW5pc2hlZCgpKXtpZih0aGlzLl8kZWIpe3EuXyRKaShcIk1vdGlvblF1ZXVlTWFuYWdlcltzaXplOiUyZF0tPnVwZGF0ZVBhcmFtKCkgLyBfJFQwIF8kdzAgKG0lZClcXG5cIix0aGlzLm1vdGlvbnMubGVuZ3RoLTEsYUwuXyRzcik7fXRoaXMubW90aW9ucy5zcGxpY2UoYUssMSk7YUstLTt9ZWxzZXt9fXJldHVybiBhSTt9Y2F0Y2goYU0pe3EuXyRsaShhTSk7cmV0dXJuIHRydWU7fX07Vi5wcm90b3R5cGUuaXNGaW5pc2hlZD1mdW5jdGlvbihhSyl7aWYoYXJndW1lbnRzLmxlbmd0aD49MSl7Zm9yKHZhciBhST0wO2FJPHRoaXMubW90aW9ucy5sZW5ndGg7YUkrKyl7dmFyIGFKPXRoaXMubW90aW9uc1thSV07aWYoYUo9PW51bGwpe2NvbnRpbnVlO31pZihhSi5fJHNyPT1hSyYmIWFKLmlzRmluaXNoZWQoKSl7cmV0dXJuIGZhbHNlO319cmV0dXJuIHRydWU7fWVsc2V7Zm9yKHZhciBhST0wO2FJPHRoaXMubW90aW9ucy5sZW5ndGg7YUkrKyl7dmFyIGFKPXRoaXMubW90aW9uc1thSV07aWYoYUo9PW51bGwpe3RoaXMubW90aW9ucy5zcGxpY2UoYUksMSk7YUktLTtjb250aW51ZTt9dmFyIGFIPWFKLl8kdzA7aWYoYUg9PW51bGwpe3RoaXMubW90aW9ucy5zcGxpY2UoYUksMSk7YUktLTtjb250aW51ZTt9aWYoIWFKLmlzRmluaXNoZWQoKSl7cmV0dXJuIGZhbHNlO319cmV0dXJuIHRydWU7fX07Vi5wcm90b3R5cGUuc3RvcEFsbE1vdGlvbnM9ZnVuY3Rpb24oKXtmb3IodmFyIGFJPTA7YUk8dGhpcy5tb3Rpb25zLmxlbmd0aDthSSsrKXt2YXIgYUo9dGhpcy5tb3Rpb25zW2FJXTtpZihhSj09bnVsbCl7dGhpcy5tb3Rpb25zLnNwbGljZShhSSwxKTthSS0tO2NvbnRpbnVlO312YXIgYUg9YUouXyR3MDtpZihhSD09bnVsbCl7dGhpcy5tb3Rpb25zLnNwbGljZShhSSwxKTthSS0tO2NvbnRpbnVlO31pZih0cnVlKXt0aGlzLm1vdGlvbnMuc3BsaWNlKGFJLDEpO2FJLS07fX19O1YucHJvdG90eXBlLl8kWnI9ZnVuY3Rpb24oYUgpe3RoaXMuXyRlYj1hSDt9O1YucHJvdG90eXBlLl8kZT1mdW5jdGlvbigpe2NvbnNvbGUubG9nKFwiLS0gXyRSIC0tXFxuXCIpO2Zvcih2YXIgYUg9MDthSDx0aGlzLm1vdGlvbnMubGVuZ3RoO2FIKyspe3ZhciBhST10aGlzLm1vdGlvbnNbYUhdO3ZhciBhSj1hSS5fJHcwO2NvbnNvbGUubG9nKFwiTW90aW9uUXVldWVFbnRbJWRdIDo6ICVzXFxuXCIsdGhpcy5tb3Rpb25zLmxlbmd0aCxhSi50b1N0cmluZygpKTt9fTtmdW5jdGlvbiBNKCl7dGhpcy5fJHcwPW51bGw7dGhpcy5fJEFUPXRydWU7dGhpcy5fJDlMPWZhbHNlO3RoaXMuXyR6Mj0tMTt0aGlzLl8kYnM9LTE7dGhpcy5fJERvPS0xO3RoaXMuXyRzcj1udWxsO3RoaXMuXyRzcj1NLl8kR3MrKzt9TS5fJEdzPTA7TS5wcm90b3R5cGUuaXNGaW5pc2hlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kOUw7fTtNLnByb3RvdHlwZS5fJHFTPWZ1bmN0aW9uKGFKKXt2YXIgYUk9UC5nZXRVc2VyVGltZU1TZWMoKTt2YXIgYUg9YUkrYUo7aWYodGhpcy5fJERvPDB8fGFIPHRoaXMuXyREbyl7dGhpcy5fJERvPWFIO319O00ucHJvdG90eXBlLl8kQnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJHNyO307ZnVuY3Rpb24gYW0oKXt0aGlzLm09bmV3IEFycmF5KDEsMCwwLDAsMSwwLDAsMCwxKTt9YW0ucHJvdG90eXBlLnNldENvbnRleHQ9ZnVuY3Rpb24oYUkpe3ZhciBhSD10aGlzLm07YUkudHJhbnNmb3JtKGFIWzBdLGFIWzFdLGFIWzNdLGFIWzRdLGFIWzZdLGFIWzddKTt9O2FtLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhST1cIkxEVHJhbnNmb3JtIHsgXCI7Zm9yKHZhciBhSD0wO2FIPDk7YUgrKyl7YUkrPXRoaXMubVthSF0udG9GaXhlZCgyKStcIiAsXCI7fWFJKz1cIiB9XCI7cmV0dXJuIGFJO307YW0ucHJvdG90eXBlLmlkZW50aXR5PWZ1bmN0aW9uKCl7dmFyIGFIPXRoaXMubTthSFswXT1hSFs0XT1hSFs4XT0xO2FIWzFdPWFIWzJdPWFIWzNdPWFIWzVdPWFIWzZdPWFIWzddPTA7fTthbS5wcm90b3R5cGUuXyRQUz1mdW5jdGlvbihhSSxhSyxhSil7aWYoYUo9PW51bGwpe2FKPW5ldyBBcnJheSgwLDApO312YXIgYUg9dGhpcy5tO2FKWzBdPWFIWzBdKmFJK2FIWzNdKmFLK2FIWzZdO2FKWzFdPWFIWzFdKmFJK2FIWzRdKmFLK2FIWzddO3JldHVybiBhSjt9O2FtLnByb3RvdHlwZS5fJFAyPWZ1bmN0aW9uKGFLKXtpZighYUspe2FLPW5ldyBhbSgpO312YXIgYUk9dGhpcy5tO3ZhciBhVD1hSVswXTt2YXIgYVM9YUlbMV07dmFyIGFSPWFJWzJdO3ZhciBhUT1hSVszXTt2YXIgYVA9YUlbNF07dmFyIGFPPWFJWzVdO3ZhciBhTj1hSVs2XTt2YXIgYU09YUlbN107dmFyIGFMPWFJWzhdO3ZhciBhSj1hVCphUCphTCthUyphTyphTithUiphUSphTS1hVCphTyphTS1hUiphUCphTi1hUyphUSphTDtpZihhSj09MCl7cmV0dXJuIG51bGw7fWVsc2V7dmFyIGFIPTEvYUo7YUsubVswXT1hSCooYVAqYUwtYU0qYU8pO2FLLm1bMV09YUgqKGFNKmFSLWFTKmFMKTthSy5tWzJdPWFIKihhUyphTy1hUCphUik7YUsubVszXT1hSCooYU4qYU8tYVEqYUwpO2FLLm1bNF09YUgqKGFUKmFMLWFOKmFSKTthSy5tWzVdPWFIKihhUSphUi1hVCphTyk7YUsubVs2XT1hSCooYVEqYU0tYU4qYVApO2FLLm1bN109YUgqKGFOKmFTLWFUKmFNKTthSy5tWzhdPWFIKihhVCphUC1hUSphUyk7cmV0dXJuIGFLO319O2FtLnByb3RvdHlwZS50cmFuc2Zvcm09ZnVuY3Rpb24oYUksYUssYUope2lmKGFKPT1udWxsKXthSj1uZXcgQXJyYXkoMCwwKTt9dmFyIGFIPXRoaXMubTthSlswXT1hSFswXSphSSthSFszXSphSythSFs2XTthSlsxXT1hSFsxXSphSSthSFs0XSphSythSFs3XTtyZXR1cm4gYUo7fTthbS5wcm90b3R5cGUudHJhbnNsYXRlPWZ1bmN0aW9uKGFJLGFKKXt2YXIgYUg9dGhpcy5tO2FIWzZdPWFIWzBdKmFJK2FIWzNdKmFKK2FIWzZdO2FIWzddPWFIWzFdKmFJK2FIWzRdKmFKK2FIWzddO2FIWzhdPWFIWzJdKmFJK2FIWzVdKmFKK2FIWzhdO307YW0ucHJvdG90eXBlLnNjYWxlPWZ1bmN0aW9uKGFKLGFJKXt2YXIgYUg9dGhpcy5tO2FIWzBdKj1hSjthSFsxXSo9YUo7YUhbMl0qPWFKO2FIWzNdKj1hSTthSFs0XSo9YUk7YUhbNV0qPWFJO307YW0ucHJvdG90eXBlLnNoZWFyPWZ1bmN0aW9uKGFNLGFMKXt2YXIgYUg9dGhpcy5tO3ZhciBhSz1hSFswXSthSFszXSphTDt2YXIgYUo9YUhbMV0rYUhbNF0qYUw7dmFyIGFJPWFIWzJdK2FIWzVdKmFMO2FIWzNdPWFIWzBdKmFNK2FIWzNdO2FIWzRdPWFIWzFdKmFNK2FIWzRdO2FIWzVdPWFIWzJdKmFNK2FIWzVdO2FIWzBdPWFLO2FIWzFdPWFKO2FIWzJdPWFJO307YW0ucHJvdG90eXBlLnJvdGF0ZT1mdW5jdGlvbihhTSl7dmFyIGFIPXRoaXMubTt2YXIgYU49TWF0aC5jb3MoYU0pO3ZhciBhTD1NYXRoLnNpbihhTSk7dmFyIGFLPWFIWzBdKmFOK2FIWzNdKmFMO3ZhciBhSj1hSFsxXSphTithSFs0XSphTDt2YXIgYUk9YUhbMl0qYU4rYUhbNV0qYUw7YUhbM109LWFIWzBdKmFMK2FIWzNdKmFOO2FIWzRdPS1hSFsxXSphTCthSFs0XSphTjthSFs1XT0tYUhbMl0qYUwrYUhbNV0qYU47YUhbMF09YUs7YUhbMV09YUo7YUhbMl09YUk7fTthbS5wcm90b3R5cGUuY29uY2F0ZW5hdGU9ZnVuY3Rpb24oYUwpe3ZhciBhTz10aGlzLm07dmFyIGFNPWFMLm07dmFyIGFTPWFPWzBdKmFNWzBdK2FPWzNdKmFNWzFdK2FPWzZdKmFNWzJdO3ZhciBhUj1hT1sxXSphTVswXSthT1s0XSphTVsxXSthT1s3XSphTVsyXTt2YXIgYVE9YU9bMl0qYU1bMF0rYU9bNV0qYU1bMV0rYU9bOF0qYU1bMl07dmFyIGFQPWFPWzBdKmFNWzNdK2FPWzNdKmFNWzRdK2FPWzZdKmFNWzVdO3ZhciBhTj1hT1sxXSphTVszXSthT1s0XSphTVs0XSthT1s3XSphTVs1XTt2YXIgYUs9YU9bMl0qYU1bM10rYU9bNV0qYU1bNF0rYU9bOF0qYU1bNV07dmFyIGFKPWFPWzBdKmFNWzZdK2FPWzNdKmFNWzddK2FPWzZdKmFNWzhdO3ZhciBhST1hT1sxXSphTVs2XSthT1s0XSphTVs3XSthT1s3XSphTVs4XTt2YXIgYUg9YU9bMl0qYU1bNl0rYU9bNV0qYU1bN10rYU9bOF0qYU1bOF07bVswXT1hUzttWzFdPWFSO21bMl09YVE7bVszXT1hUDttWzRdPWFOO21bNV09YUs7bVs2XT1hSjttWzddPWFJO21bOF09YUg7fTtmdW5jdGlvbiBuKGFIKXtpZihqKXtyZXR1cm47fWFrLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYUgpO31uLnByb3RvdHlwZT1uZXcgYWsoKTtuLl8kZVQ9bnVsbDtuLl8kdFA9bmV3IE9iamVjdCgpO24uXyQybz1mdW5jdGlvbigpe2lmKG4uXyRlVD09bnVsbCl7bi5fJGVUPW4uZ2V0SUQoXCJEU1RfQkFTRVwiKTt9cmV0dXJuIG4uXyRlVDt9O24uXyQyNz1mdW5jdGlvbigpe24uXyR0UC5jbGVhcigpO24uXyRlVD1udWxsO307bi5nZXRJRD1mdW5jdGlvbihhSCl7dmFyIGFJPW4uXyR0UFthSF07aWYoYUk9PW51bGwpe2FJPW5ldyBuKGFIKTtuLl8kdFBbYUhdPWFJO31yZXR1cm4gYUk7fTtuLnByb3RvdHlwZS5fJDNzPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKCk7fTtmdW5jdGlvbiBDKGFIKXtpZihqKXtyZXR1cm47fWF4LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMudGV4dHVyZXM9bmV3IEFycmF5KCk7dGhpcy50cmFuc2Zvcm09bnVsbDt0aGlzLmdsPW51bGw7dGhpcy5nbG5vPWFIO3RoaXMuZmlyc3REcmF3PXRydWU7dGhpcy5hbmlzb3Ryb3B5RXh0PW51bGw7dGhpcy5tYXhBbmlzb3Ryb3B5PTA7dGhpcy5fJEFzPTMyO3RoaXMuXyRHcj1mYWxzZTt0aGlzLl8kTlQ9bnVsbDt0aGlzLl8kdlM9bnVsbDt0aGlzLl8kbm89bnVsbDt0aGlzLnZlcnRTaGFkZXI9bnVsbDt0aGlzLmZyYWdTaGFkZXI9bnVsbDt0aGlzLnZlcnRTaGFkZXJPZmY9bnVsbDt0aGlzLmZyYWdTaGFkZXJPZmY9bnVsbDt9Qy5wcm90b3R5cGU9bmV3IGF4KCk7Qy5fJDlyPWZ1bmN0aW9uKGFIKXt2YXIgYUk9bmV3IEZsb2F0MzJBcnJheShhSCk7cmV0dXJuIGFJO307Qy5fJHZiPWZ1bmN0aW9uKGFIKXt2YXIgYUk9bmV3IEludDE2QXJyYXkoYUgpO3JldHVybiBhSTt9O0MuXyRjcj1mdW5jdGlvbihhSSxhSCl7aWYoYUk9PW51bGx8fGFJLl8keUwoKTxhSC5sZW5ndGgpe2FJPUMuXyQ5cihhSC5sZW5ndGgqMik7YUkucHV0KGFIKTthSS5fJG9UKDApO31lbHNle2FJLmNsZWFyKCk7YUkucHV0KGFIKTthSS5fJG9UKDApO31yZXR1cm4gYUk7fTtDLl8kbWI9ZnVuY3Rpb24oYUksYUgpe2lmKGFJPT1udWxsfHxhSS5fJHlMKCk8YUgubGVuZ3RoKXthST1DLl8kdmIoYUgubGVuZ3RoKjIpO2FJLnB1dChhSCk7YUkuXyRvVCgwKTt9ZWxzZXthSS5jbGVhcigpO2FJLnB1dChhSCk7YUkuXyRvVCgwKTt9cmV0dXJuIGFJO307Qy5fJEhzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRHcjt9O0MuXyRhcz1mdW5jdGlvbihhSCl7dGhpcy5fJEdyPWFIO307Qy5wcm90b3R5cGUuZ2V0R0w9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nbDt9O0MucHJvdG90eXBlLnNldEdMPWZ1bmN0aW9uKGFIKXt0aGlzLmdsPWFIO307Qy5wcm90b3R5cGUuc2V0VHJhbnNmb3JtPWZ1bmN0aW9uKGFIKXt0aGlzLnRyYW5zZm9ybT1hSDt9O0MucHJvdG90eXBlLl8kWlQ9ZnVuY3Rpb24oKXt2YXIgYUg9dGhpcy5nbDtpZih0aGlzLmZpcnN0RHJhdyl7dGhpcy5pbml0U2hhZGVyKCk7dGhpcy5maXJzdERyYXc9ZmFsc2U7dGhpcy5hbmlzb3Ryb3B5RXh0PWFILmdldEV4dGVuc2lvbihcIkVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKXx8YUguZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKXx8YUguZ2V0RXh0ZW5zaW9uKFwiTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKTtpZih0aGlzLmFuaXNvdHJvcHlFeHQpe3RoaXMubWF4QW5pc290cm9weT1hSC5nZXRQYXJhbWV0ZXIodGhpcy5hbmlzb3Ryb3B5RXh0Lk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCk7fX1hSC5kaXNhYmxlKGFILlNDSVNTT1JfVEVTVCk7YUguZGlzYWJsZShhSC5TVEVOQ0lMX1RFU1QpO2FILmRpc2FibGUoYUguREVQVEhfVEVTVCk7YUguZnJvbnRGYWNlKGFILkNXKTthSC5lbmFibGUoYUguQkxFTkQpO2FILmNvbG9yTWFzaygxLDEsMSwxKTthSC5iaW5kQnVmZmVyKGFILkFSUkFZX0JVRkZFUixudWxsKTthSC5iaW5kQnVmZmVyKGFILkVMRU1FTlRfQVJSQVlfQlVGRkVSLG51bGwpO307Qy5wcm90b3R5cGUuXyRVbz1mdW5jdGlvbihhUyxhVCxhTCxhVSxhVixhTixhTSxhTyl7aWYoYU48MC4wMSYmdGhpcy5jbGlwQnVmUHJlX2NsaXBDb250ZXh0TWFzaz09bnVsbCl7cmV0dXJuO312YXIgYUg9YU4+MC45P1EuRVhQQU5EX1c6MDt2YXIgYTA9dGhpcy5nbDtpZih0aGlzLmdsPT1udWxsKXt0aHJvdyBuZXcgRXJyb3IoXCJnbCBpcyBudWxsXCIpO312YXIgYTE9ZmFsc2U7dmFyIGFRPTE7dmFyIGFQPTE7dmFyIGEzPTE7dmFyIGFaPTE7dmFyIGFXPXRoaXMuXyRDMCphUCphTjt2YXIgYTI9dGhpcy5fJHRUKmEzKmFOO3ZhciBhNT10aGlzLl8kV0wqYVoqYU47dmFyIGE3PXRoaXMuXyRsVCphTjtpZih0aGlzLmNsaXBCdWZQcmVfY2xpcENvbnRleHRNYXNrIT1udWxsKXthMC5mcm9udEZhY2UoYTAuQ0NXKTthMC51c2VQcm9ncmFtKHRoaXMuc2hhZGVyUHJvZ3JhbSk7dGhpcy5fJHZTPVQoYTAsdGhpcy5fJHZTLGFVKTt0aGlzLl8kbm89TChhMCx0aGlzLl8kbm8sYUwpO2EwLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV9wb3NpdGlvbl9Mb2MpO2EwLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3Bvc2l0aW9uX0xvYywyLGEwLkZMT0FULGZhbHNlLDAsMCk7dGhpcy5fJE5UPVQoYTAsdGhpcy5fJE5ULGFWKTthMC5hY3RpdmVUZXh0dXJlKGEwLlRFWFRVUkUxKTthMC5iaW5kVGV4dHVyZShhMC5URVhUVVJFXzJELHRoaXMudGV4dHVyZXNbYVNdKTthMC51bmlmb3JtMWkodGhpcy5zX3RleHR1cmUwX0xvYywxKTthMC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmFfdGV4Q29vcmRfTG9jKTthMC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYV90ZXhDb29yZF9Mb2MsMixhMC5GTE9BVCxmYWxzZSwwLDApO2EwLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy51X21hdHJpeF9Mb2MsZmFsc2UsdGhpcy5nZXRDbGlwQnVmUHJlX2NsaXBDb250ZXh0TWFzaygpLm1hdHJpeEZvck1hc2spO3ZhciBhWT10aGlzLmdldENsaXBCdWZQcmVfY2xpcENvbnRleHRNYXNrKCkubGF5b3V0Q2hhbm5lbE5vO3ZhciBhND10aGlzLmdldENoYW5uZWxGbGFnQXNDb2xvcihhWSk7YTAudW5pZm9ybTRmKHRoaXMudV9jaGFubmVsRmxhZyxhNC5yLGE0LmcsYTQuYixhNC5hKTt2YXIgYUk9dGhpcy5nZXRDbGlwQnVmUHJlX2NsaXBDb250ZXh0TWFzaygpLmxheW91dEJvdW5kczthMC51bmlmb3JtNGYodGhpcy51X2Jhc2VDb2xvcl9Mb2MsYUkueCoyLTEsYUkueSoyLTEsYUkuXyRFTCgpKjItMSxhSS5fJDVUKCkqMi0xKTthMC51bmlmb3JtMWkodGhpcy51X21hc2tGbGFnX0xvYyx0cnVlKTt9ZWxzZXthMT10aGlzLmdldENsaXBCdWZQcmVfY2xpcENvbnRleHREcmF3KCkhPW51bGw7aWYoYTEpe2EwLnVzZVByb2dyYW0odGhpcy5zaGFkZXJQcm9ncmFtT2ZmKTt0aGlzLl8kdlM9VChhMCx0aGlzLl8kdlMsYVUpO3RoaXMuXyRubz1MKGEwLHRoaXMuXyRubyxhTCk7YTAuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3Bvc2l0aW9uX0xvY19PZmYpO2EwLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3Bvc2l0aW9uX0xvY19PZmYsMixhMC5GTE9BVCxmYWxzZSwwLDApO3RoaXMuXyROVD1UKGEwLHRoaXMuXyROVCxhVik7YTAuYWN0aXZlVGV4dHVyZShhMC5URVhUVVJFMSk7YTAuYmluZFRleHR1cmUoYTAuVEVYVFVSRV8yRCx0aGlzLnRleHR1cmVzW2FTXSk7YTAudW5pZm9ybTFpKHRoaXMuc190ZXh0dXJlMF9Mb2NfT2ZmLDEpO2EwLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV90ZXhDb29yZF9Mb2NfT2ZmKTthMC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYV90ZXhDb29yZF9Mb2NfT2ZmLDIsYTAuRkxPQVQsZmFsc2UsMCwwKTthMC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudV9jbGlwTWF0cml4X0xvY19PZmYsZmFsc2UsdGhpcy5nZXRDbGlwQnVmUHJlX2NsaXBDb250ZXh0RHJhdygpLm1hdHJpeEZvckRyYXcpO2EwLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy51X21hdHJpeF9Mb2NfT2ZmLGZhbHNlLHRoaXMubWF0cml4NHg0KTthMC5hY3RpdmVUZXh0dXJlKGEwLlRFWFRVUkUyKTthMC5iaW5kVGV4dHVyZShhMC5URVhUVVJFXzJELFEuZlRleHR1cmVbdGhpcy5nbG5vXSk7YTAudW5pZm9ybTFpKHRoaXMuc190ZXh0dXJlMV9Mb2NfT2ZmLDIpO3ZhciBhWT10aGlzLmdldENsaXBCdWZQcmVfY2xpcENvbnRleHREcmF3KCkubGF5b3V0Q2hhbm5lbE5vO3ZhciBhND10aGlzLmdldENoYW5uZWxGbGFnQXNDb2xvcihhWSk7YTAudW5pZm9ybTRmKHRoaXMudV9jaGFubmVsRmxhZ19Mb2NfT2ZmLGE0LnIsYTQuZyxhNC5iLGE0LmEpO2EwLnVuaWZvcm00Zih0aGlzLnVfYmFzZUNvbG9yX0xvY19PZmYsYVcsYTIsYTUsYTcpO31lbHNle2EwLnVzZVByb2dyYW0odGhpcy5zaGFkZXJQcm9ncmFtKTt0aGlzLl8kdlM9VChhMCx0aGlzLl8kdlMsYVUpO3RoaXMuXyRubz1MKGEwLHRoaXMuXyRubyxhTCk7YTAuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3Bvc2l0aW9uX0xvYyk7YTAudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmFfcG9zaXRpb25fTG9jLDIsYTAuRkxPQVQsZmFsc2UsMCwwKTt0aGlzLl8kTlQ9VChhMCx0aGlzLl8kTlQsYVYpO2EwLmFjdGl2ZVRleHR1cmUoYTAuVEVYVFVSRTEpO2EwLmJpbmRUZXh0dXJlKGEwLlRFWFRVUkVfMkQsdGhpcy50ZXh0dXJlc1thU10pO2EwLnVuaWZvcm0xaSh0aGlzLnNfdGV4dHVyZTBfTG9jLDEpO2EwLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV90ZXhDb29yZF9Mb2MpO2EwLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3RleENvb3JkX0xvYywyLGEwLkZMT0FULGZhbHNlLDAsMCk7YTAudW5pZm9ybU1hdHJpeDRmdih0aGlzLnVfbWF0cml4X0xvYyxmYWxzZSx0aGlzLm1hdHJpeDR4NCk7YTAudW5pZm9ybTRmKHRoaXMudV9iYXNlQ29sb3JfTG9jLGFXLGEyLGE1LGE3KTthMC51bmlmb3JtMWkodGhpcy51X21hc2tGbGFnX0xvYyxmYWxzZSk7fX1pZih0aGlzLmN1bGxpbmcpe3RoaXMuZ2wuZW5hYmxlKGEwLkNVTExfRkFDRSk7fWVsc2V7dGhpcy5nbC5kaXNhYmxlKGEwLkNVTExfRkFDRSk7fXRoaXMuZ2wuZW5hYmxlKGEwLkJMRU5EKTt2YXIgYTY7dmFyIGFYO3ZhciBhUjt2YXIgYUs7aWYodGhpcy5jbGlwQnVmUHJlX2NsaXBDb250ZXh0TWFzayE9bnVsbCl7YTY9YTAuT05FO2FYPWEwLk9ORV9NSU5VU19TUkNfQUxQSEE7YVI9YTAuT05FO2FLPWEwLk9ORV9NSU5VU19TUkNfQUxQSEE7fWVsc2V7c3dpdGNoKGFNKXtjYXNlIGIuXyRtczphNj1hMC5PTkU7YVg9YTAuT05FX01JTlVTX1NSQ19BTFBIQTthUj1hMC5PTkU7YUs9YTAuT05FX01JTlVTX1NSQ19BTFBIQTticmVhaztjYXNlIGIuXyRuczphNj1hMC5PTkU7YVg9YTAuT05FO2FSPWEwLlpFUk87YUs9YTAuT05FO2JyZWFrO2Nhc2UgYi5fJF9zOmE2PWEwLkRTVF9DT0xPUjthWD1hMC5PTkVfTUlOVVNfU1JDX0FMUEhBO2FSPWEwLlpFUk87YUs9YTAuT05FO2JyZWFrO319YTAuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGEwLkZVTkNfQURELGEwLkZVTkNfQUREKTthMC5ibGVuZEZ1bmNTZXBhcmF0ZShhNixhWCxhUixhSyk7aWYodGhpcy5hbmlzb3Ryb3B5RXh0KXthMC50ZXhQYXJhbWV0ZXJpKGEwLlRFWFRVUkVfMkQsdGhpcy5hbmlzb3Ryb3B5RXh0LlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULHRoaXMubWF4QW5pc290cm9weSk7fXZhciBhSj1hTC5sZW5ndGg7YTAuZHJhd0VsZW1lbnRzKGEwLlRSSUFOR0xFUyxhSixhMC5VTlNJR05FRF9TSE9SVCwwKTthMC5iaW5kVGV4dHVyZShhMC5URVhUVVJFXzJELG51bGwpO307ZnVuY3Rpb24gVChhSixhSCxhSSl7aWYoYUg9PW51bGwpe2FIPWFKLmNyZWF0ZUJ1ZmZlcigpO31hSi5iaW5kQnVmZmVyKGFKLkFSUkFZX0JVRkZFUixhSCk7YUouYnVmZmVyRGF0YShhSi5BUlJBWV9CVUZGRVIsYUksYUouRFlOQU1JQ19EUkFXKTtyZXR1cm4gYUg7fWZ1bmN0aW9uIEwoYUosYUgsYUkpe2lmKGFIPT1udWxsKXthSD1hSi5jcmVhdGVCdWZmZXIoKTt9YUouYmluZEJ1ZmZlcihhSi5FTEVNRU5UX0FSUkFZX0JVRkZFUixhSCk7YUouYnVmZmVyRGF0YShhSi5FTEVNRU5UX0FSUkFZX0JVRkZFUixhSSxhSi5EWU5BTUlDX0RSQVcpO3JldHVybiBhSDt9Qy5wcm90b3R5cGUuXyRScz1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIl8kUnNcIik7fTtDLnByb3RvdHlwZS5fJERzPWZ1bmN0aW9uKGFIKXt0aHJvdyBuZXcgRXJyb3IoXCJfJERzXCIpO307Qy5wcm90b3R5cGUuXyRLMj1mdW5jdGlvbigpe2Zvcih2YXIgYUg9MDthSDx0aGlzLnRleHR1cmVzLmxlbmd0aDthSCsrKXt2YXIgYUk9dGhpcy50ZXh0dXJlc1thSF07aWYoYUkhPTApe3RoaXMuZ2wuXyRLMigxLHRoaXMudGV4dHVyZXMsYUgpO3RoaXMudGV4dHVyZXNbYUhdPW51bGw7fX19O0MucHJvdG90eXBlLnNldFRleHR1cmU9ZnVuY3Rpb24oYUgsYUkpe3RoaXMudGV4dHVyZXNbYUhdPWFJO307Qy5wcm90b3R5cGUuaW5pdFNoYWRlcj1mdW5jdGlvbigpe3ZhciBhSD10aGlzLmdsO3RoaXMubG9hZFNoYWRlcnMyKCk7dGhpcy5hX3Bvc2l0aW9uX0xvYz1hSC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnNoYWRlclByb2dyYW0sXCJhX3Bvc2l0aW9uXCIpO3RoaXMuYV90ZXhDb29yZF9Mb2M9YUguZ2V0QXR0cmliTG9jYXRpb24odGhpcy5zaGFkZXJQcm9ncmFtLFwiYV90ZXhDb29yZFwiKTt0aGlzLnVfbWF0cml4X0xvYz1hSC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXJQcm9ncmFtLFwidV9tdnBNYXRyaXhcIik7dGhpcy5zX3RleHR1cmUwX0xvYz1hSC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXJQcm9ncmFtLFwic190ZXh0dXJlMFwiKTt0aGlzLnVfY2hhbm5lbEZsYWc9YUguZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc2hhZGVyUHJvZ3JhbSxcInVfY2hhbm5lbEZsYWdcIik7dGhpcy51X2Jhc2VDb2xvcl9Mb2M9YUguZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc2hhZGVyUHJvZ3JhbSxcInVfYmFzZUNvbG9yXCIpO3RoaXMudV9tYXNrRmxhZ19Mb2M9YUguZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc2hhZGVyUHJvZ3JhbSxcInVfbWFza0ZsYWdcIik7dGhpcy5hX3Bvc2l0aW9uX0xvY19PZmY9YUguZ2V0QXR0cmliTG9jYXRpb24odGhpcy5zaGFkZXJQcm9ncmFtT2ZmLFwiYV9wb3NpdGlvblwiKTt0aGlzLmFfdGV4Q29vcmRfTG9jX09mZj1hSC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnNoYWRlclByb2dyYW1PZmYsXCJhX3RleENvb3JkXCIpO3RoaXMudV9tYXRyaXhfTG9jX09mZj1hSC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXJQcm9ncmFtT2ZmLFwidV9tdnBNYXRyaXhcIik7dGhpcy51X2NsaXBNYXRyaXhfTG9jX09mZj1hSC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXJQcm9ncmFtT2ZmLFwidV9DbGlwTWF0cml4XCIpO3RoaXMuc190ZXh0dXJlMF9Mb2NfT2ZmPWFILmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNoYWRlclByb2dyYW1PZmYsXCJzX3RleHR1cmUwXCIpO3RoaXMuc190ZXh0dXJlMV9Mb2NfT2ZmPWFILmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNoYWRlclByb2dyYW1PZmYsXCJzX3RleHR1cmUxXCIpO3RoaXMudV9jaGFubmVsRmxhZ19Mb2NfT2ZmPWFILmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNoYWRlclByb2dyYW1PZmYsXCJ1X2NoYW5uZWxGbGFnXCIpO3RoaXMudV9iYXNlQ29sb3JfTG9jX09mZj1hSC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXJQcm9ncmFtT2ZmLFwidV9iYXNlQ29sb3JcIik7fTtDLnByb3RvdHlwZS5kaXNwb3NlU2hhZGVyPWZ1bmN0aW9uKCl7dmFyIGFIPXRoaXMuZ2w7aWYodGhpcy5zaGFkZXJQcm9ncmFtKXthSC5kZWxldGVQcm9ncmFtKHRoaXMuc2hhZGVyUHJvZ3JhbSk7dGhpcy5zaGFkZXJQcm9ncmFtPW51bGw7fWlmKHRoaXMuc2hhZGVyUHJvZ3JhbU9mZil7YUguZGVsZXRlUHJvZ3JhbSh0aGlzLnNoYWRlclByb2dyYW1PZmYpO3RoaXMuc2hhZGVyUHJvZ3JhbU9mZj1udWxsO319O0MucHJvdG90eXBlLmNvbXBpbGVTaGFkZXI9ZnVuY3Rpb24oYUosYU4pe3ZhciBhTT10aGlzLmdsO3ZhciBhSDt2YXIgYUw9YU47dmFyIGFLPWFNLmNyZWF0ZVNoYWRlcihhSik7aWYoYUs9PW51bGwpe3EuXyRKaShcIl8kTDAgdG8gY3JlYXRlIHNoYWRlclwiKTtyZXR1cm4gbnVsbDt9YU0uc2hhZGVyU291cmNlKGFLLGFMKTthTS5jb21waWxlU2hhZGVyKGFLKTt2YXIgYUg9YU0uZ2V0U2hhZGVyUGFyYW1ldGVyKGFLLGFNLkNPTVBJTEVfU1RBVFVTKTtpZighYUgpe3ZhciBhST1hTS5nZXRTaGFkZXJJbmZvTG9nKGFLKTtxLl8kSmkoXCJfJEwwIHRvIGNvbXBpbGUgc2hhZGVyIDogXCIrYUkpO2FNLmRlbGV0ZVNoYWRlcihhSyk7cmV0dXJuIG51bGw7fXJldHVybiBhSzt9O0MucHJvdG90eXBlLmxvYWRTaGFkZXJzMj1mdW5jdGlvbigpe3ZhciBhTj10aGlzLmdsO3RoaXMuc2hhZGVyUHJvZ3JhbT1hTi5jcmVhdGVQcm9ncmFtKCk7aWYoIXRoaXMuc2hhZGVyUHJvZ3JhbSl7cmV0dXJuIGZhbHNlO310aGlzLnNoYWRlclByb2dyYW1PZmY9YU4uY3JlYXRlUHJvZ3JhbSgpO2lmKCF0aGlzLnNoYWRlclByb2dyYW1PZmYpe3JldHVybiBmYWxzZTt9dmFyIGFLPVwiYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247YXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7dmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7dmFyeWluZyB2ZWM0ICAgICAgIHZfQ2xpcFBvczt1bmlmb3JtIG1hdDQgICAgICAgdV9tdnBNYXRyaXg7dm9pZCBtYWluKCl7ICAgIGdsX1Bvc2l0aW9uID0gdV9tdnBNYXRyaXggKiBhX3Bvc2l0aW9uOyAgICB2X0NsaXBQb3MgPSB1X212cE1hdHJpeCAqIGFfcG9zaXRpb247ICAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkO31cIjt2YXIgYU09XCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDt2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDt2YXJ5aW5nIHZlYzQgICAgICAgdl9DbGlwUG9zO3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwO3VuaWZvcm0gdmVjNCAgICAgICB1X2NoYW5uZWxGbGFnO3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjt1bmlmb3JtIGJvb2wgICAgICAgdV9tYXNrRmxhZzt2b2lkIG1haW4oKXsgICAgdmVjNCBzbXBDb2xvcjsgICAgIGlmKHVfbWFza0ZsYWcpeyAgICAgICAgZmxvYXQgaXNJbnNpZGUgPSAgICAgICAgICAgICBzdGVwKHVfYmFzZUNvbG9yLngsIHZfQ2xpcFBvcy54L3ZfQ2xpcFBvcy53KSAgICAgICAgICAqIHN0ZXAodV9iYXNlQ29sb3IueSwgdl9DbGlwUG9zLnkvdl9DbGlwUG9zLncpICAgICAgICAgICogc3RlcCh2X0NsaXBQb3MueC92X0NsaXBQb3MudywgdV9iYXNlQ29sb3IueikgICAgICAgICAgKiBzdGVwKHZfQ2xpcFBvcy55L3ZfQ2xpcFBvcy53LCB1X2Jhc2VDb2xvci53KTsgICAgICAgIHNtcENvbG9yID0gdV9jaGFubmVsRmxhZyAqIHRleHR1cmUyRChzX3RleHR1cmUwICwgdl90ZXhDb29yZCkuYSAqIGlzSW5zaWRlOyAgICB9ZWxzZXsgICAgICAgIHNtcENvbG9yID0gdGV4dHVyZTJEKHNfdGV4dHVyZTAgLCB2X3RleENvb3JkKSAqIHVfYmFzZUNvbG9yOyAgICB9ICAgIGdsX0ZyYWdDb2xvciA9IHNtcENvbG9yO31cIjt2YXIgYUw9XCJhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjthdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDt2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDt2YXJ5aW5nIHZlYzQgICAgICAgdl9DbGlwUG9zO3VuaWZvcm0gbWF0NCAgICAgICB1X212cE1hdHJpeDt1bmlmb3JtIG1hdDQgICAgICAgdV9DbGlwTWF0cml4O3ZvaWQgbWFpbigpeyAgICBnbF9Qb3NpdGlvbiA9IHVfbXZwTWF0cml4ICogYV9wb3NpdGlvbjsgICAgdl9DbGlwUG9zID0gdV9DbGlwTWF0cml4ICogYV9wb3NpdGlvbjsgICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQgO31cIjt2YXIgYUo9XCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdCA7dmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7dmFyeWluZyB2ZWM0ICAgICAgIHZfQ2xpcFBvczt1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDt1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMTt1bmlmb3JtIHZlYzQgICAgICAgdV9jaGFubmVsRmxhZzt1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3IgO3ZvaWQgbWFpbigpeyAgICB2ZWM0IGNvbF9mb3JtYXNrID0gdGV4dHVyZTJEKHNfdGV4dHVyZTAsIHZfdGV4Q29vcmQpICogdV9iYXNlQ29sb3I7ICAgIHZlYzQgY2xpcE1hc2sgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMSwgdl9DbGlwUG9zLnh5IC8gdl9DbGlwUG9zLncpICogdV9jaGFubmVsRmxhZzsgICAgZmxvYXQgbWFza1ZhbCA9IGNsaXBNYXNrLnIgKyBjbGlwTWFzay5nICsgY2xpcE1hc2suYiArIGNsaXBNYXNrLmE7ICAgIGNvbF9mb3JtYXNrID0gY29sX2Zvcm1hc2sgKiBtYXNrVmFsOyAgICBnbF9GcmFnQ29sb3IgPSBjb2xfZm9ybWFzazt9XCI7dGhpcy52ZXJ0U2hhZGVyPXRoaXMuY29tcGlsZVNoYWRlcihhTi5WRVJURVhfU0hBREVSLGFLKTtpZighdGhpcy52ZXJ0U2hhZGVyKXtxLl8kSmkoXCJWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgXyRsaSFcIik7cmV0dXJuIGZhbHNlO310aGlzLnZlcnRTaGFkZXJPZmY9dGhpcy5jb21waWxlU2hhZGVyKGFOLlZFUlRFWF9TSEFERVIsYUwpO2lmKCF0aGlzLnZlcnRTaGFkZXJPZmYpe3EuXyRKaShcIk9mZlZlcnRleCBzaGFkZXIgY29tcGlsZSBfJGxpIVwiKTtyZXR1cm4gZmFsc2U7fXRoaXMuZnJhZ1NoYWRlcj10aGlzLmNvbXBpbGVTaGFkZXIoYU4uRlJBR01FTlRfU0hBREVSLGFNKTtpZighdGhpcy5mcmFnU2hhZGVyKXtxLl8kSmkoXCJGcmFnbWVudCBzaGFkZXIgY29tcGlsZSBfJGxpIVwiKTtyZXR1cm4gZmFsc2U7fXRoaXMuZnJhZ1NoYWRlck9mZj10aGlzLmNvbXBpbGVTaGFkZXIoYU4uRlJBR01FTlRfU0hBREVSLGFKKTtpZighdGhpcy5mcmFnU2hhZGVyT2ZmKXtxLl8kSmkoXCJPZmZGcmFnbWVudCBzaGFkZXIgY29tcGlsZSBfJGxpIVwiKTtyZXR1cm4gZmFsc2U7fWFOLmF0dGFjaFNoYWRlcih0aGlzLnNoYWRlclByb2dyYW0sdGhpcy52ZXJ0U2hhZGVyKTthTi5hdHRhY2hTaGFkZXIodGhpcy5zaGFkZXJQcm9ncmFtLHRoaXMuZnJhZ1NoYWRlcik7YU4uYXR0YWNoU2hhZGVyKHRoaXMuc2hhZGVyUHJvZ3JhbU9mZix0aGlzLnZlcnRTaGFkZXJPZmYpO2FOLmF0dGFjaFNoYWRlcih0aGlzLnNoYWRlclByb2dyYW1PZmYsdGhpcy5mcmFnU2hhZGVyT2ZmKTthTi5saW5rUHJvZ3JhbSh0aGlzLnNoYWRlclByb2dyYW0pO2FOLmxpbmtQcm9ncmFtKHRoaXMuc2hhZGVyUHJvZ3JhbU9mZik7dmFyIGFIPWFOLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5zaGFkZXJQcm9ncmFtLGFOLkxJTktfU1RBVFVTKTtpZighYUgpe3ZhciBhST1hTi5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnNoYWRlclByb2dyYW0pO3EuXyRKaShcIl8kTDAgdG8gbGluayBwcm9ncmFtOiBcIithSSk7aWYodGhpcy52ZXJ0U2hhZGVyKXthTi5kZWxldGVTaGFkZXIodGhpcy52ZXJ0U2hhZGVyKTt0aGlzLnZlcnRTaGFkZXI9MDt9aWYodGhpcy5mcmFnU2hhZGVyKXthTi5kZWxldGVTaGFkZXIodGhpcy5mcmFnU2hhZGVyKTt0aGlzLmZyYWdTaGFkZXI9MDt9aWYodGhpcy5zaGFkZXJQcm9ncmFtKXthTi5kZWxldGVQcm9ncmFtKHRoaXMuc2hhZGVyUHJvZ3JhbSk7dGhpcy5zaGFkZXJQcm9ncmFtPTA7fWlmKHRoaXMudmVydFNoYWRlck9mZil7YU4uZGVsZXRlU2hhZGVyKHRoaXMudmVydFNoYWRlck9mZik7dGhpcy52ZXJ0U2hhZGVyT2ZmPTA7fWlmKHRoaXMuZnJhZ1NoYWRlck9mZil7YU4uZGVsZXRlU2hhZGVyKHRoaXMuZnJhZ1NoYWRlck9mZik7dGhpcy5mcmFnU2hhZGVyT2ZmPTA7fWlmKHRoaXMuc2hhZGVyUHJvZ3JhbU9mZil7YU4uZGVsZXRlUHJvZ3JhbSh0aGlzLnNoYWRlclByb2dyYW1PZmYpO3RoaXMuc2hhZGVyUHJvZ3JhbU9mZj0wO31yZXR1cm4gZmFsc2U7fXJldHVybiB0cnVlO307Qy5wcm90b3R5cGUuY3JlYXRlRnJhbWVidWZmZXI9ZnVuY3Rpb24oKXt2YXIgYUw9dGhpcy5nbDt2YXIgYUs9US5jbGlwcGluZ01hc2tCdWZmZXJTaXplO3ZhciBhSj1hTC5jcmVhdGVGcmFtZWJ1ZmZlcigpO2FMLmJpbmRGcmFtZWJ1ZmZlcihhTC5GUkFNRUJVRkZFUixhSik7dmFyIGFIPWFMLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO2FMLmJpbmRSZW5kZXJidWZmZXIoYUwuUkVOREVSQlVGRkVSLGFIKTthTC5yZW5kZXJidWZmZXJTdG9yYWdlKGFMLlJFTkRFUkJVRkZFUixhTC5SR0JBNCxhSyxhSyk7YUwuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoYUwuRlJBTUVCVUZGRVIsYUwuQ09MT1JfQVRUQUNITUVOVDAsYUwuUkVOREVSQlVGRkVSLGFIKTt2YXIgYUk9YUwuY3JlYXRlVGV4dHVyZSgpO2FMLmJpbmRUZXh0dXJlKGFMLlRFWFRVUkVfMkQsYUkpO2FMLnRleEltYWdlMkQoYUwuVEVYVFVSRV8yRCwwLGFMLlJHQkEsYUssYUssMCxhTC5SR0JBLGFMLlVOU0lHTkVEX0JZVEUsbnVsbCk7YUwudGV4UGFyYW1ldGVyaShhTC5URVhUVVJFXzJELGFMLlRFWFRVUkVfTUlOX0ZJTFRFUixhTC5MSU5FQVIpO2FMLnRleFBhcmFtZXRlcmkoYUwuVEVYVFVSRV8yRCxhTC5URVhUVVJFX01BR19GSUxURVIsYUwuTElORUFSKTthTC50ZXhQYXJhbWV0ZXJpKGFMLlRFWFRVUkVfMkQsYUwuVEVYVFVSRV9XUkFQX1MsYUwuQ0xBTVBfVE9fRURHRSk7YUwudGV4UGFyYW1ldGVyaShhTC5URVhUVVJFXzJELGFMLlRFWFRVUkVfV1JBUF9ULGFMLkNMQU1QX1RPX0VER0UpO2FMLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGFMLkZSQU1FQlVGRkVSLGFMLkNPTE9SX0FUVEFDSE1FTlQwLGFMLlRFWFRVUkVfMkQsYUksMCk7YUwuYmluZFRleHR1cmUoYUwuVEVYVFVSRV8yRCxudWxsKTthTC5iaW5kUmVuZGVyYnVmZmVyKGFMLlJFTkRFUkJVRkZFUixudWxsKTthTC5iaW5kRnJhbWVidWZmZXIoYUwuRlJBTUVCVUZGRVIsbnVsbCk7US5mVGV4dHVyZVt0aGlzLmdsbm9dPWFJO3JldHVybntmcmFtZWJ1ZmZlcjphSixyZW5kZXJidWZmZXI6YUgsdGV4dHVyZTpRLmZUZXh0dXJlW3RoaXMuZ2xub119O307ZnVuY3Rpb24gSyhhSCl7aWYoail7cmV0dXJuO310aGlzLl8kUD1uZXcgSW50OEFycmF5KDgpO3RoaXMuXyRSMD1uZXcgRGF0YVZpZXcodGhpcy5fJFAuYnVmZmVyKTt0aGlzLl8kM2k9bmV3IEludDhBcnJheSgxMDAwKTt0aGlzLl8kaEw9MDt0aGlzLl8kdjA9MDt0aGlzLl8kUzI9MDt0aGlzLl8kS289bmV3IEFycmF5KCk7dGhpcy5fJFQ9YUg7dGhpcy5fJEY9MDt9Sy5wcm90b3R5cGUuXyRmUD1mdW5jdGlvbigpe3ZhciBhSz10aGlzLl8kU1QoKTt2YXIgYUosYUksYUg7aWYoKGFLJjEyOCk9PTApe3JldHVybiBhSyYyNTU7fWVsc2V7aWYoKChhSj10aGlzLl8kU1QoKSkmMTI4KT09MCl7cmV0dXJuKChhSyYxMjcpPDw3KXwoYUomMTI3KTt9ZWxzZXtpZigoKGFJPXRoaXMuXyRTVCgpKSYxMjgpPT0wKXtyZXR1cm4oKGFLJjEyNyk8PDE0KXwoKGFKJjEyNyk8PDcpfChhSSYyNTUpO31lbHNle2lmKCgoYUg9dGhpcy5fJFNUKCkpJjEyOCk9PTApe3JldHVybigoYUsmMTI3KTw8MjEpfCgoYUomMTI3KTw8MTQpfCgoYUkmMTI3KTw8Nyl8KGFIJjI1NSk7fWVsc2V7dGhyb3cgbmV3IEooXCJfJEwgXyQwUCAgX1wiKTt9fX19fTtLLnByb3RvdHlwZS5nZXRGb3JtYXRWZXJzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXyRTMjt9O0sucHJvdG90eXBlLl8kZ3I9ZnVuY3Rpb24oYUgpe3RoaXMuXyRTMj1hSDt9O0sucHJvdG90eXBlLl8kM0w9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fJGZQKCk7fTtLLnByb3RvdHlwZS5fJG1QPWZ1bmN0aW9uKCl7dGhpcy5fJHpUKCk7dGhpcy5fJEYrPTg7cmV0dXJuIHRoaXMuXyRULmdldEZsb2F0NjQodGhpcy5fJEYtOCk7fTtLLnByb3RvdHlwZS5fJF9UPWZ1bmN0aW9uKCl7dGhpcy5fJHpUKCk7dGhpcy5fJEYrPTQ7cmV0dXJuIHRoaXMuXyRULmdldEZsb2F0MzIodGhpcy5fJEYtNCk7fTtLLnByb3RvdHlwZS5fJDZMPWZ1bmN0aW9uKCl7dGhpcy5fJHpUKCk7dGhpcy5fJEYrPTQ7cmV0dXJuIHRoaXMuXyRULmdldEludDMyKHRoaXMuXyRGLTQpO307Sy5wcm90b3R5cGUuXyRTVD1mdW5jdGlvbigpe3RoaXMuXyR6VCgpO3JldHVybiB0aGlzLl8kVC5nZXRJbnQ4KHRoaXMuXyRGKyspO307Sy5wcm90b3R5cGUuXyQ5VD1mdW5jdGlvbigpe3RoaXMuXyR6VCgpO3RoaXMuXyRGKz0yO3JldHVybiB0aGlzLl8kVC5nZXRJbnQxNih0aGlzLl8kRi0yKTt9O0sucHJvdG90eXBlLl8kMlQ9ZnVuY3Rpb24oKXt0aGlzLl8kelQoKTt0aGlzLl8kRis9ODt0aHJvdyBuZXcgSihcIl8kTCBfJHEgcmVhZCBsb25nXCIpO307Sy5wcm90b3R5cGUuXyRwbz1mdW5jdGlvbigpe3RoaXMuXyR6VCgpO3JldHVybiB0aGlzLl8kVC5nZXRJbnQ4KHRoaXMuXyRGKyspIT0wO307dmFyIE89dHJ1ZTtLLnByb3RvdHlwZS5fJGJUPWZ1bmN0aW9uKCl7dGhpcy5fJHpUKCk7dmFyIGFIPXRoaXMuXyQzTCgpO3ZhciBhSz1udWxsO2lmKE8pe3RyeXt2YXIgYU09bmV3IEFycmF5QnVmZmVyKGFIKjIpO2FLPW5ldyBVaW50MTZBcnJheShhTSk7Zm9yKHZhciBhSj0wO2FKPGFIOysrYUope2FLW2FKXT10aGlzLl8kVC5nZXRVaW50OCh0aGlzLl8kRisrKTt9cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxhSyk7fWNhdGNoKGFMKXtPPWZhbHNlO319dHJ5e3ZhciBhST1uZXcgQXJyYXkoKTtpZihhSz09bnVsbCl7Zm9yKHZhciBhSj0wO2FKPGFIOysrYUope2FJW2FKXT10aGlzLl8kVC5nZXRVaW50OCh0aGlzLl8kRisrKTt9fWVsc2V7Zm9yKHZhciBhSj0wO2FKPGFIOysrYUope2FJW2FKXT1hS1thSl07fX1yZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGFJKTt9Y2F0Y2goYUwpe2NvbnNvbGUubG9nKFwicmVhZCB1dGY4IC8gXyRyVCBfJEwwICEhIDogXCIrYUwpO319O0sucHJvdG90eXBlLl8kY1M9ZnVuY3Rpb24oKXt0aGlzLl8kelQoKTt2YXIgYUk9dGhpcy5fJDNMKCk7dmFyIGFIPW5ldyBJbnQzMkFycmF5KGFJKTtmb3IodmFyIGFKPTA7YUo8YUk7YUorKyl7YUhbYUpdPXRoaXMuXyRULmdldEludDMyKHRoaXMuXyRGKTt0aGlzLl8kRis9NDt9cmV0dXJuIGFIO307Sy5wcm90b3R5cGUuXyRUYj1mdW5jdGlvbigpe3RoaXMuXyR6VCgpO3ZhciBhST10aGlzLl8kM0woKTt2YXIgYUg9bmV3IEZsb2F0MzJBcnJheShhSSk7Zm9yKHZhciBhSj0wO2FKPGFJO2FKKyspe2FIW2FKXT10aGlzLl8kVC5nZXRGbG9hdDMyKHRoaXMuXyRGKTt0aGlzLl8kRis9NDt9cmV0dXJuIGFIO307Sy5wcm90b3R5cGUuXyQ1Yj1mdW5jdGlvbigpe3RoaXMuXyR6VCgpO3ZhciBhST10aGlzLl8kM0woKTt2YXIgYUg9bmV3IEZsb2F0NjRBcnJheShhSSk7Zm9yKHZhciBhSj0wO2FKPGFJO2FKKyspe2FIW2FKXT10aGlzLl8kVC5nZXRGbG9hdDY0KHRoaXMuXyRGKTt0aGlzLl8kRis9ODt9cmV0dXJuIGFIO307Sy5wcm90b3R5cGUuXyRuUD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kSmIoLTEpO307Sy5wcm90b3R5cGUuXyRKYj1mdW5jdGlvbihhSil7dGhpcy5fJHpUKCk7aWYoYUo8MCl7YUo9dGhpcy5fJDNMKCk7fWlmKGFKPT1heS5fJDdQKXt2YXIgYUg9dGhpcy5fJDZMKCk7aWYoMDw9YUgmJmFIPHRoaXMuXyRLby5sZW5ndGgpe3JldHVybiB0aGlzLl8kS29bYUhdO31lbHNle3Rocm93IG5ldyBKKFwiXyRzTCBfJDRpIEBfJG0wXCIpO319ZWxzZXt2YXIgYUk9dGhpcy5fJDRiKGFKKTt0aGlzLl8kS28ucHVzaChhSSk7cmV0dXJuIGFJO319O0sucHJvdG90eXBlLl8kNGI9ZnVuY3Rpb24oYU4pe2lmKGFOPT0wKXtyZXR1cm4gbnVsbDt9aWYoYU49PTUwKXt2YXIgYUs9dGhpcy5fJGJUKCk7dmFyIGFJPVouZ2V0SUQoYUspO3JldHVybiBhSTt9ZWxzZXtpZihhTj09NTEpe3ZhciBhSz10aGlzLl8kYlQoKTt2YXIgYUk9bi5nZXRJRChhSyk7cmV0dXJuIGFJO31lbHNle2lmKGFOPT0xMzQpe3ZhciBhSz10aGlzLl8kYlQoKTt2YXIgYUk9aS5nZXRJRChhSyk7cmV0dXJuIGFJO31lbHNle2lmKGFOPT02MCl7dmFyIGFLPXRoaXMuXyRiVCgpO3ZhciBhST16LmdldElEKGFLKTtyZXR1cm4gYUk7fX19fWlmKGFOPj00OCl7dmFyIGFMPWF5Ll8kOW8oYU4pO2lmKGFMIT1udWxsKXthTC5fJEYwKHRoaXMpO3JldHVybiBhTDt9ZWxzZXtyZXR1cm4gbnVsbDt9fXN3aXRjaChhTil7Y2FzZSAxOnJldHVybiB0aGlzLl8kYlQoKTtjYXNlIDEwOnZhciBhTT10aGlzLl8kNkwoKTtyZXR1cm4gbmV3IEkoYU0sdHJ1ZSk7Y2FzZSAxMTpyZXR1cm4gbmV3IGF2KHRoaXMuXyRtUCgpLHRoaXMuXyRtUCgpLHRoaXMuXyRtUCgpLHRoaXMuXyRtUCgpKTtjYXNlIDEyOnJldHVybiBuZXcgYXYodGhpcy5fJF9UKCksdGhpcy5fJF9UKCksdGhpcy5fJF9UKCksdGhpcy5fJF9UKCkpO2Nhc2UgMTM6cmV0dXJuIG5ldyBlKHRoaXMuXyRtUCgpLHRoaXMuXyRtUCgpKTtjYXNlIDE0OnJldHVybiBuZXcgZSh0aGlzLl8kX1QoKSx0aGlzLl8kX1QoKSk7Y2FzZSAxNTp2YXIgYUg9dGhpcy5fJDNMKCk7dmFyIGFJPW5ldyBBcnJheShhSCk7Zm9yKHZhciBhSj0wO2FKPGFIO2FKKyspe2FJW2FKXT10aGlzLl8kblAoKTt9cmV0dXJuIGFJO2Nhc2UgMTc6dmFyIGFJPW5ldyBhRCh0aGlzLl8kbVAoKSx0aGlzLl8kbVAoKSx0aGlzLl8kbVAoKSx0aGlzLl8kbVAoKSx0aGlzLl8kbVAoKSx0aGlzLl8kbVAoKSk7cmV0dXJuIGFJO2Nhc2UgMjE6cmV0dXJuIG5ldyBGKHRoaXMuXyQ2TCgpLHRoaXMuXyQ2TCgpLHRoaXMuXyQ2TCgpLHRoaXMuXyQ2TCgpKTtjYXNlIDIyOnJldHVybiBuZXcgayh0aGlzLl8kNkwoKSx0aGlzLl8kNkwoKSk7Y2FzZSAyMzp0aHJvdyBuZXcgRXJyb3IoXCJfJEwgXyRybyBcIik7Y2FzZSAxNjpjYXNlIDI1OnJldHVybiB0aGlzLl8kY1MoKTtjYXNlIDI2OnJldHVybiB0aGlzLl8kNWIoKTtjYXNlIDI3OnJldHVybiB0aGlzLl8kVGIoKTtjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6Y2FzZSA2OmNhc2UgNzpjYXNlIDg6Y2FzZSA5OmNhc2UgMTg6Y2FzZSAxOTpjYXNlIDIwOmNhc2UgMjQ6Y2FzZSAyODp0aHJvdyBuZXcgSihcIl8kNiBfJHEgOiBfJG5QKCkgb2YgMi05ICwxOCwxOSwyMCwyNCwyOCA6IFwiK2FOKTtkZWZhdWx0OnRocm93IG5ldyBKKFwiXyQ2IF8kcSA6IF8kblAoKSBOTyBfJGkgOiBcIithTik7fX07Sy5wcm90b3R5cGUuXyQ4TD1mdW5jdGlvbigpe2lmKHRoaXMuXyRoTD09MCl7dGhpcy5fJHYwPXRoaXMuXyRTVCgpO31lbHNle2lmKHRoaXMuXyRoTD09OCl7dGhpcy5fJHYwPXRoaXMuXyRTVCgpO3RoaXMuXyRoTD0wO319cmV0dXJuKCh0aGlzLl8kdjA+Pig3LXRoaXMuXyRoTCsrKSkmMSk9PTE7fTtLLnByb3RvdHlwZS5fJHpUPWZ1bmN0aW9uKCl7aWYodGhpcy5fJGhMIT0wKXt0aGlzLl8kaEw9MDt9fTtmdW5jdGlvbiBhaSgpe31haS5wcm90b3R5cGUuXyR3UD1mdW5jdGlvbihhTSxhSSxhSyl7Zm9yKHZhciBhTD0wO2FMPGFLO2FMKyspe2Zvcih2YXIgYUg9MDthSDxhSTthSCsrKXt2YXIgYUo9MiooYUgrYUwqYUkpO2NvbnNvbGUubG9nKFwiKCUgNy4zZiAsICUgNy4zZikgLCBcIixhTVthSl0sYU1bYUorMV0pO31jb25zb2xlLmxvZyhcIlxcblwiKTt9Y29uc29sZS5sb2coXCJcXG5cIik7fTtmdW5jdGlvbiBhQygpe31hQy5fJDJTPU1hdGguUEkvMTgwO2FDLl8kYlM9KE1hdGguUEkvMTgwKTthQy5fJHdTPTE4MC9NYXRoLlBJO2FDLl8kTlM9KDE4MC9NYXRoLlBJKTthQy5QSV9GPU1hdGguUEk7YUMuXyRrVD1bMCwwLjAxMjM2OCwwLjAyNDczNCwwLjAzNzA5NywwLjA0OTQ1NCwwLjA2MTgwMywwLjA3NDE0MywwLjA4NjQ3MSwwLjA5ODc4NiwwLjExMTA4NywwLjEyMzM3LDAuMTM1NjM0LDAuMTQ3ODc3LDAuMTYwMDk4LDAuMTcyMjk1LDAuMTg0NDY1LDAuMTk2NjA2LDAuMjA4NzE4LDAuMjIwNzk4LDAuMjMyODQ0LDAuMjQ0ODU0LDAuMjU2ODI3LDAuMjY4NzYxLDAuMjgwNjU0LDAuMjkyNTAzLDAuMzA0MzA4LDAuMzE2MDY2LDAuMzI3Nzc2LDAuMzM5NDM2LDAuMzUxMDQ0LDAuMzYyNTk4LDAuMzc0MDk3LDAuMzg1NTM4LDAuMzk2OTIxLDAuNDA4MjQzLDAuNDE5NTAyLDAuNDMwNjk3LDAuNDQxODI2LDAuNDUyODg4LDAuNDYzODgxLDAuNDc0ODAyLDAuNDg1NjUxLDAuNDk2NDI1LDAuNTA3MTI0LDAuNTE3NzQ1LDAuNTI4Mjg3LDAuNTM4NzQ4LDAuNTQ5MTI2LDAuNTU5NDIxLDAuNTY5NjMsMC41Nzk3NTIsMC41ODk3ODUsMC41OTk3MjgsMC42MDk1NzksMC42MTkzMzcsMC42MjksMC42Mzg1NjcsMC42NDgwMzYsMC42NTc0MDYsMC42NjY2NzYsMC42NzU4NDMsMC42ODQ5MDgsMC42OTM4NjcsMC43MDI3MiwwLjcxMTQ2NiwwLjcyMDEwMywwLjcyODYzLDAuNzM3MDQ1LDAuNzQ1MzQ4LDAuNzUzNTM2LDAuNzYxNjEsMC43Njk1NjYsMC43Nzc0MDUsMC43ODUxMjUsMC43OTI3MjUsMC44MDAyMDQsMC44MDc1NjEsMC44MTQ3OTMsMC44MjE5MDEsMC44Mjg4ODQsMC44MzU3MzksMC44NDI0NjcsMC44NDkwNjYsMC44NTU1MzUsMC44NjE4NzMsMC44NjgwNzksMC44NzQxNTMsMC44ODAwOTMsMC44ODU4OTgsMC44OTE1NjcsMC44OTcxMDEsMC45MDI0OTcsMC45MDc3NTQsMC45MTI4NzMsMC45MTc4NTMsMC45MjI2OTIsMC45MjczOSwwLjkzMTk0NiwwLjkzNjM1OSwwLjk0MDYyOSwwLjk0NDc1NSwwLjk0ODczNywwLjk1MjU3NCwwLjk1NjI2NSwwLjk1OTgwOSwwLjk2MzIwNywwLjk2NjQ1NywwLjk2OTU2LDAuOTcyNTE0LDAuOTc1MzIsMC45Nzc5NzYsMC45ODA0ODIsMC45ODI4MzksMC45ODUwNDUsMC45ODcxMDEsMC45ODkwMDYsMC45OTA3NTksMC45OTIzNjEsMC45OTM4MTEsMC45OTUxMDksMC45OTYyNTQsMC45OTcyNDgsMC45OTgwODgsMC45OTg3NzYsMC45OTkzMTIsMC45OTk2OTQsMC45OTk5MjQsMV07YUMuXyQ5Mj1mdW5jdGlvbihhSyxhSSl7dmFyIGFIPU1hdGguYXRhbjIoYUtbMV0sYUtbMF0pO3ZhciBhSj1NYXRoLmF0YW4yKGFJWzFdLGFJWzBdKTtyZXR1cm4gYUMuXyR0UyhhSCxhSik7fTthQy5fJHRTPWZ1bmN0aW9uKGFJLGFIKXt2YXIgYUo9YUktYUg7d2hpbGUoYUo8LU1hdGguUEkpe2FKKz0yKk1hdGguUEk7fXdoaWxlKGFKPk1hdGguUEkpe2FKLT0yKk1hdGguUEk7fXJldHVybiBhSjt9O2FDLl8kOT1mdW5jdGlvbihhSCl7cmV0dXJuIE1hdGguc2luKGFIKTt9O2FDLmZjb3M9ZnVuY3Rpb24oYUgpe3JldHVybiBNYXRoLmNvcyhhSCk7fTtmdW5jdGlvbiBhQihhSCl7aWYoail7cmV0dXJuO310aGlzLl8kZTA9bnVsbDt0aGlzLl8kSVA9bnVsbDt0aGlzLl8kVXM9bnVsbDt0aGlzLl8kN3M9bnVsbDt0aGlzLl8kSVM9W2ZhbHNlXTt0aGlzLl8kVlM9bnVsbDt0aGlzLl8kQVQ9dHJ1ZTt0aGlzLmJhc2VPcGFjaXR5PTE7dGhpcy5jbGlwQnVmUHJlX2NsaXBDb250ZXh0PW51bGw7dGhpcy5fJGUwPWFIO31hQi5wcm90b3R5cGUuXyR1Mj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kSVNbMF07fTthQi5wcm90b3R5cGUuXyR5bz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kQVQmJiF0aGlzLl8kSVNbMF07fTthQi5wcm90b3R5cGUuXyRHVD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl8kZTA7fTtmdW5jdGlvbiByKCl7fXIuXyRXMj0wO3IuU1lTVEVNX0lORk89bnVsbDtyLlVTRVJfQUdFTlQ9bmF2aWdhdG9yLnVzZXJBZ2VudDtyLmlzSVBob25lPWZ1bmN0aW9uKCl7aWYoIXIuU1lTVEVNX0lORk8pe3Iuc2V0dXAoKTt9cmV0dXJuIHIuU1lTVEVNX0lORk8uX2lzSVBob25lO307ci5pc0lPUz1mdW5jdGlvbigpe2lmKCFyLlNZU1RFTV9JTkZPKXtyLnNldHVwKCk7fXJldHVybiByLlNZU1RFTV9JTkZPLl9pc0lQaG9uZXx8ci5TWVNURU1fSU5GTy5faXNJUGFkO307ci5pc0FuZHJvaWQ9ZnVuY3Rpb24oKXtpZighci5TWVNURU1fSU5GTyl7ci5zZXR1cCgpO31yZXR1cm4gci5TWVNURU1fSU5GTy5faXNBbmRyb2lkO307ci5nZXRPU1ZlcnNpb249ZnVuY3Rpb24oKXtpZighci5TWVNURU1fSU5GTyl7ci5zZXR1cCgpO31yZXR1cm4gci5TWVNURU1fSU5GTy52ZXJzaW9uO307ci5nZXRPUz1mdW5jdGlvbigpe2lmKCFyLlNZU1RFTV9JTkZPKXtyLnNldHVwKCk7fWlmKHIuU1lTVEVNX0lORk8uX2lzSVBob25lfHxyLlNZU1RFTV9JTkZPLl9pc0lQYWQpe3JldHVyblwiaU9TXCI7fWlmKHIuU1lTVEVNX0lORk8uX2lzQW5kcm9pZCl7cmV0dXJuXCJBbmRyb2lkXCI7fWVsc2V7cmV0dXJuXCJfJFEwIE9TXCI7fX07ci5zZXR1cD1mdW5jdGlvbigpe3ZhciBhSz1yLlVTRVJfQUdFTlQ7ZnVuY3Rpb24gYUkoYU8sYVIpe3ZhciBhTj1hTy5zdWJzdHJpbmcoYVIpLnNwbGl0KC9bIF8sO1xcLl0vKTt2YXIgYVE9MDtmb3IodmFyIGFNPTA7YU08PTI7YU0rKyl7aWYoaXNOYU4oYU5bYU1dKSl7YnJlYWs7fXZhciBhUD1wYXJzZUludChhTlthTV0pO2lmKGFQPDB8fGFQPjk5OSl7cS5fJGxpKFwiZXJyIDogXCIrYVArXCIgQFV0SHRtbDUuc2V0dXAoKVwiKTthUT0wO2JyZWFrO31hUSs9YVAqTWF0aC5wb3coMTAwMCwoMi1hTSkpO31yZXR1cm4gYVE7fXZhciBhTDt2YXIgYUg7dmFyIGFKPXIuU1lTVEVNX0lORk89e3VzZXJBZ2VudDphS307aWYoKGFMPWFLLmluZGV4T2YoXCJpUGhvbmUgT1MgXCIpKT49MCl7YUoub3M9XCJpUGhvbmVcIjthSi5faXNJUGhvbmU9dHJ1ZTthSi52ZXJzaW9uPWFJKGFLLGFMK1wiaVBob25lIE9TIFwiLmxlbmd0aCk7fWVsc2V7aWYoKGFMPWFLLmluZGV4T2YoXCJpUGFkXCIpKT49MCl7YUw9YUsuaW5kZXhPZihcIkNQVSBPU1wiKTtpZihhTDwwKXtxLl8kbGkoXCIgZXJyIDogXCIrYUsrXCIgQFV0SHRtbDUuc2V0dXAoKVwiKTtyZXR1cm47fWFKLm9zPVwiaVBhZFwiO2FKLl9pc0lQYWQ9dHJ1ZTthSi52ZXJzaW9uPWFJKGFLLGFMK1wiQ1BVIE9TIFwiLmxlbmd0aCk7fWVsc2V7aWYoKGFMPWFLLmluZGV4T2YoXCJBbmRyb2lkXCIpKT49MCl7YUoub3M9XCJBbmRyb2lkXCI7YUouX2lzQW5kcm9pZD10cnVlO2FKLnZlcnNpb249YUkoYUssYUwrXCJBbmRyb2lkIFwiLmxlbmd0aCk7fWVsc2V7YUoub3M9XCItXCI7YUoudmVyc2lvbj0tMTt9fX19O3dpbmRvdy5VdFN5c3RlbT1QO3dpbmRvdy5VdERlYnVnPXE7d2luZG93LkxEVHJhbnNmb3JtPWFtO3dpbmRvdy5MREdMPWF1O3dpbmRvdy5MaXZlMkQ9UTt3aW5kb3cuTGl2ZTJETW9kZWxXZWJHTD1sO3dpbmRvdy5MaXZlMkRNb2RlbEpTPXY7d2luZG93LkxpdmUyRE1vdGlvbj1hbzt3aW5kb3cuTW90aW9uUXVldWVNYW5hZ2VyPVY7d2luZG93LlBoeXNpY3NIYWlyPXU7d2luZG93LkFNb3Rpb249YWg7d2luZG93LlBhcnRzRGF0YUlEPWk7d2luZG93LkRyYXdEYXRhSUQ9Wjt3aW5kb3cuQmFzZURhdGFJRD1uO3dpbmRvdy5QYXJhbUlEPXo7US5pbml0KCk7dmFyIGo9ZmFsc2U7fSkoKTsiLCJpbXBvcnQgXCIuL2xpYi9jb3JlVjIubWluXCI7XG5cbmltcG9ydCB7TDJEVGFyZ2V0UG9pbnQsIEwyRFZpZXdNYXRyaXgsIEwyRE1hdHJpeDQ0fSBmcm9tIFwiLi9saWIvTGl2ZTJERnJhbWV3b3JrXCI7XG5cbmltcG9ydCBMQXBwTGl2ZTJETWFuYWdlclYyIGZyb20gXCIuL0xBcHBMaXZlMkRNYW5hZ2VyVjJcIlxuXG5pbXBvcnQgTEFwcERlZmluZVYyIGZyb20gXCIuL0xBcHBEZWZpbmVWMlwiXG5cbmltcG9ydCBNYXRyaXhTdGFjayBmcm9tIFwiLi9saWIvTWF0cml4U3RhY2tcIlxuXG5pbXBvcnQge3NldENvbnRleHR9IGZyb20gXCIuL3dlYmdsY29udGV4dFwiXG5cbmNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xuXG5jb25zdCBsaXZlMkRNZ3IgPSBuZXcgTEFwcExpdmUyRE1hbmFnZXJWMigpO1xuXG5sZXQgaXNEcmF3U3RhcnQgPSBmYWxzZTtcblxubGV0IGdsID0gbnVsbDtcblxubGV0IGNhbnZhcyA9IG51bGw7XG5cbmxldCBkcmFnTWdyID0gbnVsbDtcblxubGV0IHZpZXdNYXRyaXggPSBudWxsO1xuXG5sZXQgcHJvak1hdHJpeCA9IG51bGw7XG5cbmxldCBkZXZpY2VUb1NjcmVlbiA9IG51bGw7XG5cbmxldCBkcmFnID0gZmFsc2U7XG5cbmxldCBvbGRMZW4gPSAwO1xuXG5sZXQgbGFzdE1vdXNlWCA9IDA7XG5cbmxldCBsYXN0TW91c2VZID0gMDtcblxubGV0IGlzTW9kZWxTaG93biA9IDA7XG5cbmxldCBtb2RlbHVybCA9IFwiXCI7XG5cbmxldCBoZWFkX3BvcyA9IDAuNTtcblxuZnVuY3Rpb24gaW5pdEwyZENhbnZhcyhjYW52YXNJZCkge1xuICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbnZhc0lkKTtcbiAgICBpZiAoY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgLy9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgbW91c2VFdmVudCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbW91c2VFdmVudCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG1vdXNlRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZUV2ZW50KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG1vdXNlRXZlbnQpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgbW91c2VFdmVudCk7XG4gICAgICAgIC8vY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBtb3VzZUV2ZW50KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRvdWNoRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRvdWNoRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0b3VjaEV2ZW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXQobW9kZWx1cmwpIHtcbiAgICBsZXQgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgbGV0IGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICBkcmFnTWdyID0gbmV3IEwyRFRhcmdldFBvaW50KCk7XG5cbiAgICBsZXQgcmF0aW8gPSBoZWlnaHQgLyB3aWR0aDtcbiAgICBsZXQgbGVmdCA9IExBcHBEZWZpbmVWMi5WSUVXX0xPR0lDQUxfTEVGVDtcbiAgICBsZXQgcmlnaHQgPSBMQXBwRGVmaW5lVjIuVklFV19MT0dJQ0FMX1JJR0hUO1xuICAgIGxldCBib3R0b20gPSAtcmF0aW87XG4gICAgbGV0IHRvcCA9IHJhdGlvO1xuXG4gICAgdmlld01hdHJpeCA9IG5ldyBMMkRWaWV3TWF0cml4KCk7XG5cblxuICAgIHZpZXdNYXRyaXguc2V0U2NyZWVuUmVjdChsZWZ0LCByaWdodCwgYm90dG9tLCB0b3ApO1xuXG4gICAgdmlld01hdHJpeC5zZXRNYXhTY3JlZW5SZWN0KExBcHBEZWZpbmVWMi5WSUVXX0xPR0lDQUxfTUFYX0xFRlQsXG4gICAgICAgIExBcHBEZWZpbmVWMi5WSUVXX0xPR0lDQUxfTUFYX1JJR0hULFxuICAgICAgICBMQXBwRGVmaW5lVjIuVklFV19MT0dJQ0FMX01BWF9CT1RUT00sXG4gICAgICAgIExBcHBEZWZpbmVWMi5WSUVXX0xPR0lDQUxfTUFYX1RPUCk7XG5cbiAgICB2aWV3TWF0cml4LnNldE1heFNjYWxlKExBcHBEZWZpbmVWMi5WSUVXX01BWF9TQ0FMRSk7XG4gICAgdmlld01hdHJpeC5zZXRNaW5TY2FsZShMQXBwRGVmaW5lVjIuVklFV19NSU5fU0NBTEUpO1xuXG4gICAgcHJvak1hdHJpeCA9IG5ldyBMMkRNYXRyaXg0NCgpO1xuICAgIHByb2pNYXRyaXgubXVsdFNjYWxlKDEsICh3aWR0aCAvIGhlaWdodCkpO1xuXG4gICAgZGV2aWNlVG9TY3JlZW4gPSBuZXcgTDJETWF0cml4NDQoKTtcbiAgICBkZXZpY2VUb1NjcmVlbi5tdWx0VHJhbnNsYXRlKC13aWR0aCAvIDIuMCwgLWhlaWdodCAvIDIuMCk7XG4gICAgZGV2aWNlVG9TY3JlZW4ubXVsdFNjYWxlKDIgLyB3aWR0aCwgLTIgLyB3aWR0aCk7XG5cbiAgICBnbCA9IGdldFdlYkdMQ29udGV4dCgpO1xuICAgIHNldENvbnRleHQoZ2wpO1xuICAgIGlmICghZ2wpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgV2ViR0wgY29udGV4dC5cIik7XG4gICAgICAgIGlmICghIXdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3VyIGJyb3dzZXIgZG9uJ3Qgc3VwcG9ydCBXZWJHTCwgY2hlY2sgaHR0cHM6Ly9nZXQud2ViZ2wub3JnLyBmb3IgZnV0aGVyIGluZm9ybWF0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5MaXZlMkQuc2V0R0woZ2wpO1xuICAgIGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICBjaGFuZ2VNb2RlbChtb2RlbHVybCk7XG4gICAgc3RhcnREcmF3KCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0RHJhdygpIHtcbiAgICBpZiAoIWlzRHJhd1N0YXJ0KSB7XG4gICAgICAgIGlzRHJhd1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgKGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICAgICAgICBkcmF3KCk7XG4gICAgICAgICAgICBsZXQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID1cbiAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICAgICAgICAgIC8vIOaIquWbvuaMh+S7pOajgOa1i1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5saXZlMmR2Mi5jYXB0dXJlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubGl2ZTJkdjIuY2FwdHVyZUZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2FudmFzLnRvQmxvYih3aW5kb3cuZG93bmxvYWRDYXApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGljaywgY2FudmFzKTtcbiAgICAgICAgfSkoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgTWF0cml4U3RhY2sucmVzZXQoKTtcbiAgICBNYXRyaXhTdGFjay5sb2FkSWRlbnRpdHkoKTtcbiAgICBkcmFnTWdyLnVwZGF0ZSgpO1xuICAgIGxpdmUyRE1nci5zZXREcmFnKGRyYWdNZ3IuZ2V0WCgpLCBkcmFnTWdyLmdldFkoKSk7XG5cbiAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcblxuICAgIE1hdHJpeFN0YWNrLm11bHRNYXRyaXgocHJvak1hdHJpeC5nZXRBcnJheSgpKTtcbiAgICBNYXRyaXhTdGFjay5tdWx0TWF0cml4KHZpZXdNYXRyaXguZ2V0QXJyYXkoKSk7XG4gICAgTWF0cml4U3RhY2sucHVzaCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXZlMkRNZ3IubnVtTW9kZWxzKCk7IGkrKykge1xuICAgICAgICBsZXQgbW9kZWwgPSBsaXZlMkRNZ3IuZ2V0TW9kZWwoaSk7XG5cbiAgICAgICAgaWYgKG1vZGVsID09IG51bGwpIHJldHVybjtcblxuICAgICAgICBpZiAobW9kZWwuaW5pdGlhbGl6ZWQgJiYgIW1vZGVsLnVwZGF0aW5nKSB7XG4gICAgICAgICAgICBtb2RlbC51cGRhdGUoKTtcbiAgICAgICAgICAgIG1vZGVsLmRyYXcoZ2wpO1xuICAgICAgICB9XG4gICAgfVxuICAgIE1hdHJpeFN0YWNrLnBvcCgpO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VNb2RlbChtb2RlbHVybCkge1xuICAgIGxpdmUyRE1nci5yZWxvYWRGbGcgPSB0cnVlO1xuICAgIGxpdmUyRE1nci5jb3VudCsrO1xuICAgIGxpdmUyRE1nci5jaGFuZ2VNb2RlbChnbCwgbW9kZWx1cmwpO1xufVxuXG5mdW5jdGlvbiBtb2RlbFNjYWxpbmcoc2NhbGUpIHtcbiAgICBsZXQgaXNNYXhTY2FsZSA9IHZpZXdNYXRyaXguaXNNYXhTY2FsZSgpO1xuICAgIGxldCBpc01pblNjYWxlID0gdmlld01hdHJpeC5pc01pblNjYWxlKCk7XG5cbiAgICB2aWV3TWF0cml4LmFkanVzdFNjYWxlKDAsIDAsIHNjYWxlKTtcblxuICAgIGlmICghaXNNYXhTY2FsZSkge1xuICAgICAgICBpZiAodmlld01hdHJpeC5pc01heFNjYWxlKCkpIHtcbiAgICAgICAgICAgIGxpdmUyRE1nci5tYXhTY2FsZUV2ZW50KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWlzTWluU2NhbGUpIHtcbiAgICAgICAgaWYgKHZpZXdNYXRyaXguaXNNaW5TY2FsZSgpKSB7XG4gICAgICAgICAgICBsaXZlMkRNZ3IubWluU2NhbGVFdmVudCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1SYW5nZShjZW50ZXIsIHRyYW5zZm9ybSwgcmFuZ2UpIHtcbiAgICBsZXQgYSA9IHtcbiAgICAgICAgeDogdHJhbnNmb3JtLnggLSBjZW50ZXIueCxcbiAgICAgICAgeTogdHJhbnNmb3JtLnkgLSBjZW50ZXIueVxuICAgIH1cbiAgICBsZXQgciA9IE1hdGguc3FydChNYXRoLnBvdyhhLngsIDIpICsgTWF0aC5wb3coYS55LCAyKSk7XG4gICAgaWYgKHIgPiByYW5nZSkge1xuICAgICAgICBhID0ge1xuICAgICAgICAgICAgeDogYS54IC8gciAqIHJhbmdlICsgY2VudGVyLngsXG4gICAgICAgICAgICB5OiBhLnkgLyByICogcmFuZ2UgKyBjZW50ZXIueVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZG90KEEsIEIpIHtcbiAgICByZXR1cm4gQS54ICogQi54ICsgQS55ICogQi55O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoeCwgeSkge1xuICAgIGxldCBsZW5ndGggPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSlcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4IC8gbGVuZ3RoLFxuICAgICAgICB5OiB5IC8gbGVuZ3RoXG4gICAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1SZWN0KGNlbnRlciwgdHJhbnNmb3JtLCByZWN0KSB7XG4gICAgaWYgKHRyYW5zZm9ybS54IDwgcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAmJiB0cmFuc2Zvcm0ueSA8IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgJiZcbiAgICAgICAgdHJhbnNmb3JtLnggPiByZWN0LmxlZnQgJiYgdHJhbnNmb3JtLnkgPiByZWN0LnRvcCkgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICBsZXQgTGVuX1ggPSBjZW50ZXIueCAtIHRyYW5zZm9ybS54O1xuICAgIGxldCBMZW5fWSA9IGNlbnRlci55IC0gdHJhbnNmb3JtLnk7XG5cbiAgICBmdW5jdGlvbiBhbmdsZShMZW5fWCwgTGVuX1kpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhkb3Qoe1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDFcbiAgICAgICAgfSwgbm9ybWFsaXplKExlbl9YLCBMZW5fWSkpKSAqIDE4MCAvIE1hdGguUElcbiAgICB9XG5cbiAgICBsZXQgYW5nbGVUYXJnZXQgPSBhbmdsZShMZW5fWCwgTGVuX1kpO1xuICAgIGlmICh0cmFuc2Zvcm0ueCA8IGNlbnRlci54KSBhbmdsZVRhcmdldCA9IDM2MCAtIGFuZ2xlVGFyZ2V0O1xuICAgIGxldCBhbmdsZUxlZnRUb3AgPSAzNjAgLSBhbmdsZShyZWN0LmxlZnQgLSBjZW50ZXIueCwgKHJlY3QudG9wIC0gY2VudGVyLnkpICogLTEpO1xuICAgIGxldCBhbmdsZUxlZnRCb3R0b20gPSAzNjAgLSBhbmdsZShyZWN0LmxlZnQgLSBjZW50ZXIueCwgKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLSBjZW50ZXIueSkgKiAtMSk7XG4gICAgbGV0IGFuZ2xlUmlnaHRUb3AgPSBhbmdsZShyZWN0LmxlZnQgKyByZWN0LndpZHRoIC0gY2VudGVyLngsIChyZWN0LnRvcCAtIGNlbnRlci55KSAqIC0xKTtcbiAgICBsZXQgYW5nbGVSaWdodEJvdHRvbSA9IGFuZ2xlKHJlY3QubGVmdCArIHJlY3Qud2lkdGggLSBjZW50ZXIueCwgKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLSBjZW50ZXIueSkgKiAtMSk7XG4gICAgbGV0IHNjYWxlID0gTGVuX1kgLyBMZW5fWDtcbiAgICBsZXQgcmVzID0ge307XG5cbiAgICBpZiAoYW5nbGVUYXJnZXQgPCBhbmdsZVJpZ2h0VG9wKSB7XG4gICAgICAgIGxldCB5MyA9IHJlY3QudG9wIC0gY2VudGVyLnk7XG4gICAgICAgIGxldCB4MyA9IHkzIC8gc2NhbGU7XG4gICAgICAgIHJlcyA9IHtcbiAgICAgICAgICAgIHk6IGNlbnRlci55ICsgeTMsXG4gICAgICAgICAgICB4OiBjZW50ZXIueCArIHgzXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFuZ2xlVGFyZ2V0IDwgYW5nbGVSaWdodEJvdHRvbSkge1xuICAgICAgICBsZXQgeDMgPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC0gY2VudGVyLng7XG4gICAgICAgIGxldCB5MyA9IHgzICogc2NhbGU7XG4gICAgICAgIHJlcyA9IHtcbiAgICAgICAgICAgIHk6IGNlbnRlci55ICsgeTMsXG4gICAgICAgICAgICB4OiBjZW50ZXIueCArIHgzXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFuZ2xlVGFyZ2V0IDwgYW5nbGVMZWZ0Qm90dG9tKSB7XG4gICAgICAgIGxldCB5MyA9IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLSBjZW50ZXIueTtcbiAgICAgICAgbGV0IHgzID0geTMgLyBzY2FsZTtcbiAgICAgICAgcmVzID0ge1xuICAgICAgICAgICAgeTogY2VudGVyLnkgKyB5MyxcbiAgICAgICAgICAgIHg6IGNlbnRlci54ICsgeDNcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYW5nbGVUYXJnZXQgPCBhbmdsZUxlZnRUb3ApIHtcbiAgICAgICAgbGV0IHgzID0gY2VudGVyLnggLSByZWN0LmxlZnQ7XG4gICAgICAgIGxldCB5MyA9IHgzICogc2NhbGU7XG4gICAgICAgIHJlcyA9IHtcbiAgICAgICAgICAgIHk6IGNlbnRlci55IC0geTMsXG4gICAgICAgICAgICB4OiBjZW50ZXIueCAtIHgzXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgeTMgPSByZWN0LnRvcCAtIGNlbnRlci55O1xuICAgICAgICBsZXQgeDMgPSB5MyAvIHNjYWxlO1xuICAgICAgICByZXMgPSB7XG4gICAgICAgICAgICB5OiBjZW50ZXIueSArIHkzLFxuICAgICAgICAgICAgeDogY2VudGVyLnggKyB4M1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gbW9kZWxUdXJuSGVhZChldmVudCkge1xuICAgIGRyYWcgPSB0cnVlO1xuXG4gICAgbGV0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBsZXQgc3ggPSB0cmFuc2Zvcm1TY3JlZW5YKGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgIGxldCBzeSA9IHRyYW5zZm9ybVNjcmVlblkoZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICBsZXQgdGFyZ2V0ID0gdHJhbnNmb3JtUmVjdCh7XG4gICAgICAgIHg6IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyLFxuICAgICAgICB5OiByZWN0LnRvcCArIHJlY3QuaGVpZ2h0ICogaGVhZF9wb3NcbiAgICB9LCB7XG4gICAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHk6IGV2ZW50LmNsaWVudFlcbiAgICB9LCByZWN0KVxuICAgIGxldCB2eCA9IHRyYW5zZm9ybVZpZXdYKHRhcmdldC54IC0gcmVjdC5sZWZ0KTtcbiAgICBsZXQgdnkgPSB0cmFuc2Zvcm1WaWV3WSh0YXJnZXQueSAtIHJlY3QudG9wKTtcblxuICAgIGlmIChMQXBwRGVmaW5lVjIuREVCVUdfTU9VU0VfTE9HKVxuICAgICAgICBjb25zb2xlLmxvZyhcIltMaXZlMkR2Ml0gb25Nb3VzZU1vdmUgZGV2aWNlKCB4OlwiICsgZXZlbnQuY2xpZW50WCArIFwiIHk6XCIgKyBldmVudC5jbGllbnRZICsgXCIgKSB2aWV3KCB4OlwiICsgdnggKyBcIiB5OlwiICsgdnkgKyBcIilcIik7XG5cbiAgICBsYXN0TW91c2VYID0gc3g7XG4gICAgbGFzdE1vdXNlWSA9IHN5O1xuXG4gICAgZHJhZ01nci5zZXRQb2ludCh2eCwgdnkpO1xuXG4gICAgLy9saXZlMkRNZ3IudGFwRXZlbnQodngsIHZ5KTtcbn1cblxuZnVuY3Rpb24gbW9kZWxUYXBFdmVudChldmVudCkge1xuICAgIGRyYWcgPSB0cnVlO1xuXG4gICAgbGV0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBsZXQgc3ggPSB0cmFuc2Zvcm1TY3JlZW5YKGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgIGxldCBzeSA9IHRyYW5zZm9ybVNjcmVlblkoZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICBsZXQgdGFyZ2V0ID0gdHJhbnNmb3JtUmVjdCh7XG4gICAgICAgIHg6IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyLFxuICAgICAgICB5OiByZWN0LnRvcCArIHJlY3QuaGVpZ2h0ICogaGVhZF9wb3NcbiAgICB9LCB7XG4gICAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHk6IGV2ZW50LmNsaWVudFlcbiAgICB9LCByZWN0KVxuICAgIGxldCB2eCA9IHRyYW5zZm9ybVZpZXdYKHRhcmdldC54IC0gcmVjdC5sZWZ0KTtcbiAgICBsZXQgdnkgPSB0cmFuc2Zvcm1WaWV3WSh0YXJnZXQueSAtIHJlY3QudG9wKTtcblxuICAgIGlmIChMQXBwRGVmaW5lVjIuREVCVUdfTU9VU0VfTE9HKVxuICAgICAgICBjb25zb2xlLmxvZyhcIltMaXZlMkR2Ml0gb25Nb3VzZURvd24gZGV2aWNlKCB4OlwiICsgZXZlbnQuY2xpZW50WCArIFwiIHk6XCIgKyBldmVudC5jbGllbnRZICsgXCIgKSB2aWV3KCB4OlwiICsgdnggKyBcIiB5OlwiICsgdnkgKyBcIilcIik7XG5cbiAgICBsYXN0TW91c2VYID0gc3g7XG4gICAgbGFzdE1vdXNlWSA9IHN5O1xuXG4gICAgLy9kcmFnTWdyLnNldFBvaW50KHZ4LCB2eSk7IFxuXG4gICAgbGl2ZTJETWdyLnRhcEV2ZW50KHZ4LCB2eSk7XG59XG5cbmZ1bmN0aW9uIGZvbGxvd1BvaW50ZXIoZXZlbnQpIHtcbiAgICBsZXQgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGxldCBzeCA9IHRyYW5zZm9ybVNjcmVlblgoZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgbGV0IHN5ID0gdHJhbnNmb3JtU2NyZWVuWShldmVudC5jbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIGxldCB0YXJnZXQgPSB0cmFuc2Zvcm1SZWN0KHtcbiAgICAgICAgeDogcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDIsXG4gICAgICAgIHk6IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgKiBoZWFkX3Bvc1xuICAgIH0sIHtcbiAgICAgICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgeTogZXZlbnQuY2xpZW50WVxuICAgIH0sIHJlY3QpXG4gICAgbGV0IHZ4ID0gdHJhbnNmb3JtVmlld1godGFyZ2V0LnggLSByZWN0LmxlZnQpO1xuICAgIGxldCB2eSA9IHRyYW5zZm9ybVZpZXdZKHRhcmdldC55IC0gcmVjdC50b3ApO1xuXG4gICAgaWYgKExBcHBEZWZpbmVWMi5ERUJVR19NT1VTRV9MT0cpXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0xpdmUyRHYyXSBvbk1vdXNlTW92ZSBkZXZpY2UoIHg6XCIgKyBldmVudC5jbGllbnRYICsgXCIgeTpcIiArIGV2ZW50LmNsaWVudFkgKyBcIiApIHZpZXcoIHg6XCIgKyB2eCArIFwiIHk6XCIgKyB2eSArIFwiKVwiKTtcblxuICAgIGlmIChkcmFnKSB7XG4gICAgICAgIGxhc3RNb3VzZVggPSBzeDtcbiAgICAgICAgbGFzdE1vdXNlWSA9IHN5O1xuICAgICAgICBkcmFnTWdyLnNldFBvaW50KHZ4LCB2eSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb29rRnJvbnQoKSB7XG4gICAgaWYgKGRyYWcpIHtcbiAgICAgICAgZHJhZyA9IGZhbHNlO1xuICAgIH1cbiAgICBkcmFnTWdyLnNldFBvaW50KDAsIDApO1xufVxuXG5mdW5jdGlvbiBzbGVlcHkoKSB7XG4gICAgaWYgKExBcHBEZWZpbmVWMi5ERUJVR19MT0cpXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0xpdmUyRHYyXSBTZXQgU2Vzc2lvbiBTdG9yYWdlOiBTbGVlcHkgPSAxLlwiKTtcblxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ1NsZWVweScsICcxJyk7XG59XG5cbmZ1bmN0aW9uIG1vdXNlRXZlbnQoZSkge1xuICAgIC8vZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChlLnR5cGUgPT0gXCJtb3VzZXdoZWVsXCIpIHtcbiAgICAgICAgLy8gaWYgKGUuY2xpZW50WCA8IDAgfHwgY2FudmFzLmNsaWVudFdpZHRoIDwgZS5jbGllbnRYIHx8IFxuICAgICAgICAvLyBlLmNsaWVudFkgPCAwIHx8IGNhbnZhcy5jbGllbnRIZWlnaHQgPCBlLmNsaWVudFkpXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBpZiAoZS53aGVlbERlbHRhID4gMCkgbW9kZWxTY2FsaW5nKDEuMSk7IFxuICAgICAgICAvLyBlbHNlIG1vZGVsU2NhbGluZygwLjkpOyBcbiAgICB9IGVsc2UgaWYgKGUudHlwZSA9PSBcIm1vdXNlZG93blwiKSB7XG4gICAgICAgIC8vaWYoXCJidXR0b25cIiBpbiBlICYmIGUuYnV0dG9uICE9IDApIHJldHVybjtcbiAgICAgICAgLy8gbW9kZWxUdXJuSGVhZChlKTtcbiAgICAgICAgbW9kZWxUYXBFdmVudChlKTtcbiAgICB9IGVsc2UgaWYgKGUudHlwZSA9PSBcIm1vdXNlbW92ZVwiKSB7XG4gICAgICAgIHZhciBTbGVlcHkgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdTbGVlcHknKTtcbiAgICAgICAgaWYgKFNsZWVweSA9PT0gJzEnKSB7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdTbGVlcHknLCAnMCcpO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsVHVybkhlYWQoZSk7XG4gICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gXCJtb3VzZXVwXCIpIHtcbiAgICAgICAgaWYgKFwiYnV0dG9uXCIgaW4gZSAmJiBlLmJ1dHRvbiAhPSAwKSByZXR1cm47XG4gICAgICAgIC8vIGxvb2tGcm9udCgpO1xuICAgIH0gZWxzZSBpZiAoZS50eXBlID09IFwibW91c2VvdXRcIikge1xuICAgICAgICBpZiAoTEFwcERlZmluZVYyLkRFQlVHX0xPRylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0xpdmUyRHYyXSBNb3VzZSBvdXQgV2luZG93LlwiKTtcbiAgICAgICAgbG9va0Zyb250KCk7XG4gICAgICAgIHZhciBTbGVlcHlUaW1lciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ1NsZWVweVRpbWVyJyk7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoU2xlZXB5VGltZXIpO1xuXG4gICAgICAgIFNsZWVweVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoc2xlZXB5LCA1MDAwMCk7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ1NsZWVweVRpbWVyJywgU2xlZXB5VGltZXIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG91Y2hFdmVudChlKSB7XG4gICAgdmFyIHRvdWNoID0gZS50b3VjaGVzWzBdO1xuICAgIGlmIChlLnR5cGUgPT0gXCJ0b3VjaHN0YXJ0XCIpIHtcbiAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT0gMSkgbW9kZWxUdXJuSGVhZCh0b3VjaCk7XG4gICAgICAgIC8vIG9uQ2xpY2sodG91Y2gpO1xuICAgIH0gZWxzZSBpZiAoZS50eXBlID09IFwidG91Y2htb3ZlXCIpIHtcbiAgICAgICAgZm9sbG93UG9pbnRlcih0b3VjaCk7XG4gICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICAgIGxvb2tGcm9udCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVmlld1goZGV2aWNlWCkge1xuICAgIHZhciBzY3JlZW5YID0gZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChkZXZpY2VYKTtcbiAgICByZXR1cm4gdmlld01hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHNjcmVlblgpO1xufVxuXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVZpZXdZKGRldmljZVkpIHtcbiAgICB2YXIgc2NyZWVuWSA9IGRldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoZGV2aWNlWSk7XG4gICAgcmV0dXJuIHZpZXdNYXRyaXguaW52ZXJ0VHJhbnNmb3JtWShzY3JlZW5ZKTtcbn1cblxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TY3JlZW5YKGRldmljZVgpIHtcbiAgICByZXR1cm4gZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChkZXZpY2VYKTtcbn1cblxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TY3JlZW5ZKGRldmljZVkpIHtcbiAgICByZXR1cm4gZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWShkZXZpY2VZKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2ViR0xDb250ZXh0KCkge1xuICAgIHZhciBOQU1FUyA9IFtcIndlYmdsXCIsIFwiZXhwZXJpbWVudGFsLXdlYmdsXCJdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTkFNRVMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChOQU1FU1tpXSwge3ByZW11bHRpcGxpZWRBbHBoYTogdHJ1ZX0pO1xuICAgICAgICAgICAgaWYgKGN0eCkgcmV0dXJuIGN0eDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuZnVuY3Rpb24gbG9hZGxpdmUyZChjYW52YXNJZCwgbW9kZWx1cmwsIGhlYWRQb3MpIHtcbiAgICBMQXBwRGVmaW5lVjIuREVCVUdfTE9HID0gd2luZG93LmxpdmUyZHYyLmRlYnVnO1xuICAgIExBcHBEZWZpbmVWMi5ERUJVR19EUkFXX0hJVF9BUkVBID0gd2luZG93LmxpdmUyZHYyLmRlYnVnO1xuICAgIExBcHBEZWZpbmVWMi5ERUJVR19NT1VTRV9MT0cgPSB3aW5kb3cubGl2ZTJkdjIuZGVidWdNb3VzZW1vdmU7XG4gICAgaGVhZF9wb3MgPSB0eXBlb2YgaGVhZFBvcyA9PT0gJ3VuZGVmaW5lZCcgPyAwLjUgOiBoZWFkUG9zO1xuICAgIGluaXRMMmRDYW52YXMoY2FudmFzSWQpO1xuICAgIGluaXQobW9kZWx1cmwpO1xufVxuXG5mdW5jdGlvbiByZWxlYXNlTGl2ZTJkdjIoKSB7XG4gICAgbGl2ZTJETWdyLnJlbGVhc2VNb2RlbCgwLCBnbCk7XG4gICAgLy8g56e76Zmk55uR5ZCs5ZmoXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtb3VzZUV2ZW50KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBtb3VzZUV2ZW50KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZUV2ZW50KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2VFdmVudCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIG1vdXNlRXZlbnQpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0b3VjaEV2ZW50KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRvdWNoRXZlbnQpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRvdWNoRXZlbnQpO1xufVxuXG53aW5kb3cubGl2ZTJkdjIgPSB3aW5kb3cubGl2ZTJkdjIgfHwge307XG53aW5kb3cubGl2ZTJkdjIubG9hZCA9IGxvYWRsaXZlMmQ7XG53aW5kb3cubGl2ZTJkdjIucmVsZWFzZSA9IHJlbGVhc2VMaXZlMmR2MjtcbiIsIlxudmFyIGNvbnRleHQgPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZXh0KHdlYmdsQ29udGV4dCkge1xuICBjb250ZXh0ID0gd2ViZ2xDb250ZXh0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgcmV0dXJuIGNvbnRleHQ7XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvU0RLdjQvbWFpbi50c1wiKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL1NES3YyL21haW5WMi5qc1wiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=